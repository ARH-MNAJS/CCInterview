/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/(root)/interview/[id]/page"],{

/***/ "(app-pages-browser)/./components/Agent.tsx":
/*!******************************!*\
  !*** ./components/Agent.tsx ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"(app-pages-browser)/./node_modules/next/dist/api/image.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_navigation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/navigation */ \"(app-pages-browser)/./node_modules/next/dist/api/navigation.js\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n/* harmony import */ var _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/vapi.sdk */ \"(app-pages-browser)/./lib/vapi.sdk.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/constants */ \"(app-pages-browser)/./constants/index.ts\");\n/* harmony import */ var _lib_actions_general_action__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/lib/actions/general.action */ \"(app-pages-browser)/./lib/actions/general.action.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\nvar CallStatus = /*#__PURE__*/ function(CallStatus) {\n    CallStatus[\"INACTIVE\"] = \"INACTIVE\";\n    CallStatus[\"CONNECTING\"] = \"CONNECTING\";\n    CallStatus[\"ACTIVE\"] = \"ACTIVE\";\n    CallStatus[\"FINISHED\"] = \"FINISHED\";\n    return CallStatus;\n}(CallStatus || {});\nconst Agent = (param)=>{\n    let { userName, userId, interviewId, feedbackId, type, questions } = param;\n    _s();\n    const router = (0,next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    const [callStatus, setCallStatus] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"INACTIVE\");\n    const [messages, setMessages] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([]);\n    const [isSpeaking, setIsSpeaking] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [lastMessage, setLastMessage] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"Agent.useEffect\": ()=>{\n            const onCallStart = {\n                \"Agent.useEffect.onCallStart\": ()=>{\n                    setCallStatus(\"ACTIVE\");\n                }\n            }[\"Agent.useEffect.onCallStart\"];\n            const onCallEnd = {\n                \"Agent.useEffect.onCallEnd\": ()=>{\n                    setCallStatus(\"FINISHED\");\n                }\n            }[\"Agent.useEffect.onCallEnd\"];\n            const onMessage = {\n                \"Agent.useEffect.onMessage\": (message)=>{\n                    if (message.type === \"transcript\" && message.transcriptType === \"final\") {\n                        const newMessage = {\n                            role: message.role,\n                            content: message.transcript\n                        };\n                        setMessages({\n                            \"Agent.useEffect.onMessage\": (prev)=>[\n                                    ...prev,\n                                    newMessage\n                                ]\n                        }[\"Agent.useEffect.onMessage\"]);\n                    }\n                }\n            }[\"Agent.useEffect.onMessage\"];\n            const onSpeechStart = {\n                \"Agent.useEffect.onSpeechStart\": ()=>{\n                    console.log(\"speech start\");\n                    setIsSpeaking(true);\n                }\n            }[\"Agent.useEffect.onSpeechStart\"];\n            const onSpeechEnd = {\n                \"Agent.useEffect.onSpeechEnd\": ()=>{\n                    console.log(\"speech end\");\n                    setIsSpeaking(false);\n                }\n            }[\"Agent.useEffect.onSpeechEnd\"];\n            const onError = {\n                \"Agent.useEffect.onError\": (error)=>{\n                    console.log(\"Error:\", error);\n                }\n            }[\"Agent.useEffect.onError\"];\n            _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.on(\"call-start\", onCallStart);\n            _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.on(\"call-end\", onCallEnd);\n            _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.on(\"message\", onMessage);\n            _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.on(\"speech-start\", onSpeechStart);\n            _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.on(\"speech-end\", onSpeechEnd);\n            _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.on(\"error\", onError);\n            return ({\n                \"Agent.useEffect\": ()=>{\n                    _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.off(\"call-start\", onCallStart);\n                    _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.off(\"call-end\", onCallEnd);\n                    _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.off(\"message\", onMessage);\n                    _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.off(\"speech-start\", onSpeechStart);\n                    _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.off(\"speech-end\", onSpeechEnd);\n                    _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.off(\"error\", onError);\n                }\n            })[\"Agent.useEffect\"];\n        }\n    }[\"Agent.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"Agent.useEffect\": ()=>{\n            if (messages.length > 0) {\n                setLastMessage(messages[messages.length - 1].content);\n            }\n            const handleGenerateFeedback = {\n                \"Agent.useEffect.handleGenerateFeedback\": async (messages)=>{\n                    console.log(\"handleGenerateFeedback\");\n                    const { success, feedbackId: id } = await (0,_lib_actions_general_action__WEBPACK_IMPORTED_MODULE_7__.createFeedback)({\n                        interviewId: interviewId,\n                        userId: userId,\n                        transcript: messages,\n                        feedbackId\n                    });\n                    if (success && id) {\n                        router.push(\"/interview/\".concat(interviewId, \"/feedback\"));\n                    } else {\n                        console.log(\"Error saving feedback\");\n                        router.push(\"/\");\n                    }\n                }\n            }[\"Agent.useEffect.handleGenerateFeedback\"];\n            if (callStatus === \"FINISHED\") {\n                if (type === \"generate\") {\n                    router.push(\"/\");\n                } else {\n                    handleGenerateFeedback(messages);\n                }\n            }\n        }\n    }[\"Agent.useEffect\"], [\n        messages,\n        callStatus,\n        feedbackId,\n        interviewId,\n        router,\n        type,\n        userId\n    ]);\n    const handleCall = async ()=>{\n        setCallStatus(\"CONNECTING\");\n        if (type === \"generate\") {\n            await _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.start(process.env.NEXT_PUBLIC_VAPI_WORKFLOW_ID, {\n                variableValues: {\n                    username: userName,\n                    userid: userId\n                }\n            });\n        } else {\n            let formattedQuestions = \"\";\n            if (questions) {\n                formattedQuestions = questions.map((question)=>\"- \".concat(question)).join(\"\\n\");\n            }\n            await _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.start(_constants__WEBPACK_IMPORTED_MODULE_6__.interviewer, {\n                variableValues: {\n                    questions: formattedQuestions\n                }\n            });\n        }\n    };\n    const handleDisconnect = ()=>{\n        setCallStatus(\"FINISHED\");\n        _lib_vapi_sdk__WEBPACK_IMPORTED_MODULE_5__.vapi.stop();\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"call-view\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"card-interviewer\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"avatar\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_image__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                        src: \"/ai-avatar.png\",\n                                        alt: \"profile-image\",\n                                        width: 65,\n                                        height: 54,\n                                        className: \"object-cover\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                                        lineNumber: 154,\n                                        columnNumber: 13\n                                    }, undefined),\n                                    isSpeaking && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: \"animate-speak\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                                        lineNumber: 161,\n                                        columnNumber: 28\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                                lineNumber: 153,\n                                columnNumber: 11\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                children: \"AI Interviewer\"\n                            }, void 0, false, {\n                                fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                                lineNumber: 163,\n                                columnNumber: 11\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                        lineNumber: 152,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"card-border\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"card-content\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(next_image__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                                    src: \"/user-avatar.png\",\n                                    alt: \"profile-image\",\n                                    width: 539,\n                                    height: 539,\n                                    className: \"rounded-full object-cover size-[120px]\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                                    lineNumber: 169,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    children: userName\n                                }, void 0, false, {\n                                    fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                                    lineNumber: 176,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                            lineNumber: 168,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                        lineNumber: 167,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                lineNumber: 150,\n                columnNumber: 7\n            }, undefined),\n            messages.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"transcript-border\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"transcript\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)(\"transition-opacity duration-500 opacity-0\", \"animate-fadeIn opacity-100\"),\n                        children: lastMessage\n                    }, lastMessage, false, {\n                        fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                        lineNumber: 184,\n                        columnNumber: 13\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                    lineNumber: 183,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                lineNumber: 182,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"w-full flex justify-center\",\n                children: callStatus !== \"ACTIVE\" ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    className: \"relative btn-call\",\n                    onClick: ()=>handleCall(),\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_4__.cn)(\"absolute animate-ping rounded-full opacity-75\", callStatus !== \"CONNECTING\" && \"hidden\")\n                        }, void 0, false, {\n                            fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                            lineNumber: 200,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                            className: \"relative\",\n                            children: callStatus === \"INACTIVE\" || callStatus === \"FINISHED\" ? \"Call\" : \". . .\"\n                        }, void 0, false, {\n                            fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                            lineNumber: 207,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                    lineNumber: 199,\n                    columnNumber: 11\n                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    className: \"btn-disconnect\",\n                    onClick: ()=>handleDisconnect(),\n                    children: \"End\"\n                }, void 0, false, {\n                    fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                    lineNumber: 214,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/adisin/Desktop/prepwise/components/Agent.tsx\",\n                lineNumber: 197,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n_s(Agent, \"ukDX8sDaxxTXEV5ny4wWHP8RfNo=\", false, function() {\n    return [\n        next_navigation__WEBPACK_IMPORTED_MODULE_3__.useRouter\n    ];\n});\n_c = Agent;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Agent);\nvar _c;\n$RefreshReg$(_c, \"Agent\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/Agent.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./constants/index.ts":
/*!****************************!*\
  !*** ./constants/index.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dummyInterviews: () => (/* binding */ dummyInterviews),\n/* harmony export */   feedbackSchema: () => (/* binding */ feedbackSchema),\n/* harmony export */   interviewCovers: () => (/* binding */ interviewCovers),\n/* harmony export */   interviewer: () => (/* binding */ interviewer),\n/* harmony export */   mappings: () => (/* binding */ mappings)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/zod/lib/index.mjs\");\n\nconst mappings = {\n    \"react.js\": \"react\",\n    reactjs: \"react\",\n    react: \"react\",\n    \"next.js\": \"nextjs\",\n    nextjs: \"nextjs\",\n    next: \"nextjs\",\n    \"vue.js\": \"vuejs\",\n    vuejs: \"vuejs\",\n    vue: \"vuejs\",\n    \"express.js\": \"express\",\n    expressjs: \"express\",\n    express: \"express\",\n    \"node.js\": \"nodejs\",\n    nodejs: \"nodejs\",\n    node: \"nodejs\",\n    mongodb: \"mongodb\",\n    mongo: \"mongodb\",\n    mongoose: \"mongoose\",\n    mysql: \"mysql\",\n    postgresql: \"postgresql\",\n    sqlite: \"sqlite\",\n    firebase: \"firebase\",\n    docker: \"docker\",\n    kubernetes: \"kubernetes\",\n    aws: \"aws\",\n    azure: \"azure\",\n    gcp: \"gcp\",\n    digitalocean: \"digitalocean\",\n    heroku: \"heroku\",\n    photoshop: \"photoshop\",\n    \"adobe photoshop\": \"photoshop\",\n    html5: \"html5\",\n    html: \"html5\",\n    css3: \"css3\",\n    css: \"css3\",\n    sass: \"sass\",\n    scss: \"sass\",\n    less: \"less\",\n    tailwindcss: \"tailwindcss\",\n    tailwind: \"tailwindcss\",\n    bootstrap: \"bootstrap\",\n    jquery: \"jquery\",\n    typescript: \"typescript\",\n    ts: \"typescript\",\n    javascript: \"javascript\",\n    js: \"javascript\",\n    \"angular.js\": \"angular\",\n    angularjs: \"angular\",\n    angular: \"angular\",\n    \"ember.js\": \"ember\",\n    emberjs: \"ember\",\n    ember: \"ember\",\n    \"backbone.js\": \"backbone\",\n    backbonejs: \"backbone\",\n    backbone: \"backbone\",\n    nestjs: \"nestjs\",\n    graphql: \"graphql\",\n    \"graph ql\": \"graphql\",\n    apollo: \"apollo\",\n    webpack: \"webpack\",\n    babel: \"babel\",\n    \"rollup.js\": \"rollup\",\n    rollupjs: \"rollup\",\n    rollup: \"rollup\",\n    \"parcel.js\": \"parcel\",\n    parceljs: \"parcel\",\n    npm: \"npm\",\n    yarn: \"yarn\",\n    git: \"git\",\n    github: \"github\",\n    gitlab: \"gitlab\",\n    bitbucket: \"bitbucket\",\n    figma: \"figma\",\n    prisma: \"prisma\",\n    redux: \"redux\",\n    flux: \"flux\",\n    redis: \"redis\",\n    selenium: \"selenium\",\n    cypress: \"cypress\",\n    jest: \"jest\",\n    mocha: \"mocha\",\n    chai: \"chai\",\n    karma: \"karma\",\n    vuex: \"vuex\",\n    \"nuxt.js\": \"nuxt\",\n    nuxtjs: \"nuxt\",\n    nuxt: \"nuxt\",\n    strapi: \"strapi\",\n    wordpress: \"wordpress\",\n    contentful: \"contentful\",\n    netlify: \"netlify\",\n    vercel: \"vercel\",\n    \"aws amplify\": \"amplify\"\n};\nconst interviewer = {\n    name: \"Interviewer\",\n    firstMessage: \"Hello! Thank you for taking the time to speak with me today. I'm excited to learn more about you and your experience.\",\n    transcriber: {\n        provider: \"deepgram\",\n        model: \"nova-2\",\n        language: \"en\"\n    },\n    voice: {\n        provider: \"11labs\",\n        voiceId: \"sarah\",\n        stability: 0.4,\n        similarityBoost: 0.8,\n        speed: 0.9,\n        style: 0.5,\n        useSpeakerBoost: true\n    },\n    model: {\n        provider: \"openai\",\n        model: \"gpt-4\",\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a professional job interviewer conducting a real-time voice interview with a candidate. Your goal is to assess their qualifications, motivation, and fit for the role.\\n\\nInterview Guidelines:\\nFollow the structured question flow:\\n{{questions}}\\n\\nEngage naturally & react appropriately:\\nListen actively to responses and acknowledge them before moving forward.\\nAsk brief follow-up questions if a response is vague or requires more detail.\\nKeep the conversation flowing smoothly while maintaining control.\\nBe professional, yet warm and welcoming:\\n\\nUse official yet friendly language.\\nKeep responses concise and to the point (like in a real voice interview).\\nAvoid robotic phrasing—sound natural and conversational.\\nAnswer the candidate’s questions professionally:\\n\\nIf asked about the role, company, or expectations, provide a clear and relevant answer.\\nIf unsure, redirect the candidate to HR for more details.\\n\\nConclude the interview properly:\\nThank the candidate for their time.\\nInform them that the company will reach out soon with feedback.\\nEnd the conversation on a polite and positive note.\\n\\n\\n- Be sure to be professional and polite.\\n- Keep all your responses short and simple. Use official language, but be kind and welcoming.\\n- This is a voice conversation, so keep your responses short, like in a real conversation. Don't ramble for too long.\"\n            }\n        ]\n    }\n};\nconst feedbackSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    totalScore: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    categoryScores: zod__WEBPACK_IMPORTED_MODULE_0__.z.tuple([\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            name: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"Communication Skills\"),\n            score: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            comment: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }),\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            name: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"Technical Knowledge\"),\n            score: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            comment: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }),\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            name: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"Problem Solving\"),\n            score: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            comment: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }),\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            name: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"Cultural Fit\"),\n            score: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            comment: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        }),\n        zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            name: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal(\"Confidence and Clarity\"),\n            score: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n            comment: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        })\n    ]),\n    strengths: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    areasForImprovement: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    finalAssessment: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nconst interviewCovers = [\n    \"/adobe.png\",\n    \"/amazon.png\",\n    \"/facebook.png\",\n    \"/hostinger.png\",\n    \"/pinterest.png\",\n    \"/quora.png\",\n    \"/reddit.png\",\n    \"/skype.png\",\n    \"/spotify.png\",\n    \"/telegram.png\",\n    \"/tiktok.png\",\n    \"/yahoo.png\"\n];\nconst dummyInterviews = [\n    {\n        id: \"1\",\n        userId: \"user1\",\n        role: \"Frontend Developer\",\n        type: \"Technical\",\n        techstack: [\n            \"React\",\n            \"TypeScript\",\n            \"Next.js\",\n            \"Tailwind CSS\"\n        ],\n        level: \"Junior\",\n        questions: [\n            \"What is React?\"\n        ],\n        finalized: false,\n        createdAt: \"2024-03-15T10:00:00Z\"\n    },\n    {\n        id: \"2\",\n        userId: \"user1\",\n        role: \"Full Stack Developer\",\n        type: \"Mixed\",\n        techstack: [\n            \"Node.js\",\n            \"Express\",\n            \"MongoDB\",\n            \"React\"\n        ],\n        level: \"Senior\",\n        questions: [\n            \"What is Node.js?\"\n        ],\n        finalized: false,\n        createdAt: \"2024-03-14T15:30:00Z\"\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./constants/index.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/actions/general.action.ts":
/*!***************************************!*\
  !*** ./lib/actions/general.action.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFeedback: () => (/* binding */ createFeedback),\n/* harmony export */   getFeedbackByInterviewId: () => (/* binding */ getFeedbackByInterviewId),\n/* harmony export */   getInterviewById: () => (/* binding */ getInterviewById),\n/* harmony export */   getInterviewsByUserId: () => (/* binding */ getInterviewsByUserId),\n/* harmony export */   getLatestInterviews: () => (/* binding */ getLatestInterviews)\n/* harmony export */ });\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! private-next-rsc-action-client-wrapper */ \"(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js\");\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_action_entry_do_not_use__ {\"4027c7915f9f1c0ee61254aa8adb7634072638ba91\":\"getInterviewsByUserId\",\"40284cf98069dab03bb14dea5a56eee362d104cce5\":\"getInterviewById\",\"4079d19f69f500fba52c52236e7523fcc3555f01ef\":\"getLatestInterviews\",\"40d08f6e3abd9de4d10c3afb977776fad79307c31a\":\"createFeedback\",\"40fcc21e23e80843a2b6fb99f601bd4d241f95fde6\":\"getFeedbackByInterviewId\"} */ \nvar createFeedback = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40d08f6e3abd9de4d10c3afb977776fad79307c31a\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"createFeedback\");\nvar getInterviewById = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40284cf98069dab03bb14dea5a56eee362d104cce5\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getInterviewById\");\nvar getFeedbackByInterviewId = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40fcc21e23e80843a2b6fb99f601bd4d241f95fde6\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getFeedbackByInterviewId\");\nvar getLatestInterviews = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4079d19f69f500fba52c52236e7523fcc3555f01ef\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getLatestInterviews\");\nvar getInterviewsByUserId = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"4027c7915f9f1c0ee61254aa8adb7634072638ba91\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getInterviewsByUserId\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hY3Rpb25zL2dlbmVyYWwuYWN0aW9uLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBUXNCQSwrQkFBQUEsNkZBQUFBLCtDQUFBQSw4RUFBQUEsVUFBQUEsb0ZBQUFBO0lBNERBQyxpQ0FBQUEsNkZBQUFBLCtDQUFBQSw4RUFBQUEsVUFBQUEsb0ZBQUFBO0lBTUFDLHlDQUFBQSw2RkFBQUEsK0NBQUFBLDhFQUFBQSxVQUFBQSxvRkFBQUE7SUFrQkFDLG9DQUFBQSw2RkFBQUEsK0NBQUFBLDhFQUFBQSxVQUFBQSxvRkFBQUE7SUFtQkFDLHNDQUFBQSw2RkFBQUEsK0NBQUFBLDhFQUFBQSxVQUFBQSxvRkFBQUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZGlzaW4vRGVza3RvcC9wcmVwd2lzZS9saWIvYWN0aW9ucy9nZW5lcmFsLmFjdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzZXJ2ZXJcIjtcblxuaW1wb3J0IHsgZ2VuZXJhdGVPYmplY3QgfSBmcm9tIFwiYWlcIjtcbmltcG9ydCB7IGdvb2dsZSB9IGZyb20gXCJAYWktc2RrL2dvb2dsZVwiO1xuXG5pbXBvcnQgeyBkYiB9IGZyb20gXCJAL2ZpcmViYXNlL2FkbWluXCI7XG5pbXBvcnQgeyBmZWVkYmFja1NjaGVtYSB9IGZyb20gXCJAL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlRmVlZGJhY2socGFyYW1zOiBDcmVhdGVGZWVkYmFja1BhcmFtcykge1xuICBjb25zdCB7IGludGVydmlld0lkLCB1c2VySWQsIHRyYW5zY3JpcHQsIGZlZWRiYWNrSWQgfSA9IHBhcmFtcztcblxuICB0cnkge1xuICAgIGNvbnN0IGZvcm1hdHRlZFRyYW5zY3JpcHQgPSB0cmFuc2NyaXB0XG4gICAgICAubWFwKFxuICAgICAgICAoc2VudGVuY2U6IHsgcm9sZTogc3RyaW5nOyBjb250ZW50OiBzdHJpbmcgfSkgPT5cbiAgICAgICAgICBgLSAke3NlbnRlbmNlLnJvbGV9OiAke3NlbnRlbmNlLmNvbnRlbnR9XFxuYFxuICAgICAgKVxuICAgICAgLmpvaW4oXCJcIik7XG5cbiAgICBjb25zdCB7IG9iamVjdCB9ID0gYXdhaXQgZ2VuZXJhdGVPYmplY3Qoe1xuICAgICAgbW9kZWw6IGdvb2dsZShcImdlbWluaS0yLjAtZmxhc2gtMDAxXCIsIHtcbiAgICAgICAgc3RydWN0dXJlZE91dHB1dHM6IGZhbHNlLFxuICAgICAgfSksXG4gICAgICBzY2hlbWE6IGZlZWRiYWNrU2NoZW1hLFxuICAgICAgcHJvbXB0OiBgXG4gICAgICAgIFlvdSBhcmUgYW4gQUkgaW50ZXJ2aWV3ZXIgYW5hbHl6aW5nIGEgbW9jayBpbnRlcnZpZXcuIFlvdXIgdGFzayBpcyB0byBldmFsdWF0ZSB0aGUgY2FuZGlkYXRlIGJhc2VkIG9uIHN0cnVjdHVyZWQgY2F0ZWdvcmllcy4gQmUgdGhvcm91Z2ggYW5kIGRldGFpbGVkIGluIHlvdXIgYW5hbHlzaXMuIERvbid0IGJlIGxlbmllbnQgd2l0aCB0aGUgY2FuZGlkYXRlLiBJZiB0aGVyZSBhcmUgbWlzdGFrZXMgb3IgYXJlYXMgZm9yIGltcHJvdmVtZW50LCBwb2ludCB0aGVtIG91dC5cbiAgICAgICAgVHJhbnNjcmlwdDpcbiAgICAgICAgJHtmb3JtYXR0ZWRUcmFuc2NyaXB0fVxuXG4gICAgICAgIFBsZWFzZSBzY29yZSB0aGUgY2FuZGlkYXRlIGZyb20gMCB0byAxMDAgaW4gdGhlIGZvbGxvd2luZyBhcmVhcy4gRG8gbm90IGFkZCBjYXRlZ29yaWVzIG90aGVyIHRoYW4gdGhlIG9uZXMgcHJvdmlkZWQ6XG4gICAgICAgIC0gKipDb21tdW5pY2F0aW9uIFNraWxscyoqOiBDbGFyaXR5LCBhcnRpY3VsYXRpb24sIHN0cnVjdHVyZWQgcmVzcG9uc2VzLlxuICAgICAgICAtICoqVGVjaG5pY2FsIEtub3dsZWRnZSoqOiBVbmRlcnN0YW5kaW5nIG9mIGtleSBjb25jZXB0cyBmb3IgdGhlIHJvbGUuXG4gICAgICAgIC0gKipQcm9ibGVtLVNvbHZpbmcqKjogQWJpbGl0eSB0byBhbmFseXplIHByb2JsZW1zIGFuZCBwcm9wb3NlIHNvbHV0aW9ucy5cbiAgICAgICAgLSAqKkN1bHR1cmFsICYgUm9sZSBGaXQqKjogQWxpZ25tZW50IHdpdGggY29tcGFueSB2YWx1ZXMgYW5kIGpvYiByb2xlLlxuICAgICAgICAtICoqQ29uZmlkZW5jZSAmIENsYXJpdHkqKjogQ29uZmlkZW5jZSBpbiByZXNwb25zZXMsIGVuZ2FnZW1lbnQsIGFuZCBjbGFyaXR5LlxuICAgICAgICBgLFxuICAgICAgc3lzdGVtOlxuICAgICAgICBcIllvdSBhcmUgYSBwcm9mZXNzaW9uYWwgaW50ZXJ2aWV3ZXIgYW5hbHl6aW5nIGEgbW9jayBpbnRlcnZpZXcuIFlvdXIgdGFzayBpcyB0byBldmFsdWF0ZSB0aGUgY2FuZGlkYXRlIGJhc2VkIG9uIHN0cnVjdHVyZWQgY2F0ZWdvcmllc1wiLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZmVlZGJhY2sgPSB7XG4gICAgICBpbnRlcnZpZXdJZDogaW50ZXJ2aWV3SWQsXG4gICAgICB1c2VySWQ6IHVzZXJJZCxcbiAgICAgIHRvdGFsU2NvcmU6IG9iamVjdC50b3RhbFNjb3JlLFxuICAgICAgY2F0ZWdvcnlTY29yZXM6IG9iamVjdC5jYXRlZ29yeVNjb3JlcyxcbiAgICAgIHN0cmVuZ3Roczogb2JqZWN0LnN0cmVuZ3RocyxcbiAgICAgIGFyZWFzRm9ySW1wcm92ZW1lbnQ6IG9iamVjdC5hcmVhc0ZvckltcHJvdmVtZW50LFxuICAgICAgZmluYWxBc3Nlc3NtZW50OiBvYmplY3QuZmluYWxBc3Nlc3NtZW50LFxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfTtcblxuICAgIGxldCBmZWVkYmFja1JlZjtcblxuICAgIGlmIChmZWVkYmFja0lkKSB7XG4gICAgICBmZWVkYmFja1JlZiA9IGRiLmNvbGxlY3Rpb24oXCJmZWVkYmFja1wiKS5kb2MoZmVlZGJhY2tJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZlZWRiYWNrUmVmID0gZGIuY29sbGVjdGlvbihcImZlZWRiYWNrXCIpLmRvYygpO1xuICAgIH1cblxuICAgIGF3YWl0IGZlZWRiYWNrUmVmLnNldChmZWVkYmFjayk7XG5cbiAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCBmZWVkYmFja0lkOiBmZWVkYmFja1JlZi5pZCB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmVlZGJhY2s6XCIsIGVycm9yKTtcbiAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSB9O1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRJbnRlcnZpZXdCeUlkKGlkOiBzdHJpbmcpOiBQcm9taXNlPEludGVydmlldyB8IG51bGw+IHtcbiAgY29uc3QgaW50ZXJ2aWV3ID0gYXdhaXQgZGIuY29sbGVjdGlvbihcImludGVydmlld3NcIikuZG9jKGlkKS5nZXQoKTtcblxuICByZXR1cm4gaW50ZXJ2aWV3LmRhdGEoKSBhcyBJbnRlcnZpZXcgfCBudWxsO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RmVlZGJhY2tCeUludGVydmlld0lkKFxuICBwYXJhbXM6IEdldEZlZWRiYWNrQnlJbnRlcnZpZXdJZFBhcmFtc1xuKTogUHJvbWlzZTxGZWVkYmFjayB8IG51bGw+IHtcbiAgY29uc3QgeyBpbnRlcnZpZXdJZCwgdXNlcklkIH0gPSBwYXJhbXM7XG5cbiAgY29uc3QgcXVlcnlTbmFwc2hvdCA9IGF3YWl0IGRiXG4gICAgLmNvbGxlY3Rpb24oXCJmZWVkYmFja1wiKVxuICAgIC53aGVyZShcImludGVydmlld0lkXCIsIFwiPT1cIiwgaW50ZXJ2aWV3SWQpXG4gICAgLndoZXJlKFwidXNlcklkXCIsIFwiPT1cIiwgdXNlcklkKVxuICAgIC5saW1pdCgxKVxuICAgIC5nZXQoKTtcblxuICBpZiAocXVlcnlTbmFwc2hvdC5lbXB0eSkgcmV0dXJuIG51bGw7XG5cbiAgY29uc3QgZmVlZGJhY2tEb2MgPSBxdWVyeVNuYXBzaG90LmRvY3NbMF07XG4gIHJldHVybiB7IGlkOiBmZWVkYmFja0RvYy5pZCwgLi4uZmVlZGJhY2tEb2MuZGF0YSgpIH0gYXMgRmVlZGJhY2s7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRMYXRlc3RJbnRlcnZpZXdzKFxuICBwYXJhbXM6IEdldExhdGVzdEludGVydmlld3NQYXJhbXNcbik6IFByb21pc2U8SW50ZXJ2aWV3W10gfCBudWxsPiB7XG4gIGNvbnN0IHsgdXNlcklkLCBsaW1pdCA9IDIwIH0gPSBwYXJhbXM7XG5cbiAgY29uc3QgaW50ZXJ2aWV3cyA9IGF3YWl0IGRiXG4gICAgLmNvbGxlY3Rpb24oXCJpbnRlcnZpZXdzXCIpXG4gICAgLm9yZGVyQnkoXCJjcmVhdGVkQXRcIiwgXCJkZXNjXCIpXG4gICAgLndoZXJlKFwiZmluYWxpemVkXCIsIFwiPT1cIiwgdHJ1ZSlcbiAgICAud2hlcmUoXCJ1c2VySWRcIiwgXCIhPVwiLCB1c2VySWQpXG4gICAgLmxpbWl0KGxpbWl0KVxuICAgIC5nZXQoKTtcblxuICByZXR1cm4gaW50ZXJ2aWV3cy5kb2NzLm1hcCgoZG9jKSA9PiAoe1xuICAgIGlkOiBkb2MuaWQsXG4gICAgLi4uZG9jLmRhdGEoKSxcbiAgfSkpIGFzIEludGVydmlld1tdO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0SW50ZXJ2aWV3c0J5VXNlcklkKFxuICB1c2VySWQ6IHN0cmluZ1xuKTogUHJvbWlzZTxJbnRlcnZpZXdbXSB8IG51bGw+IHtcbiAgY29uc3QgaW50ZXJ2aWV3cyA9IGF3YWl0IGRiXG4gICAgLmNvbGxlY3Rpb24oXCJpbnRlcnZpZXdzXCIpXG4gICAgLndoZXJlKFwidXNlcklkXCIsIFwiPT1cIiwgdXNlcklkKVxuICAgIC5vcmRlckJ5KFwiY3JlYXRlZEF0XCIsIFwiZGVzY1wiKVxuICAgIC5nZXQoKTtcblxuICByZXR1cm4gaW50ZXJ2aWV3cy5kb2NzLm1hcCgoZG9jKSA9PiAoe1xuICAgIGlkOiBkb2MuaWQsXG4gICAgLi4uZG9jLmRhdGEoKSxcbiAgfSkpIGFzIEludGVydmlld1tdO1xufVxuIl0sIm5hbWVzIjpbImNyZWF0ZUZlZWRiYWNrIiwiZ2V0SW50ZXJ2aWV3QnlJZCIsImdldEZlZWRiYWNrQnlJbnRlcnZpZXdJZCIsImdldExhdGVzdEludGVydmlld3MiLCJnZXRJbnRlcnZpZXdzQnlVc2VySWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/actions/general.action.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cn: () => (/* binding */ cn),\n/* harmony export */   getRandomInterviewCover: () => (/* binding */ getRandomInterviewCover),\n/* harmony export */   getTechLogos: () => (/* binding */ getTechLogos)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/constants */ \"(app-pages-browser)/./constants/index.ts\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tailwind-merge */ \"(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_2__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_1__.clsx)(inputs));\n}\nconst techIconBaseURL = \"https://cdn.jsdelivr.net/gh/devicons/devicon/icons\";\nconst normalizeTechName = (tech)=>{\n    const key = tech.toLowerCase().replace(/\\.js$/, \"\").replace(/\\s+/g, \"\");\n    return _constants__WEBPACK_IMPORTED_MODULE_0__.mappings[key];\n};\nconst checkIconExists = async (url)=>{\n    try {\n        const response = await fetch(url, {\n            method: \"HEAD\"\n        });\n        return response.ok; // Returns true if the icon exists\n    } catch (e) {\n        return false;\n    }\n};\nconst getTechLogos = async (techArray)=>{\n    const logoURLs = techArray.map((tech)=>{\n        const normalized = normalizeTechName(tech);\n        return {\n            tech,\n            url: \"\".concat(techIconBaseURL, \"/\").concat(normalized, \"/\").concat(normalized, \"-original.svg\")\n        };\n    });\n    const results = await Promise.all(logoURLs.map(async (param)=>{\n        let { tech, url } = param;\n        return {\n            tech,\n            url: await checkIconExists(url) ? url : \"/tech.svg\"\n        };\n    }));\n    return results;\n};\nconst getRandomInterviewCover = ()=>{\n    const randomIndex = Math.floor(Math.random() * _constants__WEBPACK_IMPORTED_MODULE_0__.interviewCovers.length);\n    return \"/covers\".concat(_constants__WEBPACK_IMPORTED_MODULE_0__.interviewCovers[randomIndex]);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi91dGlscy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBd0Q7QUFDWDtBQUNKO0FBRWxDLFNBQVNJO0lBQUc7UUFBR0MsT0FBSCx1QkFBdUI7O0lBQ3hDLE9BQU9GLHVEQUFPQSxDQUFDRCwwQ0FBSUEsQ0FBQ0c7QUFDdEI7QUFFQSxNQUFNQyxrQkFBa0I7QUFFeEIsTUFBTUMsb0JBQW9CLENBQUNDO0lBQ3pCLE1BQU1DLE1BQU1ELEtBQUtFLFdBQVcsR0FBR0MsT0FBTyxDQUFDLFNBQVMsSUFBSUEsT0FBTyxDQUFDLFFBQVE7SUFDcEUsT0FBT1YsZ0RBQVEsQ0FBQ1EsSUFBNkI7QUFDL0M7QUFFQSxNQUFNRyxrQkFBa0IsT0FBT0M7SUFDN0IsSUFBSTtRQUNGLE1BQU1DLFdBQVcsTUFBTUMsTUFBTUYsS0FBSztZQUFFRyxRQUFRO1FBQU87UUFDbkQsT0FBT0YsU0FBU0csRUFBRSxFQUFFLGtDQUFrQztJQUN4RCxFQUFFLFVBQU07UUFDTixPQUFPO0lBQ1Q7QUFDRjtBQUVPLE1BQU1DLGVBQWUsT0FBT0M7SUFDakMsTUFBTUMsV0FBV0QsVUFBVUUsR0FBRyxDQUFDLENBQUNiO1FBQzlCLE1BQU1jLGFBQWFmLGtCQUFrQkM7UUFDckMsT0FBTztZQUNMQTtZQUNBSyxLQUFLLEdBQXNCUyxPQUFuQmhCLGlCQUFnQixLQUFpQmdCLE9BQWRBLFlBQVcsS0FBYyxPQUFYQSxZQUFXO1FBQ3REO0lBQ0Y7SUFFQSxNQUFNQyxVQUFVLE1BQU1DLFFBQVFDLEdBQUcsQ0FDL0JMLFNBQVNDLEdBQUcsQ0FBQztZQUFPLEVBQUViLElBQUksRUFBRUssR0FBRyxFQUFFO2VBQU07WUFDckNMO1lBQ0FLLEtBQUssTUFBT0QsZ0JBQWdCQyxPQUFRQSxNQUFNO1FBQzVDOztJQUdGLE9BQU9VO0FBQ1QsRUFBRTtBQUVLLE1BQU1HLDBCQUEwQjtJQUNyQyxNQUFNQyxjQUFjQyxLQUFLQyxLQUFLLENBQUNELEtBQUtFLE1BQU0sS0FBSzlCLHVEQUFlQSxDQUFDK0IsTUFBTTtJQUNyRSxPQUFPLFVBQXVDLE9BQTdCL0IsdURBQWUsQ0FBQzJCLFlBQVk7QUFDL0MsRUFBRSIsInNvdXJjZXMiOlsiL1VzZXJzL2FkaXNpbi9EZXNrdG9wL3ByZXB3aXNlL2xpYi91dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnRlcnZpZXdDb3ZlcnMsIG1hcHBpbmdzIH0gZnJvbSBcIkAvY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBjbHN4LCB0eXBlIENsYXNzVmFsdWUgfSBmcm9tIFwiY2xzeFwiO1xuaW1wb3J0IHsgdHdNZXJnZSB9IGZyb20gXCJ0YWlsd2luZC1tZXJnZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY24oLi4uaW5wdXRzOiBDbGFzc1ZhbHVlW10pIHtcbiAgcmV0dXJuIHR3TWVyZ2UoY2xzeChpbnB1dHMpKTtcbn1cblxuY29uc3QgdGVjaEljb25CYXNlVVJMID0gXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvZ2gvZGV2aWNvbnMvZGV2aWNvbi9pY29uc1wiO1xuXG5jb25zdCBub3JtYWxpemVUZWNoTmFtZSA9ICh0ZWNoOiBzdHJpbmcpID0+IHtcbiAgY29uc3Qga2V5ID0gdGVjaC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLmpzJC8sIFwiXCIpLnJlcGxhY2UoL1xccysvZywgXCJcIik7XG4gIHJldHVybiBtYXBwaW5nc1trZXkgYXMga2V5b2YgdHlwZW9mIG1hcHBpbmdzXTtcbn07XG5cbmNvbnN0IGNoZWNrSWNvbkV4aXN0cyA9IGFzeW5jICh1cmw6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7IG1ldGhvZDogXCJIRUFEXCIgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlLm9rOyAvLyBSZXR1cm5zIHRydWUgaWYgdGhlIGljb24gZXhpc3RzXG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldFRlY2hMb2dvcyA9IGFzeW5jICh0ZWNoQXJyYXk6IHN0cmluZ1tdKSA9PiB7XG4gIGNvbnN0IGxvZ29VUkxzID0gdGVjaEFycmF5Lm1hcCgodGVjaCkgPT4ge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBub3JtYWxpemVUZWNoTmFtZSh0ZWNoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdGVjaCxcbiAgICAgIHVybDogYCR7dGVjaEljb25CYXNlVVJMfS8ke25vcm1hbGl6ZWR9LyR7bm9ybWFsaXplZH0tb3JpZ2luYWwuc3ZnYCxcbiAgICB9O1xuICB9KTtcblxuICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgbG9nb1VSTHMubWFwKGFzeW5jICh7IHRlY2gsIHVybCB9KSA9PiAoe1xuICAgICAgdGVjaCxcbiAgICAgIHVybDogKGF3YWl0IGNoZWNrSWNvbkV4aXN0cyh1cmwpKSA/IHVybCA6IFwiL3RlY2guc3ZnXCIsXG4gICAgfSkpXG4gICk7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UmFuZG9tSW50ZXJ2aWV3Q292ZXIgPSAoKSA9PiB7XG4gIGNvbnN0IHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaW50ZXJ2aWV3Q292ZXJzLmxlbmd0aCk7XG4gIHJldHVybiBgL2NvdmVycyR7aW50ZXJ2aWV3Q292ZXJzW3JhbmRvbUluZGV4XX1gO1xufTtcbiJdLCJuYW1lcyI6WyJpbnRlcnZpZXdDb3ZlcnMiLCJtYXBwaW5ncyIsImNsc3giLCJ0d01lcmdlIiwiY24iLCJpbnB1dHMiLCJ0ZWNoSWNvbkJhc2VVUkwiLCJub3JtYWxpemVUZWNoTmFtZSIsInRlY2giLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJjaGVja0ljb25FeGlzdHMiLCJ1cmwiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwib2siLCJnZXRUZWNoTG9nb3MiLCJ0ZWNoQXJyYXkiLCJsb2dvVVJMcyIsIm1hcCIsIm5vcm1hbGl6ZWQiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsImdldFJhbmRvbUludGVydmlld0NvdmVyIiwicmFuZG9tSW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJsZW5ndGgiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/vapi.sdk.ts":
/*!*************************!*\
  !*** ./lib/vapi.sdk.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   vapi: () => (/* binding */ vapi)\n/* harmony export */ });\n/* harmony import */ var _vapi_ai_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vapi-ai/web */ \"(app-pages-browser)/./node_modules/@vapi-ai/web/dist/vapi.js\");\n/* harmony import */ var _vapi_ai_web__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vapi_ai_web__WEBPACK_IMPORTED_MODULE_0__);\n\nconst vapi = new (_vapi_ai_web__WEBPACK_IMPORTED_MODULE_0___default())(\"c234953b-ff75-4f1e-bd93-66d70fa3c7fd\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi92YXBpLnNkay50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0M7QUFFekIsTUFBTUMsT0FBTyxJQUFJRCxxREFBSUEsQ0FBQ0Usc0NBQXNDLEVBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZGlzaW4vRGVza3RvcC9wcmVwd2lzZS9saWIvdmFwaS5zZGsudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZhcGkgZnJvbSBcIkB2YXBpLWFpL3dlYlwiO1xuXG5leHBvcnQgY29uc3QgdmFwaSA9IG5ldyBWYXBpKHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1ZBUElfV0VCX1RPS0VOISk7XG4iXSwibmFtZXMiOlsiVmFwaSIsInZhcGkiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfVkFQSV9XRUJfVE9LRU4iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/vapi.sdk.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@daily-co/daily-js/dist/daily-esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/@daily-co/daily-js/dist/daily-esm.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DAILY_ACCESS_LEVEL_FULL: () => (/* binding */ hi),\n/* harmony export */   DAILY_ACCESS_LEVEL_LOBBY: () => (/* binding */ fi),\n/* harmony export */   DAILY_ACCESS_LEVEL_NONE: () => (/* binding */ vi),\n/* harmony export */   DAILY_ACCESS_UNKNOWN: () => (/* binding */ pi),\n/* harmony export */   DAILY_CAMERA_ERROR_CAM_AND_MIC_IN_USE: () => (/* binding */ Ai),\n/* harmony export */   DAILY_CAMERA_ERROR_CAM_IN_USE: () => (/* binding */ Pi),\n/* harmony export */   DAILY_CAMERA_ERROR_CONSTRAINTS: () => (/* binding */ Ii),\n/* harmony export */   DAILY_CAMERA_ERROR_MIC_IN_USE: () => (/* binding */ Oi),\n/* harmony export */   DAILY_CAMERA_ERROR_NOT_FOUND: () => (/* binding */ xi),\n/* harmony export */   DAILY_CAMERA_ERROR_PERMISSIONS: () => (/* binding */ ji),\n/* harmony export */   DAILY_CAMERA_ERROR_UNDEF_MEDIADEVICES: () => (/* binding */ Li),\n/* harmony export */   DAILY_CAMERA_ERROR_UNKNOWN: () => (/* binding */ Di),\n/* harmony export */   DAILY_EVENT_ACCESS_STATE_UPDATED: () => (/* binding */ Ki),\n/* harmony export */   DAILY_EVENT_ACTIVE_SPEAKER_CHANGE: () => (/* binding */ Mo),\n/* harmony export */   DAILY_EVENT_ACTIVE_SPEAKER_MODE_CHANGE: () => (/* binding */ Co),\n/* harmony export */   DAILY_EVENT_APP_MSG: () => (/* binding */ go),\n/* harmony export */   DAILY_EVENT_CAMERA_ERROR: () => (/* binding */ $i),\n/* harmony export */   DAILY_EVENT_CPU_LOAD_CHANGE: () => (/* binding */ Po),\n/* harmony export */   DAILY_EVENT_ERROR: () => (/* binding */ Uo),\n/* harmony export */   DAILY_EVENT_EXIT_FULLSCREEN: () => (/* binding */ jo),\n/* harmony export */   DAILY_EVENT_FACE_COUNTS_UPDATED: () => (/* binding */ Oo),\n/* harmony export */   DAILY_EVENT_FULLSCREEN: () => (/* binding */ Ao),\n/* harmony export */   DAILY_EVENT_IFRAME_LAUNCH_CONFIG: () => (/* binding */ Fi),\n/* harmony export */   DAILY_EVENT_IFRAME_READY_FOR_LAUNCH_CONFIG: () => (/* binding */ Ni),\n/* harmony export */   DAILY_EVENT_INPUT_SETTINGS_UPDATED: () => (/* binding */ Ro),\n/* harmony export */   DAILY_EVENT_JOINED_MEETING: () => (/* binding */ zi),\n/* harmony export */   DAILY_EVENT_JOINING_MEETING: () => (/* binding */ qi),\n/* harmony export */   DAILY_EVENT_LANG_UPDATED: () => (/* binding */ No),\n/* harmony export */   DAILY_EVENT_LEFT_MEETING: () => (/* binding */ Wi),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_ERROR: () => (/* binding */ Do),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_STARTED: () => (/* binding */ Lo),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_STOPPED: () => (/* binding */ Io),\n/* harmony export */   DAILY_EVENT_LIVE_STREAMING_UPDATED: () => (/* binding */ xo),\n/* harmony export */   DAILY_EVENT_LOADED: () => (/* binding */ Vi),\n/* harmony export */   DAILY_EVENT_LOADING: () => (/* binding */ Bi),\n/* harmony export */   DAILY_EVENT_LOAD_ATTEMPT_FAILED: () => (/* binding */ Ui),\n/* harmony export */   DAILY_EVENT_LOCAL_SCREEN_SHARE_CANCELED: () => (/* binding */ So),\n/* harmony export */   DAILY_EVENT_LOCAL_SCREEN_SHARE_STARTED: () => (/* binding */ wo),\n/* harmony export */   DAILY_EVENT_LOCAL_SCREEN_SHARE_STOPPED: () => (/* binding */ ko),\n/* harmony export */   DAILY_EVENT_MEETING_SESSION_DATA_ERROR: () => (/* binding */ eo),\n/* harmony export */   DAILY_EVENT_MEETING_SESSION_STATE_UPDATED: () => (/* binding */ Zi),\n/* harmony export */   DAILY_EVENT_MEETING_SESSION_SUMMARY_UPDATED: () => (/* binding */ Xi),\n/* harmony export */   DAILY_EVENT_NETWORK_CONNECTION: () => (/* binding */ To),\n/* harmony export */   DAILY_EVENT_NETWORK_QUALITY_CHANGE: () => (/* binding */ Eo),\n/* harmony export */   DAILY_EVENT_NONFATAL_ERROR: () => (/* binding */ Bo),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_COUNTS_UPDATED: () => (/* binding */ Yi),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_JOINED: () => (/* binding */ Hi),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_LEFT: () => (/* binding */ Qi),\n/* harmony export */   DAILY_EVENT_PARTICIPANT_UPDATED: () => (/* binding */ Gi),\n/* harmony export */   DAILY_EVENT_RECEIVE_SETTINGS_UPDATED: () => (/* binding */ Fo),\n/* harmony export */   DAILY_EVENT_RECORDING_DATA: () => (/* binding */ vo),\n/* harmony export */   DAILY_EVENT_RECORDING_ERROR: () => (/* binding */ ho),\n/* harmony export */   DAILY_EVENT_RECORDING_STARTED: () => (/* binding */ lo),\n/* harmony export */   DAILY_EVENT_RECORDING_STATS: () => (/* binding */ po),\n/* harmony export */   DAILY_EVENT_RECORDING_STOPPED: () => (/* binding */ uo),\n/* harmony export */   DAILY_EVENT_RECORDING_UPLOAD_COMPLETED: () => (/* binding */ fo),\n/* harmony export */   DAILY_EVENT_REMOTE_MEDIA_PLAYER_STARTED: () => (/* binding */ yo),\n/* harmony export */   DAILY_EVENT_REMOTE_MEDIA_PLAYER_STOPPED: () => (/* binding */ bo),\n/* harmony export */   DAILY_EVENT_REMOTE_MEDIA_PLAYER_UPDATED: () => (/* binding */ _o),\n/* harmony export */   DAILY_EVENT_STARTED_CAMERA: () => (/* binding */ Ji),\n/* harmony export */   DAILY_EVENT_THEME_UPDATED: () => (/* binding */ Ri),\n/* harmony export */   DAILY_EVENT_TRACK_STARTED: () => (/* binding */ io),\n/* harmony export */   DAILY_EVENT_TRACK_STOPPED: () => (/* binding */ oo),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_ERROR: () => (/* binding */ co),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_MSG: () => (/* binding */ mo),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_STARTED: () => (/* binding */ ao),\n/* harmony export */   DAILY_EVENT_TRANSCRIPTION_STOPPED: () => (/* binding */ so),\n/* harmony export */   DAILY_EVENT_WAITING_PARTICIPANT_ADDED: () => (/* binding */ to),\n/* harmony export */   DAILY_EVENT_WAITING_PARTICIPANT_REMOVED: () => (/* binding */ ro),\n/* harmony export */   DAILY_EVENT_WAITING_PARTICIPANT_UPDATED: () => (/* binding */ no),\n/* harmony export */   DAILY_FATAL_ERROR_CONNECTION: () => (/* binding */ Ti),\n/* harmony export */   DAILY_FATAL_ERROR_EJECTED: () => (/* binding */ yi),\n/* harmony export */   DAILY_FATAL_ERROR_EOL: () => (/* binding */ Ci),\n/* harmony export */   DAILY_FATAL_ERROR_EXP_ROOM: () => (/* binding */ wi),\n/* harmony export */   DAILY_FATAL_ERROR_EXP_TOKEN: () => (/* binding */ ki),\n/* harmony export */   DAILY_FATAL_ERROR_MEETING_FULL: () => (/* binding */ Mi),\n/* harmony export */   DAILY_FATAL_ERROR_NBF_ROOM: () => (/* binding */ _i),\n/* harmony export */   DAILY_FATAL_ERROR_NBF_TOKEN: () => (/* binding */ bi),\n/* harmony export */   DAILY_FATAL_ERROR_NOT_ALLOWED: () => (/* binding */ Ei),\n/* harmony export */   DAILY_FATAL_ERROR_NO_ROOM: () => (/* binding */ Si),\n/* harmony export */   DAILY_RECEIVE_SETTINGS_ALL_PARTICIPANTS_KEY: () => (/* binding */ mi),\n/* harmony export */   DAILY_RECEIVE_SETTINGS_BASE_KEY: () => (/* binding */ gi),\n/* harmony export */   DAILY_STATE_ERROR: () => (/* binding */ oi),\n/* harmony export */   DAILY_STATE_JOINED: () => (/* binding */ ri),\n/* harmony export */   DAILY_STATE_JOINING: () => (/* binding */ ni),\n/* harmony export */   DAILY_STATE_LEFT: () => (/* binding */ ii),\n/* harmony export */   DAILY_STATE_NEW: () => (/* binding */ Zr),\n/* harmony export */   DAILY_TRACK_STATE_BLOCKED: () => (/* binding */ ai),\n/* harmony export */   DAILY_TRACK_STATE_INTERRUPTED: () => (/* binding */ ui),\n/* harmony export */   DAILY_TRACK_STATE_LOADING: () => (/* binding */ li),\n/* harmony export */   DAILY_TRACK_STATE_OFF: () => (/* binding */ si),\n/* harmony export */   DAILY_TRACK_STATE_PLAYABLE: () => (/* binding */ di),\n/* harmony export */   DAILY_TRACK_STATE_SENDABLE: () => (/* binding */ ci),\n/* harmony export */   \"default\": () => (/* binding */ js)\n/* harmony export */ });\nfunction e(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function t(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function n(e){return n=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e},n(e)}function r(e){var t=function(e,t){if(\"object\"!==n(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,t||\"default\");if(\"object\"!==n(i))return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===t?String:Number)(e)}(e,\"string\");return\"symbol\"===n(t)?t:String(t)}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,r(i.key),i)}}function o(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),Object.defineProperty(e,\"prototype\",{writable:!1}),e}function a(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function s(e,t){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},s(e,t)}function c(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,\"prototype\",{writable:!1}),t&&s(e,t)}function l(e,t){if(t&&(\"object\"===n(t)||\"function\"==typeof t))return t;if(void 0!==t)throw new TypeError(\"Derived constructors may only return object or undefined\");return a(e)}function u(e){return u=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},u(e)}function d(e,t,n){return(t=r(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t,n,r,i,o,a){try{var s=e[o](a),c=s.value}catch(e){return void n(e)}s.done?t(c):Promise.resolve(c).then(r,i)}function h(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){p(o,r,i,a,s,\"next\",e)}function s(e){p(o,r,i,a,s,\"throw\",e)}a(void 0)}))}}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(null!=n){var r,i,o,a,s=[],c=!0,l=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;c=!1}else for(;!(c=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);c=!0);}catch(e){l=!0,i=e}finally{try{if(!c&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(l)throw i}}return s}}(e,t)||function(e,t){if(e){if(\"string\"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?f(e,t):void 0}}(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}var g,m={},y={get exports(){return m},set exports(e){m=e}},_=\"object\"==typeof Reflect?Reflect:null,b=_&&\"function\"==typeof _.apply?_.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};g=_&&\"function\"==typeof _.ownKeys?_.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var w=Number.isNaN||function(e){return e!=e};function k(){k.init.call(this)}y.exports=k,m.once=function(e,t){return new Promise((function(n,r){function i(n){e.removeListener(t,o),r(n)}function o(){\"function\"==typeof e.removeListener&&e.removeListener(\"error\",i),n([].slice.call(arguments))}L(e,t,o,{once:!0}),\"error\"!==t&&function(e,t,n){\"function\"==typeof e.on&&L(e,\"error\",t,n)}(e,i,{once:!0})}))},k.EventEmitter=k,k.prototype._events=void 0,k.prototype._eventsCount=0,k.prototype._maxListeners=void 0;var S=10;function M(e){if(\"function\"!=typeof e)throw new TypeError('The \"listener\" argument must be of type Function. Received type '+typeof e)}function C(e){return void 0===e._maxListeners?k.defaultMaxListeners:e._maxListeners}function E(e,t,n,r){var i,o,a,s;if(M(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit(\"newListener\",t,n.listener?n.listener:n),o=e._events),a=o[t]),void 0===a)a=o[t]=n,++e._eventsCount;else if(\"function\"==typeof a?a=o[t]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),(i=C(e))>0&&a.length>i&&!a.warned){a.warned=!0;var c=new Error(\"Possible EventEmitter memory leak detected. \"+a.length+\" \"+String(t)+\" listeners added. Use emitter.setMaxListeners() to increase limit\");c.name=\"MaxListenersExceededWarning\",c.emitter=e,c.type=t,c.count=a.length,s=c,console&&console.warn&&console.warn(s)}return e}function T(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function P(e,t,n){var r={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},i=T.bind(r);return i.listener=n,r.wrapFn=i,i}function O(e,t,n){var r=e._events;if(void 0===r)return[];var i=r[t];return void 0===i?[]:\"function\"==typeof i?n?[i.listener||i]:[i]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(i):j(i,i.length)}function A(e){var t=this._events;if(void 0!==t){var n=t[e];if(\"function\"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function j(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e[r];return n}function L(e,t,n,r){if(\"function\"==typeof e.on)r.once?e.once(t,n):e.on(t,n);else{if(\"function\"!=typeof e.addEventListener)throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){r.once&&e.removeEventListener(t,i),n(o)}))}}Object.defineProperty(k,\"defaultMaxListeners\",{enumerable:!0,get:function(){return S},set:function(e){if(\"number\"!=typeof e||e<0||w(e))throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received '+e+\".\");S=e}}),k.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},k.prototype.setMaxListeners=function(e){if(\"number\"!=typeof e||e<0||w(e))throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received '+e+\".\");return this._maxListeners=e,this},k.prototype.getMaxListeners=function(){return C(this)},k.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r=\"error\"===e,i=this._events;if(void 0!==i)r=r&&void 0===i.error;else if(!r)return!1;if(r){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error(\"Unhandled error.\"+(o?\" (\"+o.message+\")\":\"\"));throw a.context=o,a}var s=i[e];if(void 0===s)return!1;if(\"function\"==typeof s)b(s,this,t);else{var c=s.length,l=j(s,c);for(n=0;n<c;++n)b(l[n],this,t)}return!0},k.prototype.addListener=function(e,t){return E(this,e,t,!1)},k.prototype.on=k.prototype.addListener,k.prototype.prependListener=function(e,t){return E(this,e,t,!0)},k.prototype.once=function(e,t){return M(t),this.on(e,P(this,e,t)),this},k.prototype.prependOnceListener=function(e,t){return M(t),this.prependListener(e,P(this,e,t)),this},k.prototype.removeListener=function(e,t){var n,r,i,o,a;if(M(t),void 0===(r=this._events))return this;if(void 0===(n=r[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete r[e],r.removeListener&&this.emit(\"removeListener\",e,n.listener||t));else if(\"function\"!=typeof n){for(i=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){a=n[o].listener,i=o;break}if(i<0)return this;0===i?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,i),1===n.length&&(r[e]=n[0]),void 0!==r.removeListener&&this.emit(\"removeListener\",e,a||t)}return this},k.prototype.off=k.prototype.removeListener,k.prototype.removeAllListeners=function(e){var t,n,r;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var i,o=Object.keys(n);for(r=0;r<o.length;++r)\"removeListener\"!==(i=o[r])&&this.removeAllListeners(i);return this.removeAllListeners(\"removeListener\"),this._events=Object.create(null),this._eventsCount=0,this}if(\"function\"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(r=t.length-1;r>=0;r--)this.removeListener(e,t[r]);return this},k.prototype.listeners=function(e){return O(this,e,!0)},k.prototype.rawListeners=function(e){return O(this,e,!1)},k.listenerCount=function(e,t){return\"function\"==typeof e.listenerCount?e.listenerCount(t):A.call(e,t)},k.prototype.listenerCount=A,k.prototype.eventNames=function(){return this._eventsCount>0?g(this._events):[]};var x=Object.prototype.hasOwnProperty;function I(e,t,n){for(n of e.keys())if(D(n,t))return n}function D(e,t){var n,r,i;if(e===t)return!0;if(e&&t&&(n=e.constructor)===t.constructor){if(n===Date)return e.getTime()===t.getTime();if(n===RegExp)return e.toString()===t.toString();if(n===Array){if((r=e.length)===t.length)for(;r--&&D(e[r],t[r]););return-1===r}if(n===Set){if(e.size!==t.size)return!1;for(r of e){if((i=r)&&\"object\"==typeof i&&!(i=I(t,i)))return!1;if(!t.has(i))return!1}return!0}if(n===Map){if(e.size!==t.size)return!1;for(r of e){if((i=r[0])&&\"object\"==typeof i&&!(i=I(t,i)))return!1;if(!D(r[1],t.get(i)))return!1}return!0}if(n===ArrayBuffer)e=new Uint8Array(e),t=new Uint8Array(t);else if(n===DataView){if((r=e.byteLength)===t.byteLength)for(;r--&&e.getInt8(r)===t.getInt8(r););return-1===r}if(ArrayBuffer.isView(e)){if((r=e.byteLength)===t.byteLength)for(;r--&&e[r]===t[r];);return-1===r}if(!n||\"object\"==typeof e){for(n in r=0,e){if(x.call(e,n)&&++r&&!x.call(t,n))return!1;if(!(n in t)||!D(e[n],t[n]))return!1}return Object.keys(t).length===r}}return e!=e&&t!=t}const N={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Electron:\"electron\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"},F={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",electron:\"Electron\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"},R={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"},B={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"},U={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"};class V{static getFirstMatch(e,t){const n=t.match(e);return n&&n.length>0&&n[1]||\"\"}static getSecondMatch(e,t){const n=t.match(e);return n&&n.length>1&&n[2]||\"\"}static matchAndReturnConst(e,t,n){if(e.test(t))return n}static getWindowsVersionName(e){switch(e){case\"NT\":return\"NT\";case\"XP\":case\"NT 5.1\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}}static getMacOSVersionName(e){const t=e.split(\".\").splice(0,2).map((e=>parseInt(e,10)||0));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}}static getAndroidVersionName(e){const t=e.split(\".\").splice(0,2).map((e=>parseInt(e,10)||0));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0}static getVersionPrecision(e){return e.split(\".\").length}static compareVersions(e,t,n=!1){const r=V.getVersionPrecision(e),i=V.getVersionPrecision(t);let o=Math.max(r,i),a=0;const s=V.map([e,t],(e=>{const t=o-V.getVersionPrecision(e),n=e+new Array(t+1).join(\".0\");return V.map(n.split(\".\"),(e=>new Array(20-e.length).join(\"0\")+e)).reverse()}));for(n&&(a=o-Math.min(r,i)),o-=1;o>=a;){if(s[0][o]>s[1][o])return 1;if(s[0][o]===s[1][o]){if(o===a)return 0;o-=1}else if(s[0][o]<s[1][o])return-1}}static map(e,t){const n=[];let r;if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n}static find(e,t){let n,r;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(n=0,r=e.length;n<r;n+=1){const r=e[n];if(t(r,n))return r}}static assign(e,...t){const n=e;let r,i;if(Object.assign)return Object.assign(e,...t);for(r=0,i=t.length;r<i;r+=1){const e=t[r];if(\"object\"==typeof e&&null!==e){Object.keys(e).forEach((t=>{n[t]=e[t]}))}}return e}static getBrowserAlias(e){return N[e]}static getBrowserTypeByAlias(e){return F[e]||\"\"}}const J=/version\\/(\\d+(\\.?_?\\d+)+)/i,$=[{test:[/googlebot/i],describe(e){const t={name:\"Googlebot\"},n=V.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/opera/i],describe(e){const t={name:\"Opera\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opr\\/|opios/i],describe(e){const t={name:\"Opera\"},n=V.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/SamsungBrowser/i],describe(e){const t={name:\"Samsung Internet for Android\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Whale/i],describe(e){const t={name:\"NAVER Whale Browser\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MZBrowser/i],describe(e){const t={name:\"MZ Browser\"},n=V.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/focus/i],describe(e){const t={name:\"Focus\"},n=V.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/swing/i],describe(e){const t={name:\"Swing\"},n=V.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/coast/i],describe(e){const t={name:\"Opera Coast\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opt\\/\\d+(?:.?_?\\d+)+/i],describe(e){const t={name:\"Opera Touch\"},n=V.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/yabrowser/i],describe(e){const t={name:\"Yandex Browser\"},n=V.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/ucbrowser/i],describe(e){const t={name:\"UC Browser\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Maxthon|mxios/i],describe(e){const t={name:\"Maxthon\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/epiphany/i],describe(e){const t={name:\"Epiphany\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/puffin/i],describe(e){const t={name:\"Puffin\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sleipnir/i],describe(e){const t={name:\"Sleipnir\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/k-meleon/i],describe(e){const t={name:\"K-Meleon\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/micromessenger/i],describe(e){const t={name:\"WeChat\"},n=V.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/qqbrowser/i],describe(e){const t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},n=V.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/msie|trident/i],describe(e){const t={name:\"Internet Explorer\"},n=V.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/\\sedg\\//i],describe(e){const t={name:\"Microsoft Edge\"},n=V.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/edg([ea]|ios)/i],describe(e){const t={name:\"Microsoft Edge\"},n=V.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/vivaldi/i],describe(e){const t={name:\"Vivaldi\"},n=V.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/seamonkey/i],describe(e){const t={name:\"SeaMonkey\"},n=V.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sailfish/i],describe(e){const t={name:\"Sailfish\"},n=V.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return n&&(t.version=n),t}},{test:[/silk/i],describe(e){const t={name:\"Amazon Silk\"},n=V.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/phantom/i],describe(e){const t={name:\"PhantomJS\"},n=V.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/slimerjs/i],describe(e){const t={name:\"SlimerJS\"},n=V.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe(e){const t={name:\"BlackBerry\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(web|hpw)[o0]s/i],describe(e){const t={name:\"WebOS Browser\"},n=V.getFirstMatch(J,e)||V.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/bada/i],describe(e){const t={name:\"Bada\"},n=V.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/tizen/i],describe(e){const t={name:\"Tizen\"},n=V.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/qupzilla/i],describe(e){const t={name:\"QupZilla\"},n=V.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/firefox|iceweasel|fxios/i],describe(e){const t={name:\"Firefox\"},n=V.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/electron/i],describe(e){const t={name:\"Electron\"},n=V.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MiuiBrowser/i],describe(e){const t={name:\"Miui\"},n=V.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/chromium/i],describe(e){const t={name:\"Chromium\"},n=V.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/chrome|crios|crmo/i],describe(e){const t={name:\"Chrome\"},n=V.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/GSA/i],describe(e){const t={name:\"Google Search\"},n=V.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test(e){const t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe(e){const t={name:\"Android Browser\"},n=V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/playstation 4/i],describe(e){const t={name:\"PlayStation 4\"},n=V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/safari|applewebkit/i],describe(e){const t={name:\"Safari\"},n=V.getFirstMatch(J,e);return n&&(t.version=n),t}},{test:[/.*/i],describe(e){const t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:V.getFirstMatch(t,e),version:V.getSecondMatch(t,e)}}}];var q=[{test:[/Roku\\/DVP/],describe(e){const t=V.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:B.Roku,version:t}}},{test:[/windows phone/i],describe(e){const t=V.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:B.WindowsPhone,version:t}}},{test:[/windows /i],describe(e){const t=V.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),n=V.getWindowsVersionName(t);return{name:B.Windows,version:t,versionName:n}}},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe(e){const t={name:B.iOS},n=V.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/,e);return n&&(t.version=n),t}},{test:[/macintosh/i],describe(e){const t=V.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),n=V.getMacOSVersionName(t),r={name:B.MacOS,version:t};return n&&(r.versionName=n),r}},{test:[/(ipod|iphone|ipad)/i],describe(e){const t=V.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:B.iOS,version:t}}},{test(e){const t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe(e){const t=V.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),n=V.getAndroidVersionName(t),r={name:B.Android,version:t};return n&&(r.versionName=n),r}},{test:[/(web|hpw)[o0]s/i],describe(e){const t=V.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),n={name:B.WebOS};return t&&t.length&&(n.version=t),n}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe(e){const t=V.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||V.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||V.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:B.BlackBerry,version:t}}},{test:[/bada/i],describe(e){const t=V.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:B.Bada,version:t}}},{test:[/tizen/i],describe(e){const t=V.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:B.Tizen,version:t}}},{test:[/linux/i],describe:()=>({name:B.Linux})},{test:[/CrOS/],describe:()=>({name:B.ChromeOS})},{test:[/PlayStation 4/],describe(e){const t=V.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:B.PlayStation4,version:t}}}],z=[{test:[/googlebot/i],describe:()=>({type:\"bot\",vendor:\"Google\"})},{test:[/huawei/i],describe(e){const t=V.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",n={type:R.mobile,vendor:\"Huawei\"};return t&&(n.model=t),n}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:()=>({type:R.tablet,vendor:\"Nexus\"})},{test:[/ipad/i],describe:()=>({type:R.tablet,vendor:\"Apple\",model:\"iPad\"})},{test:[/Macintosh(.*?) FxiOS(.*?)\\//],describe:()=>({type:R.tablet,vendor:\"Apple\",model:\"iPad\"})},{test:[/kftt build/i],describe:()=>({type:R.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"})},{test:[/silk/i],describe:()=>({type:R.tablet,vendor:\"Amazon\"})},{test:[/tablet(?! pc)/i],describe:()=>({type:R.tablet})},{test(e){const t=e.test(/ipod|iphone/i),n=e.test(/like (ipod|iphone)/i);return t&&!n},describe(e){const t=V.getFirstMatch(/(ipod|iphone)/i,e);return{type:R.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:()=>({type:R.mobile,vendor:\"Nexus\"})},{test:[/[^-]mobi/i],describe:()=>({type:R.mobile})},{test:e=>\"blackberry\"===e.getBrowserName(!0),describe:()=>({type:R.mobile,vendor:\"BlackBerry\"})},{test:e=>\"bada\"===e.getBrowserName(!0),describe:()=>({type:R.mobile})},{test:e=>\"windows phone\"===e.getBrowserName(),describe:()=>({type:R.mobile,vendor:\"Microsoft\"})},{test(e){const t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:()=>({type:R.tablet})},{test:e=>\"android\"===e.getOSName(!0),describe:()=>({type:R.mobile})},{test:e=>\"macos\"===e.getOSName(!0),describe:()=>({type:R.desktop,vendor:\"Apple\"})},{test:e=>\"windows\"===e.getOSName(!0),describe:()=>({type:R.desktop})},{test:e=>\"linux\"===e.getOSName(!0),describe:()=>({type:R.desktop})},{test:e=>\"playstation 4\"===e.getOSName(!0),describe:()=>({type:R.tv})},{test:e=>\"roku\"===e.getOSName(!0),describe:()=>({type:R.tv})}],W=[{test:e=>\"microsoft edge\"===e.getBrowserName(!0),describe(e){if(/\\sedg\\//i.test(e))return{name:U.Blink};const t=V.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:U.EdgeHTML,version:t}}},{test:[/trident/i],describe(e){const t={name:U.Trident},n=V.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:e=>e.test(/presto/i),describe(e){const t={name:U.Presto},n=V.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test(e){const t=e.test(/gecko/i),n=e.test(/like gecko/i);return t&&!n},describe(e){const t={name:U.Gecko},n=V.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:()=>({name:U.Blink})},{test:[/(apple)?webkit/i],describe(e){const t={name:U.WebKit},n=V.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return n&&(t.version=n),t}}];class H{constructor(e,t=!1){if(null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}getUA(){return this._ua}test(e){return e.test(this._ua)}parseBrowser(){this.parsedResult.browser={};const e=V.find($,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.browser=e.describe(this.getUA())),this.parsedResult.browser}getBrowser(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()}getBrowserName(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"}getBrowserVersion(){return this.getBrowser().version}getOS(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()}parseOS(){this.parsedResult.os={};const e=V.find(q,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.os=e.describe(this.getUA())),this.parsedResult.os}getOSName(e){const{name:t}=this.getOS();return e?String(t).toLowerCase()||\"\":t||\"\"}getOSVersion(){return this.getOS().version}getPlatform(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()}getPlatformType(e=!1){const{type:t}=this.getPlatform();return e?String(t).toLowerCase()||\"\":t||\"\"}parsePlatform(){this.parsedResult.platform={};const e=V.find(z,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.platform=e.describe(this.getUA())),this.parsedResult.platform}getEngine(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()}getEngineName(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"}parseEngine(){this.parsedResult.engine={};const e=V.find(W,(e=>{if(\"function\"==typeof e.test)return e.test(this);if(e.test instanceof Array)return e.test.some((e=>this.test(e)));throw new Error(\"Browser's test function is not valid\")}));return e&&(this.parsedResult.engine=e.describe(this.getUA())),this.parsedResult.engine}parse(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this}getResult(){return V.assign({},this.parsedResult)}satisfies(e){const t={};let n=0;const r={};let i=0;if(Object.keys(e).forEach((o=>{const a=e[o];\"string\"==typeof a?(r[o]=a,i+=1):\"object\"==typeof a&&(t[o]=a,n+=1)})),n>0){const e=Object.keys(t),n=V.find(e,(e=>this.isOS(e)));if(n){const e=this.satisfies(t[n]);if(void 0!==e)return e}const r=V.find(e,(e=>this.isPlatform(e)));if(r){const e=this.satisfies(t[r]);if(void 0!==e)return e}}if(i>0){const e=Object.keys(r),t=V.find(e,(e=>this.isBrowser(e,!0)));if(void 0!==t)return this.compareVersion(r[t])}}isBrowser(e,t=!1){const n=this.getBrowserName().toLowerCase();let r=e.toLowerCase();const i=V.getBrowserTypeByAlias(r);return t&&i&&(r=i.toLowerCase()),r===n}compareVersion(e){let t=[0],n=e,r=!1;const i=this.getBrowserVersion();if(\"string\"==typeof i)return\">\"===e[0]||\"<\"===e[0]?(n=e.substr(1),\"=\"===e[1]?(r=!0,n=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?n=e.substr(1):\"~\"===e[0]&&(r=!0,n=e.substr(1)),t.indexOf(V.compareVersions(i,n,r))>-1}isOS(e){return this.getOSName(!0)===String(e).toLowerCase()}isPlatform(e){return this.getPlatformType(!0)===String(e).toLowerCase()}isEngine(e){return this.getEngineName(!0)===String(e).toLowerCase()}is(e,t=!1){return this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)}some(e=[]){return e.some((e=>this.is(e)))}}\n/*!\n * Bowser - a browser detector\n * https://github.com/lancedikson/bowser\n * MIT License | (c) Dustin Diaz 2012-2015\n * MIT License | (c) Denis Demchenko 2015-2019\n */class G{static getParser(e,t=!1){if(\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new H(e,t)}static parse(e){return new H(e).getResult()}static get BROWSER_MAP(){return F}static get ENGINE_MAP(){return U}static get OS_MAP(){return B}static get PLATFORMS_MAP(){return R}}function Q(){return Date.now()+Math.random().toString()}function Y(){throw new Error(\"Method must be implemented in subclass\")}function K(e,t){return null!=t&&t.proxyUrl?t.proxyUrl+(\"/\"===t.proxyUrl.slice(-1)?\"\":\"/\")+e.substring(8):e}function X(e){return null!=e&&e.callObjectBundleUrlOverride?e.callObjectBundleUrlOverride:K(\"https://c.daily.co/call-machine/versioned/\".concat(\"0.75.2\",\"/static/call-machine-object-bundle.js\"),e)}function Z(e){try{new URL(e)}catch(e){return!1}return!0}const ee=Object.prototype.toString;function te(e){switch(ee.call(e)){case\"[object Error]\":case\"[object Exception]\":case\"[object DOMException]\":return!0;default:return de(e,Error)}}function ne(e,t){return ee.call(e)===`[object ${t}]`}function re(e){return ne(e,\"ErrorEvent\")}function ie(e){return ne(e,\"DOMError\")}function oe(e){return ne(e,\"String\")}function ae(e){return\"object\"==typeof e&&null!==e&&\"__sentry_template_string__\"in e&&\"__sentry_template_values__\"in e}function se(e){return null===e||ae(e)||\"object\"!=typeof e&&\"function\"!=typeof e}function ce(e){return ne(e,\"Object\")}function le(e){return\"undefined\"!=typeof Event&&de(e,Event)}function ue(e){return Boolean(e&&e.then&&\"function\"==typeof e.then)}function de(e,t){try{return e instanceof t}catch(e){return!1}}function pe(e){return!(\"object\"!=typeof e||null===e||!e.__isVue&&!e._isVue)}function he(e,t=0){return\"string\"!=typeof e||0===t||e.length<=t?e:`${e.slice(0,t)}...`}function fe(e,t){if(!Array.isArray(e))return\"\";const n=[];for(let t=0;t<e.length;t++){const r=e[t];try{pe(r)?n.push(\"[VueViewModel]\"):n.push(String(r))}catch(e){n.push(\"[value cannot be serialized]\")}}return n.join(t)}function ve(e,t,n=!1){return!!oe(e)&&(ne(t,\"RegExp\")?t.test(e):!!oe(t)&&(n?e===t:e.includes(t)))}function ge(e,t=[],n=!1){return t.some((t=>ve(e,t,n)))}function me(e,t,n=250,r,i,o,a){if(!(o.exception&&o.exception.values&&a&&de(a.originalException,Error)))return;const s=o.exception.values.length>0?o.exception.values[o.exception.values.length-1]:void 0;var c,l;s&&(o.exception.values=(c=ye(e,t,i,a.originalException,r,o.exception.values,s,0),l=n,c.map((e=>(e.value&&(e.value=he(e.value,l)),e)))))}function ye(e,t,n,r,i,o,a,s){if(o.length>=n+1)return o;let c=[...o];if(de(r[i],Error)){_e(a,s);const o=e(t,r[i]),l=c.length;be(o,i,l,s),c=ye(e,t,n,r[i],i,[o,...c],o,l)}return Array.isArray(r.errors)&&r.errors.forEach(((r,o)=>{if(de(r,Error)){_e(a,s);const l=e(t,r),u=c.length;be(l,`errors[${o}]`,u,s),c=ye(e,t,n,r,i,[l,...c],l,u)}})),c}function _e(e,t){e.mechanism=e.mechanism||{type:\"generic\",handled:!0},e.mechanism={...e.mechanism,...\"AggregateError\"===e.type&&{is_exception_group:!0},exception_id:t}}function be(e,t,n,r){e.mechanism=e.mechanism||{type:\"generic\",handled:!0},e.mechanism={...e.mechanism,type:\"chained\",source:t,exception_id:n,parent_id:r}}function we(e){return void 0===e?void 0:e>=400&&e<500?\"warning\":e>=500?\"error\":void 0}const ke=\"8.33.1\",Se=globalThis;function Me(e,t,n){const r=n||Se,i=r.__SENTRY__=r.__SENTRY__||{},o=i[ke]=i[ke]||{};return o[e]||(o[e]=t())}const Ce=Se;function Ee(e,t={}){if(!e)return\"<unknown>\";try{let n=e;const r=5,i=[];let o=0,a=0;const s=\" > \",c=s.length;let l;const u=Array.isArray(t)?t:t.keyAttrs,d=!Array.isArray(t)&&t.maxStringLength||80;for(;n&&o++<r&&(l=Te(n,u),!(\"html\"===l||o>1&&a+i.length*c+l.length>=d));)i.push(l),a+=l.length,n=n.parentNode;return i.reverse().join(s)}catch(e){return\"<unknown>\"}}function Te(e,t){const n=e,r=[];if(!n||!n.tagName)return\"\";if(Ce.HTMLElement&&n instanceof HTMLElement&&n.dataset){if(n.dataset.sentryComponent)return n.dataset.sentryComponent;if(n.dataset.sentryElement)return n.dataset.sentryElement}r.push(n.tagName.toLowerCase());const i=t&&t.length?t.filter((e=>n.getAttribute(e))).map((e=>[e,n.getAttribute(e)])):null;if(i&&i.length)i.forEach((e=>{r.push(`[${e[0]}=\"${e[1]}\"]`)}));else{n.id&&r.push(`#${n.id}`);const e=n.className;if(e&&oe(e)){const t=e.split(/\\s+/);for(const e of t)r.push(`.${e}`)}}const o=[\"aria-label\",\"type\",\"name\",\"title\",\"alt\"];for(const e of o){const t=n.getAttribute(e);t&&r.push(`[${e}=\"${t}\"]`)}return r.join(\"\")}const Pe=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__,Oe=[\"debug\",\"info\",\"warn\",\"error\",\"log\",\"assert\",\"trace\"],Ae={};function je(e){if(!(\"console\"in Se))return e();const t=Se.console,n={},r=Object.keys(Ae);r.forEach((e=>{const r=Ae[e];n[e]=t[e],t[e]=r}));try{return e()}finally{r.forEach((e=>{t[e]=n[e]}))}}const Le=Me(\"logger\",(function(){let e=!1;const t={enable:()=>{e=!0},disable:()=>{e=!1},isEnabled:()=>e};return Pe?Oe.forEach((n=>{t[n]=(...t)=>{e&&je((()=>{Se.console[n](`Sentry Logger [${n}]:`,...t)}))}})):Oe.forEach((e=>{t[e]=()=>{}})),t})),xe=/^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;function Ie(e,t=!1){const{host:n,path:r,pass:i,port:o,projectId:a,protocol:s,publicKey:c}=e;return`${s}://${c}${t&&i?`:${i}`:\"\"}@${n}${o?`:${o}`:\"\"}/${r?`${r}/`:r}${a}`}function De(e){return{protocol:e.protocol,publicKey:e.publicKey||\"\",pass:e.pass||\"\",host:e.host,port:e.port||\"\",path:e.path||\"\",projectId:e.projectId}}function Ne(e){const t=\"string\"==typeof e?function(e){const t=xe.exec(e);if(!t)return void je((()=>{console.error(`Invalid Sentry Dsn: ${e}`)}));const[n,r,i=\"\",o=\"\",a=\"\",s=\"\"]=t.slice(1);let c=\"\",l=s;const u=l.split(\"/\");if(u.length>1&&(c=u.slice(0,-1).join(\"/\"),l=u.pop()),l){const e=l.match(/^\\d+/);e&&(l=e[0])}return De({host:o,pass:i,path:c,projectId:l,port:a,protocol:n,publicKey:r})}(e):De(e);if(t&&function(e){if(!Pe)return!0;const{port:t,projectId:n,protocol:r}=e;return!([\"protocol\",\"publicKey\",\"host\",\"projectId\"].find((t=>!e[t]&&(Le.error(`Invalid Sentry Dsn: ${t} missing`),!0)))||(n.match(/^\\d+$/)?function(e){return\"http\"===e||\"https\"===e}(r)?t&&isNaN(parseInt(t,10))&&(Le.error(`Invalid Sentry Dsn: Invalid port ${t}`),1):(Le.error(`Invalid Sentry Dsn: Invalid protocol ${r}`),1):(Le.error(`Invalid Sentry Dsn: Invalid projectId ${n}`),1)))}(t))return t}class Fe extends Error{constructor(e,t=\"warn\"){super(e),this.message=e,this.name=new.target.prototype.constructor.name,Object.setPrototypeOf(this,new.target.prototype),this.logLevel=t}}function Re(e,t,n){if(!(t in e))return;const r=e[t],i=n(r);\"function\"==typeof i&&Ue(i,r),e[t]=i}function Be(e,t,n){try{Object.defineProperty(e,t,{value:n,writable:!0,configurable:!0})}catch(n){Pe&&Le.log(`Failed to add non-enumerable property \"${t}\" to object`,e)}}function Ue(e,t){try{const n=t.prototype||{};e.prototype=t.prototype=n,Be(e,\"__sentry_original__\",t)}catch(e){}}function Ve(e){return e.__sentry_original__}function Je(e){if(te(e))return{message:e.message,name:e.name,stack:e.stack,...qe(e)};if(le(e)){const t={type:e.type,target:$e(e.target),currentTarget:$e(e.currentTarget),...qe(e)};return\"undefined\"!=typeof CustomEvent&&de(e,CustomEvent)&&(t.detail=e.detail),t}return e}function $e(e){try{return t=e,\"undefined\"!=typeof Element&&de(t,Element)?Ee(e):Object.prototype.toString.call(e)}catch(e){return\"<unknown>\"}var t}function qe(e){if(\"object\"==typeof e&&null!==e){const t={};for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}return{}}function ze(e){return We(e,new Map)}function We(e,t){if(function(e){if(!ce(e))return!1;try{const t=Object.getPrototypeOf(e).constructor.name;return!t||\"Object\"===t}catch(e){return!0}}(e)){const n=t.get(e);if(void 0!==n)return n;const r={};t.set(e,r);for(const n of Object.getOwnPropertyNames(e))void 0!==e[n]&&(r[n]=We(e[n],t));return r}if(Array.isArray(e)){const n=t.get(e);if(void 0!==n)return n;const r=[];return t.set(e,r),e.forEach((e=>{r.push(We(e,t))})),r}return e}const He=\"?\",Ge=/\\(error: (.*)\\)/,Qe=/captureMessage|captureException/;function Ye(e){return e[e.length-1]||{}}const Ke=\"<anonymous>\";function Xe(e){try{return e&&\"function\"==typeof e&&e.name||Ke}catch(e){return Ke}}function Ze(e){const t=e.exception;if(t){const e=[];try{return t.values.forEach((t=>{t.stacktrace.frames&&e.push(...t.stacktrace.frames)})),e}catch(e){return}}}const et={},tt={};function nt(e,t){et[e]=et[e]||[],et[e].push(t)}function rt(e,t){tt[e]||(t(),tt[e]=!0)}function it(e,t){const n=e&&et[e];if(n)for(const r of n)try{r(t)}catch(t){Pe&&Le.error(`Error while triggering instrumentation handler.\\nType: ${e}\\nName: ${Xe(r)}\\nError:`,t)}}function ot(){\"console\"in Se&&Oe.forEach((function(e){e in Se.console&&Re(Se.console,e,(function(t){return Ae[e]=t,function(...t){it(\"console\",{args:t,level:e});const n=Ae[e];n&&n.apply(Se.console,t)}}))}))}const at=Se;function st(e){return e&&/^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(e.toString())}function ct(){if(\"string\"==typeof EdgeRuntime)return!0;if(!function(){if(!(\"fetch\"in at))return!1;try{return new Headers,new Request(\"http://www.example.com\"),new Response,!0}catch(e){return!1}}())return!1;if(st(at.fetch))return!0;let e=!1;const t=at.document;if(t&&\"function\"==typeof t.createElement)try{const n=t.createElement(\"iframe\");n.hidden=!0,t.head.appendChild(n),n.contentWindow&&n.contentWindow.fetch&&(e=st(n.contentWindow.fetch)),t.head.removeChild(n)}catch(e){Pe&&Le.warn(\"Could not create sandbox iframe for pure fetch check, bailing to window.fetch: \",e)}return e}function lt(){return Date.now()/1e3}const ut=function(){const{performance:e}=Se;if(!e||!e.now)return lt;const t=Date.now()-e.now(),n=null==e.timeOrigin?t:e.timeOrigin;return()=>(n+e.now())/1e3}();function dt(e,t){const n=\"fetch\";nt(n,e),rt(n,(()=>function(e,t=!1){if(t&&!ct())return;Re(Se,\"fetch\",(function(t){return function(...n){const{method:r,url:i}=function(e){if(0===e.length)return{method:\"GET\",url:\"\"};if(2===e.length){const[t,n]=e;return{url:ht(t),method:pt(n,\"method\")?String(n.method).toUpperCase():\"GET\"}}const t=e[0];return{url:ht(t),method:pt(t,\"method\")?String(t.method).toUpperCase():\"GET\"}}(n),o={args:n,fetchData:{method:r,url:i},startTimestamp:1e3*ut()};e||it(\"fetch\",{...o});const a=(new Error).stack;return t.apply(Se,n).then((async t=>(e?e(t):it(\"fetch\",{...o,endTimestamp:1e3*ut(),response:t}),t)),(e=>{throw it(\"fetch\",{...o,endTimestamp:1e3*ut(),error:e}),te(e)&&void 0===e.stack&&(e.stack=a,Be(e,\"framesToPop\",1)),e}))}}))}(void 0,t)))}function pt(e,t){return!!e&&\"object\"==typeof e&&!!e[t]}function ht(e){return\"string\"==typeof e?e:e?pt(e,\"url\")?e.url:e.toString?e.toString():\"\":\"\"}(()=>{const{performance:e}=Se;if(!e||!e.now)return;const t=36e5,n=e.now(),r=Date.now(),i=e.timeOrigin?Math.abs(e.timeOrigin+n-r):t,o=i<t,a=e.timing&&e.timing.navigationStart,s=\"number\"==typeof a?Math.abs(a+n-r):t;(o||s<t)&&(i<=s&&e.timeOrigin)})();let ft=null;function vt(){ft=Se.onerror,Se.onerror=function(e,t,n,r,i){return it(\"error\",{column:r,error:i,line:n,msg:e,url:t}),!(!ft||ft.__SENTRY_LOADER__)&&ft.apply(this,arguments)},Se.onerror.__SENTRY_INSTRUMENTED__=!0}let gt=null;function mt(){gt=Se.onunhandledrejection,Se.onunhandledrejection=function(e){return it(\"unhandledrejection\",e),!(gt&&!gt.__SENTRY_LOADER__)||gt.apply(this,arguments)},Se.onunhandledrejection.__SENTRY_INSTRUMENTED__=!0}function yt(){const e=Se,t=e.crypto||e.msCrypto;let n=()=>16*Math.random();try{if(t&&t.randomUUID)return t.randomUUID().replace(/-/g,\"\");t&&t.getRandomValues&&(n=()=>{const e=new Uint8Array(1);return t.getRandomValues(e),e[0]})}catch(e){}return([1e7]+1e3+4e3+8e3+1e11).replace(/[018]/g,(e=>(e^(15&n())>>e/4).toString(16)))}function _t(e){return e.exception&&e.exception.values?e.exception.values[0]:void 0}function bt(e){const{message:t,event_id:n}=e;if(t)return t;const r=_t(e);return r?r.type&&r.value?`${r.type}: ${r.value}`:r.type||r.value||n||\"<unknown>\":n||\"<unknown>\"}function wt(e,t,n){const r=e.exception=e.exception||{},i=r.values=r.values||[],o=i[0]=i[0]||{};o.value||(o.value=t||\"\"),o.type||(o.type=n||\"Error\")}function kt(e,t){const n=_t(e);if(!n)return;const r=n.mechanism;if(n.mechanism={type:\"generic\",handled:!0,...r,...t},t&&\"data\"in t){const e={...r&&r.data,...t.data};n.mechanism.data=e}}function St(e){if(e&&e.__sentry_captured__)return!0;try{Be(e,\"__sentry_captured__\",!0)}catch(e){}return!1}function Mt(e,t=100,n=1/0){try{return Et(\"\",e,t,n)}catch(e){return{ERROR:`**non-serializable** (${e})`}}}function Ct(e,t=3,n=102400){const r=Mt(e,t);return i=r,function(e){return~-encodeURI(e).split(/%..|./).length}(JSON.stringify(i))>n?Ct(e,t-1,n):r;var i}function Et(e,t,n=1/0,r=1/0,i=function(){const e=\"function\"==typeof WeakSet,t=e?new WeakSet:[];return[function(n){if(e)return!!t.has(n)||(t.add(n),!1);for(let e=0;e<t.length;e++)if(t[e]===n)return!0;return t.push(n),!1},function(n){if(e)t.delete(n);else for(let e=0;e<t.length;e++)if(t[e]===n){t.splice(e,1);break}}]}()){const[o,a]=i;if(null==t||[\"boolean\",\"string\"].includes(typeof t)||\"number\"==typeof t&&Number.isFinite(t))return t;const s=function(e,t){try{if(\"domain\"===e&&t&&\"object\"==typeof t&&t._events)return\"[Domain]\";if(\"domainEmitter\"===e)return\"[DomainEmitter]\";if(\"undefined\"!=typeof __webpack_require__.g&&t===__webpack_require__.g)return\"[Global]\";if(\"undefined\"!=typeof window&&t===window)return\"[Window]\";if(\"undefined\"!=typeof document&&t===document)return\"[Document]\";if(pe(t))return\"[VueViewModel]\";if(ce(n=t)&&\"nativeEvent\"in n&&\"preventDefault\"in n&&\"stopPropagation\"in n)return\"[SyntheticEvent]\";if(\"number\"==typeof t&&!Number.isFinite(t))return`[${t}]`;if(\"function\"==typeof t)return`[Function: ${Xe(t)}]`;if(\"symbol\"==typeof t)return`[${String(t)}]`;if(\"bigint\"==typeof t)return`[BigInt: ${String(t)}]`;const r=function(e){const t=Object.getPrototypeOf(e);return t?t.constructor.name:\"null prototype\"}(t);return/^HTML(\\w*)Element$/.test(r)?`[HTMLElement: ${r}]`:`[object ${r}]`}catch(e){return`**non-serializable** (${e})`}var n}(e,t);if(!s.startsWith(\"[object \"))return s;if(t.__sentry_skip_normalization__)return t;const c=\"number\"==typeof t.__sentry_override_normalization_depth__?t.__sentry_override_normalization_depth__:n;if(0===c)return s.replace(\"object \",\"\");if(o(t))return\"[Circular ~]\";const l=t;if(l&&\"function\"==typeof l.toJSON)try{return Et(\"\",l.toJSON(),c-1,r,i)}catch(e){}const u=Array.isArray(t)?[]:{};let d=0;const p=Je(t);for(const e in p){if(!Object.prototype.hasOwnProperty.call(p,e))continue;if(d>=r){u[e]=\"[MaxProperties ~]\";break}const t=p[e];u[e]=Et(e,t,c-1,r,i),d++}return a(t),u}var Tt;function Pt(e){return new At((t=>{t(e)}))}function Ot(e){return new At(((t,n)=>{n(e)}))}!function(e){e[e.PENDING=0]=\"PENDING\";e[e.RESOLVED=1]=\"RESOLVED\";e[e.REJECTED=2]=\"REJECTED\"}(Tt||(Tt={}));class At{constructor(e){At.prototype.__init.call(this),At.prototype.__init2.call(this),At.prototype.__init3.call(this),At.prototype.__init4.call(this),this._state=Tt.PENDING,this._handlers=[];try{e(this._resolve,this._reject)}catch(e){this._reject(e)}}then(e,t){return new At(((n,r)=>{this._handlers.push([!1,t=>{if(e)try{n(e(t))}catch(e){r(e)}else n(t)},e=>{if(t)try{n(t(e))}catch(e){r(e)}else r(e)}]),this._executeHandlers()}))}catch(e){return this.then((e=>e),e)}finally(e){return new At(((t,n)=>{let r,i;return this.then((t=>{i=!1,r=t,e&&e()}),(t=>{i=!0,r=t,e&&e()})).then((()=>{i?n(r):t(r)}))}))}__init(){this._resolve=e=>{this._setResult(Tt.RESOLVED,e)}}__init2(){this._reject=e=>{this._setResult(Tt.REJECTED,e)}}__init3(){this._setResult=(e,t)=>{this._state===Tt.PENDING&&(ue(t)?t.then(this._resolve,this._reject):(this._state=e,this._value=t,this._executeHandlers()))}}__init4(){this._executeHandlers=()=>{if(this._state===Tt.PENDING)return;const e=this._handlers.slice();this._handlers=[],e.forEach((e=>{e[0]||(this._state===Tt.RESOLVED&&e[1](this._value),this._state===Tt.REJECTED&&e[2](this._value),e[0]=!0)}))}}}function jt(e){const t=[];function n(e){return t.splice(t.indexOf(e),1)[0]||Promise.resolve(void 0)}return{$:t,add:function(r){if(!(void 0===e||t.length<e))return Ot(new Fe(\"Not adding Promise because buffer limit was reached.\"));const i=r();return-1===t.indexOf(i)&&t.push(i),i.then((()=>n(i))).then(null,(()=>n(i).then(null,(()=>{})))),i},drain:function(e){return new At(((n,r)=>{let i=t.length;if(!i)return n(!0);const o=setTimeout((()=>{e&&e>0&&n(!1)}),e);t.forEach((e=>{Pt(e).then((()=>{--i||(clearTimeout(o),n(!0))}),r)}))}))}}}function Lt(e){if(!e)return{};const t=e.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);if(!t)return{};const n=t[6]||\"\",r=t[8]||\"\";return{host:t[4],path:t[5],protocol:t[2],search:n,hash:r,relative:t[5]+n+r}}const xt=[\"fatal\",\"error\",\"warning\",\"log\",\"info\",\"debug\"];function It(e){return\"warn\"===e?\"warning\":xt.includes(e)?e:\"log\"}const Dt=/^sentry-/;function Nt(e){const t=function(e){if(!e||!oe(e)&&!Array.isArray(e))return;if(Array.isArray(e))return e.reduce(((e,t)=>{const n=Ft(t);return Object.entries(n).forEach((([t,n])=>{e[t]=n})),e}),{});return Ft(e)}(e);if(!t)return;const n=Object.entries(t).reduce(((e,[t,n])=>{if(t.match(Dt)){e[t.slice(7)]=n}return e}),{});return Object.keys(n).length>0?n:void 0}function Ft(e){return e.split(\",\").map((e=>e.split(\"=\").map((e=>decodeURIComponent(e.trim()))))).reduce(((e,[t,n])=>(t&&n&&(e[t]=n),e)),{})}function Rt(e,t=[]){return[e,t]}function Bt(e,t){const[n,r]=e;return[n,[...r,t]]}function Ut(e,t){const n=e[1];for(const e of n){if(t(e,e[0].type))return!0}return!1}function Vt(e){return Se.__SENTRY__&&Se.__SENTRY__.encodePolyfill?Se.__SENTRY__.encodePolyfill(e):(new TextEncoder).encode(e)}function Jt(e){const[t,n]=e;let r=JSON.stringify(t);function i(e){\"string\"==typeof r?r=\"string\"==typeof e?r+e:[Vt(r),e]:r.push(\"string\"==typeof e?Vt(e):e)}for(const e of n){const[t,n]=e;if(i(`\\n${JSON.stringify(t)}\\n`),\"string\"==typeof n||n instanceof Uint8Array)i(n);else{let e;try{e=JSON.stringify(n)}catch(t){e=JSON.stringify(Mt(n))}i(e)}}return\"string\"==typeof r?r:function(e){const t=e.reduce(((e,t)=>e+t.length),0),n=new Uint8Array(t);let r=0;for(const t of e)n.set(t,r),r+=t.length;return n}(r)}function $t(e){const t=\"string\"==typeof e.data?Vt(e.data):e.data;return[ze({type:\"attachment\",length:t.length,filename:e.filename,content_type:e.contentType,attachment_type:e.attachmentType}),t]}const qt={session:\"session\",sessions:\"session\",attachment:\"attachment\",transaction:\"transaction\",event:\"error\",client_report:\"internal\",user_report:\"default\",profile:\"profile\",profile_chunk:\"profile\",replay_event:\"replay\",replay_recording:\"replay\",check_in:\"monitor\",feedback:\"feedback\",span:\"span\",statsd:\"metric_bucket\"};function zt(e){return qt[e]}function Wt(e){if(!e||!e.sdk)return;const{name:t,version:n}=e.sdk;return{name:t,version:n}}function Ht(e,{statusCode:t,headers:n},r=Date.now()){const i={...e},o=n&&n[\"x-sentry-rate-limits\"],a=n&&n[\"retry-after\"];if(o)for(const e of o.trim().split(\",\")){const[t,n,,,o]=e.split(\":\",5),a=parseInt(t,10),s=1e3*(isNaN(a)?60:a);if(n)for(const e of n.split(\";\"))\"metric_bucket\"===e&&o&&!o.split(\";\").includes(\"custom\")||(i[e]=r+s);else i.all=r+s}else a?i.all=r+function(e,t=Date.now()){const n=parseInt(`${e}`,10);if(!isNaN(n))return 1e3*n;const r=Date.parse(`${e}`);return isNaN(r)?6e4:r-t}(a,r):429===t&&(i.all=r+6e4);return i}function Gt(){return{traceId:yt(),spanId:yt().substring(16)}}const Qt=Se;const Yt=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__;function Kt(){return Xt(Se),Se}function Xt(e){const t=e.__SENTRY__=e.__SENTRY__||{};return t.version=t.version||ke,t[ke]=t[ke]||{}}function Zt(e,t={}){if(t.user&&(!e.ipAddress&&t.user.ip_address&&(e.ipAddress=t.user.ip_address),e.did||t.did||(e.did=t.user.id||t.user.email||t.user.username)),e.timestamp=t.timestamp||ut(),t.abnormal_mechanism&&(e.abnormal_mechanism=t.abnormal_mechanism),t.ignoreDuration&&(e.ignoreDuration=t.ignoreDuration),t.sid&&(e.sid=32===t.sid.length?t.sid:yt()),void 0!==t.init&&(e.init=t.init),!e.did&&t.did&&(e.did=`${t.did}`),\"number\"==typeof t.started&&(e.started=t.started),e.ignoreDuration)e.duration=void 0;else if(\"number\"==typeof t.duration)e.duration=t.duration;else{const t=e.timestamp-e.started;e.duration=t>=0?t:0}t.release&&(e.release=t.release),t.environment&&(e.environment=t.environment),!e.ipAddress&&t.ipAddress&&(e.ipAddress=t.ipAddress),!e.userAgent&&t.userAgent&&(e.userAgent=t.userAgent),\"number\"==typeof t.errors&&(e.errors=t.errors),t.status&&(e.status=t.status)}const en=\"_sentrySpan\";function tn(e,t){t?Be(e,en,t):delete e[en]}function nn(e){return e[en]}class rn{constructor(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._attachments=[],this._user={},this._tags={},this._extra={},this._contexts={},this._sdkProcessingMetadata={},this._propagationContext=Gt()}clone(){const e=new rn;return e._breadcrumbs=[...this._breadcrumbs],e._tags={...this._tags},e._extra={...this._extra},e._contexts={...this._contexts},e._user=this._user,e._level=this._level,e._session=this._session,e._transactionName=this._transactionName,e._fingerprint=this._fingerprint,e._eventProcessors=[...this._eventProcessors],e._requestSession=this._requestSession,e._attachments=[...this._attachments],e._sdkProcessingMetadata={...this._sdkProcessingMetadata},e._propagationContext={...this._propagationContext},e._client=this._client,e._lastEventId=this._lastEventId,tn(e,nn(this)),e}setClient(e){this._client=e}setLastEventId(e){this._lastEventId=e}getClient(){return this._client}lastEventId(){return this._lastEventId}addScopeListener(e){this._scopeListeners.push(e)}addEventProcessor(e){return this._eventProcessors.push(e),this}setUser(e){return this._user=e||{email:void 0,id:void 0,ip_address:void 0,username:void 0},this._session&&Zt(this._session,{user:e}),this._notifyScopeListeners(),this}getUser(){return this._user}getRequestSession(){return this._requestSession}setRequestSession(e){return this._requestSession=e,this}setTags(e){return this._tags={...this._tags,...e},this._notifyScopeListeners(),this}setTag(e,t){return this._tags={...this._tags,[e]:t},this._notifyScopeListeners(),this}setExtras(e){return this._extra={...this._extra,...e},this._notifyScopeListeners(),this}setExtra(e,t){return this._extra={...this._extra,[e]:t},this._notifyScopeListeners(),this}setFingerprint(e){return this._fingerprint=e,this._notifyScopeListeners(),this}setLevel(e){return this._level=e,this._notifyScopeListeners(),this}setTransactionName(e){return this._transactionName=e,this._notifyScopeListeners(),this}setContext(e,t){return null===t?delete this._contexts[e]:this._contexts[e]=t,this._notifyScopeListeners(),this}setSession(e){return e?this._session=e:delete this._session,this._notifyScopeListeners(),this}getSession(){return this._session}update(e){if(!e)return this;const t=\"function\"==typeof e?e(this):e,[n,r]=t instanceof on?[t.getScopeData(),t.getRequestSession()]:ce(t)?[e,e.requestSession]:[],{tags:i,extra:o,user:a,contexts:s,level:c,fingerprint:l=[],propagationContext:u}=n||{};return this._tags={...this._tags,...i},this._extra={...this._extra,...o},this._contexts={...this._contexts,...s},a&&Object.keys(a).length&&(this._user=a),c&&(this._level=c),l.length&&(this._fingerprint=l),u&&(this._propagationContext=u),r&&(this._requestSession=r),this}clear(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._requestSession=void 0,this._session=void 0,tn(this,void 0),this._attachments=[],this._propagationContext=Gt(),this._notifyScopeListeners(),this}addBreadcrumb(e,t){const n=\"number\"==typeof t?t:100;if(n<=0)return this;const r={timestamp:lt(),...e},i=this._breadcrumbs;return i.push(r),this._breadcrumbs=i.length>n?i.slice(-n):i,this._notifyScopeListeners(),this}getLastBreadcrumb(){return this._breadcrumbs[this._breadcrumbs.length-1]}clearBreadcrumbs(){return this._breadcrumbs=[],this._notifyScopeListeners(),this}addAttachment(e){return this._attachments.push(e),this}clearAttachments(){return this._attachments=[],this}getScopeData(){return{breadcrumbs:this._breadcrumbs,attachments:this._attachments,contexts:this._contexts,tags:this._tags,extra:this._extra,user:this._user,level:this._level,fingerprint:this._fingerprint||[],eventProcessors:this._eventProcessors,propagationContext:this._propagationContext,sdkProcessingMetadata:this._sdkProcessingMetadata,transactionName:this._transactionName,span:nn(this)}}setSDKProcessingMetadata(e){return this._sdkProcessingMetadata={...this._sdkProcessingMetadata,...e},this}setPropagationContext(e){return this._propagationContext=e,this}getPropagationContext(){return this._propagationContext}captureException(e,t){const n=t&&t.event_id?t.event_id:yt();if(!this._client)return Le.warn(\"No client configured on scope - will not capture exception!\"),n;const r=new Error(\"Sentry syntheticException\");return this._client.captureException(e,{originalException:e,syntheticException:r,...t,event_id:n},this),n}captureMessage(e,t,n){const r=n&&n.event_id?n.event_id:yt();if(!this._client)return Le.warn(\"No client configured on scope - will not capture message!\"),r;const i=new Error(e);return this._client.captureMessage(e,t,{originalException:e,syntheticException:i,...n,event_id:r},this),r}captureEvent(e,t){const n=t&&t.event_id?t.event_id:yt();return this._client?(this._client.captureEvent(e,{...t,event_id:n},this),n):(Le.warn(\"No client configured on scope - will not capture event!\"),n)}_notifyScopeListeners(){this._notifyingListeners||(this._notifyingListeners=!0,this._scopeListeners.forEach((e=>{e(this)})),this._notifyingListeners=!1)}}const on=rn;class an{constructor(e,t){let n,r;n=e||new on,r=t||new on,this._stack=[{scope:n}],this._isolationScope=r}withScope(e){const t=this._pushScope();let n;try{n=e(t)}catch(e){throw this._popScope(),e}return ue(n)?n.then((e=>(this._popScope(),e)),(e=>{throw this._popScope(),e})):(this._popScope(),n)}getClient(){return this.getStackTop().client}getScope(){return this.getStackTop().scope}getIsolationScope(){return this._isolationScope}getStackTop(){return this._stack[this._stack.length-1]}_pushScope(){const e=this.getScope().clone();return this._stack.push({client:this.getClient(),scope:e}),e}_popScope(){return!(this._stack.length<=1)&&!!this._stack.pop()}}function sn(){const e=Xt(Kt());return e.stack=e.stack||new an(Me(\"defaultCurrentScope\",(()=>new on)),Me(\"defaultIsolationScope\",(()=>new on)))}function cn(e){return sn().withScope(e)}function ln(e,t){const n=sn();return n.withScope((()=>(n.getStackTop().scope=e,t(e))))}function un(e){return sn().withScope((()=>e(sn().getIsolationScope())))}function dn(e){const t=Xt(e);return t.acs?t.acs:{withIsolationScope:un,withScope:cn,withSetScope:ln,withSetIsolationScope:(e,t)=>un(t),getCurrentScope:()=>sn().getScope(),getIsolationScope:()=>sn().getIsolationScope()}}function pn(){return dn(Kt()).getCurrentScope()}function hn(){return dn(Kt()).getIsolationScope()}function fn(){return pn().getClient()}function vn(e){const t=e._sentryMetrics;if(!t)return;const n={};for(const[,[e,r]]of t){(n[e]||(n[e]=[])).push(ze(r))}return n}function gn(e){const{spanId:t,traceId:n}=e.spanContext(),{parent_span_id:r}=_n(e);return ze({parent_span_id:r,span_id:t,trace_id:n})}function mn(e){return\"number\"==typeof e?yn(e):Array.isArray(e)?e[0]+e[1]/1e9:e instanceof Date?yn(e.getTime()):ut()}function yn(e){return e>9999999999?e/1e3:e}function _n(e){if(function(e){return\"function\"==typeof e.getSpanJSON}(e))return e.getSpanJSON();try{const{spanId:t,traceId:n}=e.spanContext();if(function(e){const t=e;return!!(t.attributes&&t.startTime&&t.name&&t.endTime&&t.status)}(e)){const{attributes:r,startTime:i,name:o,endTime:a,parentSpanId:s,status:c}=e;return ze({span_id:t,trace_id:n,data:r,description:o,parent_span_id:s,start_timestamp:mn(i),timestamp:mn(a)||void 0,status:bn(c),op:r[\"sentry.op\"],origin:r[\"sentry.origin\"],_metrics_summary:vn(e)})}return{span_id:t,trace_id:n}}catch(e){return{}}}function bn(e){if(e&&0!==e.code)return 1===e.code?\"ok\":e.message||\"unknown_error\"}function wn(e){return e._sentryRootSpan||e}const kn=\"production\";function Sn(e,t){const n=t.getOptions(),{publicKey:r}=t.getDsn()||{},i=ze({environment:n.environment||kn,release:n.release,public_key:r,trace_id:e});return t.emit(\"createDsc\",i),i}function Mn(e){const t=fn();if(!t)return{};const n=Sn(_n(e).trace_id||\"\",t),r=wn(e),i=r._frozenDsc;if(i)return i;const o=r.spanContext().traceState,a=o&&o.get(\"sentry.dsc\"),s=a&&Nt(a);if(s)return s;const c=_n(r),l=c.data||{},u=l[\"sentry.sample_rate\"];null!=u&&(n.sample_rate=`${u}`);const d=l[\"sentry.source\"],p=c.description;return\"url\"!==d&&p&&(n.transaction=p),function(e){if(\"boolean\"==typeof __SENTRY_TRACING__&&!__SENTRY_TRACING__)return!1;const t=fn(),n=e||t&&t.getOptions();return!!n&&(n.enableTracing||\"tracesSampleRate\"in n||\"tracesSampler\"in n)}()&&(n.sampled=String(function(e){const{traceFlags:t}=e.spanContext();return 1===t}(r))),t.emit(\"createDsc\",n,r),n}function Cn(e,t,n,r){const i=Wt(n),o=e.type&&\"replay_event\"!==e.type?e.type:\"event\";!function(e,t){t&&(e.sdk=e.sdk||{},e.sdk.name=e.sdk.name||t.name,e.sdk.version=e.sdk.version||t.version,e.sdk.integrations=[...e.sdk.integrations||[],...t.integrations||[]],e.sdk.packages=[...e.sdk.packages||[],...t.packages||[]])}(e,n&&n.sdk);const a=function(e,t,n,r){const i=e.sdkProcessingMetadata&&e.sdkProcessingMetadata.dynamicSamplingContext;return{event_id:e.event_id,sent_at:(new Date).toISOString(),...t&&{sdk:t},...!!n&&r&&{dsn:Ie(r)},...i&&{trace:ze({...i})}}}(e,i,r,t);delete e.sdkProcessingMetadata;return Rt(a,[[{type:o},e]])}function En(e,t,n,r=0){return new At(((i,o)=>{const a=e[r];if(null===t||\"function\"!=typeof a)i(t);else{const s=a({...t},n);Yt&&a.id&&null===s&&Le.log(`Event processor \"${a.id}\" dropped event`),ue(s)?s.then((t=>En(e,t,n,r+1).then(i))).then(null,o):En(e,s,n,r+1).then(i).then(null,o)}}))}function Tn(e,t){const{fingerprint:n,span:r,breadcrumbs:i,sdkProcessingMetadata:o}=t;!function(e,t){const{extra:n,tags:r,user:i,contexts:o,level:a,transactionName:s}=t,c=ze(n);c&&Object.keys(c).length&&(e.extra={...c,...e.extra});const l=ze(r);l&&Object.keys(l).length&&(e.tags={...l,...e.tags});const u=ze(i);u&&Object.keys(u).length&&(e.user={...u,...e.user});const d=ze(o);d&&Object.keys(d).length&&(e.contexts={...d,...e.contexts});a&&(e.level=a);s&&\"transaction\"!==e.type&&(e.transaction=s)}(e,t),r&&function(e,t){e.contexts={trace:gn(t),...e.contexts},e.sdkProcessingMetadata={dynamicSamplingContext:Mn(t),...e.sdkProcessingMetadata};const n=wn(t),r=_n(n).description;r&&!e.transaction&&\"transaction\"===e.type&&(e.transaction=r)}(e,r),function(e,t){e.fingerprint=e.fingerprint?function(e){return Array.isArray(e)?e:[e]}(e.fingerprint):[],t&&(e.fingerprint=e.fingerprint.concat(t));e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint}(e,n),function(e,t){const n=[...e.breadcrumbs||[],...t];e.breadcrumbs=n.length?n:void 0}(e,i),function(e,t){e.sdkProcessingMetadata={...e.sdkProcessingMetadata,...t}}(e,o)}function Pn(e,t){const{extra:n,tags:r,user:i,contexts:o,level:a,sdkProcessingMetadata:s,breadcrumbs:c,fingerprint:l,eventProcessors:u,attachments:d,propagationContext:p,transactionName:h,span:f}=t;On(e,\"extra\",n),On(e,\"tags\",r),On(e,\"user\",i),On(e,\"contexts\",o),On(e,\"sdkProcessingMetadata\",s),a&&(e.level=a),h&&(e.transactionName=h),f&&(e.span=f),c.length&&(e.breadcrumbs=[...e.breadcrumbs,...c]),l.length&&(e.fingerprint=[...e.fingerprint,...l]),u.length&&(e.eventProcessors=[...e.eventProcessors,...u]),d.length&&(e.attachments=[...e.attachments,...d]),e.propagationContext={...e.propagationContext,...p}}function On(e,t,n){if(n&&Object.keys(n).length){e[t]={...e[t]};for(const r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[t][r]=n[r])}}function An(e,t,n,r,i,o){const{normalizeDepth:a=3,normalizeMaxBreadth:s=1e3}=e,c={...t,event_id:t.event_id||n.event_id||yt(),timestamp:t.timestamp||lt()},l=n.integrations||e.integrations.map((e=>e.name));!function(e,t){const{environment:n,release:r,dist:i,maxValueLength:o=250}=t;\"environment\"in e||(e.environment=\"environment\"in t?n:kn);void 0===e.release&&void 0!==r&&(e.release=r);void 0===e.dist&&void 0!==i&&(e.dist=i);e.message&&(e.message=he(e.message,o));const a=e.exception&&e.exception.values&&e.exception.values[0];a&&a.value&&(a.value=he(a.value,o));const s=e.request;s&&s.url&&(s.url=he(s.url,o))}(c,e),function(e,t){t.length>0&&(e.sdk=e.sdk||{},e.sdk.integrations=[...e.sdk.integrations||[],...t])}(c,l),i&&i.emit(\"applyFrameMetadata\",t),void 0===t.type&&function(e,t){const n=Se._sentryDebugIds;if(!n)return;let r;const i=jn.get(t);i?r=i:(r=new Map,jn.set(t,r));const o=Object.entries(n).reduce(((e,[n,i])=>{let o;const a=r.get(n);a?o=a:(o=t(n),r.set(n,o));for(let t=o.length-1;t>=0;t--){const n=o[t];if(n.filename){e[n.filename]=i;break}}return e}),{});try{e.exception.values.forEach((e=>{e.stacktrace.frames.forEach((e=>{e.filename&&(e.debug_id=o[e.filename])}))}))}catch(e){}}(c,e.stackParser);const u=function(e,t){if(!t)return e;const n=e?e.clone():new on;return n.update(t),n}(r,n.captureContext);n.mechanism&&kt(c,n.mechanism);const d=i?i.getEventProcessors():[],p=Me(\"globalScope\",(()=>new on)).getScopeData();if(o){Pn(p,o.getScopeData())}if(u){Pn(p,u.getScopeData())}const h=[...n.attachments||[],...p.attachments];h.length&&(n.attachments=h),Tn(c,p);return En([...d,...p.eventProcessors],c,n).then((e=>(e&&function(e){const t={};try{e.exception.values.forEach((e=>{e.stacktrace.frames.forEach((e=>{e.debug_id&&(e.abs_path?t[e.abs_path]=e.debug_id:e.filename&&(t[e.filename]=e.debug_id),delete e.debug_id)}))}))}catch(e){}if(0===Object.keys(t).length)return;e.debug_meta=e.debug_meta||{},e.debug_meta.images=e.debug_meta.images||[];const n=e.debug_meta.images;Object.entries(t).forEach((([e,t])=>{n.push({type:\"sourcemap\",code_file:e,debug_id:t})}))}(e),\"number\"==typeof a&&a>0?function(e,t,n){if(!e)return null;const r={...e,...e.breadcrumbs&&{breadcrumbs:e.breadcrumbs.map((e=>({...e,...e.data&&{data:Mt(e.data,t,n)}})))},...e.user&&{user:Mt(e.user,t,n)},...e.contexts&&{contexts:Mt(e.contexts,t,n)},...e.extra&&{extra:Mt(e.extra,t,n)}};e.contexts&&e.contexts.trace&&r.contexts&&(r.contexts.trace=e.contexts.trace,e.contexts.trace.data&&(r.contexts.trace.data=Mt(e.contexts.trace.data,t,n)));e.spans&&(r.spans=e.spans.map((e=>({...e,...e.data&&{data:Mt(e.data,t,n)}}))));return r}(e,a,s):e)))}const jn=new WeakMap;function Ln(e){if(e)return function(e){return e instanceof on||\"function\"==typeof e}(e)||function(e){return Object.keys(e).some((e=>xn.includes(e)))}(e)?{captureContext:e}:e}const xn=[\"user\",\"level\",\"extra\",\"contexts\",\"tags\",\"fingerprint\",\"requestSession\",\"propagationContext\"];function In(e,t){return pn().captureEvent(e,t)}function Dn(e,t){return n={sentry_key:e.publicKey,sentry_version:\"7\",...t&&{sentry_client:`${t.name}/${t.version}`}},Object.keys(n).map((e=>`${encodeURIComponent(e)}=${encodeURIComponent(n[e])}`)).join(\"&\");var n}const Nn=[];function Fn(e,t){for(const n of t)n&&n.afterAllSetup&&n.afterAllSetup(e)}function Rn(e,t,n){if(n[t.name])Yt&&Le.log(`Integration skipped because it was already installed: ${t.name}`);else{if(n[t.name]=t,-1===Nn.indexOf(t.name)&&\"function\"==typeof t.setupOnce&&(t.setupOnce(),Nn.push(t.name)),t.setup&&\"function\"==typeof t.setup&&t.setup(e),\"function\"==typeof t.preprocessEvent){const n=t.preprocessEvent.bind(t);e.on(\"preprocessEvent\",((t,r)=>n(t,r,e)))}if(\"function\"==typeof t.processEvent){const n=t.processEvent.bind(t),r=Object.assign(((t,r)=>n(t,r,e)),{id:t.name});e.addEventProcessor(r)}Yt&&Le.log(`Integration installed: ${t.name}`)}}const Bn=\"Not capturing exception because it's already been captured.\";class Un{constructor(e){if(this._options=e,this._integrations={},this._numProcessing=0,this._outcomes={},this._hooks={},this._eventProcessors=[],e.dsn?this._dsn=Ne(e.dsn):Yt&&Le.warn(\"No DSN provided, client will not send events.\"),this._dsn){const i=(t=this._dsn,n=e.tunnel,r=e._metadata?e._metadata.sdk:void 0,n||`${function(e){return`${function(e){const t=e.protocol?`${e.protocol}:`:\"\",n=e.port?`:${e.port}`:\"\";return`${t}//${e.host}${n}${e.path?`/${e.path}`:\"\"}/api/`}(e)}${e.projectId}/envelope/`}(t)}?${Dn(t,r)}`);this._transport=e.transport({tunnel:this._options.tunnel,recordDroppedEvent:this.recordDroppedEvent.bind(this),...e.transportOptions,url:i})}var t,n,r}captureException(e,t,n){const r=yt();if(St(e))return Yt&&Le.log(Bn),r;const i={event_id:r,...t};return this._process(this.eventFromException(e,i).then((e=>this._captureEvent(e,i,n)))),i.event_id}captureMessage(e,t,n,r){const i={event_id:yt(),...n},o=ae(e)?e:String(e),a=se(e)?this.eventFromMessage(o,t,i):this.eventFromException(e,i);return this._process(a.then((e=>this._captureEvent(e,i,r)))),i.event_id}captureEvent(e,t,n){const r=yt();if(t&&t.originalException&&St(t.originalException))return Yt&&Le.log(Bn),r;const i={event_id:r,...t},o=(e.sdkProcessingMetadata||{}).capturedSpanScope;return this._process(this._captureEvent(e,i,o||n)),i.event_id}captureSession(e){\"string\"!=typeof e.release?Yt&&Le.warn(\"Discarded session because of missing or non-string release\"):(this.sendSession(e),Zt(e,{init:!1}))}getDsn(){return this._dsn}getOptions(){return this._options}getSdkMetadata(){return this._options._metadata}getTransport(){return this._transport}flush(e){const t=this._transport;return t?(this.emit(\"flush\"),this._isClientDoneProcessing(e).then((n=>t.flush(e).then((e=>n&&e))))):Pt(!0)}close(e){return this.flush(e).then((e=>(this.getOptions().enabled=!1,this.emit(\"close\"),e)))}getEventProcessors(){return this._eventProcessors}addEventProcessor(e){this._eventProcessors.push(e)}init(){(this._isEnabled()||this._options.integrations.some((({name:e})=>e.startsWith(\"Spotlight\"))))&&this._setupIntegrations()}getIntegrationByName(e){return this._integrations[e]}addIntegration(e){const t=this._integrations[e.name];Rn(this,e,this._integrations),t||Fn(this,[e])}sendEvent(e,t={}){this.emit(\"beforeSendEvent\",e,t);let n=Cn(e,this._dsn,this._options._metadata,this._options.tunnel);for(const e of t.attachments||[])n=Bt(n,$t(e));const r=this.sendEnvelope(n);r&&r.then((t=>this.emit(\"afterSendEvent\",e,t)),null)}sendSession(e){const t=function(e,t,n,r){const i=Wt(n);return Rt({sent_at:(new Date).toISOString(),...i&&{sdk:i},...!!r&&t&&{dsn:Ie(t)}},[\"aggregates\"in e?[{type:\"sessions\"},e]:[{type:\"session\"},e.toJSON()]])}(e,this._dsn,this._options._metadata,this._options.tunnel);this.sendEnvelope(t)}recordDroppedEvent(e,t,n){if(this._options.sendClientReports){const r=\"number\"==typeof n?n:1,i=`${e}:${t}`;Yt&&Le.log(`Recording outcome: \"${i}\"${r>1?` (${r} times)`:\"\"}`),this._outcomes[i]=(this._outcomes[i]||0)+r}}on(e,t){const n=this._hooks[e]=this._hooks[e]||[];return n.push(t),()=>{const e=n.indexOf(t);e>-1&&n.splice(e,1)}}emit(e,...t){const n=this._hooks[e];n&&n.forEach((e=>e(...t)))}sendEnvelope(e){return this.emit(\"beforeEnvelope\",e),this._isEnabled()&&this._transport?this._transport.send(e).then(null,(e=>(Yt&&Le.error(\"Error while sending event:\",e),e))):(Yt&&Le.error(\"Transport disabled\"),Pt({}))}_setupIntegrations(){const{integrations:e}=this._options;this._integrations=function(e,t){const n={};return t.forEach((t=>{t&&Rn(e,t,n)})),n}(this,e),Fn(this,e)}_updateSessionFromEvent(e,t){let n=!1,r=!1;const i=t.exception&&t.exception.values;if(i){r=!0;for(const e of i){const t=e.mechanism;if(t&&!1===t.handled){n=!0;break}}}const o=\"ok\"===e.status;(o&&0===e.errors||o&&n)&&(Zt(e,{...n&&{status:\"crashed\"},errors:e.errors||Number(r||n)}),this.captureSession(e))}_isClientDoneProcessing(e){return new At((t=>{let n=0;const r=setInterval((()=>{0==this._numProcessing?(clearInterval(r),t(!0)):(n+=1,e&&n>=e&&(clearInterval(r),t(!1)))}),1)}))}_isEnabled(){return!1!==this.getOptions().enabled&&void 0!==this._transport}_prepareEvent(e,t,n,r=hn()){const i=this.getOptions(),o=Object.keys(this._integrations);return!t.integrations&&o.length>0&&(t.integrations=o),this.emit(\"preprocessEvent\",e,t),e.type||r.setLastEventId(e.event_id||t.event_id),An(i,e,t,n,this,r).then((e=>{if(null===e)return e;const t={...r.getPropagationContext(),...n?n.getPropagationContext():void 0};if(!(e.contexts&&e.contexts.trace)&&t){const{traceId:n,spanId:r,parentSpanId:i,dsc:o}=t;e.contexts={trace:ze({trace_id:n,span_id:r,parent_span_id:i}),...e.contexts};const a=o||Sn(n,this);e.sdkProcessingMetadata={dynamicSamplingContext:a,...e.sdkProcessingMetadata}}return e}))}_captureEvent(e,t={},n){return this._processEvent(e,t,n).then((e=>e.event_id),(e=>{if(Yt){const t=e;\"log\"===t.logLevel?Le.log(t.message):Le.warn(t)}}))}_processEvent(e,t,n){const r=this.getOptions(),{sampleRate:i}=r,o=Jn(e),a=Vn(e),s=e.type||\"error\",c=`before send for type \\`${s}\\``,l=void 0===i?void 0:function(e){if(\"boolean\"==typeof e)return Number(e);const t=\"string\"==typeof e?parseFloat(e):e;if(!(\"number\"!=typeof t||isNaN(t)||t<0||t>1))return t;Yt&&Le.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(e)} of type ${JSON.stringify(typeof e)}.`)}(i);if(a&&\"number\"==typeof l&&Math.random()>l)return this.recordDroppedEvent(\"sample_rate\",\"error\",e),Ot(new Fe(`Discarding event because it's not included in the random sample (sampling rate = ${i})`,\"log\"));const u=\"replay_event\"===s?\"replay\":s,d=(e.sdkProcessingMetadata||{}).capturedSpanIsolationScope;return this._prepareEvent(e,t,n,d).then((n=>{if(null===n)throw this.recordDroppedEvent(\"event_processor\",u,e),new Fe(\"An event processor returned `null`, will not send event.\",\"log\");if(t.data&&!0===t.data.__sentry__)return n;const i=function(e,t,n,r){const{beforeSend:i,beforeSendTransaction:o,beforeSendSpan:a}=t;if(Vn(n)&&i)return i(n,r);if(Jn(n)){if(n.spans&&a){const t=[];for(const r of n.spans){const n=a(r);n?t.push(n):e.recordDroppedEvent(\"before_send\",\"span\")}n.spans=t}if(o){if(n.spans){const e=n.spans.length;n.sdkProcessingMetadata={...n.sdkProcessingMetadata,spanCountBeforeProcessing:e}}return o(n,r)}}return n}(this,r,n,t);return function(e,t){const n=`${t} must return \\`null\\` or a valid event.`;if(ue(e))return e.then((e=>{if(!ce(e)&&null!==e)throw new Fe(n);return e}),(e=>{throw new Fe(`${t} rejected with ${e}`)}));if(!ce(e)&&null!==e)throw new Fe(n);return e}(i,c)})).then((r=>{if(null===r){if(this.recordDroppedEvent(\"before_send\",u,e),o){const t=1+(e.spans||[]).length;this.recordDroppedEvent(\"before_send\",\"span\",t)}throw new Fe(`${c} returned \\`null\\`, will not send event.`,\"log\")}const i=n&&n.getSession();if(!o&&i&&this._updateSessionFromEvent(i,r),o){const e=(r.sdkProcessingMetadata&&r.sdkProcessingMetadata.spanCountBeforeProcessing||0)-(r.spans?r.spans.length:0);e>0&&this.recordDroppedEvent(\"before_send\",\"span\",e)}const a=r.transaction_info;if(o&&a&&r.transaction!==e.transaction){const e=\"custom\";r.transaction_info={...a,source:e}}return this.sendEvent(r,t),r})).then(null,(e=>{if(e instanceof Fe)throw e;throw this.captureException(e,{data:{__sentry__:!0},originalException:e}),new Fe(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${e}`)}))}_process(e){this._numProcessing++,e.then((e=>(this._numProcessing--,e)),(e=>(this._numProcessing--,e)))}_clearOutcomes(){const e=this._outcomes;return this._outcomes={},Object.entries(e).map((([e,t])=>{const[n,r]=e.split(\":\");return{reason:n,category:r,quantity:t}}))}_flushOutcomes(){Yt&&Le.log(\"Flushing outcomes...\");const e=this._clearOutcomes();if(0===e.length)return void(Yt&&Le.log(\"No outcomes to send\"));if(!this._dsn)return void(Yt&&Le.log(\"No dsn provided, will not send outcomes\"));Yt&&Le.log(\"Sending outcomes:\",e);const t=(n=e,Rt((r=this._options.tunnel&&Ie(this._dsn))?{dsn:r}:{},[[{type:\"client_report\"},{timestamp:i||lt(),discarded_events:n}]]));var n,r,i;this.sendEnvelope(t)}}function Vn(e){return void 0===e.type}function Jn(e){return\"transaction\"===e.type}function $n(e,t,n=jt(e.bufferSize||64)){let r={};return{send:function(i){const o=[];if(Ut(i,((t,n)=>{const i=zt(n);if(function(e,t,n=Date.now()){return function(e,t){return e[t]||e.all||0}(e,t)>n}(r,i)){const r=qn(t,n);e.recordDroppedEvent(\"ratelimit_backoff\",i,r)}else o.push(t)})),0===o.length)return Pt({});const a=Rt(i[0],o),s=t=>{Ut(a,((n,r)=>{const i=qn(n,r);e.recordDroppedEvent(t,zt(r),i)}))};return n.add((()=>t({body:Jt(a)}).then((e=>(void 0!==e.statusCode&&(e.statusCode<200||e.statusCode>=300)&&Yt&&Le.warn(`Sentry responded with status code ${e.statusCode} to sent event.`),r=Ht(r,e),e)),(e=>{throw s(\"network_error\"),e})))).then((e=>e),(e=>{if(e instanceof Fe)return Yt&&Le.error(\"Skipped sending event because buffer is full.\"),s(\"queue_overflow\"),Pt({});throw e}))},flush:e=>n.drain(e)}}function qn(e,t){if(\"event\"===t||\"transaction\"===t)return Array.isArray(e)?e[1]:void 0}const zn=100;function Wn(e,t){const n=fn(),r=hn();if(!n)return;const{beforeBreadcrumb:i=null,maxBreadcrumbs:o=zn}=n.getOptions();if(o<=0)return;const a={timestamp:lt(),...e},s=i?je((()=>i(a,t))):a;null!==s&&(n.emit&&n.emit(\"beforeAddBreadcrumb\",s,t),r.addBreadcrumb(s,o))}let Hn;const Gn=new WeakMap,Qn=()=>({name:\"FunctionToString\",setupOnce(){Hn=Function.prototype.toString;try{Function.prototype.toString=function(...e){const t=Ve(this),n=Gn.has(fn())&&void 0!==t?t:this;return Hn.apply(n,e)}}catch(e){}},setup(e){Gn.set(e,!0)}}),Yn=[/^Script error\\.?$/,/^Javascript error: Script error\\.? on line 0$/,/^ResizeObserver loop completed with undelivered notifications.$/,/^Cannot redefine property: googletag$/,\"undefined is not an object (evaluating 'a.L')\",'can\\'t redefine non-configurable property \"solana\"',\"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\",\"Can't find variable: _AutofillCallbackHandler\"],Kn=(e={})=>({name:\"InboundFilters\",processEvent(t,n,r){const i=r.getOptions(),o=function(e={},t={}){return{allowUrls:[...e.allowUrls||[],...t.allowUrls||[]],denyUrls:[...e.denyUrls||[],...t.denyUrls||[]],ignoreErrors:[...e.ignoreErrors||[],...t.ignoreErrors||[],...e.disableErrorDefaults?[]:Yn],ignoreTransactions:[...e.ignoreTransactions||[],...t.ignoreTransactions||[]],ignoreInternal:void 0===e.ignoreInternal||e.ignoreInternal}}(e,i);return function(e,t){if(t.ignoreInternal&&function(e){try{return\"SentryError\"===e.exception.values[0].type}catch(e){}return!1}(e))return Yt&&Le.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${bt(e)}`),!0;if(function(e,t){if(e.type||!t||!t.length)return!1;return function(e){const t=[];e.message&&t.push(e.message);let n;try{n=e.exception.values[e.exception.values.length-1]}catch(e){}n&&n.value&&(t.push(n.value),n.type&&t.push(`${n.type}: ${n.value}`));return t}(e).some((e=>ge(e,t)))}(e,t.ignoreErrors))return Yt&&Le.warn(`Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${bt(e)}`),!0;if(function(e){if(e.type)return!1;if(!e.exception||!e.exception.values||0===e.exception.values.length)return!1;return!e.message&&!e.exception.values.some((e=>e.stacktrace||e.type&&\"Error\"!==e.type||e.value))}(e))return Yt&&Le.warn(`Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${bt(e)}`),!0;if(function(e,t){if(\"transaction\"!==e.type||!t||!t.length)return!1;const n=e.transaction;return!!n&&ge(n,t)}(e,t.ignoreTransactions))return Yt&&Le.warn(`Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${bt(e)}`),!0;if(function(e,t){if(!t||!t.length)return!1;const n=Xn(e);return!!n&&ge(n,t)}(e,t.denyUrls))return Yt&&Le.warn(`Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${bt(e)}.\\nUrl: ${Xn(e)}`),!0;if(!function(e,t){if(!t||!t.length)return!0;const n=Xn(e);return!n||ge(n,t)}(e,t.allowUrls))return Yt&&Le.warn(`Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${bt(e)}.\\nUrl: ${Xn(e)}`),!0;return!1}(t,o)?null:t}});function Xn(e){try{let t;try{t=e.exception.values[0].stacktrace.frames}catch(e){}return t?function(e=[]){for(let t=e.length-1;t>=0;t--){const n=e[t];if(n&&\"<anonymous>\"!==n.filename&&\"[native code]\"!==n.filename)return n.filename||null}return null}(t):null}catch(t){return Yt&&Le.error(`Cannot extract url for event ${bt(e)}`),null}}const Zn=()=>{let e;return{name:\"Dedupe\",processEvent(t){if(t.type)return t;try{if(function(e,t){if(!t)return!1;if(function(e,t){const n=e.message,r=t.message;if(!n&&!r)return!1;if(n&&!r||!n&&r)return!1;if(n!==r)return!1;if(!tr(e,t))return!1;if(!er(e,t))return!1;return!0}(e,t))return!0;if(function(e,t){const n=nr(t),r=nr(e);if(!n||!r)return!1;if(n.type!==r.type||n.value!==r.value)return!1;if(!tr(e,t))return!1;if(!er(e,t))return!1;return!0}(e,t))return!0;return!1}(t,e))return Yt&&Le.warn(\"Event dropped due to being a duplicate of previously captured event.\"),null}catch(e){}return e=t}}};function er(e,t){let n=Ze(e),r=Ze(t);if(!n&&!r)return!0;if(n&&!r||!n&&r)return!1;if(r.length!==n.length)return!1;for(let e=0;e<r.length;e++){const t=r[e],i=n[e];if(t.filename!==i.filename||t.lineno!==i.lineno||t.colno!==i.colno||t.function!==i.function)return!1}return!0}function tr(e,t){let n=e.fingerprint,r=t.fingerprint;if(!n&&!r)return!0;if(n&&!r||!n&&r)return!1;try{return!(n.join(\"\")!==r.join(\"\"))}catch(e){return!1}}function nr(e){return e.exception&&e.exception.values&&e.exception.values[0]}const rr=Se;let ir=0;function or(){return ir>0}function ar(e,t={},n){if(\"function\"!=typeof e)return e;try{const t=e.__sentry_wrapped__;if(t)return\"function\"==typeof t?t:e;if(Ve(e))return e}catch(t){return e}const r=function(){const r=Array.prototype.slice.call(arguments);try{n&&\"function\"==typeof n&&n.apply(this,arguments);const i=r.map((e=>ar(e,t)));return e.apply(this,i)}catch(e){throw ir++,setTimeout((()=>{ir--})),function(...e){const t=dn(Kt());if(2===e.length){const[n,r]=e;return n?t.withSetScope(n,r):t.withScope(r)}t.withScope(e[0])}((n=>{var i,o;n.addEventProcessor((e=>(t.mechanism&&(wt(e,void 0,void 0),kt(e,t.mechanism)),e.extra={...e.extra,arguments:r},e))),i=e,pn().captureException(i,Ln(o))})),e}};try{for(const t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t])}catch(e){}Ue(r,e),Be(e,\"__sentry_wrapped__\",r);try{Object.getOwnPropertyDescriptor(r,\"name\").configurable&&Object.defineProperty(r,\"name\",{get:()=>e.name})}catch(e){}return r}const sr=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__;function cr(e,t){const n=dr(e,t),r={type:t&&t.name,value:hr(t)};return n.length&&(r.stacktrace={frames:n}),void 0===r.type&&\"\"===r.value&&(r.value=\"Unrecoverable error caught\"),r}function lr(e,t,n,r){const i=fn(),o=i&&i.getOptions().normalizeDepth,a=function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)){const n=e[t];if(n instanceof Error)return n}return}(t),s={__serialized__:Ct(t,o)};if(a)return{exception:{values:[cr(e,a)]},extra:s};const c={exception:{values:[{type:le(t)?t.constructor.name:r?\"UnhandledRejection\":\"Error\",value:gr(t,{isUnhandledRejection:r})}]},extra:s};if(n){const t=dr(e,n);t.length&&(c.exception.values[0].stacktrace={frames:t})}return c}function ur(e,t){return{exception:{values:[cr(e,t)]}}}function dr(e,t){const n=t.stacktrace||t.stack||\"\",r=function(e){if(e&&pr.test(e.message))return 1;return 0}(t),i=function(e){if(\"number\"==typeof e.framesToPop)return e.framesToPop;return 0}(t);try{return e(n,r,i)}catch(e){}return[]}const pr=/Minified React error #\\d+;/i;function hr(e){const t=e&&e.message;return t?t.error&&\"string\"==typeof t.error.message?t.error.message:t:\"No error message\"}function fr(e,t,n,r,i){let o;if(re(t)&&t.error){return ur(e,t.error)}if(ie(t)||ne(t,\"DOMException\")){const i=t;if(\"stack\"in t)o=ur(e,t);else{const t=i.name||(ie(i)?\"DOMError\":\"DOMException\"),a=i.message?`${t}: ${i.message}`:t;o=vr(e,a,n,r),wt(o,a)}return\"code\"in i&&(o.tags={...o.tags,\"DOMException.code\":`${i.code}`}),o}if(te(t))return ur(e,t);if(ce(t)||le(t)){return o=lr(e,t,n,i),kt(o,{synthetic:!0}),o}return o=vr(e,t,n,r),wt(o,`${t}`,void 0),kt(o,{synthetic:!0}),o}function vr(e,t,n,r){const i={};if(r&&n){const r=dr(e,n);r.length&&(i.exception={values:[{value:t,stacktrace:{frames:r}}]})}if(ae(t)){const{__sentry_template_string__:e,__sentry_template_values__:n}=t;return i.logentry={message:e,params:n},i}return i.message=t,i}function gr(e,{isUnhandledRejection:t}){const n=function(e,t=40){const n=Object.keys(Je(e));n.sort();const r=n[0];if(!r)return\"[object has no keys]\";if(r.length>=t)return he(r,t);for(let e=n.length;e>0;e--){const r=n.slice(0,e).join(\", \");if(!(r.length>t))return e===n.length?r:he(r,t)}return\"\"}(e),r=t?\"promise rejection\":\"exception\";if(re(e))return`Event \\`ErrorEvent\\` captured as ${r} with message \\`${e.message}\\``;if(le(e)){return`Event \\`${function(e){try{const t=Object.getPrototypeOf(e);return t?t.constructor.name:void 0}catch(e){}}(e)}\\` (type=${e.type}) captured as ${r}`}return`Object captured as ${r} with keys: ${n}`}class mr extends Un{constructor(e){const t={parentSpanIsAlwaysRootSpan:!0,...e};!function(e,t,n=[t],r=\"npm\"){const i=e._metadata||{};i.sdk||(i.sdk={name:`sentry.javascript.${t}`,packages:n.map((e=>({name:`${r}:@sentry/${e}`,version:ke}))),version:ke}),e._metadata=i}(t,\"browser\",[\"browser\"],rr.SENTRY_SDK_SOURCE||\"npm\"),super(t),t.sendClientReports&&rr.document&&rr.document.addEventListener(\"visibilitychange\",(()=>{\"hidden\"===rr.document.visibilityState&&this._flushOutcomes()}))}eventFromException(e,t){return function(e,t,n,r){const i=fr(e,t,n&&n.syntheticException||void 0,r);return kt(i),i.level=\"error\",n&&n.event_id&&(i.event_id=n.event_id),Pt(i)}(this._options.stackParser,e,t,this._options.attachStacktrace)}eventFromMessage(e,t=\"info\",n){return function(e,t,n=\"info\",r,i){const o=vr(e,t,r&&r.syntheticException||void 0,i);return o.level=n,r&&r.event_id&&(o.event_id=r.event_id),Pt(o)}(this._options.stackParser,e,t,n,this._options.attachStacktrace)}captureUserFeedback(e){if(!this._isEnabled())return void(sr&&Le.warn(\"SDK not enabled, will not capture user feedback.\"));const t=function(e,{metadata:t,tunnel:n,dsn:r}){const i={event_id:e.event_id,sent_at:(new Date).toISOString(),...t&&t.sdk&&{sdk:{name:t.sdk.name,version:t.sdk.version}},...!!n&&!!r&&{dsn:Ie(r)}},o=function(e){return[{type:\"user_report\"},e]}(e);return Rt(i,[o])}(e,{metadata:this.getSdkMetadata(),dsn:this.getDsn(),tunnel:this.getOptions().tunnel});this.sendEnvelope(t)}_prepareEvent(e,t,n){return e.platform=e.platform||\"javascript\",super._prepareEvent(e,t,n)}}const yr=\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__,_r=Se;let br,wr,kr,Sr;function Mr(){if(!_r.document)return;const e=it.bind(null,\"dom\"),t=Cr(e,!0);_r.document.addEventListener(\"click\",t,!1),_r.document.addEventListener(\"keypress\",t,!1),[\"EventTarget\",\"Node\"].forEach((t=>{const n=_r[t]&&_r[t].prototype;n&&n.hasOwnProperty&&n.hasOwnProperty(\"addEventListener\")&&(Re(n,\"addEventListener\",(function(t){return function(n,r,i){if(\"click\"===n||\"keypress\"==n)try{const r=this,o=r.__sentry_instrumentation_handlers__=r.__sentry_instrumentation_handlers__||{},a=o[n]=o[n]||{refCount:0};if(!a.handler){const r=Cr(e);a.handler=r,t.call(this,n,r,i)}a.refCount++}catch(e){}return t.call(this,n,r,i)}})),Re(n,\"removeEventListener\",(function(e){return function(t,n,r){if(\"click\"===t||\"keypress\"==t)try{const n=this,i=n.__sentry_instrumentation_handlers__||{},o=i[t];o&&(o.refCount--,o.refCount<=0&&(e.call(this,t,o.handler,r),o.handler=void 0,delete i[t]),0===Object.keys(i).length&&delete n.__sentry_instrumentation_handlers__)}catch(e){}return e.call(this,t,n,r)}})))}))}function Cr(e,t=!1){return n=>{if(!n||n._sentryCaptured)return;const r=function(e){try{return e.target}catch(e){return null}}(n);if(function(e,t){return\"keypress\"===e&&(!t||!t.tagName||\"INPUT\"!==t.tagName&&\"TEXTAREA\"!==t.tagName&&!t.isContentEditable)}(n.type,r))return;Be(n,\"_sentryCaptured\",!0),r&&!r._sentryId&&Be(r,\"_sentryId\",yt());const i=\"keypress\"===n.type?\"input\":n.type;if(!function(e){if(e.type!==wr)return!1;try{if(!e.target||e.target._sentryId!==kr)return!1}catch(e){}return!0}(n)){e({event:n,name:i,global:t}),wr=n.type,kr=r?r._sentryId:void 0}clearTimeout(br),br=_r.setTimeout((()=>{kr=void 0,wr=void 0}),1e3)}}function Er(){if(!function(){const e=Qt.chrome,t=e&&e.app&&e.app.runtime,n=\"history\"in Qt&&!!Qt.history.pushState&&!!Qt.history.replaceState;return!t&&n}())return;const e=_r.onpopstate;function t(e){return function(...t){const n=t.length>2?t[2]:void 0;if(n){const e=Sr,t=String(n);Sr=t;it(\"history\",{from:e,to:t})}return e.apply(this,t)}}_r.onpopstate=function(...t){const n=_r.location.href,r=Sr;Sr=n;if(it(\"history\",{from:r,to:n}),e)try{return e.apply(this,t)}catch(e){}},Re(_r.history,\"pushState\",t),Re(_r.history,\"replaceState\",t)}const Tr={};function Pr(e){Tr[e]=void 0}const Or=\"__sentry_xhr_v3__\";function Ar(){if(!_r.XMLHttpRequest)return;const e=XMLHttpRequest.prototype;e.open=new Proxy(e.open,{apply(e,t,n){const r=1e3*ut(),i=oe(n[0])?n[0].toUpperCase():void 0,o=function(e){if(oe(e))return e;try{return e.toString()}catch(e){}return}(n[1]);if(!i||!o)return e.apply(t,n);t[Or]={method:i,url:o,request_headers:{}},\"POST\"===i&&o.match(/sentry_key/)&&(t.__sentry_own_request__=!0);const a=()=>{const e=t[Or];if(e&&4===t.readyState){try{e.status_code=t.status}catch(e){}it(\"xhr\",{endTimestamp:1e3*ut(),startTimestamp:r,xhr:t})}};return\"onreadystatechange\"in t&&\"function\"==typeof t.onreadystatechange?t.onreadystatechange=new Proxy(t.onreadystatechange,{apply:(e,t,n)=>(a(),e.apply(t,n))}):t.addEventListener(\"readystatechange\",a),t.setRequestHeader=new Proxy(t.setRequestHeader,{apply(e,t,n){const[r,i]=n,o=t[Or];return o&&oe(r)&&oe(i)&&(o.request_headers[r.toLowerCase()]=i),e.apply(t,n)}}),e.apply(t,n)}}),e.send=new Proxy(e.send,{apply(e,t,n){const r=t[Or];if(!r)return e.apply(t,n);void 0!==n[0]&&(r.body=n[0]);return it(\"xhr\",{startTimestamp:1e3*ut(),xhr:t}),e.apply(t,n)}})}function jr(e,t=function(e){const t=Tr[e];if(t)return t;let n=_r[e];if(st(n))return Tr[e]=n.bind(_r);const r=_r.document;if(r&&\"function\"==typeof r.createElement)try{const t=r.createElement(\"iframe\");t.hidden=!0,r.head.appendChild(t);const i=t.contentWindow;i&&i[e]&&(n=i[e]),r.head.removeChild(t)}catch(t){yr&&Le.warn(`Could not create sandbox iframe for ${e} check, bailing to window.${e}: `,t)}return n?Tr[e]=n.bind(_r):n}(\"fetch\")){let n=0,r=0;return $n(e,(function(i){const o=i.body.length;n+=o,r++;const a={body:i.body,method:\"POST\",referrerPolicy:\"origin\",headers:e.headers,keepalive:n<=6e4&&r<15,...e.fetchOptions};if(!t)return Pr(\"fetch\"),Ot(\"No fetch implementation available\");try{return t(e.url,a).then((e=>(n-=o,r--,{statusCode:e.status,headers:{\"x-sentry-rate-limits\":e.headers.get(\"X-Sentry-Rate-Limits\"),\"retry-after\":e.headers.get(\"Retry-After\")}})))}catch(e){return Pr(\"fetch\"),n-=o,r--,Ot(e)}}))}function Lr(e,t,n,r){const i={filename:e,function:\"<anonymous>\"===t?He:t,in_app:!0};return void 0!==n&&(i.lineno=n),void 0!==r&&(i.colno=r),i}const xr=/^\\s*at (\\S+?)(?::(\\d+))(?::(\\d+))\\s*$/i,Ir=/^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,Dr=/\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/,Nr=/^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i,Fr=/(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i,Rr=function(...e){const t=e.sort(((e,t)=>e[0]-t[0])).map((e=>e[1]));return(e,n=0,r=0)=>{const i=[],o=e.split(\"\\n\");for(let e=n;e<o.length;e++){const n=o[e];if(n.length>1024)continue;const a=Ge.test(n)?n.replace(Ge,\"$1\"):n;if(!a.match(/\\S*Error: /)){for(const e of t){const t=e(a);if(t){i.push(t);break}}if(i.length>=50+r)break}}return function(e){if(!e.length)return[];const t=Array.from(e);/sentryWrapped/.test(Ye(t).function||\"\")&&t.pop();t.reverse(),Qe.test(Ye(t).function||\"\")&&(t.pop(),Qe.test(Ye(t).function||\"\")&&t.pop());return t.slice(0,50).map((e=>({...e,filename:e.filename||Ye(t).filename,function:e.function||He})))}(i.slice(r))}}(...[[30,e=>{const t=xr.exec(e);if(t){const[,e,n,r]=t;return Lr(e,He,+n,+r)}const n=Ir.exec(e);if(n){if(n[2]&&0===n[2].indexOf(\"eval\")){const e=Dr.exec(n[2]);e&&(n[2]=e[1],n[3]=e[2],n[4]=e[3])}const[e,t]=Br(n[1]||He,n[2]);return Lr(t,e,n[3]?+n[3]:void 0,n[4]?+n[4]:void 0)}}],[50,e=>{const t=Nr.exec(e);if(t){if(t[3]&&t[3].indexOf(\" > eval\")>-1){const e=Fr.exec(t[3]);e&&(t[1]=t[1]||\"eval\",t[3]=e[1],t[4]=e[2],t[5]=\"\")}let e=t[3],n=t[1]||He;return[n,e]=Br(n,e),Lr(e,n,t[4]?+t[4]:void 0,t[5]?+t[5]:void 0)}}]]),Br=(e,t)=>{const n=-1!==e.indexOf(\"safari-extension\"),r=-1!==e.indexOf(\"safari-web-extension\");return n||r?[-1!==e.indexOf(\"@\")?e.split(\"@\")[0]:He,n?`safari-extension:${t}`:`safari-web-extension:${t}`]:[e,t]},Ur=1024,Vr=(e={})=>{const t={console:!0,dom:!0,fetch:!0,history:!0,sentry:!0,xhr:!0,...e};return{name:\"Breadcrumbs\",setup(e){var n;t.console&&function(e){const t=\"console\";nt(t,e),rt(t,ot)}(function(e){return function(t){if(fn()!==e)return;const n={category:\"console\",data:{arguments:t.args,logger:\"console\"},level:It(t.level),message:fe(t.args,\" \")};if(\"assert\"===t.level){if(!1!==t.args[0])return;n.message=`Assertion failed: ${fe(t.args.slice(1),\" \")||\"console.assert\"}`,n.data.arguments=t.args.slice(1)}Wn(n,{input:t.args,level:t.level})}}(e)),t.dom&&(n=function(e,t){return function(n){if(fn()!==e)return;let r,i,o=\"object\"==typeof t?t.serializeAttribute:void 0,a=\"object\"==typeof t&&\"number\"==typeof t.maxStringLength?t.maxStringLength:void 0;a&&a>Ur&&(sr&&Le.warn(`\\`dom.maxStringLength\\` cannot exceed 1024, but a value of ${a} was configured. Sentry will use 1024 instead.`),a=Ur),\"string\"==typeof o&&(o=[o]);try{const e=n.event,t=function(e){return!!e&&!!e.target}(e)?e.target:e;r=Ee(t,{keyAttrs:o,maxStringLength:a}),i=function(e){if(!Ce.HTMLElement)return null;let t=e;for(let e=0;e<5;e++){if(!t)return null;if(t instanceof HTMLElement){if(t.dataset.sentryComponent)return t.dataset.sentryComponent;if(t.dataset.sentryElement)return t.dataset.sentryElement}t=t.parentNode}return null}(t)}catch(e){r=\"<unknown>\"}if(0===r.length)return;const s={category:`ui.${n.name}`,message:r};i&&(s.data={\"ui.component_name\":i}),Wn(s,{event:n.event,name:n.name,global:n.global})}}(e,t.dom),nt(\"dom\",n),rt(\"dom\",Mr)),t.xhr&&function(e){nt(\"xhr\",e),rt(\"xhr\",Ar)}(function(e){return function(t){if(fn()!==e)return;const{startTimestamp:n,endTimestamp:r}=t,i=t.xhr[Or];if(!n||!r||!i)return;const{method:o,url:a,status_code:s,body:c}=i,l={method:o,url:a,status_code:s},u={xhr:t.xhr,input:c,startTimestamp:n,endTimestamp:r};Wn({category:\"xhr\",data:l,type:\"http\",level:we(s)},u)}}(e)),t.fetch&&dt(function(e){return function(t){if(fn()!==e)return;const{startTimestamp:n,endTimestamp:r}=t;if(r&&(!t.fetchData.url.match(/sentry_key/)||\"POST\"!==t.fetchData.method))if(t.error){Wn({category:\"fetch\",data:t.fetchData,level:\"error\",type:\"http\"},{data:t.error,input:t.args,startTimestamp:n,endTimestamp:r})}else{const e=t.response,i={...t.fetchData,status_code:e&&e.status},o={input:t.args,response:e,startTimestamp:n,endTimestamp:r};Wn({category:\"fetch\",data:i,type:\"http\",level:we(i.status_code)},o)}}}(e)),t.history&&function(e){const t=\"history\";nt(t,e),rt(t,Er)}(function(e){return function(t){if(fn()!==e)return;let n=t.from,r=t.to;const i=Lt(rr.location.href);let o=n?Lt(n):void 0;const a=Lt(r);o&&o.path||(o=i),i.protocol===a.protocol&&i.host===a.host&&(r=a.relative),i.protocol===o.protocol&&i.host===o.host&&(n=o.relative),Wn({category:\"navigation\",data:{from:n,to:r}})}}(e)),t.sentry&&e.on(\"beforeSendEvent\",function(e){return function(t){fn()===e&&Wn({category:\"sentry.\"+(\"transaction\"===t.type?\"transaction\":\"event\"),event_id:t.event_id,level:t.level,message:bt(t)},{event:t})}}(e))}}};const Jr=[\"EventTarget\",\"Window\",\"Node\",\"ApplicationCache\",\"AudioTrackList\",\"BroadcastChannel\",\"ChannelMergerNode\",\"CryptoOperation\",\"EventSource\",\"FileReader\",\"HTMLUnknownElement\",\"IDBDatabase\",\"IDBRequest\",\"IDBTransaction\",\"KeyOperation\",\"MediaController\",\"MessagePort\",\"ModalWindow\",\"Notification\",\"SVGElementInstance\",\"Screen\",\"SharedWorker\",\"TextTrack\",\"TextTrackCue\",\"TextTrackList\",\"WebSocket\",\"WebSocketWorker\",\"Worker\",\"XMLHttpRequest\",\"XMLHttpRequestEventTarget\",\"XMLHttpRequestUpload\"],$r=(e={})=>{const t={XMLHttpRequest:!0,eventTarget:!0,requestAnimationFrame:!0,setInterval:!0,setTimeout:!0,...e};return{name:\"BrowserApiErrors\",setupOnce(){t.setTimeout&&Re(rr,\"setTimeout\",qr),t.setInterval&&Re(rr,\"setInterval\",qr),t.requestAnimationFrame&&Re(rr,\"requestAnimationFrame\",zr),t.XMLHttpRequest&&\"XMLHttpRequest\"in rr&&Re(XMLHttpRequest.prototype,\"send\",Wr);const e=t.eventTarget;if(e){(Array.isArray(e)?e:Jr).forEach(Hr)}}}};function qr(e){return function(...t){const n=t[0];return t[0]=ar(n,{mechanism:{data:{function:Xe(e)},handled:!1,type:\"instrument\"}}),e.apply(this,t)}}function zr(e){return function(t){return e.apply(this,[ar(t,{mechanism:{data:{function:\"requestAnimationFrame\",handler:Xe(e)},handled:!1,type:\"instrument\"}})])}}function Wr(e){return function(...t){const n=this;return[\"onload\",\"onerror\",\"onprogress\",\"onreadystatechange\"].forEach((e=>{e in n&&\"function\"==typeof n[e]&&Re(n,e,(function(t){const n={mechanism:{data:{function:e,handler:Xe(t)},handled:!1,type:\"instrument\"}},r=Ve(t);return r&&(n.mechanism.data.handler=Xe(r)),ar(t,n)}))})),e.apply(this,t)}}function Hr(e){const t=rr,n=t[e]&&t[e].prototype;n&&n.hasOwnProperty&&n.hasOwnProperty(\"addEventListener\")&&(Re(n,\"addEventListener\",(function(t){return function(n,r,i){try{\"function\"==typeof r.handleEvent&&(r.handleEvent=ar(r.handleEvent,{mechanism:{data:{function:\"handleEvent\",handler:Xe(r),target:e},handled:!1,type:\"instrument\"}}))}catch(e){}return t.apply(this,[n,ar(r,{mechanism:{data:{function:\"addEventListener\",handler:Xe(r),target:e},handled:!1,type:\"instrument\"}}),i])}})),Re(n,\"removeEventListener\",(function(e){return function(t,n,r){const i=n;try{const n=i&&i.__sentry_wrapped__;n&&e.call(this,t,n,r)}catch(e){}return e.call(this,t,i,r)}})))}const Gr=(e={})=>{const t={onerror:!0,onunhandledrejection:!0,...e};return{name:\"GlobalHandlers\",setupOnce(){Error.stackTraceLimit=50},setup(e){t.onerror&&(!function(e){!function(e){const t=\"error\";nt(t,e),rt(t,vt)}((t=>{const{stackParser:n,attachStacktrace:r}=Yr();if(fn()!==e||or())return;const{msg:i,url:o,line:a,column:s,error:c}=t,l=function(e,t,n,r){const i=e.exception=e.exception||{},o=i.values=i.values||[],a=o[0]=o[0]||{},s=a.stacktrace=a.stacktrace||{},c=s.frames=s.frames||[],l=isNaN(parseInt(r,10))?void 0:r,u=isNaN(parseInt(n,10))?void 0:n,d=oe(t)&&t.length>0?t:function(){try{return Ce.document.location.href}catch(e){return\"\"}}();0===c.length&&c.push({colno:l,filename:d,function:He,in_app:!0,lineno:u});return e}(fr(n,c||i,void 0,r,!1),o,a,s);l.level=\"error\",In(l,{originalException:c,mechanism:{handled:!1,type:\"onerror\"}})}))}(e),Qr(\"onerror\")),t.onunhandledrejection&&(!function(e){!function(e){const t=\"unhandledrejection\";nt(t,e),rt(t,mt)}((t=>{const{stackParser:n,attachStacktrace:r}=Yr();if(fn()!==e||or())return;const i=function(e){if(se(e))return e;try{if(\"reason\"in e)return e.reason;if(\"detail\"in e&&\"reason\"in e.detail)return e.detail.reason}catch(e){}return e}(t),o=se(i)?{exception:{values:[{type:\"UnhandledRejection\",value:`Non-Error promise rejection captured with value: ${String(i)}`}]}}:fr(n,i,void 0,r,!0);o.level=\"error\",In(o,{originalException:i,mechanism:{handled:!1,type:\"onunhandledrejection\"}})}))}(e),Qr(\"onunhandledrejection\"))}}};function Qr(e){sr&&Le.log(`Global Handler attached: ${e}`)}function Yr(){const e=fn();return e&&e.getOptions()||{stackParser:()=>[],attachStacktrace:!1}}const Kr=()=>({name:\"HttpContext\",preprocessEvent(e){if(!rr.navigator&&!rr.location&&!rr.document)return;const t=e.request&&e.request.url||rr.location&&rr.location.href,{referrer:n}=rr.document||{},{userAgent:r}=rr.navigator||{},i={...e.request&&e.request.headers,...n&&{Referer:n},...r&&{\"User-Agent\":r}},o={...e.request,...t&&{url:t},headers:i};e.request=o}}),Xr=(e={})=>{const t=e.limit||5,n=e.key||\"cause\";return{name:\"LinkedErrors\",preprocessEvent(e,r,i){const o=i.getOptions();me(cr,o.stackParser,o.maxValueLength,n,t,e,r)}}};var Zr=\"new\",ei=\"loading\",ti=\"loaded\",ni=\"joining-meeting\",ri=\"joined-meeting\",ii=\"left-meeting\",oi=\"error\",ai=\"blocked\",si=\"off\",ci=\"sendable\",li=\"loading\",ui=\"interrupted\",di=\"playable\",pi=\"unknown\",hi=\"full\",fi=\"lobby\",vi=\"none\",gi=\"base\",mi=\"*\",yi=\"ejected\",_i=\"nbf-room\",bi=\"nbf-token\",wi=\"exp-room\",ki=\"exp-token\",Si=\"no-room\",Mi=\"meeting-full\",Ci=\"end-of-life\",Ei=\"not-allowed\",Ti=\"connection-error\",Pi=\"cam-in-use\",Oi=\"mic-in-use\",Ai=\"cam-mic-in-use\",ji=\"permissions\",Li=\"undefined-mediadevices\",xi=\"not-found\",Ii=\"constraints\",Di=\"unknown\",Ni=\"iframe-ready-for-launch-config\",Fi=\"iframe-launch-config\",Ri=\"theme-updated\",Bi=\"loading\",Ui=\"load-attempt-failed\",Vi=\"loaded\",Ji=\"started-camera\",$i=\"camera-error\",qi=\"joining-meeting\",zi=\"joined-meeting\",Wi=\"left-meeting\",Hi=\"participant-joined\",Gi=\"participant-updated\",Qi=\"participant-left\",Yi=\"participant-counts-updated\",Ki=\"access-state-updated\",Xi=\"meeting-session-summary-updated\",Zi=\"meeting-session-state-updated\",eo=\"meeting-session-data-error\",to=\"waiting-participant-added\",no=\"waiting-participant-updated\",ro=\"waiting-participant-removed\",io=\"track-started\",oo=\"track-stopped\",ao=\"transcription-started\",so=\"transcription-stopped\",co=\"transcription-error\",lo=\"recording-started\",uo=\"recording-stopped\",po=\"recording-stats\",ho=\"recording-error\",fo=\"recording-upload-completed\",vo=\"recording-data\",go=\"app-message\",mo=\"transcription-message\",yo=\"remote-media-player-started\",_o=\"remote-media-player-updated\",bo=\"remote-media-player-stopped\",wo=\"local-screen-share-started\",ko=\"local-screen-share-stopped\",So=\"local-screen-share-canceled\",Mo=\"active-speaker-change\",Co=\"active-speaker-mode-change\",Eo=\"network-quality-change\",To=\"network-connection\",Po=\"cpu-load-change\",Oo=\"face-counts-updated\",Ao=\"fullscreen\",jo=\"exited-fullscreen\",Lo=\"live-streaming-started\",xo=\"live-streaming-updated\",Io=\"live-streaming-stopped\",Do=\"live-streaming-error\",No=\"lang-updated\",Fo=\"receive-settings-updated\",Ro=\"input-settings-updated\",Bo=\"nonfatal-error\",Uo=\"error\",Vo=4096,Jo=102400,$o=\"iframe-call-message\",qo=\"local-screen-start\",zo=\"daily-method-update-live-streaming-endpoints\",Wo=\"transmit-log\",Ho=\"daily-custom-track\",Go={NONE:\"none\",BGBLUR:\"background-blur\",BGIMAGE:\"background-image\",FACE_DETECTION:\"face-detection\"},Qo={NONE:\"none\",NOISE_CANCELLATION:\"noise-cancellation\"},Yo={PLAY:\"play\",PAUSE:\"pause\"},Ko=[\"jpg\",\"png\",\"jpeg\"],Xo=\"add-endpoints\",Zo=\"remove-endpoints\",ea=\"sip-call-transfer\";function ta(){return!na()&&\"undefined\"!=typeof window&&window.navigator&&window.navigator.userAgent?window.navigator.userAgent:\"\"}function na(){return\"undefined\"!=typeof navigator&&navigator.product&&\"ReactNative\"===navigator.product}function ra(){return navigator&&navigator.mediaDevices&&navigator.mediaDevices.getUserMedia}function ia(){return!!(navigator&&navigator.mediaDevices&&navigator.mediaDevices.getDisplayMedia)&&(function(e,t){if(!e||!t)return!0;switch(e){case\"Chrome\":return t.major>=75;case\"Safari\":return RTCRtpTransceiver.prototype.hasOwnProperty(\"currentDirection\")&&!(13===t.major&&0===t.minor&&0===t.point);case\"Firefox\":return t.major>=67}return!0}(pa(),ha())||na())}function oa(){if(na())return!1;if(!document)return!1;var e=document.createElement(\"iframe\");return!!e.requestFullscreen||!!e.webkitRequestFullscreen}var aa=function(){try{var e=document.createElement(\"canvas\"),t=null!=e.getContext(\"webgl2\");return e.remove(),t}catch(e){return!1}}();function sa(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return!na()&&(!!aa&&(e?function(){if(da())return!1;return[\"Chrome\",\"Firefox\"].includes(pa())}():function(){if(da())return!1;var e=pa();if(\"Safari\"===e){var t=ma();if(t.major<15||15===t.major&&t.minor<4)return!1}if(\"Chrome\"===e){return fa().major>=77}if(\"Firefox\"===e){return ya().major>=97}return[\"Chrome\",\"Firefox\",\"Safari\"].includes(e)}()))}function ca(){if(na())return!1;if(ua())return!1;if(\"undefined\"==typeof AudioWorkletNode)return!1;switch(pa()){case\"Chrome\":case\"Firefox\":return!0;case\"Safari\":var e=ha();return e.major>17||17===e.major&&e.minor>=4}return!1}function la(){return ra()&&!function(){var e,t=pa();if(!ta())return!0;switch(t){case\"Chrome\":return(e=fa()).major&&e.major>0&&e.major<75;case\"Firefox\":return(e=ya()).major<91;case\"Safari\":return(e=ma()).major<13||13===e.major&&e.minor<1;default:return!0}}()}function ua(){return ta().match(/Linux; Android/)}function da(){var e,t,n=ta(),r=n.match(/Mac/)&&(!na()&&\"undefined\"!=typeof window&&null!==(e=window)&&void 0!==e&&null!==(t=e.navigator)&&void 0!==t&&t.maxTouchPoints?window.navigator.maxTouchPoints:0)>=5;return!!(n.match(/Mobi/)||n.match(/Android/)||r)||(!!ta().match(/DailyAnd\\//)||void 0)}function pa(){if(\"undefined\"!=typeof window){var e=ta();return va()?\"Safari\":e.indexOf(\"Edge\")>-1?\"Edge\":e.match(/Chrome\\//)?\"Chrome\":e.indexOf(\"Safari\")>-1||ga()?\"Safari\":e.indexOf(\"Firefox\")>-1?\"Firefox\":e.indexOf(\"MSIE\")>-1||e.indexOf(\".NET\")>-1?\"IE\":\"Unknown Browser\"}}function ha(){switch(pa()){case\"Chrome\":return fa();case\"Safari\":return ma();case\"Firefox\":return ya();case\"Edge\":return function(){var e=0,t=0;if(\"undefined\"!=typeof window){var n=ta().match(/Edge\\/(\\d+).(\\d+)/);if(n)try{e=parseInt(n[1]),t=parseInt(n[2])}catch(e){}}return{major:e,minor:t}}()}}function fa(){var e=0,t=0,n=0,r=0,i=!1;if(\"undefined\"!=typeof window){var o=ta(),a=o.match(/Chrome\\/(\\d+).(\\d+).(\\d+).(\\d+)/);if(a)try{e=parseInt(a[1]),t=parseInt(a[2]),n=parseInt(a[3]),r=parseInt(a[4]),i=o.indexOf(\"OPR/\")>-1}catch(e){}}return{major:e,minor:t,build:n,patch:r,opera:i}}function va(){return!!ta().match(/iPad|iPhone|iPod/i)&&ra()}function ga(){return ta().indexOf(\"AppleWebKit/605.1.15\")>-1}function ma(){var e=0,t=0,n=0;if(\"undefined\"!=typeof window){var r=ta().match(/Version\\/(\\d+).(\\d+)(.(\\d+))?/);if(r)try{e=parseInt(r[1]),t=parseInt(r[2]),n=parseInt(r[4])}catch(e){}else(va()||ga())&&(e=14,t=0,n=3)}return{major:e,minor:t,point:n}}function ya(){var e=0,t=0;if(\"undefined\"!=typeof window){var n=ta().match(/Firefox\\/(\\d+).(\\d+)/);if(n)try{e=parseInt(n[1]),t=parseInt(n[2])}catch(e){}}return{major:e,minor:t}}var _a=function(){function e(){t(this,e)}return o(e,[{key:\"addListenerForMessagesFromCallMachine\",value:function(e,t,n){Y()}},{key:\"addListenerForMessagesFromDailyJs\",value:function(e,t,n){Y()}},{key:\"sendMessageToCallMachine\",value:function(e,t,n,r){Y()}},{key:\"sendMessageToDailyJs\",value:function(e,t){Y()}},{key:\"removeListener\",value:function(e){Y()}}]),e}();function ba(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function wa(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ba(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ba(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ka(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var i=u(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return l(this,n)}}var Sa=function(){c(n,_a);var e=ka(n);function n(){var r;return t(this,n),(r=e.call(this))._wrappedListeners={},r._messageCallbacks={},r}return o(n,[{key:\"addListenerForMessagesFromCallMachine\",value:function(e,t,n){var r=this,i=function(i){if(i.data&&\"iframe-call-message\"===i.data.what&&(!i.data.callClientId||i.data.callClientId===t)&&(!i.data.from||\"module\"!==i.data.from)){var o=wa({},i.data);if(delete o.from,o.callbackStamp&&r._messageCallbacks[o.callbackStamp]){var a=o.callbackStamp;r._messageCallbacks[a].call(n,o),delete r._messageCallbacks[a]}delete o.what,delete o.callbackStamp,e.call(n,o)}};this._wrappedListeners[e]=i,window.addEventListener(\"message\",i)}},{key:\"addListenerForMessagesFromDailyJs\",value:function(e,t,n){var r=function(r){var i;if(!(!r.data||r.data.what!==$o||!r.data.action||r.data.from&&\"module\"!==r.data.from||r.data.callClientId&&t&&r.data.callClientId!==t||null!=r&&null!==(i=r.data)&&void 0!==i&&i.callFrameId)){var o=r.data;e.call(n,o)}};this._wrappedListeners[e]=r,window.addEventListener(\"message\",r)}},{key:\"sendMessageToCallMachine\",value:function(e,t,n,r){if(!n)throw new Error(\"undefined callClientId. Are you trying to use a DailyCall instance previously destroyed?\");var i=wa({},e);if(i.what=$o,i.from=\"module\",i.callClientId=n,t){var o=Q();this._messageCallbacks[o]=t,i.callbackStamp=o}var a=r?r.contentWindow:window,s=this._callMachineTargetOrigin(r);s&&a.postMessage(i,s)}},{key:\"sendMessageToDailyJs\",value:function(e,t){e.what=$o,e.callClientId=t,e.from=\"embedded\",window.postMessage(e,this._targetOriginFromWindowLocation())}},{key:\"removeListener\",value:function(e){var t=this._wrappedListeners[e];t&&(window.removeEventListener(\"message\",t),delete this._wrappedListeners[e])}},{key:\"forwardPackagedMessageToCallMachine\",value:function(e,t,n){var r=wa({},e);r.callClientId=n;var i=t?t.contentWindow:window,o=this._callMachineTargetOrigin(t);o&&i.postMessage(r,o)}},{key:\"addListenerForPackagedMessagesFromCallMachine\",value:function(e,t){var n=function(n){if(n.data&&\"iframe-call-message\"===n.data.what&&(!n.data.callClientId||n.data.callClientId===t)&&(!n.data.from||\"module\"!==n.data.from)){var r=n.data;e(r)}};return this._wrappedListeners[e]=n,window.addEventListener(\"message\",n),e}},{key:\"removeListenerForPackagedMessagesFromCallMachine\",value:function(e){var t=this._wrappedListeners[e];t&&(window.removeEventListener(\"message\",t),delete this._wrappedListeners[e])}},{key:\"_callMachineTargetOrigin\",value:function(e){return e?e.src?new URL(e.src).origin:void 0:this._targetOriginFromWindowLocation()}},{key:\"_targetOriginFromWindowLocation\",value:function(){return\"file:\"===window.location.protocol?\"*\":window.location.origin}}]),n}();function Ma(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ca(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var i=u(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return l(this,n)}}var Ea=function(){c(n,_a);var e=Ca(n);function n(){var r;return t(this,n),r=e.call(this),__webpack_require__.g.callMachineToDailyJsEmitter=__webpack_require__.g.callMachineToDailyJsEmitter||new m.EventEmitter,__webpack_require__.g.dailyJsToCallMachineEmitter=__webpack_require__.g.dailyJsToCallMachineEmitter||new m.EventEmitter,r._wrappedListeners={},r._messageCallbacks={},r}return o(n,[{key:\"addListenerForMessagesFromCallMachine\",value:function(e,t,n){this._addListener(e,__webpack_require__.g.callMachineToDailyJsEmitter,t,n,\"received call machine message\")}},{key:\"addListenerForMessagesFromDailyJs\",value:function(e,t,n){this._addListener(e,__webpack_require__.g.dailyJsToCallMachineEmitter,t,n,\"received daily-js message\")}},{key:\"sendMessageToCallMachine\",value:function(e,t,n){this._sendMessage(e,__webpack_require__.g.dailyJsToCallMachineEmitter,n,t,\"sending message to call machine\")}},{key:\"sendMessageToDailyJs\",value:function(e,t){this._sendMessage(e,__webpack_require__.g.callMachineToDailyJsEmitter,t,null,\"sending message to daily-js\")}},{key:\"removeListener\",value:function(e){var t=this._wrappedListeners[e];t&&(__webpack_require__.g.callMachineToDailyJsEmitter.removeListener(\"message\",t),__webpack_require__.g.dailyJsToCallMachineEmitter.removeListener(\"message\",t),delete this._wrappedListeners[e])}},{key:\"_addListener\",value:function(e,t,n,r,i){var o=this,a=function(t){if(t.callClientId===n){if(t.callbackStamp&&o._messageCallbacks[t.callbackStamp]){var i=t.callbackStamp;o._messageCallbacks[i].call(r,t),delete o._messageCallbacks[i]}e.call(r,t)}};this._wrappedListeners[e]=a,t.addListener(\"message\",a)}},{key:\"_sendMessage\",value:function(e,t,n,r,i){var o=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ma(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ma(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e);if(o.callClientId=n,r){var a=Q();this._messageCallbacks[a]=r,o.callbackStamp=a}t.emit(\"message\",o)}}]),n}(),Ta=\"replace\",Pa=\"shallow-merge\",Oa=[Ta,Pa];var Aa=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=n.data,i=n.mergeStrategy,o=void 0===i?Ta:i;t(this,e),e._validateMergeStrategy(o),e._validateData(r,o),this.mergeStrategy=o,this.data=r}return o(e,[{key:\"isNoOp\",value:function(){return e.isNoOpUpdate(this.data,this.mergeStrategy)}}],[{key:\"isNoOpUpdate\",value:function(e,t){return 0===Object.keys(e).length&&t===Pa}},{key:\"_validateMergeStrategy\",value:function(e){if(!Oa.includes(e))throw Error(\"Unrecognized mergeStrategy provided. Options are: [\".concat(Oa,\"]\"))}},{key:\"_validateData\",value:function(e,t){if(!function(e){if(null==e||\"object\"!==n(e))return!1;var t=Object.getPrototypeOf(e);return null==t||t===Object.prototype}(e))throw Error(\"Meeting session data must be a plain (map-like) object\");var r;try{if(r=JSON.stringify(e),t===Ta){var i=JSON.parse(r);D(i,e)||console.warn(\"The meeting session data provided will be modified when serialized.\",i,e)}else if(t===Pa)for(var o in e)if(Object.hasOwnProperty.call(e,o)&&void 0!==e[o]){var a=JSON.parse(JSON.stringify(e[o]));D(e[o],a)||console.warn(\"At least one key in the meeting session data provided will be modified when serialized.\",a,e[o])}}catch(e){throw Error(\"Meeting session data must be serializable to JSON: \".concat(e))}if(r.length>Jo)throw Error(\"Meeting session data is too large (\".concat(r.length,\" characters). Maximum size suppported is \").concat(Jo,\".\"))}}]),e}();function ja(e,t,n){return ja=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var i=new(Function.bind.apply(e,r));return n&&s(i,n.prototype),i},ja.apply(null,arguments)}function La(e){var t=\"function\"==typeof Map?new Map:void 0;return La=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf(\"[native code]\")))return e;var n;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return ja(e,arguments,u(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),s(r,e)},La(e)}function xa(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var i=u(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return l(this,n)}}function Ia(e){var t,n=null===(t=window._daily)||void 0===t?void 0:t.pendings;if(n){var r=n.indexOf(e);-1!==r&&n.splice(r,1)}}var Da=function(){function e(n){t(this,e),this._currentLoad=null,this._callClientId=n}return o(e,[{key:\"load\",value:function(){var e,t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0,i=arguments.length>2?arguments[2]:void 0;if(this.loaded)return window._daily.instances[this._callClientId].callMachine.reset(),void r(!0);e=this._callClientId,window._daily.pendings.push(e),this._currentLoad&&this._currentLoad.cancel(),this._currentLoad=new Na(n,(function(){r(!1)}),(function(e,n){n||Ia(t._callClientId),i(e,n)})),this._currentLoad.start()}},{key:\"cancel\",value:function(){this._currentLoad&&this._currentLoad.cancel(),Ia(this._callClientId)}},{key:\"loaded\",get:function(){return this._currentLoad&&this._currentLoad.succeeded}}]),e}(),Na=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0,i=arguments.length>2?arguments[2]:void 0;t(this,e),this._attemptsRemaining=3,this._currentAttempt=null,this._dailyConfig=n,this._successCallback=r,this._failureCallback=i}return o(e,[{key:\"start\",value:function(){var e=this;if(!this._currentAttempt){this._currentAttempt=new Ba(this._dailyConfig,this._successCallback,(function t(n){e._currentAttempt.cancelled||(e._attemptsRemaining--,e._failureCallback(n,e._attemptsRemaining>0),e._attemptsRemaining<=0||setTimeout((function(){e._currentAttempt.cancelled||(e._currentAttempt=new Ba(e._dailyConfig,e._successCallback,t),e._currentAttempt.start())}),3e3))})),this._currentAttempt.start()}}},{key:\"cancel\",value:function(){this._currentAttempt&&this._currentAttempt.cancel()}},{key:\"cancelled\",get:function(){return this._currentAttempt&&this._currentAttempt.cancelled}},{key:\"succeeded\",get:function(){return this._currentAttempt&&this._currentAttempt.succeeded}}]),e}(),Fa=function(){c(n,La(Error));var e=xa(n);function n(){return t(this,n),e.apply(this,arguments)}return o(n)}(),Ra=2e4,Ba=function(){function e(n,r,i){t(this,e),this._loadAttemptImpl=na()||!n.avoidEval?new Ua(n,r,i):new Va(n,r,i)}var n;return o(e,[{key:\"start\",value:(n=h((function*(){return this._loadAttemptImpl.start()})),function(){return n.apply(this,arguments)})},{key:\"cancel\",value:function(){this._loadAttemptImpl.cancel()}},{key:\"cancelled\",get:function(){return this._loadAttemptImpl.cancelled}},{key:\"succeeded\",get:function(){return this._loadAttemptImpl.succeeded}}]),e}(),Ua=function(){function e(n,r,i){t(this,e),this.cancelled=!1,this.succeeded=!1,this._networkTimedOut=!1,this._networkTimeout=null,this._iosCache=\"undefined\"!=typeof iOSCallObjectBundleCache&&iOSCallObjectBundleCache,this._refetchHeaders=null,this._dailyConfig=n,this._successCallback=r,this._failureCallback=i}var n,r,i,a;return o(e,[{key:\"start\",value:(a=h((function*(){var e=X(this._dailyConfig);!(yield this._tryLoadFromIOSCache(e))&&this._loadFromNetwork(e)})),function(){return a.apply(this,arguments)})},{key:\"cancel\",value:function(){clearTimeout(this._networkTimeout),this.cancelled=!0}},{key:\"_tryLoadFromIOSCache\",value:(i=h((function*(e){if(!this._iosCache)return!1;try{var t=yield this._iosCache.get(e);return!!this.cancelled||!!t&&(t.code?(Function('\"use strict\";'+t.code)(),this.succeeded=!0,this._successCallback(),!0):(this._refetchHeaders=t.refetchHeaders,!1))}catch(e){return!1}})),function(e){return i.apply(this,arguments)})},{key:\"_loadFromNetwork\",value:(r=h((function*(e){var t=this;this._networkTimeout=setTimeout((function(){t._networkTimedOut=!0,t._failureCallback({msg:\"Timed out (>\".concat(Ra,\" ms) when loading call object bundle \").concat(e),type:\"timeout\"})}),Ra);try{var n=this._refetchHeaders?{headers:this._refetchHeaders}:{},r=yield fetch(e,n);if(clearTimeout(this._networkTimeout),this.cancelled||this._networkTimedOut)throw new Fa;var i=yield this._getBundleCodeFromResponse(e,r);if(this.cancelled)throw new Fa;Function('\"use strict\";'+i)(),this._iosCache&&this._iosCache.set(e,i,r.headers),this.succeeded=!0,this._successCallback()}catch(t){if(clearTimeout(this._networkTimeout),t instanceof Fa||this.cancelled||this._networkTimedOut)return;this._failureCallback({msg:\"Failed to load call object bundle \".concat(e,\": \").concat(t),type:t.message})}})),function(e){return r.apply(this,arguments)})},{key:\"_getBundleCodeFromResponse\",value:(n=h((function*(e,t){if(t.ok)return yield t.text();if(this._iosCache&&304===t.status)return(yield this._iosCache.renew(e,t.headers)).code;throw new Error(\"Received \".concat(t.status,\" response\"))})),function(e,t){return n.apply(this,arguments)})}]),e}(),Va=function(){function e(n,r,i){t(this,e),this.cancelled=!1,this.succeeded=!1,this._dailyConfig=n,this._successCallback=r,this._failureCallback=i,this._attemptId=Q(),this._networkTimeout=null,this._scriptElement=null}return o(e,[{key:\"start\",value:function(){window._dailyCallMachineLoadWaitlist||(window._dailyCallMachineLoadWaitlist=new Set);var e=X(this._dailyConfig);\"object\"===(\"undefined\"==typeof document?\"undefined\":n(document))?this._startLoading(e):this._failureCallback({msg:\"Call object bundle must be loaded in a DOM/web context\",type:\"missing context\"})}},{key:\"cancel\",value:function(){this._stopLoading(),this.cancelled=!0}},{key:\"_startLoading\",value:function(e){var t=this;this._signUpForCallMachineLoadWaitlist(),this._networkTimeout=setTimeout((function(){t._stopLoading(),t._failureCallback({msg:\"Timed out (>\".concat(Ra,\" ms) when loading call object bundle \").concat(e),type:\"timeout\"})}),Ra);var n=document.getElementsByTagName(\"head\")[0],r=document.createElement(\"script\");this._scriptElement=r,r.onload=function(){t._stopLoading(),t.succeeded=!0,t._successCallback()},r.onerror=function(e){t._stopLoading(),t._failureCallback({msg:\"Failed to load call object bundle \".concat(e.target.src),type:e.message})},r.src=e,n.appendChild(r)}},{key:\"_stopLoading\",value:function(){this._withdrawFromCallMachineLoadWaitlist(),clearTimeout(this._networkTimeout),this._scriptElement&&(this._scriptElement.onload=null,this._scriptElement.onerror=null)}},{key:\"_signUpForCallMachineLoadWaitlist\",value:function(){window._dailyCallMachineLoadWaitlist.add(this._attemptId)}},{key:\"_withdrawFromCallMachineLoadWaitlist\",value:function(){window._dailyCallMachineLoadWaitlist.delete(this._attemptId)}}]),e}(),Ja=function(e,t,n){return!0===za(e.local,t,n)},$a=function(e,t,n){return e.local.streams&&e.local.streams[t]&&e.local.streams[t].stream&&e.local.streams[t].stream[\"get\".concat(\"video\"===n?\"Video\":\"Audio\",\"Tracks\")]()[0]},qa=function(e,t,n,r){var i=Wa(e,t,n,r);return i&&i.pendingTrack},za=function(e,t,n){if(!e)return!1;var r=function(e){switch(e){case\"avatar\":return!0;case\"staged\":return e;default:return!!e}},i=e.public.subscribedTracks;return i&&i[t]?-1===[\"cam-audio\",\"cam-video\",\"screen-video\",\"screen-audio\",\"rmpAudio\",\"rmpVideo\"].indexOf(n)&&i[t].custom?[!0,\"staged\"].includes(i[t].custom)?r(i[t].custom):r(i[t].custom[n]):r(i[t][n]):!i||r(i.ALL)},Wa=function(e,t,n,r){var i=Object.values(e.streams||{}).filter((function(e){return e.participantId===t&&e.type===n&&e.pendingTrack&&e.pendingTrack.kind===r})).sort((function(e,t){return new Date(t.starttime)-new Date(e.starttime)}));return i&&i[0]},Ha=function(e,t){var n=e.local.public.customTracks;if(n&&n[t])return n[t].track};function Ga(e,t){for(var n=t.getState(),r=0,i=[\"cam\",\"screen\"];r<i.length;r++)for(var o=i[r],a=0,s=[\"video\",\"audio\"];a<s.length;a++){var c=s[a],l=\"cam\"===o?c:\"screen\".concat(c.charAt(0).toUpperCase()+c.slice(1)),u=e.tracks[l];if(u){var d=e.local?$a(n,o,c):qa(n,e.session_id,o,c);\"playable\"===u.state&&(u.track=d),u.persistentTrack=d}}}function Qa(e,t){try{var n=t.getState();for(var r in e.tracks)if(!Ya(r)){var i=e.tracks[r].kind;if(i){var o=e.tracks[r];if(o){var a=e.local?Ha(n,r):qa(n,e.session_id,r,i);\"playable\"===o.state&&(e.tracks[r].track=a),o.persistentTrack=a}}else console.error(\"unknown type for custom track\")}}catch(e){console.error(e)}}function Ya(e){return[\"video\",\"audio\",\"screenVideo\",\"screenAudio\"].includes(e)}function Ka(e,t,n){var r=n.getState();if(e.local){if(e.audio)try{e.audioTrack=r.local.streams.cam.stream.getAudioTracks()[0],e.audioTrack||(e.audio=!1)}catch(e){}if(e.video)try{e.videoTrack=r.local.streams.cam.stream.getVideoTracks()[0],e.videoTrack||(e.video=!1)}catch(e){}if(e.screen)try{e.screenVideoTrack=r.local.streams.screen.stream.getVideoTracks()[0],e.screenAudioTrack=r.local.streams.screen.stream.getAudioTracks()[0],e.screenVideoTrack||e.screenAudioTrack||(e.screen=!1)}catch(e){}}else{var i=!0;try{var o=r.participants[e.session_id];o&&o.public&&o.public.rtcType&&\"peer-to-peer\"===o.public.rtcType.impl&&o.private&&![\"connected\",\"completed\"].includes(o.private.peeringState)&&(i=!1)}catch(e){console.error(e)}if(!i)return e.audio=!1,e.audioTrack=!1,e.video=!1,e.videoTrack=!1,e.screen=!1,void(e.screenTrack=!1);try{r.streams;if(e.audio&&Ja(r,e.session_id,\"cam-audio\")){var a=qa(r,e.session_id,\"cam\",\"audio\");a&&(t&&t.audioTrack&&t.audioTrack.id===a.id?e.audioTrack=a:a.muted||(e.audioTrack=a)),e.audioTrack||(e.audio=!1)}if(e.video&&Ja(r,e.session_id,\"cam-video\")){var s=qa(r,e.session_id,\"cam\",\"video\");s&&(t&&t.videoTrack&&t.videoTrack.id===s.id?e.videoTrack=s:s.muted||(e.videoTrack=s)),e.videoTrack||(e.video=!1)}if(e.screen&&Ja(r,e.session_id,\"screen-audio\")){var c=qa(r,e.session_id,\"screen\",\"audio\");c&&(t&&t.screenAudioTrack&&t.screenAudioTrack.id===c.id?e.screenAudioTrack=c:c.muted||(e.screenAudioTrack=c))}if(e.screen&&Ja(r,e.session_id,\"screen-video\")){var l=qa(r,e.session_id,\"screen\",\"video\");l&&(t&&t.screenVideoTrack&&t.screenVideoTrack.id===l.id?e.screenVideoTrack=l:l.muted||(e.screenVideoTrack=l))}e.screenVideoTrack||e.screenAudioTrack||(e.screen=!1)}catch(e){console.error(\"unexpected error matching up tracks\",e)}}}function Xa(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return Za(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Za(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,o=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function Za(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var es=new Map,ts=null;function ns(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return rs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return rs(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,o=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function rs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var is=new Map,os=null;function as(e){cs()?function(e){es.has(e)||(es.set(e,{}),navigator.mediaDevices.enumerateDevices().then((function(t){es.has(e)&&(es.get(e).lastDevicesString=JSON.stringify(t),ts||(ts=function(){var e=h((function*(){var e,t=yield navigator.mediaDevices.enumerateDevices(),n=Xa(es.keys());try{for(n.s();!(e=n.n()).done;){var r=e.value,i=JSON.stringify(t);i!==es.get(r).lastDevicesString&&(es.get(r).lastDevicesString=i,r(t))}}catch(e){n.e(e)}finally{n.f()}}));return function(){return e.apply(this,arguments)}}(),navigator.mediaDevices.addEventListener(\"devicechange\",ts)))})).catch((function(){})))}(e):function(e){is.has(e)||(is.set(e,{}),navigator.mediaDevices.enumerateDevices().then((function(t){is.has(e)&&(is.get(e).lastDevicesString=JSON.stringify(t),os||(os=setInterval(h((function*(){var e,t=yield navigator.mediaDevices.enumerateDevices(),n=ns(is.keys());try{for(n.s();!(e=n.n()).done;){var r=e.value,i=JSON.stringify(t);i!==is.get(r).lastDevicesString&&(is.get(r).lastDevicesString=i,r(t))}}catch(e){n.e(e)}finally{n.f()}})),3e3)))})))}(e)}function ss(e){cs()?function(e){es.has(e)&&(es.delete(e),0===es.size&&ts&&(navigator.mediaDevices.removeEventListener(\"devicechange\",ts),ts=null))}(e):function(e){is.has(e)&&(is.delete(e),0===is.size&&os&&(clearInterval(os),os=null))}(e)}function cs(){var e;return na()||void 0!==(null===(e=navigator.mediaDevices)||void 0===e?void 0:e.ondevicechange)}var ls=new Set;function us(e,t){var n=t.isLocalScreenVideo;return e&&\"live\"===e.readyState&&!function(e,t){return(!t.isLocalScreenVideo||\"Chrome\"!==pa())&&e.muted&&!ls.has(e.id)}(e,{isLocalScreenVideo:n})}var ds=[\"result\"],ps=[\"preserveIframe\"];function hs(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fs(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?hs(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):hs(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function vs(e){var t=function(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=u(e);if(t){var i=u(this).constructor;n=Reflect.construct(r,arguments,i)}else n=r.apply(this,arguments);return l(this,n)}}function gs(e,t){var n=\"undefined\"!=typeof Symbol&&e[Symbol.iterator]||e[\"@@iterator\"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if(\"string\"==typeof e)return ms(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return ms(e,t)}(e))||t&&e&&\"number\"==typeof e.length){n&&(e=n);var r=0,i=function(){};return{s:i,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:i}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,a=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){s=!0,o=e},f:function(){try{a||null==n.return||n.return()}finally{if(s)throw o}}}}function ms(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ys={};var _s=\"video\",bs=\"voice\",ws=na()?{data:{}}:{data:{},topology:\"none\"},ks={present:0,hidden:0},Ss={maxBitrate:{min:1e5,max:25e5},maxFramerate:{min:1,max:30},scaleResolutionDownBy:{min:1,max:8}},Ms=Object.keys(Ss),Cs=[\"state\",\"volume\",\"simulcastEncodings\"],Es={androidInCallNotification:{title:\"string\",subtitle:\"string\",iconName:\"string\",disableForCustomOverride:\"boolean\"},disableAutoDeviceManagement:{audio:\"boolean\",video:\"boolean\"}},Ts={id:{iconPath:\"string\",iconPathDarkMode:\"string\",label:\"string\",tooltip:\"string\",visualState:\"'default' | 'sidebar-open' | 'active'\"}},Ps={id:{allow:\"string\",controlledBy:\"'*' | 'owners' | string[]\",csp:\"string\",iconURL:\"string\",label:\"string\",loading:\"'eager' | 'lazy'\",location:\"'main' | 'sidebar'\",name:\"string\",referrerPolicy:\"string\",sandbox:\"string\",src:\"string\",srcdoc:\"string\",shared:\"string[] | 'owners' | boolean\"}},Os={customIntegrations:{validate:Zs,help:Ks()},customTrayButtons:{validate:Xs,help:\"customTrayButtons should be a dictionary of the type \".concat(JSON.stringify(Ts))},url:{validate:function(e){return\"string\"==typeof e},help:\"url should be a string\"},baseUrl:{validate:function(e){return\"string\"==typeof e},help:\"baseUrl should be a string\"},token:{validate:function(e){return\"string\"==typeof e},help:\"token should be a string\",queryString:\"t\"},dailyConfig:{validate:function(e,t){try{return t.validateDailyConfig(e),!0}catch(e){console.error(\"Failed to validate dailyConfig\",e)}return!1},help:\"Unsupported dailyConfig. Check error logs for detailed info.\"},reactNativeConfig:{validate:function(e){return ec(e,Es)},help:\"reactNativeConfig should look like \".concat(JSON.stringify(Es),\", all fields optional\")},lang:{validate:function(e){return[\"da\",\"de\",\"en-us\",\"en\",\"es\",\"fi\",\"fr\",\"it\",\"jp\",\"ka\",\"nl\",\"no\",\"pl\",\"pt\",\"pt-BR\",\"ru\",\"sv\",\"tr\",\"user\"].includes(e)},help:\"language not supported. Options are: da, de, en-us, en, es, fi, fr, it, jp, ka, nl, no, pl, pt, pt-BR, ru, sv, tr, user\"},userName:!0,userData:{validate:function(e){try{return Js(e),!0}catch(e){return console.error(e),!1}},help:\"invalid userData type provided\"},startVideoOff:!0,startAudioOff:!0,allowLocalVideo:!0,allowLocalAudio:!0,activeSpeakerMode:!0,showLeaveButton:!0,showLocalVideo:!0,showParticipantsBar:!0,showFullscreenButton:!0,showUserNameChangeUI:!0,iframeStyle:!0,customLayout:!0,cssFile:!0,cssText:!0,bodyClass:!0,videoSource:{validate:function(e,t){if(\"boolean\"==typeof e)return t._preloadCache.allowLocalVideo=e,!0;var n;if(e instanceof MediaStreamTrack)t._sharedTracks.videoTrack=e,n={customTrack:Ho};else{if(delete t._sharedTracks.videoTrack,\"string\"!=typeof e)return console.error(\"videoSource must be a MediaStreamTrack, boolean, or a string\"),!1;n={deviceId:e}}return t._updatePreloadCacheInputSettings({video:{settings:n}},!1),!0}},audioSource:{validate:function(e,t){if(\"boolean\"==typeof e)return t._preloadCache.allowLocalAudio=e,!0;var n;if(e instanceof MediaStreamTrack)t._sharedTracks.audioTrack=e,n={customTrack:Ho};else{if(delete t._sharedTracks.audioTrack,\"string\"!=typeof e)return console.error(\"audioSource must be a MediaStreamTrack, boolean, or a string\"),!1;n={deviceId:e}}return t._updatePreloadCacheInputSettings({audio:{settings:n}},!1),!0}},subscribeToTracksAutomatically:{validate:function(e,t){return t._preloadCache.subscribeToTracksAutomatically=e,!0}},theme:{validate:function(e){var t=[\"accent\",\"accentText\",\"background\",\"backgroundAccent\",\"baseText\",\"border\",\"mainAreaBg\",\"mainAreaBgAccent\",\"mainAreaText\",\"supportiveText\"],r=function(e){for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];if(!t.includes(i))return console.error('unsupported color \"'.concat(i,'\". Valid colors: ').concat(t.join(\", \"))),!1;if(!e[i].match(/^#[0-9a-f]{6}|#[0-9a-f]{3}$/i))return console.error(\"\".concat(i,' theme color should be provided in valid hex color format. Received: \"').concat(e[i],'\"')),!1}return!0};return\"object\"===n(e)&&(\"light\"in e&&\"dark\"in e||\"colors\"in e)?\"light\"in e&&\"dark\"in e?\"colors\"in e.light?\"colors\"in e.dark?r(e.light.colors)&&r(e.dark.colors):(console.error('Dark theme is missing \"colors\" property.',e),!1):(console.error('Light theme is missing \"colors\" property.',e),!1):r(e.colors):(console.error('Theme must contain either both \"light\" and \"dark\" properties, or \"colors\".',e),!1)},help:\"unsupported theme configuration. Check error logs for detailed info.\"},layoutConfig:{validate:function(e){if(\"grid\"in e){var t=e.grid;if(\"maxTilesPerPage\"in t){if(!Number.isInteger(t.maxTilesPerPage))return console.error(\"grid.maxTilesPerPage should be an integer. You passed \".concat(t.maxTilesPerPage,\".\")),!1;if(t.maxTilesPerPage>49)return console.error(\"grid.maxTilesPerPage can't be larger than 49 without sacrificing browser performance. Please contact us at https://www.daily.co/contact to talk about your use case.\"),!1}if(\"minTilesPerPage\"in t){if(!Number.isInteger(t.minTilesPerPage))return console.error(\"grid.minTilesPerPage should be an integer. You passed \".concat(t.minTilesPerPage,\".\")),!1;if(t.minTilesPerPage<1)return console.error(\"grid.minTilesPerPage can't be lower than 1.\"),!1;if(\"maxTilesPerPage\"in t&&t.minTilesPerPage>t.maxTilesPerPage)return console.error(\"grid.minTilesPerPage can't be higher than grid.maxTilesPerPage.\"),!1}}return!0},help:\"unsupported layoutConfig. Check error logs for detailed info.\"},receiveSettings:{validate:function(e){return $s(e,{allowAllParticipantsKey:!1})},help:Ys({allowAllParticipantsKey:!1})},sendSettings:{validate:function(e,t){return!!function(e,t){try{return t.validateUpdateSendSettings(e),!0}catch(e){return console.error(\"Failed to validate send settings\",e),!1}}(e,t)&&(t._preloadCache.sendSettings=e,!0)},help:\"Invalid sendSettings provided. Check error logs for detailed info.\"},inputSettings:{validate:function(e,t){var n;return!!qs(e)&&(t._inputSettings||(t._inputSettings={}),zs(e,null===(n=t.properties)||void 0===n?void 0:n.dailyConfig,t._sharedTracks),t._updatePreloadCacheInputSettings(e,!0),!0)},help:Qs()},layout:{validate:function(e){return\"custom-v1\"===e||\"browser\"===e||\"none\"===e},help:'layout may only be set to \"custom-v1\"',queryString:\"layout\"},emb:{queryString:\"emb\"},embHref:{queryString:\"embHref\"},dailyJsVersion:{queryString:\"dailyJsVersion\"},proxy:{queryString:\"proxy\"},strictMode:!0,allowMultipleCallInstances:!0},As={styles:{validate:function(e){for(var t in e)if(\"cam\"!==t&&\"screen\"!==t)return!1;if(e.cam)for(var n in e.cam)if(\"div\"!==n&&\"video\"!==n)return!1;if(e.screen)for(var r in e.screen)if(\"div\"!==r&&\"video\"!==r)return!1;return!0},help:\"styles format should be a subset of: { cam: {div: {}, video: {}}, screen: {div: {}, video: {}} }\"},setSubscribedTracks:{validate:function(e,t){if(t._preloadCache.subscribeToTracksAutomatically)return!1;var n=[!0,!1,\"staged\"];if(n.includes(e)||!na()&&\"avatar\"===e)return!0;var r=[\"audio\",\"video\",\"screenAudio\",\"screenVideo\",\"rmpAudio\",\"rmpVideo\"];return function e(t){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1];for(var o in t)if(\"custom\"===o){if(!n.includes(t[o])&&!e(t[o],!0))return!1}else{var a=!i&&!r.includes(o),s=!n.includes(t[o]);if(a||s)return!1}return!0}(e)},help:\"setSubscribedTracks cannot be used when setSubscribeToTracksAutomatically is enabled, and should be of the form: \"+\"true\".concat(na()?\"\":\" | 'avatar'\",\" | false | 'staged' | { [audio: true|false|'staged'], [video: true|false|'staged'], [screenAudio: true|false|'staged'], [screenVideo: true|false|'staged'] }\")},setAudio:!0,setVideo:!0,setScreenShare:{validate:function(e){return!1===e},help:\"setScreenShare must be false, as it's only meant for stopping remote participants' screen shares\"},eject:!0,updatePermissions:{validate:function(e){for(var t=0,n=Object.entries(e);t<n.length;t++){var r=v(n[t],2),i=r[0],o=r[1];switch(i){case\"hasPresence\":if(\"boolean\"!=typeof o)return!1;break;case\"canSend\":if(o instanceof Set||o instanceof Array||Array.isArray(o)){var a,s=[\"video\",\"audio\",\"screenVideo\",\"screenAudio\",\"customVideo\",\"customAudio\"],c=gs(o);try{for(c.s();!(a=c.n()).done;){var l=a.value;if(!s.includes(l))return!1}}catch(e){c.e(e)}finally{c.f()}}else if(\"boolean\"!=typeof o)return!1;(o instanceof Array||Array.isArray(o))&&(e.canSend=new Set(o));break;case\"canAdmin\":if(o instanceof Set||o instanceof Array||Array.isArray(o)){var u,d=[\"participants\",\"streaming\",\"transcription\"],p=gs(o);try{for(p.s();!(u=p.n()).done;){var h=u.value;if(!d.includes(h))return!1}}catch(e){p.e(e)}finally{p.f()}}else if(\"boolean\"!=typeof o)return!1;(o instanceof Array||Array.isArray(o))&&(e.canAdmin=new Set(o));break;default:return!1}}return!0},help:\"updatePermissions can take hasPresence, canSend, and canAdmin permissions. hasPresence must be a boolean. canSend can be a boolean or an Array or Set of media types (video, audio, screenVideo, screenAudio, customVideo, customAudio). canAdmin can be a boolean or an Array or Set of admin types (participants, streaming, transcription).\"}};Promise.any||(Promise.any=function(){var e=h((function*(e){return new Promise((function(t,n){var r=[];e.forEach((function(i){return Promise.resolve(i).then((function(e){t(e)})).catch((function(t){r.push(t),r.length===e.length&&n(r)}))}))}))}));return function(t){return e.apply(this,arguments)}}());var js=function(){c(ee,m);var r,i,s,l,u,p,f,g,y,_,b,w,k,S,M,C,E,T,P,O,A,j,L,x,I,N,F,R,B,U,V,J,$,q,z,W,H,Y,Z=vs(ee);function ee(e){var n,r,i,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t(this,ee),d(a(r=Z.call(this)),\"startListeningForDeviceChanges\",(function(){as(r.handleDeviceChange)})),d(a(r),\"stopListeningForDeviceChanges\",(function(){ss(r.handleDeviceChange)})),d(a(r),\"handleDeviceChange\",(function(e){e=e.map((function(e){return JSON.parse(JSON.stringify(e))})),r.emitDailyJSEvent({action:\"available-devices-updated\",availableDevices:e})})),d(a(r),\"handleNativeAppStateChange\",function(){var e=h((function*(e){if(\"destroyed\"===e)return console.warn(\"App has been destroyed before leaving the meeting. Cleaning up all the resources!\"),void(yield r.destroy());var t=\"active\"===e;r.disableReactNativeAutoDeviceManagement(\"video\")||(t?r.camUnmutedBeforeLosingNativeActiveState&&r.setLocalVideo(!0):(r.camUnmutedBeforeLosingNativeActiveState=r.localVideo(),r.camUnmutedBeforeLosingNativeActiveState&&r.setLocalVideo(!1)))}));return function(t){return e.apply(this,arguments)}}()),d(a(r),\"handleNativeAudioFocusChange\",(function(e){r.disableReactNativeAutoDeviceManagement(\"audio\")||(r._hasNativeAudioFocus=e,r.toggleParticipantAudioBasedOnNativeAudioFocus(),r._hasNativeAudioFocus?r.micUnmutedBeforeLosingNativeAudioFocus&&r.setLocalAudio(!0):(r.micUnmutedBeforeLosingNativeAudioFocus=r.localAudio(),r.setLocalAudio(!1)))})),d(a(r),\"handleNativeSystemScreenCaptureStop\",(function(){r.stopScreenShare()})),r.strictMode=void 0===o.strictMode||o.strictMode,r.allowMultipleCallInstances=null!==(n=o.allowMultipleCallInstances)&&void 0!==n&&n,Object.keys(ys).length&&(r._logDuplicateInstanceAttempt(),!r.allowMultipleCallInstances)){if(r.strictMode)throw new Error(\"Duplicate DailyIframe instances are not allowed\");console.warn(\"Using strictMode: false to allow multiple call instances is now deprecated. Set `allowMultipleCallInstances: true`\")}if(window._daily||(window._daily={pendings:[],instances:{}}),r.callClientId=Q(),i=a(r),ys[i.callClientId]=i,window._daily.instances[r.callClientId]={},r._sharedTracks={},window._daily.instances[r.callClientId].tracks=r._sharedTracks,o.dailyJsVersion=ee.version(),r._iframe=e,r._callObjectMode=\"none\"===o.layout&&!r._iframe,r._preloadCache={subscribeToTracksAutomatically:!0,outputDeviceId:null,inputSettings:null,sendSettings:null,videoTrackForNetworkConnectivityTest:null,videoTrackForConnectionQualityTest:null},void 0!==o.showLocalVideo?r._callObjectMode?console.error(\"showLocalVideo is not available in call object mode\"):r._showLocalVideo=!!o.showLocalVideo:r._showLocalVideo=!0,void 0!==o.showParticipantsBar?r._callObjectMode?console.error(\"showParticipantsBar is not available in call object mode\"):r._showParticipantsBar=!!o.showParticipantsBar:r._showParticipantsBar=!0,void 0!==o.customIntegrations?r._callObjectMode?console.error(\"customIntegrations is not available in call object mode\"):r._customIntegrations=o.customIntegrations:r._customIntegrations={},void 0!==o.customTrayButtons?r._callObjectMode?console.error(\"customTrayButtons is not available in call object mode\"):r._customTrayButtons=o.customTrayButtons:r._customTrayButtons={},void 0!==o.activeSpeakerMode?r._callObjectMode?console.error(\"activeSpeakerMode is not available in call object mode\"):r._activeSpeakerMode=!!o.activeSpeakerMode:r._activeSpeakerMode=!1,o.receiveSettings?r._callObjectMode?r._receiveSettings=o.receiveSettings:console.error(\"receiveSettings is only available in call object mode\"):r._receiveSettings={},r.validateProperties(o),r.properties=fs({},o),r._inputSettings||(r._inputSettings={}),r._callObjectLoader=r._callObjectMode?new Da(r.callClientId):null,r._callState=Zr,r._isPreparingToJoin=!1,r._accessState={access:pi},r._meetingSessionSummary={},r._finalSummaryOfPrevSession={},r._meetingSessionState=ic(ws,r._callObjectMode),r._nativeInCallAudioMode=_s,r._participants={},r._isScreenSharing=!1,r._participantCounts=ks,r._rmpPlayerState={},r._waitingParticipants={},r._network={threshold:\"good\",quality:100},r._activeSpeaker={},r._localAudioLevel=0,r._isLocalAudioLevelObserverRunning=!1,r._remoteParticipantsAudioLevel={},r._isRemoteParticipantsAudioLevelObserverRunning=!1,r._maxAppMessageSize=Vo,r._messageChannel=na()?new Ea:new Sa,r._iframe&&(r._iframe.requestFullscreen?r._iframe.addEventListener(\"fullscreenchange\",(function(){document.fullscreenElement===r._iframe?(r.emitDailyJSEvent({action:Ao}),r.sendMessageToCallMachine({action:Ao})):(r.emitDailyJSEvent({action:jo}),r.sendMessageToCallMachine({action:jo}))})):r._iframe.webkitRequestFullscreen&&r._iframe.addEventListener(\"webkitfullscreenchange\",(function(){document.webkitFullscreenElement===r._iframe?(r.emitDailyJSEvent({action:Ao}),r.sendMessageToCallMachine({action:Ao})):(r.emitDailyJSEvent({action:jo}),r.sendMessageToCallMachine({action:jo}))}))),na()){var s=r.nativeUtils();s.addAudioFocusChangeListener&&s.removeAudioFocusChangeListener&&s.addAppStateChangeListener&&s.removeAppStateChangeListener&&s.addSystemScreenCaptureStopListener&&s.removeSystemScreenCaptureStopListener||console.warn(\"expected (add|remove)(AudioFocusChange|AppActiveStateChange|SystemScreenCaptureStop)Listener to be available in React Native\"),r._hasNativeAudioFocus=!0,s.addAudioFocusChangeListener(r.handleNativeAudioFocusChange),s.addAppStateChangeListener(r.handleNativeAppStateChange),s.addSystemScreenCaptureStopListener(r.handleNativeSystemScreenCaptureStop)}return r._callObjectMode&&r.startListeningForDeviceChanges(),r._messageChannel.addListenerForMessagesFromCallMachine(r.handleMessageFromCallMachine,r.callClientId,a(r)),r}return o(ee,[{key:\"destroy\",value:(Y=h((function*(){var e,t;try{yield this.leave()}catch(e){}var n=this._iframe;if(n){var r=n.parentElement;r&&r.removeChild(n)}if(this._messageChannel.removeListener(this.handleMessageFromCallMachine),na()){var i=this.nativeUtils();i.removeAudioFocusChangeListener(this.handleNativeAudioFocusChange),i.removeAppStateChangeListener(this.handleNativeAppStateChange),i.removeSystemScreenCaptureStopListener(this.handleNativeSystemScreenCaptureStop)}this._callObjectMode&&this.stopListeningForDeviceChanges(),this.resetMeetingDependentVars(),this._destroyed=!0,this.emitDailyJSEvent({action:\"call-instance-destroyed\"}),delete ys[this.callClientId],(null===(e=window)||void 0===e||null===(t=e._daily)||void 0===t?void 0:t.instances)&&delete window._daily.instances[this.callClientId],this.strictMode&&(this.callClientId=void 0)})),function(){return Y.apply(this,arguments)})},{key:\"isDestroyed\",value:function(){return!!this._destroyed}},{key:\"loadCss\",value:function(e){var t=e.bodyClass,n=e.cssFile,r=e.cssText;return Us(),this.sendMessageToCallMachine({action:\"load-css\",cssFile:this.absoluteUrl(n),bodyClass:t,cssText:r}),this}},{key:\"iframe\",value:function(){return Us(),this._iframe}},{key:\"meetingState\",value:function(){return this._callState}},{key:\"accessState\",value:function(){return Rs(this._callObjectMode,\"accessState()\"),this._accessState}},{key:\"participants\",value:function(){return this._participants}},{key:\"participantCounts\",value:function(){return this._participantCounts}},{key:\"waitingParticipants\",value:function(){return Rs(this._callObjectMode,\"waitingParticipants()\"),this._waitingParticipants}},{key:\"validateParticipantProperties\",value:function(e,t){for(var n in t){if(!As[n])throw new Error(\"unrecognized updateParticipant property \".concat(n));if(As[n].validate&&!As[n].validate(t[n],this,this._participants[e]))throw new Error(As[n].help)}}},{key:\"updateParticipant\",value:function(e,t){return this._participants.local&&this._participants.local.session_id===e&&(e=\"local\"),e&&t&&(this.validateParticipantProperties(e,t),this.sendMessageToCallMachine({action:\"update-participant\",id:e,properties:t})),this}},{key:\"updateParticipants\",value:function(e){var t=this._participants.local&&this._participants.local.session_id;for(var n in e)n===t&&(n=\"local\"),n&&e[n]&&this.validateParticipantProperties(n,e[n]);return this.sendMessageToCallMachine({action:\"update-participants\",participants:e}),this}},{key:\"updateWaitingParticipant\",value:(H=h((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(Rs(this._callObjectMode,\"updateWaitingParticipant()\"),xs(this._callState,\"updateWaitingParticipant()\"),\"string\"!=typeof t||\"object\"!==n(r))throw new Error(\"updateWaitingParticipant() must take an id string and a updates object\");return new Promise((function(n,i){e.sendMessageToCallMachine({action:\"daily-method-update-waiting-participant\",id:t,updates:r},(function(e){e.error&&i(e.error),e.id||i(new Error(\"unknown error in updateWaitingParticipant()\")),n({id:e.id})}))}))})),function(){return H.apply(this,arguments)})},{key:\"updateWaitingParticipants\",value:(W=h((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(Rs(this._callObjectMode,\"updateWaitingParticipants()\"),xs(this._callState,\"updateWaitingParticipants()\"),\"object\"!==n(t))throw new Error(\"updateWaitingParticipants() must take a mapping between ids and update objects\");return new Promise((function(n,r){e.sendMessageToCallMachine({action:\"daily-method-update-waiting-participants\",updatesById:t},(function(e){e.error&&r(e.error),e.ids||r(new Error(\"unknown error in updateWaitingParticipants()\")),n({ids:e.ids})}))}))})),function(){return W.apply(this,arguments)})},{key:\"requestAccess\",value:(z=h((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.access,r=void 0===n?{level:hi}:n,i=t.name,o=void 0===i?\"\":i;return Rs(this._callObjectMode,\"requestAccess()\"),xs(this._callState,\"requestAccess()\"),new Promise((function(t,n){e.sendMessageToCallMachine({action:\"daily-method-request-access\",access:r,name:o},(function(e){e.error&&n(e.error),e.access||n(new Error(\"unknown error in requestAccess()\")),t({access:e.access,granted:e.granted})}))}))})),function(){return z.apply(this,arguments)})},{key:\"localAudio\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.audio.state):null}},{key:\"localVideo\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.video.state):null}},{key:\"setLocalAudio\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return\"forceDiscardTrack\"in t&&(na()?(console.warn(\"forceDiscardTrack option not supported in React Native; ignoring\"),t={}):e&&(console.warn(\"forceDiscardTrack option only supported when calling setLocalAudio(false); ignoring\"),t={})),this.sendMessageToCallMachine({action:\"local-audio\",state:e,options:t}),this}},{key:\"localScreenAudio\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.screenAudio.state):null}},{key:\"localScreenVideo\",value:function(){return this._participants.local?![\"blocked\",\"off\"].includes(this._participants.local.tracks.screenVideo.state):null}},{key:\"updateScreenShare\",value:function(e){if(this._isScreenSharing)return this.sendMessageToCallMachine({action:\"local-screen-update\",options:e}),this;console.warn(\"There is no screen share in progress. Try calling startScreenShare first.\")}},{key:\"setLocalVideo\",value:function(e){return this.sendMessageToCallMachine({action:\"local-video\",state:e}),this}},{key:\"_setAllowLocalAudio\",value:function(e){if(this._preloadCache.allowLocalAudio=e,this._callMachineInitialized)return this.sendMessageToCallMachine({action:\"set-allow-local-audio\",state:e}),this}},{key:\"_setAllowLocalVideo\",value:function(e){if(this._preloadCache.allowLocalVideo=e,this._callMachineInitialized)return this.sendMessageToCallMachine({action:\"set-allow-local-video\",state:e}),this}},{key:\"getReceiveSettings\",value:(q=h((function*(e){var t=this,r=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).showInheritedValues,i=void 0!==r&&r;if(Rs(this._callObjectMode,\"getReceiveSettings()\"),!this._callMachineInitialized)return this._receiveSettings;switch(n(e)){case\"string\":return new Promise((function(n){t.sendMessageToCallMachine({action:\"get-single-participant-receive-settings\",id:e,showInheritedValues:i},(function(e){n(e.receiveSettings)}))}));case\"undefined\":return this._receiveSettings;default:throw new Error('first argument to getReceiveSettings() must be a participant id (or \"base\"), or there should be no arguments')}})),function(e){return q.apply(this,arguments)})},{key:\"updateReceiveSettings\",value:($=h((function*(e){var t=this;if(Rs(this._callObjectMode,\"updateReceiveSettings()\"),!$s(e,{allowAllParticipantsKey:!0}))throw new Error(Ys({allowAllParticipantsKey:!0}));return xs(this._callState,\"updateReceiveSettings()\",\"To specify receive settings earlier, use the receiveSettings config property.\"),new Promise((function(n){t.sendMessageToCallMachine({action:\"update-receive-settings\",receiveSettings:e},(function(e){n({receiveSettings:e.receiveSettings})}))}))})),function(e){return $.apply(this,arguments)})},{key:\"_prepInputSettingsForSharing\",value:function(e,t){if(e){var n={};if(e.audio){var r,i,o,a;e.audio.settings&&(!Object.keys(e.audio.settings).length&&t||(n.audio={settings:fs({},e.audio.settings)})),t&&null!==(r=n.audio)&&void 0!==r&&null!==(i=r.settings)&&void 0!==i&&i.customTrack&&(n.audio.settings={customTrack:this._sharedTracks.audioTrack});var s=\"none\"===(null===(o=e.audio.processor)||void 0===o?void 0:o.type)&&(null===(a=e.audio.processor)||void 0===a?void 0:a._isDefaultWhenNone);if(e.audio.processor&&!s){var c=fs({},e.audio.processor);delete c._isDefaultWhenNone,n.audio=fs(fs({},n.audio),{},{processor:c})}}if(e.video){var l,u,d,p;e.video.settings&&(!Object.keys(e.video.settings).length&&t||(n.video={settings:fs({},e.video.settings)})),t&&null!==(l=n.video)&&void 0!==l&&null!==(u=l.settings)&&void 0!==u&&u.customTrack&&(n.video.settings={customTrack:this._sharedTracks.videoTrack});var h=\"none\"===(null===(d=e.video.processor)||void 0===d?void 0:d.type)&&(null===(p=e.video.processor)||void 0===p?void 0:p._isDefaultWhenNone);if(e.video.processor&&!h){var f=fs({},e.video.processor);delete f._isDefaultWhenNone,n.video=fs(fs({},n.video),{},{processor:f})}}return n}}},{key:\"getInputSettings\",value:function(){var e=this;return Us(),new Promise((function(t){t(e._getInputSettings())}))}},{key:\"_getInputSettings\",value:function(){var e,t,n,r,i,o,a,s,c={processor:{type:\"none\",_isDefaultWhenNone:!0}};this._inputSettings?(e=(null===(n=this._inputSettings)||void 0===n?void 0:n.video)||c,t=(null===(r=this._inputSettings)||void 0===r?void 0:r.audio)||c):(e=(null===(i=this._preloadCache)||void 0===i||null===(o=i.inputSettings)||void 0===o?void 0:o.video)||c,t=(null===(a=this._preloadCache)||void 0===a||null===(s=a.inputSettings)||void 0===s?void 0:s.audio)||c);var l={audio:t,video:e};return this._prepInputSettingsForSharing(l,!0)}},{key:\"_updatePreloadCacheInputSettings\",value:function(e,t){var n=this._inputSettings||{},r={};if(e.video){var i,o,a;if(r.video={},e.video.settings)r.video.settings={},t||e.video.settings.customTrack||null===(a=n.video)||void 0===a||!a.settings?r.video.settings=e.video.settings:r.video.settings=fs(fs({},n.video.settings),e.video.settings),Object.keys(r.video.settings).length||delete r.video.settings;else null!==(i=n.video)&&void 0!==i&&i.settings&&(r.video.settings=n.video.settings);e.video.processor?r.video.processor=e.video.processor:null!==(o=n.video)&&void 0!==o&&o.processor&&(r.video.processor=n.video.processor)}else n.video&&(r.video=n.video);if(e.audio){var s,c,l;if(r.audio={},e.audio.settings)r.audio.settings={},t||e.audio.settings.customTrack||null===(l=n.audio)||void 0===l||!l.settings?r.audio.settings=e.audio.settings:r.audio.settings=fs(fs({},n.audio.settings),e.audio.settings),Object.keys(r.audio.settings).length||delete r.audio.settings;else null!==(s=n.audio)&&void 0!==s&&s.settings&&(r.audio.settings=n.audio.settings);e.audio.processor?r.audio.processor=e.audio.processor:null!==(c=n.audio)&&void 0!==c&&c.processor&&(r.audio.processor=n.audio.processor)}else n.audio&&(r.audio=n.audio);this._maybeUpdateInputSettings(r)}},{key:\"_devicesFromInputSettings\",value:function(e){var t,n,r,i,o=(null==e||null===(t=e.video)||void 0===t||null===(n=t.settings)||void 0===n?void 0:n.deviceId)||null,a=(null==e||null===(r=e.audio)||void 0===r||null===(i=r.settings)||void 0===i?void 0:i.deviceId)||null,s=this._preloadCache.outputDeviceId||null;return{camera:o?{deviceId:o}:{},mic:a?{deviceId:a}:{},speaker:s?{deviceId:s}:{}}}},{key:\"updateInputSettings\",value:(J=h((function*(e){var t=this;return Us(),qs(e)?e.video||e.audio?(zs(e,this.properties.dailyConfig,this._sharedTracks),this._callObjectMode&&!this._callMachineInitialized?(this._updatePreloadCacheInputSettings(e,!0),this._getInputSettings()):new Promise((function(n,r){t.sendMessageToCallMachine({action:\"update-input-settings\",inputSettings:e},(function(i){if(i.error)r(i.error);else{if(i.returnPreloadCache)return t._updatePreloadCacheInputSettings(e,!0),void n(t._getInputSettings());t._maybeUpdateInputSettings(i.inputSettings),n(t._prepInputSettingsForSharing(i.inputSettings,!0))}}))}))):this._getInputSettings():(console.error(Qs()),Promise.reject(Qs()))})),function(e){return J.apply(this,arguments)})},{key:\"setBandwidth\",value:function(e){var t=e.kbs,n=e.trackConstraints;if(Us(),this._callMachineInitialized)return this.sendMessageToCallMachine({action:\"set-bandwidth\",kbs:t,trackConstraints:n}),this}},{key:\"getDailyLang\",value:function(){var e=this;if(Us(),this._callMachineInitialized)return new Promise((function(t){e.sendMessageToCallMachine({action:\"get-daily-lang\"},(function(e){delete e.action,delete e.callbackStamp,t(e)}))}))}},{key:\"setDailyLang\",value:function(e){return Us(),this.sendMessageToCallMachine({action:\"set-daily-lang\",lang:e}),this}},{key:\"setProxyUrl\",value:function(e){return this.sendMessageToCallMachine({action:\"set-proxy-url\",proxyUrl:e}),this}},{key:\"setIceConfig\",value:function(e){return this.sendMessageToCallMachine({action:\"set-ice-config\",iceConfig:e}),this}},{key:\"meetingSessionSummary\",value:function(){return[ii,oi].includes(this._callState)?this._finalSummaryOfPrevSession:this._meetingSessionSummary}},{key:\"getMeetingSession\",value:(V=h((function*(){var e=this;return console.warn(\"getMeetingSession() is deprecated: use meetingSessionSummary(), which will return immediately\"),xs(this._callState,\"getMeetingSession()\"),new Promise((function(t){e.sendMessageToCallMachine({action:\"get-meeting-session\"},(function(e){delete e.action,delete e.callbackStamp,t(e)}))}))})),function(){return V.apply(this,arguments)})},{key:\"meetingSessionState\",value:function(){return xs(this._callState,\"meetingSessionState\"),this._meetingSessionState}},{key:\"setMeetingSessionData\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"replace\";Rs(this._callObjectMode,\"setMeetingSessionData()\"),xs(this._callState,\"setMeetingSessionData\");try{!function(e,t){new Aa({data:e,mergeStrategy:t})}(e,t)}catch(e){throw console.error(e),e}try{this.sendMessageToCallMachine({action:\"set-session-data\",data:e,mergeStrategy:t})}catch(e){throw new Error(\"Error setting meeting session data: \".concat(e))}}},{key:\"setUserName\",value:function(e,t){var n=this;return this.properties.userName=e,new Promise((function(r){n.sendMessageToCallMachine({action:\"set-user-name\",name:null!=e?e:\"\",thisMeetingOnly:na()||!!t&&!!t.thisMeetingOnly},(function(e){delete e.action,delete e.callbackStamp,r(e)}))}))}},{key:\"setUserData\",value:(U=h((function*(e){var t=this;try{Js(e)}catch(e){throw console.error(e),e}if(this.properties.userData=e,this._callMachineInitialized)return new Promise((function(n){try{t.sendMessageToCallMachine({action:\"set-user-data\",userData:e},(function(e){delete e.action,delete e.callbackStamp,n(e)}))}catch(e){throw new Error(\"Error setting user data: \".concat(e))}}))})),function(e){return U.apply(this,arguments)})},{key:\"validateAudioLevelInterval\",value:function(e){if(e&&(e<100||\"number\"!=typeof e))throw new Error(\"The interval must be a number greater than or equal to 100 milliseconds.\")}},{key:\"startLocalAudioLevelObserver\",value:function(e){var t=this;if(\"undefined\"==typeof AudioWorkletNode&&!na())throw new Error(\"startLocalAudioLevelObserver() is not supported on this browser\");if(this.validateAudioLevelInterval(e),this._callMachineInitialized)return this._isLocalAudioLevelObserverRunning=!0,new Promise((function(n,r){t.sendMessageToCallMachine({action:\"start-local-audio-level-observer\",interval:e},(function(e){t._isLocalAudioLevelObserverRunning=!e.error,e.error?r({error:e.error}):n()}))}));this._preloadCache.localAudioLevelObserver={enabled:!0,interval:e}}},{key:\"isLocalAudioLevelObserverRunning\",value:function(){return this._isLocalAudioLevelObserverRunning}},{key:\"stopLocalAudioLevelObserver\",value:function(){this._preloadCache.localAudioLevelObserver=null,this._localAudioLevel=0,this._isLocalAudioLevelObserverRunning=!1,this.sendMessageToCallMachine({action:\"stop-local-audio-level-observer\"})}},{key:\"startRemoteParticipantsAudioLevelObserver\",value:function(e){var t=this;if(this.validateAudioLevelInterval(e),this._callMachineInitialized)return this._isRemoteParticipantsAudioLevelObserverRunning=!0,new Promise((function(n,r){t.sendMessageToCallMachine({action:\"start-remote-participants-audio-level-observer\",interval:e},(function(e){t._isRemoteParticipantsAudioLevelObserverRunning=!e.error,e.error?r({error:e.error}):n()}))}));this._preloadCache.remoteParticipantsAudioLevelObserver={enabled:!0,interval:e}}},{key:\"isRemoteParticipantsAudioLevelObserverRunning\",value:function(){return this._isRemoteParticipantsAudioLevelObserverRunning}},{key:\"stopRemoteParticipantsAudioLevelObserver\",value:function(){this._preloadCache.remoteParticipantsAudioLevelObserver=null,this._remoteParticipantsAudioLevel={},this._isRemoteParticipantsAudioLevelObserverRunning=!1,this.sendMessageToCallMachine({action:\"stop-remote-participants-audio-level-observer\"})}},{key:\"startCamera\",value:(B=h((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(Rs(this._callObjectMode,\"startCamera()\"),Ds(this._callState,this._isPreparingToJoin,\"startCamera()\",\"Did you mean to use setLocalAudio() and/or setLocalVideo() instead?\"),this.needsLoad())try{yield this.load(t)}catch(e){return Promise.reject(e)}else{if(this._didPreAuth){if(t.url&&t.url!==this.properties.url)return console.error(\"url in startCamera() is different than the one used in preAuth()\"),Promise.reject();if(t.token&&t.token!==this.properties.token)return console.error(\"token in startCamera() is different than the one used in preAuth()\"),Promise.reject()}this.validateProperties(t),this.properties=fs(fs({},this.properties),t)}return new Promise((function(t){e._preloadCache.inputSettings=e._prepInputSettingsForSharing(e._inputSettings,!1),e.sendMessageToCallMachine({action:\"start-camera\",properties:Ls(e.properties,e.callClientId),preloadCache:Ls(e._preloadCache,e.callClientId)},(function(e){t({camera:e.camera,mic:e.mic,speaker:e.speaker})}))}))})),function(){return B.apply(this,arguments)})},{key:\"validateCustomTrack\",value:function(e,t,n){if(n&&n.length>50)throw new Error(\"Custom track `trackName` must not be more than 50 characters\");if(t&&\"music\"!==t&&\"speech\"!==t&&!(t instanceof Object))throw new Error(\"Custom track `mode` must be either `music` | `speech` | `DailyMicAudioModeSettings` or `undefined`\");if(!!n&&[\"cam-audio\",\"cam-video\",\"screen-video\",\"screen-audio\",\"rmpAudio\",\"rmpVideo\",\"customVideoDefaults\"].includes(n))throw new Error(\"Custom track `trackName` must not match a track name already used by daily: cam-audio, cam-video, customVideoDefaults, screen-video, screen-audio, rmpAudio, rmpVideo\");if(!(e instanceof MediaStreamTrack))throw new Error(\"Custom tracks provided must be instances of MediaStreamTrack\")}},{key:\"startCustomTrack\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{track:track,mode:mode,trackName:trackName};return Us(),xs(this._callState,\"startCustomTrack()\"),this.validateCustomTrack(t.track,t.mode,t.trackName),new Promise((function(n,r){e._sharedTracks.customTrack=t.track,t.track=Ho,e.sendMessageToCallMachine({action:\"start-custom-track\",properties:t},(function(e){e.error?r({error:e.error}):n(e.mediaTag)}))}))}},{key:\"stopCustomTrack\",value:function(e){var t=this;return Us(),xs(this._callState,\"stopCustomTrack()\"),new Promise((function(n){t.sendMessageToCallMachine({action:\"stop-custom-track\",mediaTag:e},(function(e){n(e.mediaTag)}))}))}},{key:\"setCamera\",value:function(e){var t=this;return Vs(),Ns(this._callMachineInitialized,\"setCamera()\"),new Promise((function(n){t.sendMessageToCallMachine({action:\"set-camera\",cameraDeviceId:e},(function(e){n({device:e.device})}))}))}},{key:\"setAudioDevice\",value:(R=h((function*(e){return Vs(),this.nativeUtils().setAudioDevice(e),{deviceId:yield this.nativeUtils().getAudioDevice()}})),function(e){return R.apply(this,arguments)})},{key:\"cycleCamera\",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Promise((function(n){e.sendMessageToCallMachine({action:\"cycle-camera\",properties:t},(function(e){n({device:e.device})}))}))}},{key:\"cycleMic\",value:function(){var e=this;return Us(),new Promise((function(t){e.sendMessageToCallMachine({action:\"cycle-mic\"},(function(e){t({device:e.device})}))}))}},{key:\"getCameraFacingMode\",value:function(){var e=this;return Vs(),new Promise((function(t){e.sendMessageToCallMachine({action:\"get-camera-facing-mode\"},(function(e){t(e.facingMode)}))}))}},{key:\"setInputDevicesAsync\",value:(F=h((function*(e){var t=this,n=e.audioDeviceId,r=e.videoDeviceId,i=e.audioSource,o=e.videoSource;if(Us(),void 0!==i&&(n=i),void 0!==o&&(r=o),\"boolean\"==typeof n&&(this._setAllowLocalAudio(n),n=void 0),\"boolean\"==typeof r&&(this._setAllowLocalVideo(r),r=void 0),!n&&!r)return yield this.getInputDevices();var a={};return n&&(n instanceof MediaStreamTrack?(this._sharedTracks.audioTrack=n,n=Ho,a.audio={settings:{customTrack:n}}):(delete this._sharedTracks.audioTrack,a.audio={settings:{deviceId:n}})),r&&(r instanceof MediaStreamTrack?(this._sharedTracks.videoTrack=r,r=Ho,a.video={settings:{customTrack:r}}):(delete this._sharedTracks.videoTrack,a.video={settings:{deviceId:r}})),this._callObjectMode&&this.needsLoad()?(this._updatePreloadCacheInputSettings(a,!1),this._devicesFromInputSettings(this._inputSettings)):new Promise((function(e){t.sendMessageToCallMachine({action:\"set-input-devices\",audioDeviceId:n,videoDeviceId:r},(function(n){if(delete n.action,delete n.callbackStamp,n.returnPreloadCache)return t._updatePreloadCacheInputSettings(a,!1),void e(t._devicesFromInputSettings(t._inputSettings));e(n)}))}))})),function(e){return F.apply(this,arguments)})},{key:\"setOutputDeviceAsync\",value:(N=h((function*(e){var t=this,n=e.outputDeviceId;return Us(),n&&(this._preloadCache.outputDeviceId=n),this._callObjectMode&&this.needsLoad()?this._devicesFromInputSettings(this._inputSettings):new Promise((function(e){t.sendMessageToCallMachine({action:\"set-output-device\",outputDeviceId:n},(function(n){delete n.action,delete n.callbackStamp,n.returnPreloadCache?e(t._devicesFromInputSettings(t._inputSettings)):e(n)}))}))})),function(e){return N.apply(this,arguments)})},{key:\"getInputDevices\",value:(I=h((function*(){var e=this;return this._callObjectMode&&this.needsLoad()?this._devicesFromInputSettings(this._inputSettings):new Promise((function(t){e.sendMessageToCallMachine({action:\"get-input-devices\"},(function(n){n.returnPreloadCache?t(e._devicesFromInputSettings(e._inputSettings)):t({camera:n.camera,mic:n.mic,speaker:n.speaker})}))}))})),function(){return I.apply(this,arguments)})},{key:\"nativeInCallAudioMode\",value:function(){return Vs(),this._nativeInCallAudioMode}},{key:\"setNativeInCallAudioMode\",value:function(e){if(Vs(),[_s,bs].includes(e)){if(e!==this._nativeInCallAudioMode)return this._nativeInCallAudioMode=e,!this.disableReactNativeAutoDeviceManagement(\"audio\")&&Is(this._callState,this._isPreparingToJoin)&&this.nativeUtils().setAudioMode(this._nativeInCallAudioMode),this}else console.error(\"invalid in-call audio mode specified: \",e)}},{key:\"preAuth\",value:(x=h((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(Rs(this._callObjectMode,\"preAuth()\"),Ds(this._callState,this._isPreparingToJoin,\"preAuth()\"),this.needsLoad()&&(yield this.load(t)),!t.url)throw new Error(\"preAuth() requires at least a url to be provided\");return this.validateProperties(t),this.properties=fs(fs({},this.properties),t),new Promise((function(t,n){e._preloadCache.inputSettings=e._prepInputSettingsForSharing(e._inputSettings,!1),e.sendMessageToCallMachine({action:\"daily-method-preauth\",properties:Ls(e.properties,e.callClientId),preloadCache:Ls(e._preloadCache,e.callClientId)},(function(r){return r.error?n(r.error):r.access?(e._didPreAuth=!0,void t({access:r.access})):n(new Error(\"unknown error in preAuth()\"))}))}))})),function(){return x.apply(this,arguments)})},{key:\"load\",value:(L=h((function*(e){var t=this;if(this.needsLoad()){if(this._destroyed&&(this._logUseAfterDestroy(),this.strictMode))throw new Error(\"Use after destroy\");if(e&&(this.validateProperties(e),this.properties=fs(fs({},this.properties),e)),!this._callObjectMode&&!this.properties.url)throw new Error(\"can't load iframe meeting because url property isn't set\");return this._updateCallState(ei),this.emitDailyJSEvent({action:Bi}),this._callObjectMode?new Promise((function(e,n){t._callObjectLoader.cancel();var r=Date.now();t._callObjectLoader.load(t.properties.dailyConfig,(function(n){t._bundleLoadTime=n?\"no-op\":Date.now()-r,t._updateCallState(ti),n&&t.emitDailyJSEvent({action:Vi}),e()}),(function(e,r){if(t.emitDailyJSEvent({action:Ui}),!r){t._updateCallState(oi),t.resetMeetingDependentVars();var i={action:Uo,errorMsg:e.msg,error:{type:\"connection-error\",msg:\"Failed to load call object bundle.\",details:{on:\"load\",sourceError:e,bundleUrl:X(t.properties.dailyConfig)}}};t._maybeSendToSentry(i),t.emitDailyJSEvent(i),n(e.msg)}}))})):(this._iframe.src=K(this.assembleMeetingUrl(),this.properties.dailyConfig),new Promise((function(e,n){t._loadedCallback=function(r){t._callState!==oi?(t._updateCallState(ti),(t.properties.cssFile||t.properties.cssText)&&t.loadCss(t.properties),e()):n(r)}})))}})),function(e){return L.apply(this,arguments)})},{key:\"join\",value:(j=h((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this._testCallInProgress&&this.stopTestCallQuality();var n=!1;if(this.needsLoad()){this.updateIsPreparingToJoin(!0);try{yield this.load(t)}catch(e){return this.updateIsPreparingToJoin(!1),Promise.reject(e)}}else{if(n=!(!this.properties.cssFile&&!this.properties.cssText),this._didPreAuth){if(t.url&&t.url!==this.properties.url)return console.error(\"url in join() is different than the one used in preAuth()\"),this.updateIsPreparingToJoin(!1),Promise.reject();if(t.token&&t.token!==this.properties.token)return console.error(\"token in join() is different than the one used in preAuth()\"),this.updateIsPreparingToJoin(!1),Promise.reject()}if(t.url&&!this._callObjectMode&&t.url&&t.url!==this.properties.url)return console.error(\"url in join() is different than the one used in load() (\".concat(this.properties.url,\" -> \").concat(t.url,\")\")),this.updateIsPreparingToJoin(!1),Promise.reject();this.validateProperties(t),this.properties=fs(fs({},this.properties),t)}return void 0!==t.showLocalVideo&&(this._callObjectMode?console.error(\"showLocalVideo is not available in callObject mode\"):this._showLocalVideo=!!t.showLocalVideo),void 0!==t.showParticipantsBar&&(this._callObjectMode?console.error(\"showParticipantsBar is not available in callObject mode\"):this._showParticipantsBar=!!t.showParticipantsBar),this._callState===ri||this._callState===ni?(console.warn(\"already joined meeting, call leave() before joining again\"),void this.updateIsPreparingToJoin(!1)):(this._updateCallState(ni,!1),this.emitDailyJSEvent({action:qi}),this._preloadCache.inputSettings=this._prepInputSettingsForSharing(this._inputSettings||{},!1),this.sendMessageToCallMachine({action:\"join-meeting\",properties:Ls(this.properties,this.callClientId),preloadCache:Ls(this._preloadCache,this.callClientId)}),new Promise((function(t,r){e._joinedCallback=function(i,o){if(e._callState!==oi){if(e._updateCallState(ri),i)for(var a in i){if(e._callObjectMode){var s=e._callMachine().store;Ga(i[a],s),Qa(i[a],s),Ka(i[a],e._participants[a],s)}e._participants[a]=fs({},i[a]),e.toggleParticipantAudioBasedOnNativeAudioFocus()}n&&e.loadCss(e.properties),t(i)}else r(o)}})))})),function(){return j.apply(this,arguments)})},{key:\"leave\",value:(A=h((function*(){var e=this;return this._testCallInProgress&&this.stopTestCallQuality(),new Promise((function(t){e._callState===ii||e._callState===oi?t():e._callObjectLoader&&!e._callObjectLoader.loaded?(e._callObjectLoader.cancel(),e._updateCallState(ii),e.resetMeetingDependentVars(),e.emitDailyJSEvent({action:ii}),t()):(e._resolveLeave=t,e.sendMessageToCallMachine({action:\"leave-meeting\"}))}))})),function(){return A.apply(this,arguments)})},{key:\"startScreenShare\",value:(O=h((function*(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(Ns(this._callMachineInitialized,\"startScreenShare()\"),t.screenVideoSendSettings&&this._validateVideoSendSettings(\"screenVideo\",t.screenVideoSendSettings),t.mediaStream&&(this._sharedTracks.screenMediaStream=t.mediaStream,t.mediaStream=Ho),\"undefined\"!=typeof DailyNativeUtils&&void 0!==DailyNativeUtils.isIOS&&DailyNativeUtils.isIOS){var n=this.nativeUtils();if(yield n.isScreenBeingCaptured())return void this.emitDailyJSEvent({action:Bo,type:\"screen-share-error\",errorMsg:\"Could not start the screen sharing. The screen is already been captured!\"});n.setSystemScreenCaptureStartCallback((function(){n.setSystemScreenCaptureStartCallback(null),e.sendMessageToCallMachine({action:qo,captureOptions:t})})),n.presentSystemScreenCapturePrompt()}else this.sendMessageToCallMachine({action:qo,captureOptions:t})})),function(){return O.apply(this,arguments)})},{key:\"stopScreenShare\",value:function(){Ns(this._callMachineInitialized,\"stopScreenShare()\"),this.sendMessageToCallMachine({action:\"local-screen-stop\"})}},{key:\"startRecording\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.type;if(t&&\"cloud\"!==t&&\"raw-tracks\"!==t&&\"local\"!==t)throw new Error(\"invalid type: \".concat(t,\", allowed values 'cloud', 'raw-tracks', or 'local'\"));this.sendMessageToCallMachine(fs({action:\"local-recording-start\"},e))}},{key:\"updateRecording\",value:function(e){var t=e.layout,n=void 0===t?{preset:\"default\"}:t,r=e.instanceId;this.sendMessageToCallMachine({action:\"daily-method-update-recording\",layout:n,instanceId:r})}},{key:\"stopRecording\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sendMessageToCallMachine(fs({action:\"local-recording-stop\"},e))}},{key:\"startLiveStreaming\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sendMessageToCallMachine(fs({action:\"daily-method-start-live-streaming\"},e))}},{key:\"updateLiveStreaming\",value:function(e){var t=e.layout,n=void 0===t?{preset:\"default\"}:t,r=e.instanceId;this.sendMessageToCallMachine({action:\"daily-method-update-live-streaming\",layout:n,instanceId:r})}},{key:\"addLiveStreamingEndpoints\",value:function(e){var t=e.endpoints,n=e.instanceId;this.sendMessageToCallMachine({action:zo,endpointsOp:Xo,endpoints:t,instanceId:n})}},{key:\"removeLiveStreamingEndpoints\",value:function(e){var t=e.endpoints,n=e.instanceId;this.sendMessageToCallMachine({action:zo,endpointsOp:Zo,endpoints:t,instanceId:n})}},{key:\"stopLiveStreaming\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.sendMessageToCallMachine(fs({action:\"daily-method-stop-live-streaming\"},e))}},{key:\"validateDailyConfig\",value:function(e){e.camSimulcastEncodings&&(console.warn(\"camSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide camera simulcast settings.\"),this.validateSimulcastEncodings(e.camSimulcastEncodings)),e.screenSimulcastEncodings&&console.warn(\"screenSimulcastEncodings is deprecated. Use sendSettings, found in DailyCallOptions, to provide screen simulcast settings.\"),ua()&&e.noAutoDefaultDeviceChange&&console.warn(\"noAutoDefaultDeviceChange is not supported on Android, and will be ignored.\")}},{key:\"validateSimulcastEncodings\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(e){if(!(e instanceof Array||Array.isArray(e)))throw new Error(\"encodings must be an Array\");if(!rc(e.length,1,3))throw new Error(\"encodings must be an Array with between 1 to \".concat(3,\" layers\"));for(var r=0;r<e.length;r++){var i=e[r];for(var o in this._validateEncodingLayerHasValidProperties(i),i)if(Ms.includes(o)){if(\"number\"!=typeof i[o])throw new Error(\"\".concat(o,\" must be a number\"));if(t){var a=t[o],s=a.min,c=a.max;if(!rc(i[o],s,c))throw new Error(\"\".concat(o,\" value not in range. valid range: \").concat(s,\" to \").concat(c))}}else if(![\"active\",\"scalabilityMode\"].includes(o))throw new Error(\"Invalid key \".concat(o,\", valid keys are:\")+Object.values(Ms));if(n&&!i.hasOwnProperty(\"maxBitrate\"))throw new Error(\"maxBitrate is not specified\")}}}},{key:\"startRemoteMediaPlayer\",value:(P=h((function*(e){var t=this,n=e.url,r=e.settings,i=void 0===r?{state:Yo.PLAY}:r;try{!function(e){if(\"string\"!=typeof e)throw new Error('url parameter must be \"string\" type')}(n),nc(i),function(e){for(var t in e)if(!Cs.includes(t))throw new Error(\"Invalid key \".concat(t,\", valid keys are: \").concat(Cs));e.simulcastEncodings&&this.validateSimulcastEncodings(e.simulcastEncodings,Ss,!0)}(i)}catch(e){throw console.error(\"invalid argument Error: \".concat(e)),console.error('startRemoteMediaPlayer arguments must be of the form:\\n  { url: \"playback url\",\\n  settings?:\\n  {state: \"play\"|\"pause\", simulcastEncodings?: [{}] } }'),e}return new Promise((function(e,r){t.sendMessageToCallMachine({action:\"daily-method-start-remote-media-player\",url:n,settings:i},(function(t){t.error?r({error:t.error,errorMsg:t.errorMsg}):e({session_id:t.session_id,remoteMediaPlayerState:{state:t.state,settings:t.settings}})}))}))})),function(e){return P.apply(this,arguments)})},{key:\"stopRemoteMediaPlayer\",value:(T=h((function*(e){var t=this;if(\"string\"!=typeof e)throw new Error(\" remotePlayerID must be of type string\");return new Promise((function(n,r){t.sendMessageToCallMachine({action:\"daily-method-stop-remote-media-player\",session_id:e},(function(e){e.error?r({error:e.error,errorMsg:e.errorMsg}):n()}))}))})),function(e){return T.apply(this,arguments)})},{key:\"updateRemoteMediaPlayer\",value:(E=h((function*(e){var t=this,n=e.session_id,r=e.settings;try{nc(r)}catch(e){throw console.error(\"invalid argument Error: \".concat(e)),console.error('updateRemoteMediaPlayer arguments must be of the form:\\n  session_id: \"participant session\",\\n  { settings?: {state: \"play\"|\"pause\"} }'),e}return new Promise((function(e,i){t.sendMessageToCallMachine({action:\"daily-method-update-remote-media-player\",session_id:n,settings:r},(function(t){t.error?i({error:t.error,errorMsg:t.errorMsg}):e({session_id:t.session_id,remoteMediaPlayerState:{state:t.state,settings:t.settings}})}))}))})),function(e){return E.apply(this,arguments)})},{key:\"startTranscription\",value:function(e){xs(this._callState,\"startTranscription()\"),this.sendMessageToCallMachine(fs({action:\"daily-method-start-transcription\"},e))}},{key:\"updateTranscription\",value:function(e){if(xs(this._callState,\"updateTranscription()\"),!e)throw new Error(\"updateTranscription Error: options is mandatory\");if(\"object\"!==n(e))throw new Error(\"updateTranscription Error: options must be object type\");if(e.participants&&!Array.isArray(e.participants))throw new Error(\"updateTranscription Error: participants must be an array\");this.sendMessageToCallMachine(fs({action:\"daily-method-update-transcription\"},e))}},{key:\"stopTranscription\",value:function(e){if(xs(this._callState,\"stopTranscription()\"),e&&\"object\"!==n(e))throw new Error(\"stopTranscription Error: options must be object type\");if(e&&!e.instanceId)throw new Error('\"instanceId\" not provided');this.sendMessageToCallMachine(fs({action:\"daily-method-stop-transcription\"},e))}},{key:\"startDialOut\",value:(C=h((function*(e){var t=this;xs(this._callState,\"startDialOut()\");var n=function(e){if(e){if(!Array.isArray(e))throw new Error(\"Error starting dial out: audio codec must be an array\");if(e.length<=0)throw new Error(\"Error starting dial out: audio codec array specified but empty\");e.forEach((function(e){if(\"string\"!=typeof e)throw new Error(\"Error starting dial out: audio codec must be a string\");if(\"OPUS\"!==e&&\"PCMU\"!==e&&\"PCMA\"!==e&&\"G722\"!==e)throw new Error(\"Error starting dial out: audio codec must be one of OPUS, PCMU, PCMA, G722\")}))}};if(!e.sipUri&&!e.phoneNumber)throw new Error(\"Error starting dial out: either a sip uri or phone number must be provided\");if(e.sipUri&&e.phoneNumber)throw new Error(\"Error starting dial out: only one of sip uri or phone number must be provided\");if(e.sipUri){if(\"string\"!=typeof e.sipUri)throw new Error(\"Error starting dial out: sipUri must be a string\");if(!e.sipUri.startsWith(\"sip:\"))throw new Error(\"Error starting dial out: Invalid SIP URI, must start with 'sip:'\");if(e.video&&\"boolean\"!=typeof e.video)throw new Error(\"Error starting dial out: video must be a boolean value\");!function(e){if(e&&(n(e.audio),e.video)){if(!Array.isArray(e.video))throw new Error(\"Error starting dial out: video codec must be an array\");if(e.video.length<=0)throw new Error(\"Error starting dial out: video codec array specified but empty\");e.video.forEach((function(e){if(\"string\"!=typeof e)throw new Error(\"Error starting dial out: video codec must be a string\");if(\"H264\"!==e&&\"VP8\"!==e)throw new Error(\"Error starting dial out: video codec must be H264 or VP8\")}))}}(e.codecs)}if(e.phoneNumber){if(\"string\"!=typeof e.phoneNumber)throw new Error(\"Error starting dial out: phoneNumber must be a string\");if(!/^\\+\\d{1,}$/.test(e.phoneNumber))throw new Error(\"Error starting dial out: Invalid phone number, must be valid phone number as per E.164\");e.codecs&&n(e.codecs.audio)}if(e.callerId){if(\"string\"!=typeof e.callerId)throw new Error(\"Error starting dial out: callerId must be a string\");if(e.sipUri)throw new Error(\"Error starting dial out: callerId not allowed with sipUri\")}if(e.displayName){if(\"string\"!=typeof e.displayName)throw new Error(\"Error starting dial out: displayName must be a string\");if(e.displayName.length>=200)throw new Error(\"Error starting dial out: displayName length must be less than 200\")}if(e.userId){if(\"string\"!=typeof e.userId)throw new Error(\"Error starting dial out: userId must be a string\");if(e.userId.length>36)throw new Error(\"Error starting dial out: userId length must be less than or equal to 36\")}return new Promise((function(n,r){t.sendMessageToCallMachine(fs({action:\"dialout-start\"},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return C.apply(this,arguments)})},{key:\"stopDialOut\",value:function(e){var t=this;return xs(this._callState,\"stopDialOut()\"),new Promise((function(n,r){t.sendMessageToCallMachine(fs({action:\"dialout-stop\"},e),(function(e){e.error?r(e.error):n(e)}))}))}},{key:\"sipCallTransfer\",value:(M=h((function*(e){var t=this;if(xs(this._callState,\"sipCallTransfer()\"),!e)throw new Error(\"sipCallTransfer() requires a sessionId and toEndPoint\");return e.useSipRefer=!1,tc(e,\"sipCallTransfer\"),new Promise((function(n,r){t.sendMessageToCallMachine(fs({action:ea},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return M.apply(this,arguments)})},{key:\"sipRefer\",value:(S=h((function*(e){var t=this;if(xs(this._callState,\"sipRefer()\"),!e)throw new Error(\"sessionId and toEndPoint are mandatory parameter\");return e.useSipRefer=!0,tc(e,\"sipRefer\"),new Promise((function(n,r){t.sendMessageToCallMachine(fs({action:ea},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return S.apply(this,arguments)})},{key:\"sendDTMF\",value:(k=h((function*(e){var t=this;return xs(this._callState,\"sendDTMF()\"),function(e){var t=e.sessionId,n=e.tones;if(!t||!n)throw new Error(\"sessionId and tones are mandatory parameter\");if(\"string\"!=typeof t||\"string\"!=typeof n)throw new Error(\"sessionId and tones should be of string type\");if(n.length>20)throw new Error(\"tones string must be upto 20 characters\");var r=/[^0-9A-D*#]/g,i=n.match(r);if(i&&i[0])throw new Error(\"\".concat(i[0],\" is not valid DTMF tone\"))}(e),new Promise((function(n,r){t.sendMessageToCallMachine(fs({action:\"send-dtmf\"},e),(function(e){e.error?r(e.error):n(e)}))}))})),function(e){return k.apply(this,arguments)})},{key:\"getNetworkStats\",value:function(){var e=this;if(this._callState!==ri){return{stats:{latest:{}}}}return new Promise((function(t){e.sendMessageToCallMachine({action:\"get-calc-stats\"},(function(n){t(fs({stats:n.stats},e._network))}))}))}},{key:\"testWebsocketConnectivity\",value:(w=h((function*(){var e=this;if(Fs(this._testCallInProgress,\"testWebsocketConnectivity()\"),this.needsLoad())try{yield this.load()}catch(e){return Promise.reject(e)}return new Promise((function(t,n){e.sendMessageToCallMachine({action:\"test-websocket-connectivity\"},(function(e){e.error?n(e.error):t(e.results)}))}))})),function(){return w.apply(this,arguments)})},{key:\"abortTestWebsocketConnectivity\",value:function(){this.sendMessageToCallMachine({action:\"abort-test-websocket-connectivity\"})}},{key:\"_validateVideoTrackForNetworkTests\",value:function(e){return e?e instanceof MediaStreamTrack?!!us(e,{isLocalScreenVideo:!1})||(console.error(\"Video track is not playable. This test needs a live video track.\"),!1):(console.error(\"Video track needs to be of type `MediaStreamTrack`.\"),!1):(console.error(\"Missing video track. You must provide a video track in order to run this test.\"),!1)}},{key:\"testCallQuality\",value:(b=h((function*(){var t=this;Us(),Rs(this._callObjectMode,\"testCallQuality()\"),Ns(this._callMachineInitialized,\"testCallQuality()\",null,!0),Ds(this._callState,this._isPreparingToJoin,\"testCallQuality()\");var n=this._testCallAlreadyInProgress,r=function(e){n||(t._testCallInProgress=e)};if(r(!0),this.needsLoad())try{var i=this._callState;yield this.load(),this._callState=i}catch(e){return r(!1),Promise.reject(e)}return new Promise((function(n){t.sendMessageToCallMachine({action:\"test-call-quality\",dailyJsVersion:t.properties.dailyJsVersion},(function(i){var o=i.results,a=o.result,s=e(o,ds);if(\"failed\"===a){var c,l=fs({},s);null!==(c=s.error)&&void 0!==c&&c.details?(s.error.details=JSON.parse(s.error.details),l.error=fs(fs({},l.error),{},{details:fs({},l.error.details)}),l.error.details.duringTest=\"testCallQuality\"):(l.error=l.error?fs({},l.error):{},l.error.details={duringTest:\"testCallQuality\"}),t._maybeSendToSentry(l)}r(!1),n(fs({result:a},s))}))}))})),function(){return b.apply(this,arguments)})},{key:\"stopTestCallQuality\",value:function(){this.sendMessageToCallMachine({action:\"stop-test-call-quality\"})}},{key:\"testConnectionQuality\",value:(_=h((function*(e){var t;na()?(console.warn(\"testConnectionQuality() is deprecated: use testPeerToPeerCallQuality() instead\"),t=yield this.testPeerToPeerCallQuality(e)):(console.warn(\"testConnectionQuality() is deprecated: use testCallQuality() instead\"),t=yield this.testCallQuality());var n={result:t.result,secondsElapsed:t.secondsElapsed};return t.data&&(n.data={maxRTT:t.data.maxRoundTripTime,packetLoss:t.data.avgRecvPacketLoss}),n})),function(e){return _.apply(this,arguments)})},{key:\"testPeerToPeerCallQuality\",value:(y=h((function*(e){var t=this;if(Fs(this._testCallInProgress,\"testPeerToPeerCallQuality()\"),this.needsLoad())try{yield this.load()}catch(e){return Promise.reject(e)}var n=e.videoTrack,r=e.duration;if(!this._validateVideoTrackForNetworkTests(n))throw new Error(\"Video track error\");return this._sharedTracks.videoTrackForConnectionQualityTest=n,new Promise((function(e,n){t.sendMessageToCallMachine({action:\"test-p2p-call-quality\",duration:r},(function(t){t.error?n(t.error):e(t.results)}))}))})),function(e){return y.apply(this,arguments)})},{key:\"stopTestConnectionQuality\",value:function(){na()?(console.warn(\"stopTestConnectionQuality() is deprecated: use testPeerToPeerCallQuality() and stopTestPeerToPeerCallQuality() instead\"),this.stopTestPeerToPeerCallQuality()):(console.warn(\"stopTestConnectionQuality() is deprecated: use testCallQuality() and stopTestCallQuality() instead\"),this.stopTestCallQuality())}},{key:\"stopTestPeerToPeerCallQuality\",value:function(){this.sendMessageToCallMachine({action:\"stop-test-p2p-call-quality\"})}},{key:\"testNetworkConnectivity\",value:(g=h((function*(e){var t=this;if(Fs(this._testCallInProgress,\"testNetworkConnectivity()\"),this.needsLoad())try{yield this.load()}catch(e){return Promise.reject(e)}if(!this._validateVideoTrackForNetworkTests(e))throw new Error(\"Video track error\");return this._sharedTracks.videoTrackForNetworkConnectivityTest=e,new Promise((function(e,n){t.sendMessageToCallMachine({action:\"test-network-connectivity\"},(function(t){t.error?n(t.error):e(t.results)}))}))})),function(e){return g.apply(this,arguments)})},{key:\"abortTestNetworkConnectivity\",value:function(){this.sendMessageToCallMachine({action:\"abort-test-network-connectivity\"})}},{key:\"getCpuLoadStats\",value:function(){var e=this;return new Promise((function(t){if(e._callState===ri){e.sendMessageToCallMachine({action:\"get-cpu-load-stats\"},(function(e){t(e.cpuStats)}))}else t({cpuLoadState:void 0,cpuLoadStateReason:void 0,stats:{}})}))}},{key:\"_validateEncodingLayerHasValidProperties\",value:function(e){var t;if(!((null===(t=Object.keys(e))||void 0===t?void 0:t.length)>0))throw new Error(\"Empty encoding is not allowed. At least one of these valid keys should be specified:\"+Object.values(Ms))}},{key:\"_validateVideoSendSettings\",value:function(e,t){var r=\"screenVideo\"===e?[\"default-screen-video\",\"detail-optimized\",\"motion-optimized\",\"motion-and-detail-balanced\"]:[\"default-video\",\"bandwidth-optimized\",\"bandwidth-and-quality-balanced\",\"quality-optimized\",\"adaptive-2-layers\",\"adaptive-3-layers\"],i=\"Video send settings should be either an object or one of the supported presets: \".concat(r.join());if(\"string\"==typeof t){if(!r.includes(t))throw new Error(i)}else{if(\"object\"!==n(t))throw new Error(i);if(!t.maxQuality&&!t.encodings&&void 0===t.allowAdaptiveLayers)throw new Error(\"Video send settings must contain at least maxQuality, allowAdaptiveLayers or encodings attribute\");if(t.maxQuality&&-1===[\"low\",\"medium\",\"high\"].indexOf(t.maxQuality))throw new Error(\"maxQuality must be either low, medium or high\");if(t.encodings){var o=!1;switch(Object.keys(t.encodings).length){case 1:o=!t.encodings.low;break;case 2:o=!t.encodings.low||!t.encodings.medium;break;case 3:o=!t.encodings.low||!t.encodings.medium||!t.encodings.high;break;default:o=!0}if(o)throw new Error(\"Encodings must be defined as: low, low and medium, or low, medium and high.\");t.encodings.low&&this._validateEncodingLayerHasValidProperties(t.encodings.low),t.encodings.medium&&this._validateEncodingLayerHasValidProperties(t.encodings.medium),t.encodings.high&&this._validateEncodingLayerHasValidProperties(t.encodings.high)}}}},{key:\"validateUpdateSendSettings\",value:function(e){var t=this;if(!e||0===Object.keys(e).length)throw new Error(\"Send settings must contain at least information for one track!\");Object.entries(e).forEach((function(e){var n=v(e,2),r=n[0],i=n[1];t._validateVideoSendSettings(r,i)}))}},{key:\"updateSendSettings\",value:function(e){var t=this;return this.validateUpdateSendSettings(e),this.needsLoad()?(this._preloadCache.sendSettings=e,{sendSettings:this._preloadCache.sendSettings}):new Promise((function(n,r){t.sendMessageToCallMachine({action:\"update-send-settings\",sendSettings:e},(function(e){e.error?r(e.error):n(e.sendSettings)}))}))}},{key:\"getSendSettings\",value:function(){return this._sendSettings||this._preloadCache.sendSettings}},{key:\"getLocalAudioLevel\",value:function(){return this._localAudioLevel}},{key:\"getRemoteParticipantsAudioLevel\",value:function(){return this._remoteParticipantsAudioLevel}},{key:\"getActiveSpeaker\",value:function(){return Us(),this._activeSpeaker}},{key:\"setActiveSpeakerMode\",value:function(e){return Us(),this.sendMessageToCallMachine({action:\"set-active-speaker-mode\",enabled:e}),this}},{key:\"activeSpeakerMode\",value:function(){return Us(),this._activeSpeakerMode}},{key:\"subscribeToTracksAutomatically\",value:function(){return this._preloadCache.subscribeToTracksAutomatically}},{key:\"setSubscribeToTracksAutomatically\",value:function(e){return xs(this._callState,\"setSubscribeToTracksAutomatically()\",\"Use the subscribeToTracksAutomatically configuration property.\"),this._preloadCache.subscribeToTracksAutomatically=e,this.sendMessageToCallMachine({action:\"daily-method-subscribe-to-tracks-automatically\",enabled:e}),this}},{key:\"enumerateDevices\",value:(f=h((function*(){var e=this;if(this._callObjectMode){var t=yield navigator.mediaDevices.enumerateDevices();return\"Firefox\"===pa()&&ha().major>115&&ha().major<123&&(t=t.filter((function(e){return\"audiooutput\"!==e.kind}))),{devices:t.map((function(e){var t=JSON.parse(JSON.stringify(e));if(!na()&&\"videoinput\"===e.kind&&e.getCapabilities){var n,r=e.getCapabilities();t.facing=(null==r||null===(n=r.facingMode)||void 0===n?void 0:n.length)>=1?r.facingMode[0]:void 0}return t}))}}return new Promise((function(t){e.sendMessageToCallMachine({action:\"enumerate-devices\"},(function(e){t({devices:e.devices})}))}))})),function(){return f.apply(this,arguments)})},{key:\"sendAppMessage\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"*\";if(xs(this._callState,\"sendAppMessage()\"),JSON.stringify(e).length>this._maxAppMessageSize)throw new Error(\"Message data too large. Max size is \"+this._maxAppMessageSize);return this.sendMessageToCallMachine({action:\"app-msg\",data:e,to:t}),this}},{key:\"addFakeParticipant\",value:function(e){return Us(),xs(this._callState,\"addFakeParticipant()\"),this.sendMessageToCallMachine(fs({action:\"add-fake-participant\"},e)),this}},{key:\"setShowNamesMode\",value:function(e){return Bs(this._callObjectMode,\"setShowNamesMode()\"),Us(),e&&\"always\"!==e&&\"never\"!==e?(console.error('setShowNamesMode argument should be \"always\", \"never\", or false'),this):(this.sendMessageToCallMachine({action:\"set-show-names\",mode:e}),this)}},{key:\"setShowLocalVideo\",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return Bs(this._callObjectMode,\"setShowLocalVideo()\"),Us(),xs(this._callState,\"setShowLocalVideo()\"),\"boolean\"!=typeof e?(console.error(\"setShowLocalVideo only accepts a boolean value\"),this):(this.sendMessageToCallMachine({action:\"set-show-local-video\",show:e}),this._showLocalVideo=e,this)}},{key:\"showLocalVideo\",value:function(){return Bs(this._callObjectMode,\"showLocalVideo()\"),Us(),this._showLocalVideo}},{key:\"setShowParticipantsBar\",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return Bs(this._callObjectMode,\"setShowParticipantsBar()\"),Us(),xs(this._callState,\"setShowParticipantsBar()\"),\"boolean\"!=typeof e?(console.error(\"setShowParticipantsBar only accepts a boolean value\"),this):(this.sendMessageToCallMachine({action:\"set-show-participants-bar\",show:e}),this._showParticipantsBar=e,this)}},{key:\"showParticipantsBar\",value:function(){return Bs(this._callObjectMode,\"showParticipantsBar()\"),Us(),this._showParticipantsBar}},{key:\"customIntegrations\",value:function(){return Us(),Bs(this._callObjectMode,\"customIntegrations()\"),this._customIntegrations}},{key:\"setCustomIntegrations\",value:function(e){return Us(),Bs(this._callObjectMode,\"setCustomIntegrations()\"),xs(this._callState,\"setCustomIntegrations()\"),Zs(e)?(this.sendMessageToCallMachine({action:\"set-custom-integrations\",integrations:e}),this._customIntegrations=e,this):this}},{key:\"startCustomIntegrations\",value:function(e){var t=this;if(Us(),Bs(this._callObjectMode,\"startCustomIntegrations()\"),xs(this._callState,\"startCustomIntegrations()\"),Array.isArray(e)&&e.some((function(e){return\"string\"!=typeof e}))||!Array.isArray(e)&&\"string\"!=typeof e)return console.error(\"startCustomIntegrations() only accepts string | string[]\"),this;var n=\"string\"==typeof e?[e]:e,r=n.filter((function(e){return!(e in t._customIntegrations)}));return r.length?(console.error(\"Can't find custom integration(s): \\\"\".concat(r.join(\", \"),'\"')),this):(this.sendMessageToCallMachine({action:\"start-custom-integrations\",ids:n}),this)}},{key:\"stopCustomIntegrations\",value:function(e){var t=this;if(Us(),Bs(this._callObjectMode,\"stopCustomIntegrations()\"),xs(this._callState,\"stopCustomIntegrations()\"),Array.isArray(e)&&e.some((function(e){return\"string\"!=typeof e}))||!Array.isArray(e)&&\"string\"!=typeof e)return console.error(\"stopCustomIntegrations() only accepts string | string[]\"),this;var n=\"string\"==typeof e?[e]:e,r=n.filter((function(e){return!(e in t._customIntegrations)}));return r.length?(console.error(\"Can't find custom integration(s): \\\"\".concat(r.join(\", \"),'\"')),this):(this.sendMessageToCallMachine({action:\"stop-custom-integrations\",ids:n}),this)}},{key:\"customTrayButtons\",value:function(){return Bs(this._callObjectMode,\"customTrayButtons()\"),Us(),this._customTrayButtons}},{key:\"updateCustomTrayButtons\",value:function(e){return Bs(this._callObjectMode,\"updateCustomTrayButtons()\"),Us(),xs(this._callState,\"updateCustomTrayButtons()\"),Xs(e)?(this.sendMessageToCallMachine({action:\"update-custom-tray-buttons\",btns:e}),this._customTrayButtons=e,this):(console.error(\"updateCustomTrayButtons only accepts a dictionary of the type \".concat(JSON.stringify(Ts))),this)}},{key:\"theme\",value:function(){return Bs(this._callObjectMode,\"theme()\"),this.properties.theme}},{key:\"setTheme\",value:function(e){var t=this;return Bs(this._callObjectMode,\"setTheme()\"),new Promise((function(n,r){try{t.validateProperties({theme:e}),t.properties.theme=fs({},e),t.sendMessageToCallMachine({action:\"set-theme\",theme:t.properties.theme});try{t.emitDailyJSEvent({action:Ri,theme:t.properties.theme})}catch(e){console.log(\"could not emit 'theme-updated'\",e)}n(t.properties.theme)}catch(e){r(e)}}))}},{key:\"requestFullscreen\",value:(p=h((function*(){if(Us(),this._iframe&&!document.fullscreenElement&&oa())try{(yield this._iframe.requestFullscreen)?this._iframe.requestFullscreen():this._iframe.webkitRequestFullscreen()}catch(e){console.log(\"could not make video call fullscreen\",e)}})),function(){return p.apply(this,arguments)})},{key:\"exitFullscreen\",value:function(){Us(),document.fullscreenElement?document.exitFullscreen():document.webkitFullscreenElement&&document.webkitExitFullscreen()}},{key:\"getSidebarView\",value:(u=h((function*(){var e=this;return this._callObjectMode?(console.error(\"getSidebarView is not available in callObject mode\"),Promise.resolve(null)):new Promise((function(t){e.sendMessageToCallMachine({action:\"get-sidebar-view\"},(function(e){t(e.view)}))}))})),function(){return u.apply(this,arguments)})},{key:\"setSidebarView\",value:function(e){return this._callObjectMode?(console.error(\"setSidebarView is not available in callObject mode\"),this):(this.sendMessageToCallMachine({action:\"set-sidebar-view\",view:e}),this)}},{key:\"room\",value:(l=h((function*(){var e=this,t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).includeRoomConfigDefaults,n=void 0===t||t;return this._accessState.access===pi||this.needsLoad()?this.properties.url?{roomUrlPendingJoin:this.properties.url}:null:new Promise((function(t){e.sendMessageToCallMachine({action:\"lib-room-info\",includeRoomConfigDefaults:n},(function(e){delete e.action,delete e.callbackStamp,t(e)}))}))})),function(){return l.apply(this,arguments)})},{key:\"geo\",value:(s=h((function*(){try{var e=yield fetch(\"https://gs.daily.co/_ks_/x-swsl/:\");return{current:(yield e.json()).geo}}catch(e){return console.error(\"geo lookup failed\",e),{current:\"\"}}})),function(){return s.apply(this,arguments)})},{key:\"setNetworkTopology\",value:(i=h((function*(e){var t=this;return Us(),xs(this._callState,\"setNetworkTopology()\"),new Promise((function(n,r){t.sendMessageToCallMachine({action:\"set-network-topology\",opts:e},(function(e){e.error?r({error:e.error}):n({workerId:e.workerId})}))}))})),function(e){return i.apply(this,arguments)})},{key:\"getNetworkTopology\",value:(r=h((function*(){var e=this;return new Promise((function(t,n){e.needsLoad()&&t({topology:\"none\"}),e.sendMessageToCallMachine({action:\"get-network-topology\"},(function(e){e.error?n({error:e.error}):t({topology:e.topology})}))}))})),function(){return r.apply(this,arguments)})},{key:\"setPlayNewParticipantSound\",value:function(e){if(Us(),\"number\"!=typeof e&&!0!==e&&!1!==e)throw new Error(\"argument to setShouldPlayNewParticipantSound should be true, false, or a number, but is \".concat(e));this.sendMessageToCallMachine({action:\"daily-method-set-play-ding\",arg:e})}},{key:\"on\",value:function(e,t){return m.prototype.on.call(this,e,t)}},{key:\"once\",value:function(e,t){return m.prototype.once.call(this,e,t)}},{key:\"off\",value:function(e,t){return m.prototype.off.call(this,e,t)}},{key:\"validateProperties\",value:function(e){var t,n;if(null!=e&&null!==(t=e.dailyConfig)&&void 0!==t&&t.userMediaAudioConstraints){var r,i,o;na()||console.warn(\"userMediaAudioConstraints is deprecated. You can override constraints with inputSettings.audio.settings, found in DailyCallOptions.\");var a=e.inputSettings||{};a.audio=(null===(r=e.inputSettings)||void 0===r?void 0:r.audio)||{},a.audio.settings=(null===(i=e.inputSettings)||void 0===i||null===(o=i.audio)||void 0===o?void 0:o.settings)||{},a.audio.settings=fs(fs({},a.audio.settings),e.dailyConfig.userMediaAudioConstraints),e.inputSettings=a,delete e.dailyConfig.userMediaAudioConstraints}if(null!=e&&null!==(n=e.dailyConfig)&&void 0!==n&&n.userMediaVideoConstraints){var s,c,l;na()||console.warn(\"userMediaVideoConstraints is deprecated. You can override constraints with inputSettings.video.settings, found in DailyCallOptions.\");var u=e.inputSettings||{};u.video=(null===(s=e.inputSettings)||void 0===s?void 0:s.video)||{},u.video.settings=(null===(c=e.inputSettings)||void 0===c||null===(l=c.video)||void 0===l?void 0:l.settings)||{},u.video.settings=fs(fs({},u.video.settings),e.dailyConfig.userMediaVideoConstraints),e.inputSettings=u,delete e.dailyConfig.userMediaVideoConstraints}for(var d in e){if(!Os[d])throw new Error(\"unrecognized property '\".concat(d,\"'\"));if(Os[d].validate&&!Os[d].validate(e[d],this))throw new Error(\"property '\".concat(d,\"': \").concat(Os[d].help))}}},{key:\"assembleMeetingUrl\",value:function(){var e,t,n=fs(fs({},this.properties),{},{emb:this.callClientId,embHref:encodeURIComponent(window.location.href),proxy:null!==(e=this.properties.dailyConfig)&&void 0!==e&&e.proxyUrl?encodeURIComponent(null===(t=this.properties.dailyConfig)||void 0===t?void 0:t.proxyUrl):void 0}),r=n.url.match(/\\?/)?\"&\":\"?\";return n.url+r+Object.keys(Os).filter((function(e){return Os[e].queryString&&void 0!==n[e]})).map((function(e){return\"\".concat(Os[e].queryString,\"=\").concat(n[e])})).join(\"&\")}},{key:\"needsLoad\",value:function(){return[Zr,ei,ii,oi].includes(this._callState)}},{key:\"sendMessageToCallMachine\",value:function(e,t){if(this._destroyed&&(this._logUseAfterDestroy(),this.strictMode))throw new Error(\"Use after destroy\");this._messageChannel.sendMessageToCallMachine(e,t,this.callClientId,this._iframe)}},{key:\"forwardPackagedMessageToCallMachine\",value:function(e){this._messageChannel.forwardPackagedMessageToCallMachine(e,this._iframe,this.callClientId)}},{key:\"addListenerForPackagedMessagesFromCallMachine\",value:function(e){return this._messageChannel.addListenerForPackagedMessagesFromCallMachine(e,this.callClientId)}},{key:\"removeListenerForPackagedMessagesFromCallMachine\",value:function(e){this._messageChannel.removeListenerForPackagedMessagesFromCallMachine(e)}},{key:\"handleMessageFromCallMachine\",value:function(t){switch(t.action){case Ni:this.sendMessageToCallMachine(fs({action:Fi},this.properties));break;case\"call-machine-initialized\":this._callMachineInitialized=!0;var n={action:Wo,level:\"log\",code:1011,stats:{event:\"bundle load\",time:\"no-op\"===this._bundleLoadTime?0:this._bundleLoadTime,preLoaded:\"no-op\"===this._bundleLoadTime,url:X(this.properties.dailyConfig)}};this.sendMessageToCallMachine(n),this._delayDuplicateInstanceLog&&this._logDuplicateInstanceAttempt();break;case Vi:this._loadedCallback&&(this._loadedCallback(),this._loadedCallback=null),this.emitDailyJSEvent(t);break;case zi:var r,i=fs({},t);delete i.internal,this._maxAppMessageSize=(null===(r=t.internal)||void 0===r?void 0:r._maxAppMessageSize)||Vo,this._joinedCallback&&(this._joinedCallback(t.participants),this._joinedCallback=null),this.emitDailyJSEvent(i);break;case Hi:case Gi:if(this._callState===ii)return;if(t.participant&&t.participant.session_id){var o=t.participant.local?\"local\":t.participant.session_id;if(this._callObjectMode){var a=this._callMachine().store;Ga(t.participant,a),Qa(t.participant,a),Ka(t.participant,this._participants[o],a)}try{this.maybeParticipantTracksStopped(this._participants[o],t.participant),this.maybeParticipantTracksStarted(this._participants[o],t.participant),this.maybeEventRecordingStopped(this._participants[o],t.participant),this.maybeEventRecordingStarted(this._participants[o],t.participant)}catch(e){console.error(\"track events error\",e)}this.compareEqualForParticipantUpdateEvent(t.participant,this._participants[o])||(this._participants[o]=fs({},t.participant),this.toggleParticipantAudioBasedOnNativeAudioFocus(),this.emitDailyJSEvent(t))}break;case Qi:if(t.participant&&t.participant.session_id){var s=this._participants[t.participant.session_id];s&&this.maybeParticipantTracksStopped(s,null),delete this._participants[t.participant.session_id],this.emitDailyJSEvent(t)}break;case Yi:D(this._participantCounts,t.participantCounts)||(this._participantCounts=t.participantCounts,this.emitDailyJSEvent(t));break;case Ki:var c={access:t.access};t.awaitingAccess&&(c.awaitingAccess=t.awaitingAccess),D(this._accessState,c)||(this._accessState=c,this.emitDailyJSEvent(t));break;case Xi:if(t.meetingSession){this._meetingSessionSummary=t.meetingSession,this.emitDailyJSEvent(t);var l=fs(fs({},t),{},{action:\"meeting-session-updated\"});this.emitDailyJSEvent(l)}break;case Uo:var u;this._iframe&&!t.preserveIframe&&(this._iframe.src=\"\"),this._updateCallState(oi),this.resetMeetingDependentVars(),this._loadedCallback&&(this._loadedCallback(t.errorMsg),this._loadedCallback=null),t.preserveIframe;var d=e(t,ps);null!=d&&null!==(u=d.error)&&void 0!==u&&u.details&&(d.error.details=JSON.parse(d.error.details)),this._maybeSendToSentry(t),this._joinedCallback&&(this._joinedCallback(null,d),this._joinedCallback=null),this.emitDailyJSEvent(d);break;case Wi:this._callState!==oi&&this._updateCallState(ii),this.resetMeetingDependentVars(),this._resolveLeave&&(this._resolveLeave(),this._resolveLeave=null),this.emitDailyJSEvent(t);break;case\"selected-devices-updated\":t.devices&&this.emitDailyJSEvent(t);break;case Eo:var p=t.threshold,h=t.quality;p===this._network.threshold&&h===this._network.quality||(this._network.quality=h,this._network.threshold=p,this.emitDailyJSEvent(t));break;case Po:t&&t.cpuLoadState&&this.emitDailyJSEvent(t);break;case Oo:t&&void 0!==t.faceCounts&&this.emitDailyJSEvent(t);break;case Mo:var f=t.activeSpeaker;this._activeSpeaker.peerId!==f.peerId&&(this._activeSpeaker.peerId=f.peerId,this.emitDailyJSEvent({action:t.action,activeSpeaker:this._activeSpeaker}));break;case\"show-local-video-changed\":if(this._callObjectMode)return;var v=t.show;this._showLocalVideo=v,this.emitDailyJSEvent({action:t.action,show:v});break;case Co:var g=t.enabled;this._activeSpeakerMode!==g&&(this._activeSpeakerMode=g,this.emitDailyJSEvent({action:t.action,enabled:this._activeSpeakerMode}));break;case to:case no:case ro:this._waitingParticipants=t.allWaitingParticipants,this.emitDailyJSEvent({action:t.action,participant:t.participant});break;case Fo:D(this._receiveSettings,t.receiveSettings)||(this._receiveSettings=t.receiveSettings,this.emitDailyJSEvent({action:t.action,receiveSettings:t.receiveSettings}));break;case Ro:this._maybeUpdateInputSettings(t.inputSettings);break;case\"send-settings-updated\":D(this._sendSettings,t.sendSettings)||(this._sendSettings=t.sendSettings,this._preloadCache.sendSettings=null,this.emitDailyJSEvent({action:t.action,sendSettings:t.sendSettings}));break;case\"local-audio-level\":this._localAudioLevel=t.audioLevel,this._preloadCache.localAudioLevelObserver=null,this.emitDailyJSEvent(t);break;case\"remote-participants-audio-level\":this._remoteParticipantsAudioLevel=t.participantsAudioLevel,this._preloadCache.remoteParticipantsAudioLevelObserver=null,this.emitDailyJSEvent(t);break;case yo:var m=t.session_id;this._rmpPlayerState[m]=t.playerState,this.emitDailyJSEvent(t);break;case bo:delete this._rmpPlayerState[t.session_id],this.emitDailyJSEvent(t);break;case _o:var y=t.session_id,_=this._rmpPlayerState[y];_&&this.compareEqualForRMPUpdateEvent(_,t.remoteMediaPlayerState)||(this._rmpPlayerState[y]=t.remoteMediaPlayerState,this.emitDailyJSEvent(t));break;case\"custom-button-click\":case\"sidebar-view-changed\":this.emitDailyJSEvent(t);break;case Zi:var b=this._meetingSessionState.topology!==(t.meetingSessionState&&t.meetingSessionState.topology);this._meetingSessionState=ic(t.meetingSessionState,this._callObjectMode),(this._callObjectMode||b)&&this.emitDailyJSEvent(t);break;case wo:this._isScreenSharing=!0,this.emitDailyJSEvent(t);break;case ko:case So:this._isScreenSharing=!1,this.emitDailyJSEvent(t);break;case lo:case uo:case po:case ho:case fo:case ao:case so:case co:case Ji:case $i:case go:case mo:case\"test-completed\":case To:case vo:case Lo:case xo:case Io:case Do:case Bo:case No:case\"dialin-ready\":case\"dialin-connected\":case\"dialin-error\":case\"dialin-stopped\":case\"dialin-warning\":case\"dialout-connected\":case\"dialout-answered\":case\"dialout-error\":case\"dialout-stopped\":case\"dialout-warning\":this.emitDailyJSEvent(t);break;case\"request-fullscreen\":this.requestFullscreen();break;case\"request-exit-fullscreen\":this.exitFullscreen()}}},{key:\"maybeEventRecordingStopped\",value:function(e,t){var n=\"record\";e&&(t.local||!1!==t[n]||e[n]===t[n]||this.emitDailyJSEvent({action:uo}))}},{key:\"maybeEventRecordingStarted\",value:function(e,t){var n=\"record\";e&&(t.local||!0!==t[n]||e[n]===t[n]||this.emitDailyJSEvent({action:lo}))}},{key:\"_trackStatePlayable\",value:function(e){return!(!e||e.state!==di)}},{key:\"_trackChanged\",value:function(e,t){return!((null==e?void 0:e.id)===(null==t?void 0:t.id))}},{key:\"maybeEventTrackStopped\",value:function(e,t,n){var r,i,o=null!==(r=null==t?void 0:t.tracks[e])&&void 0!==r?r:null,a=null!==(i=null==n?void 0:n.tracks[e])&&void 0!==i?i:null,s=null==o?void 0:o.track;if(s){var c=this._trackStatePlayable(o),l=this._trackStatePlayable(a),u=this._trackChanged(s,null==a?void 0:a.track);c&&(l&&!u||this.emitDailyJSEvent({action:oo,track:s,participant:null!=n?n:t,type:e}))}}},{key:\"maybeEventTrackStarted\",value:function(e,t,n){var r,i,o=null!==(r=null==t?void 0:t.tracks[e])&&void 0!==r?r:null,a=null!==(i=null==n?void 0:n.tracks[e])&&void 0!==i?i:null,s=null==a?void 0:a.track;if(s){var c=this._trackStatePlayable(o),l=this._trackStatePlayable(a),u=this._trackChanged(null==o?void 0:o.track,s);l&&(c&&!u||this.emitDailyJSEvent({action:io,track:s,participant:n,type:e}))}}},{key:\"maybeParticipantTracksStopped\",value:function(e,t){if(e)for(var n in e.tracks)this.maybeEventTrackStopped(n,e,t)}},{key:\"maybeParticipantTracksStarted\",value:function(e,t){if(t)for(var n in t.tracks)this.maybeEventTrackStarted(n,e,t)}},{key:\"compareEqualForRMPUpdateEvent\",value:function(e,t){var n,r;return e.state===t.state&&(null===(n=e.settings)||void 0===n?void 0:n.volume)===(null===(r=t.settings)||void 0===r?void 0:r.volume)}},{key:\"emitDailyJSEvent\",value:function(e){try{e.callClientId=this.callClientId,this.emit(e.action,e)}catch(t){console.log(\"could not emit\",e,t)}}},{key:\"compareEqualForParticipantUpdateEvent\",value:function(e,t){return!!D(e,t)&&((!e.videoTrack||!t.videoTrack||e.videoTrack.id===t.videoTrack.id&&e.videoTrack.muted===t.videoTrack.muted&&e.videoTrack.enabled===t.videoTrack.enabled)&&(!e.audioTrack||!t.audioTrack||e.audioTrack.id===t.audioTrack.id&&e.audioTrack.muted===t.audioTrack.muted&&e.audioTrack.enabled===t.audioTrack.enabled))}},{key:\"nativeUtils\",value:function(){return na()?\"undefined\"==typeof DailyNativeUtils?(console.warn(\"in React Native, DailyNativeUtils is expected to be available\"),null):DailyNativeUtils:null}},{key:\"updateIsPreparingToJoin\",value:function(e){this._updateCallState(this._callState,e)}},{key:\"_updateCallState\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._isPreparingToJoin;if(e!==this._callState||t!==this._isPreparingToJoin){var n=this._callState,r=this._isPreparingToJoin;this._callState=e,this._isPreparingToJoin=t;var i=this._callState===ri;this.updateShowAndroidOngoingMeetingNotification(i);var o=Is(n,r),a=Is(this._callState,this._isPreparingToJoin);o!==a&&(this.updateKeepDeviceAwake(a),this.updateDeviceAudioMode(a),this.updateNoOpRecordingEnsuringBackgroundContinuity(a))}}},{key:\"resetMeetingDependentVars\",value:function(){this._participants={},this._participantCounts=ks,this._waitingParticipants={},this._activeSpeaker={},this._activeSpeakerMode=!1,this._didPreAuth=!1,this._accessState={access:pi},this._finalSummaryOfPrevSession=this._meetingSessionSummary,this._meetingSessionSummary={},this._meetingSessionState=ic(ws,this._callObjectMode),this._isScreenSharing=!1,this._receiveSettings={},this._inputSettings=void 0,this._sendSettings={},this._localAudioLevel=0,this._isLocalAudioLevelObserverRunning=!1,this._remoteParticipantsAudioLevel={},this._isRemoteParticipantsAudioLevelObserverRunning=!1,this._maxAppMessageSize=Vo,this._callMachineInitialized=!1,this._bundleLoadTime=void 0,this._preloadCache}},{key:\"updateKeepDeviceAwake\",value:function(e){na()&&this.nativeUtils().setKeepDeviceAwake(e,this.callClientId)}},{key:\"updateDeviceAudioMode\",value:function(e){if(na()&&!this.disableReactNativeAutoDeviceManagement(\"audio\")){var t=e?this._nativeInCallAudioMode:\"idle\";this.nativeUtils().setAudioMode(t)}}},{key:\"updateShowAndroidOngoingMeetingNotification\",value:function(e){if(na()&&this.nativeUtils().setShowOngoingMeetingNotification){var t,n,r,i;if(this.properties.reactNativeConfig&&this.properties.reactNativeConfig.androidInCallNotification){var o=this.properties.reactNativeConfig.androidInCallNotification;t=o.title,n=o.subtitle,r=o.iconName,i=o.disableForCustomOverride}i&&(e=!1),this.nativeUtils().setShowOngoingMeetingNotification(e,t,n,r,this.callClientId)}}},{key:\"updateNoOpRecordingEnsuringBackgroundContinuity\",value:function(e){na()&&this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity&&this.nativeUtils().enableNoOpRecordingEnsuringBackgroundContinuity(e)}},{key:\"toggleParticipantAudioBasedOnNativeAudioFocus\",value:function(){var e,t;if(na()){var n=null===(e=this._callMachine())||void 0===e||null===(t=e.store)||void 0===t?void 0:t.getState();for(var r in null==n?void 0:n.streams){var i=n.streams[r];i&&i.pendingTrack&&\"audio\"===i.pendingTrack.kind&&(i.pendingTrack.enabled=this._hasNativeAudioFocus)}}}},{key:\"disableReactNativeAutoDeviceManagement\",value:function(e){return this.properties.reactNativeConfig&&this.properties.reactNativeConfig.disableAutoDeviceManagement&&this.properties.reactNativeConfig.disableAutoDeviceManagement[e]}},{key:\"absoluteUrl\",value:function(e){if(void 0!==e){var t=document.createElement(\"a\");return t.href=e,t.href}}},{key:\"sayHello\",value:function(){var e=\"hello, world.\";return console.log(e),e}},{key:\"_logUseAfterDestroy\",value:function(){var e=Object.values(ys)[0];if(this.needsLoad()){if(e&&!e.needsLoad()){var t={action:Wo,level:\"error\",code:this.strictMode?9995:9997};e.sendMessageToCallMachine(t)}else if(!this.strictMode){console.error(\"You are are attempting to use a call instance that was previously destroyed, which is unsupported. Please remove `strictMode: false` from your constructor properties to enable strict mode to track down and fix this unsupported usage.\")}}else{var n={action:Wo,level:\"error\",code:this.strictMode?9995:9997};this._messageChannel.sendMessageToCallMachine(n,null,this.callClientId,this._iframe)}}},{key:\"_logDuplicateInstanceAttempt\",value:function(){for(var e=0,t=Object.values(ys);e<t.length;e++){var n=t[e];n._callMachineInitialized?(n.sendMessageToCallMachine({action:Wo,level:\"warn\",code:this.allowMultipleCallInstances?9993:9992}),n._delayDuplicateInstanceLog=!1):n._delayDuplicateInstanceLog=!0}}},{key:\"_maybeSendToSentry\",value:function(e){var t,n,r,i,o,a;if(null!==(t=e.error)&&void 0!==t&&t.type){if(![Ti,Ci,Si].includes(e.error.type))return;if(e.error.type===Si&&e.error.msg.includes(\"deleted\"))return}var s=null!==(n=this.properties)&&void 0!==n&&n.url?new URL(this.properties.url):void 0,c=\"production\";s&&s.host.includes(\".staging.daily\")&&(c=\"staging\");var l,u,d,p,h,f=[Kn(),Qn(),$r(),Vr(),Gr(),Xr(),Zn(),Kr()].filter((function(e){return![\"BrowserApiErrors\",\"Breadcrumbs\",\"GlobalHandlers\"].includes(e.name)})),v=new mr({dsn:\"https://f10f1c81e5d44a4098416c0867a8b740@o77906.ingest.sentry.io/168844\",transport:jr,stackParser:Rr,integrations:f,environment:c}),g=new on;if(g.setClient(v),v.init(),this.session_id&&g.setExtra(\"sessionId\",this.session_id),this.properties){var m=fs({},this.properties);m.userName=m.userName?\"[Filtered]\":void 0,m.userData=m.userData?\"[Filtered]\":void 0,m.token=m.token?\"[Filtered]\":void 0,g.setExtra(\"properties\",m)}if(s){var y=s.searchParams.get(\"domain\");if(!y){var _=s.host.match(/(.*?)\\./);y=_&&_[1]||\"\"}y&&g.setTag(\"domain\",y)}e.error&&(g.setTag(\"fatalErrorType\",e.error.type),g.setExtra(\"errorDetails\",e.error.details),(null===(l=e.error.details)||void 0===l?void 0:l.uri)&&g.setTag(\"serverAddress\",e.error.details.uri),(null===(u=e.error.details)||void 0===u?void 0:u.workerGroup)&&g.setTag(\"workerGroup\",e.error.details.workerGroup),(null===(d=e.error.details)||void 0===d?void 0:d.geoGroup)&&g.setTag(\"geoGroup\",e.error.details.geoGroup),(null===(p=e.error.details)||void 0===p?void 0:p.on)&&g.setTag(\"connectionAttempt\",e.error.details.on),null!==(h=e.error.details)&&void 0!==h&&h.bundleUrl&&(g.setTag(\"bundleUrl\",e.error.details.bundleUrl),g.setTag(\"bundleError\",e.error.details.sourceError.type)));g.setTags({callMode:this._callObjectMode?na()?\"reactNative\":null!==(r=this.properties)&&void 0!==r&&null!==(i=r.dailyConfig)&&void 0!==i&&null!==(o=i.callMode)&&void 0!==o&&o.includes(\"prebuilt\")?this.properties.dailyConfig.callMode:\"custom\":\"prebuilt-frame\",version:ee.version()});var b=(null===(a=e.error)||void 0===a?void 0:a.msg)||e.errorMsg;g.captureException(new Error(b))}},{key:\"_callMachine\",value:function(){var e,t,n;return null===(e=window._daily)||void 0===e||null===(t=e.instances)||void 0===t||null===(n=t[this.callClientId])||void 0===n?void 0:n.callMachine}},{key:\"_maybeUpdateInputSettings\",value:function(e){if(!D(this._inputSettings,e)){var t=this._getInputSettings();this._inputSettings=e;var n=this._getInputSettings();D(t,n)||this.emitDailyJSEvent({action:Ro,inputSettings:n})}}}],[{key:\"supportedBrowser\",value:function(){if(na())return{supported:!0,mobile:!0,name:\"React Native\",version:null,supportsScreenShare:!0,supportsSfu:!0,supportsVideoProcessing:!1,supportsAudioProcessing:!1};var e=G.getParser(ta());return{supported:!!la(),mobile:\"mobile\"===e.getPlatformType(),name:e.getBrowserName(),version:e.getBrowserVersion(),supportsFullscreen:!!oa(),supportsScreenShare:!!ia(),supportsSfu:!!la(),supportsVideoProcessing:sa(),supportsAudioProcessing:ca()}}},{key:\"version\",value:function(){return\"0.75.2\"}},{key:\"createCallObject\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return e.layout=\"none\",new ee(null,e)}},{key:\"wrap\",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(Us(),!e||!e.contentWindow||\"string\"!=typeof e.src)throw new Error(\"DailyIframe::Wrap needs an iframe-like first argument\");return t.layout||(t.customLayout?t.layout=\"custom-v1\":t.layout=\"browser\"),new ee(e,t)}},{key:\"createFrame\",value:function(e,t){var n,r;Us(),e&&t?(n=e,r=t):e&&e.append?(n=e,r={}):(n=document.body,r=e||{});var i=r.iframeStyle;i||(i=n===document.body?{position:\"fixed\",border:\"1px solid black\",backgroundColor:\"white\",width:\"375px\",height:\"450px\",right:\"1em\",bottom:\"1em\"}:{border:0,width:\"100%\",height:\"100%\"});var o=document.createElement(\"iframe\");window.navigator&&window.navigator.userAgent.match(/Chrome\\/61\\./)?o.allow=\"microphone, camera\":o.allow=\"microphone; camera; autoplay; display-capture; screen-wake-lock\",o.style.visibility=\"hidden\",n.appendChild(o),o.style.visibility=null,Object.keys(i).forEach((function(e){return o.style[e]=i[e]})),r.layout||(r.customLayout?r.layout=\"custom-v1\":r.layout=\"browser\");try{return new ee(o,r)}catch(e){throw n.removeChild(o),e}}},{key:\"createTransparentFrame\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};Us();var t=document.createElement(\"iframe\");return t.allow=\"microphone; camera; autoplay\",t.style.cssText=\"\\n      position: fixed;\\n      top: 0;\\n      left: 0;\\n      width: 100%;\\n      height: 100%;\\n      border: 0;\\n      pointer-events: none;\\n    \",document.body.appendChild(t),e.layout||(e.layout=\"custom-v1\"),ee.wrap(t,e)}},{key:\"getCallInstance\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return e?ys[e]:Object.values(ys)[0]}}]),ee}();function Ls(e,t){var n={};for(var r in e)if(e[r]instanceof MediaStreamTrack)console.warn(\"MediaStreamTrack found in props or cache.\",r),n[r]=Ho;else if(\"dailyConfig\"===r){if(e[r].modifyLocalSdpHook){var i=window._daily.instances[t].customCallbacks||{};i.modifyLocalSdpHook=e[r].modifyLocalSdpHook,window._daily.instances[t].customCallbacks=i,delete e[r].modifyLocalSdpHook}if(e[r].modifyRemoteSdpHook){var o=window._daily.instances[t].customCallbacks||{};o.modifyRemoteSdpHook=e[r].modifyRemoteSdpHook,window._daily.instances[t].customCallbacks=o,delete e[r].modifyRemoteSdpHook}n[r]=e[r]}else n[r]=e[r];return n}function xs(e){var t=arguments.length>2?arguments[2]:void 0;if(e!==ri){var n=\"\".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" only supported after join.\");throw t&&(n+=\" \".concat(t)),console.error(n),new Error(n)}}function Is(e,t){return[ni,ri].includes(e)||t}function Ds(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"This daily-js method\",r=arguments.length>3?arguments[3]:void 0;if(Is(e,t)){var i=\"\".concat(n,\" not supported after joining a meeting.\");throw r&&(i+=\" \".concat(r)),console.error(i),new Error(i)}}function Ns(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",n=arguments.length>2?arguments[2]:void 0;if(!e){var r=\"\".concat(t,arguments.length>3&&void 0!==arguments[3]&&arguments[3]?\" requires preAuth() or startCamera() to initialize call state.\":\" requires preAuth(), startCamera(), or join() to initialize call state.\");throw n&&(r+=\" \".concat(n)),console.error(r),new Error(r)}}function Fs(e){if(e){var t=\"A pre-call quality test is in progress. Please try \".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" again once testing has completed. Use stopTestCallQuality() to end it early.\");throw console.error(t),new Error(t)}}function Rs(e){if(!e){var t=\"\".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" is only supported on custom callObject instances\");throw console.error(t),new Error(t)}}function Bs(e){if(e){var t=\"\".concat(arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"This daily-js method\",\" is only supported as part of Daily's Prebuilt\");throw console.error(t),new Error(t)}}function Us(){if(na())throw new Error(\"This daily-js method is not currently supported in React Native\")}function Vs(){if(!na())throw new Error(\"This daily-js method is only supported in React Native\")}function Js(e){if(void 0===e)return!0;var t;if(\"string\"==typeof e)t=e;else try{t=JSON.stringify(e),D(JSON.parse(t),e)||console.warn(\"The userData provided will be modified when serialized.\")}catch(e){throw Error(\"userData must be serializable to JSON: \".concat(e))}if(t.length>4096)throw Error(\"userData is too large (\".concat(t.length,\" characters). Maximum size suppported is \").concat(4096,\".\"));return!0}function $s(e,t){for(var n=t.allowAllParticipantsKey,r=function(e){var t=[\"local\"];return n||t.push(\"*\"),e&&!t.includes(e)},i=function(e){return!!(void 0===e.layer||Number.isInteger(e.layer)&&e.layer>=0||\"inherit\"===e.layer)},o=function(e){return!!e&&(!(e.video&&!i(e.video))&&!(e.screenVideo&&!i(e.screenVideo)))},a=0,s=Object.entries(e);a<s.length;a++){var c=v(s[a],2),l=c[0],u=c[1];if(!r(l)||!o(u))return!1}return!0}function qs(e){if(\"object\"!==n(e))return!1;for(var t=0,r=Object.entries(e);t<r.length;t++){var i=v(r[t],2),o=i[0],a=i[1];switch(o){case\"video\":if(\"object\"!==n(a))return!1;for(var s=0,c=Object.entries(a);s<c.length;s++){var l=v(c[s],2),u=l[0],d=l[1];switch(u){case\"processor\":if(!Hs(d))return!1;break;case\"settings\":if(!Gs(d))return!1;break;default:return!1}}break;case\"audio\":if(\"object\"!==n(a))return!1;for(var p=0,h=Object.entries(a);p<h.length;p++){var f=v(h[p],2),g=f[0],m=f[1];switch(g){case\"processor\":if(!Ws(m))return!1;break;case\"settings\":if(!Gs(m))return!1;break;default:return!1}}break;default:return!1}}return!0}function zs(e,t,n){var r,i=[];e.video&&e.video.processor&&(sa(null!==(r=null==t?void 0:t.useLegacyVideoProcessor)&&void 0!==r&&r)||(e.video.settings?delete e.video.processor:delete e.video,i.push(\"video\")));e.audio&&e.audio.processor&&(ca()||(e.audio.settings?delete e.audio.processor:delete e.audio,i.push(\"audio\"))),i.length>0&&console.error(\"Ignoring settings for browser- or platform-unsupported input processor(s): \".concat(i.join(\", \"))),e.audio&&e.audio.settings&&(e.audio.settings.customTrack?(n.audioTrack=e.audio.settings.customTrack,e.audio.settings={customTrack:Ho}):delete n.audioTrack),e.video&&e.video.settings&&(e.video.settings.customTrack?(n.videoTrack=e.video.settings.customTrack,e.video.settings={customTrack:Ho}):delete n.videoTrack)}function Ws(e){if(na())return console.warn(\"Video processing is not yet supported in React Native\"),!1;var t=[\"type\"];return!!e&&(\"object\"===n(e)&&(Object.keys(e).filter((function(e){return!t.includes(e)})).forEach((function(t){console.warn(\"invalid key inputSettings -> audio -> processor : \".concat(t)),delete e[t]})),!!function(e){if(\"string\"!=typeof e)return!1;if(!Object.values(Qo).includes(e))return console.error(\"inputSettings audio processor type invalid\"),!1;return!0}(e.type)))}function Hs(e){if(na())return console.warn(\"Video processing is not yet supported in React Native\"),!1;var t=[\"type\",\"config\"];if(!e)return!1;if(\"object\"!==n(e))return!1;if(!function(e){if(\"string\"!=typeof e)return!1;if(!Object.values(Go).includes(e))return console.error(\"inputSettings video processor type invalid\"),!1;return!0}(e.type))return!1;if(e.config){if(\"object\"!==n(e.config))return!1;if(!function(e,t){var n=Object.keys(t);if(0===n.length)return!0;var r=\"invalid object in inputSettings -> video -> processor -> config\";switch(e){case Go.BGBLUR:return n.length>1||\"strength\"!==n[0]?(console.error(r),!1):!(\"number\"!=typeof t.strength||t.strength<=0||t.strength>1||isNaN(t.strength))||(console.error(\"\".concat(r,\"; expected: {0 < strength <= 1}, got: \").concat(t.strength)),!1);case Go.BGIMAGE:return!(void 0!==t.source&&!function(e){if(\"default\"===e.source)return e.type=\"default\",!0;if(e.source instanceof ArrayBuffer)return!0;if(Z(e.source))return e.type=\"url\",!!function(e){var t=new URL(e),n=t.pathname;if(\"data:\"===t.protocol)try{var r=n.substring(n.indexOf(\":\")+1,n.indexOf(\";\")).split(\"/\")[1];return Ko.includes(r)}catch(e){return console.error(\"failed to deduce blob content type\",e),!1}var i=n.split(\".\").at(-1).toLowerCase().trim();return Ko.includes(i)}(e.source)||(console.error(\"invalid image type; supported types: [\".concat(Ko.join(\", \"),\"]\")),!1);return t=e.source,n=Number(t),isNaN(n)||!Number.isInteger(n)||n<=0||n>10?(console.error(\"invalid image selection; must be an int, > 0, <= \".concat(10)),!1):(e.type=\"daily-preselect\",!0);var t,n}(t));default:return!0}}(e.type,e.config))return!1}return Object.keys(e).filter((function(e){return!t.includes(e)})).forEach((function(t){console.warn(\"invalid key inputSettings -> video -> processor : \".concat(t)),delete e[t]})),!0}function Gs(e){return\"object\"===n(e)&&(!e.customTrack||e.customTrack instanceof MediaStreamTrack)}function Qs(){var e=Object.values(Go).join(\" | \"),t=Object.values(Qo).join(\" | \");return\"inputSettings must be of the form: { video?: { processor?: { type: [ \".concat(e,\" ], config?: {} } }, audio?: { processor: {type: [ \").concat(t,\" ] } } }\")}function Ys(e){var t=e.allowAllParticipantsKey;return\"receiveSettings must be of the form { [<remote participant id> | \".concat(gi).concat(t?' | \"'.concat(\"*\",'\"'):\"\",\"]: \")+'{ [video: [{ layer: [<non-negative integer> | \"inherit\"] } | \"inherit\"]], [screenVideo: [{ layer: [<non-negative integer> | \"inherit\"] } | \"inherit\"]] }}}'}function Ks(){return\"customIntegrations should be an object of type \".concat(JSON.stringify(Ps),\".\")}function Xs(e){if(e&&\"object\"!==n(e)||Array.isArray(e))return console.error(\"customTrayButtons should be an Object of the type \".concat(JSON.stringify(Ts),\".\")),!1;if(e)for(var t=0,r=Object.entries(e);t<r.length;t++)for(var i=v(r[t],1)[0],o=0,a=Object.entries(e[i]);o<a.length;o++){var s=v(a[o],2),c=s[0],l=s[1],u=Ts.id[c];if(!u)return console.error(\"customTrayButton does not support key \".concat(c)),!1;switch(c){case\"iconPath\":case\"iconPathDarkMode\":if(!Z(l))return console.error(\"customTrayButton \".concat(c,\" should be a url.\")),!1;break;case\"visualState\":if(![\"default\",\"sidebar-open\",\"active\"].includes(l))return console.error(\"customTrayButton \".concat(c,\" should be \").concat(u,\". Got: \").concat(l)),!1;break;default:if(n(l)!==u)return console.error(\"customTrayButton \".concat(c,\" should be a \").concat(u,\".\")),!1}}return!0}function Zs(e){if(!e||e&&\"object\"!==n(e)||Array.isArray(e))return console.error(Ks()),!1;for(var t=function(e){return\"\".concat(e,\" should be \").concat(Ps.id[e])},r=function(e,t){return console.error(\"customIntegration \".concat(e,\": \").concat(t))},i=0,o=Object.entries(e);i<o.length;i++){var a=v(o[i],1)[0];if(!(\"label\"in e[a]))return r(a,\"label is required\"),!1;if(!(\"location\"in e[a]))return r(a,\"location is required\"),!1;if(!(\"src\"in e[a])&&!(\"srcdoc\"in e[a]))return r(a,\"src or srcdoc is required\"),!1;for(var s=0,c=Object.entries(e[a]);s<c.length;s++){var l=v(c[s],2),u=l[0],d=l[1];switch(u){case\"allow\":case\"csp\":case\"name\":case\"referrerPolicy\":case\"sandbox\":if(\"string\"!=typeof d)return r(a,t(u)),!1;break;case\"iconURL\":if(!Z(d))return r(a,\"\".concat(u,\" should be a url\")),!1;break;case\"src\":if(\"srcdoc\"in e[a])return r(a,\"cannot have both src and srcdoc\"),!1;if(!Z(d))return r(a,'src \"'.concat(d,'\" is not a valid URL')),!1;break;case\"srcdoc\":if(\"src\"in e[a])return r(a,\"cannot have both src and srcdoc\"),!1;if(\"string\"!=typeof d)return r(a,t(u)),!1;break;case\"location\":if(![\"main\",\"sidebar\"].includes(d))return r(a,t(u)),!1;break;case\"controlledBy\":if(\"*\"!==d&&\"owners\"!==d&&(!Array.isArray(d)||d.some((function(e){return\"string\"!=typeof e}))))return r(a,t(u)),!1;break;case\"shared\":if((!Array.isArray(d)||d.some((function(e){return\"string\"!=typeof e})))&&\"owners\"!==d&&\"boolean\"!=typeof d)return r(a,t(u)),!1;break;default:if(!Ps.id[u])return console.error(\"customIntegration does not support key \".concat(u)),!1}}}return!0}function ec(e,t){if(void 0===t)return!1;switch(n(t)){case\"string\":return n(e)===t;case\"object\":if(\"object\"!==n(e))return!1;for(var r in e)if(!ec(e[r],t[r]))return!1;return!0;default:return!1}}function tc(e,t){var n=e.sessionId,r=e.toEndPoint,i=e.useSipRefer;if(!n||!r)throw new Error(\"\".concat(t,\"() requires a sessionId and toEndPoint\"));if(\"string\"!=typeof n||\"string\"!=typeof r)throw new Error(\"Invalid paramater: sessionId and toEndPoint must be of type string\");if(i&&!r.startsWith(\"sip:\"))throw new Error('\"toEndPoint\" must be a \"sip\" address');if(!r.startsWith(\"sip:\")&&!r.startsWith(\"+\"))throw new Error(\"toEndPoint: \".concat(r,' must starts with either \"sip:\" or \"+\"'))}function nc(e){if(\"object\"!==n(e))throw new Error('RemoteMediaPlayerSettings: must be \"object\" type');if(e.state&&!Object.values(Yo).includes(e.state))throw new Error(\"Invalid value for RemoteMediaPlayerSettings.state, valid values are: \"+JSON.stringify(Yo));if(e.volume){if(\"number\"!=typeof e.volume)throw new Error('RemoteMediaPlayerSettings.volume: must be \"number\" type');if(e.volume<0||e.volume>2)throw new Error(\"RemoteMediaPlayerSettings.volume: must be between 0.0 - 2.0\")}}function rc(e,t,n){return!(\"number\"!=typeof e||e<t||e>n)}function ic(e,t){return e&&!t&&delete e.data,e}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AZGFpbHktY28vZGFpbHktanMvZGlzdC9kYWlseS1lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLGdCQUFnQixvQkFBb0Isd0JBQXdCLG9CQUFvQixZQUFZLGtCQUFrQixRQUFRLFdBQVcsd0NBQXdDLFNBQVMsTUFBTSxpQ0FBaUMsc0NBQXNDLFFBQVEsV0FBVyx5RkFBeUYsU0FBUyxnQkFBZ0IsOEVBQThFLGNBQWMsaUZBQWlGLGdCQUFnQixhQUFhLG9HQUFvRyxNQUFNLGNBQWMsb0JBQW9CLHNDQUFzQyw0QkFBNEIsZUFBZSw2QkFBNkIsNEJBQTRCLG9FQUFvRSxzQ0FBc0MsYUFBYSxrQ0FBa0MsZ0JBQWdCLFlBQVksV0FBVyxLQUFLLFdBQVcsa0hBQWtILGtCQUFrQiwwRUFBMEUsWUFBWSxJQUFJLGNBQWMsb0dBQW9HLFNBQVMsZ0JBQWdCLDBFQUEwRSx1QkFBdUIsUUFBUSxnQkFBZ0IsNEdBQTRHLDBDQUEwQyxhQUFhLHFDQUFxQyx1Q0FBdUMsWUFBWSxZQUFZLGdCQUFnQix1REFBdUQsOEZBQThGLFlBQVksY0FBYyx3RUFBd0UsNkNBQTZDLE1BQU0sa0JBQWtCLDhDQUE4QyxrREFBa0QsV0FBVywwQkFBMEIsSUFBSSx3QkFBd0IsU0FBUyxpQkFBaUIseUNBQXlDLGNBQWMsa0JBQWtCLHVCQUF1QixrQ0FBa0MsbUJBQW1CLGNBQWMsc0JBQXNCLGNBQWMsdUJBQXVCLFVBQVUsSUFBSSxnQkFBZ0Isb0NBQW9DLDJCQUEyQixJQUFJLGNBQWMsU0FBUyxnQkFBZ0IsbUJBQW1CLDZCQUE2QixtQkFBbUIsbUZBQW1GLFlBQVksMkJBQTJCLElBQUksK0JBQStCLHdCQUF3QixLQUFLLFVBQVUsd0RBQXdELE9BQU8sU0FBUyxTQUFTLFFB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QVMsZUFBZSwwRUFBMEUsc0JBQXNCLGtEQUFrRCxpQkFBaUIsb0VBQW9FLHlCQUF5QixXQUFXLEtBQUssbUJBQW1CLHdEQUF3RCw4REFBOEQsa0ZBQWtGLG1DQUFtQyxXQUFXLEtBQUssOEJBQThCLFVBQVUsOEdBQThHLE1BQU0sc0VBQXNFLE1BQU0sOEVBQThFLGlFQUFpRSxNQUFNLDhFQUE4RSwwQ0FBMEMsTUFBTSxzRUFBc0UsTUFBTSxxRkFBcUYseUJBQXlCLHdCQUF3QixNQUFNLHdEQUF3RCx5QkFBeUIsMkRBQTJELE1BQU0sb0dBQW9HLFNBQVMsaUJBQWlCLHVCQUF1QixhQUFhLDZCQUE2Qix5Q0FBeUMsMENBQTBDLFNBQVMsa0JBQWtCLGlCQUFpQixpREFBaUQsaUZBQWlGLGdJQUFnSSxvRkFBb0YsZ0lBQWdJLGVBQWUsdUZBQXVGLDZKQUE2SixhQUFhLHdHQUF3RywwR0FBMEcsbUJBQW1CLHNDQUFzQyxpQkFBaUIsOEJBQTQxRyIsInNvdXJjZXMiOlsiL1VzZXJzL2FkaXNpbi9EZXNrdG9wL3ByZXB3aXNlL25vZGVfbW9kdWxlcy9AZGFpbHktY28vZGFpbHktanMvZGlzdC9kYWlseS1lc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZShlLHQpe2lmKG51bGw9PWUpcmV0dXJue307dmFyIG4scixpPWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09ZSlyZXR1cm57fTt2YXIgbixyLGk9e30sbz1PYmplY3Qua2V5cyhlKTtmb3Iocj0wO3I8by5sZW5ndGg7cisrKW49b1tyXSx0LmluZGV4T2Yobik+PTB8fChpW25dPWVbbl0pO3JldHVybiBpfShlLHQpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7Zm9yKHI9MDtyPG8ubGVuZ3RoO3IrKyluPW9bcl0sdC5pbmRleE9mKG4pPj0wfHxPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoZSxuKSYmKGlbbl09ZVtuXSl9cmV0dXJuIGl9ZnVuY3Rpb24gdChlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gbihlKXtyZXR1cm4gbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfSxuKGUpfWZ1bmN0aW9uIHIoZSl7dmFyIHQ9ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiIT09bihlKXx8bnVsbD09PWUpcmV0dXJuIGU7dmFyIHI9ZVtTeW1ib2wudG9QcmltaXRpdmVdO2lmKHZvaWQgMCE9PXIpe3ZhciBpPXIuY2FsbChlLHR8fFwiZGVmYXVsdFwiKTtpZihcIm9iamVjdFwiIT09bihpKSlyZXR1cm4gaTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIil9cmV0dXJuKFwic3RyaW5nXCI9PT10P1N0cmluZzpOdW1iZXIpKGUpfShlLFwic3RyaW5nXCIpO3JldHVyblwic3ltYm9sXCI9PT1uKHQpP3Q6U3RyaW5nKHQpfWZ1bmN0aW9uIGkoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIGk9dFtuXTtpLmVudW1lcmFibGU9aS5lbnVtZXJhYmxlfHwhMSxpLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBpJiYoaS53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUscihpLmtleSksaSl9fWZ1bmN0aW9uIG8oZSx0LG4pe3JldHVybiB0JiZpKGUucHJvdG90eXBlLHQpLG4mJmkoZSxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLGV9ZnVuY3Rpb24gYShlKXtpZih2b2lkIDA9PT1lKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gZX1mdW5jdGlvbiBzKGUsdCl7cmV0dXJuIHM9T2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCk6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5fX3Byb3RvX189dCxlfSxzKGUsdCl9ZnVuY3Rpb24gYyhlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHQmJnQucHJvdG90eXBlLHtjb25zdHJ1Y3Rvcjp7dmFsdWU6ZSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJwcm90b3R5cGVcIix7d3JpdGFibGU6ITF9KSx0JiZzKGUsdCl9ZnVuY3Rpb24gbChlLHQpe2lmKHQmJihcIm9iamVjdFwiPT09bih0KXx8XCJmdW5jdGlvblwiPT10eXBlb2YgdCkpcmV0dXJuIHQ7aWYodm9pZCAwIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7cmV0dXJuIGEoZSl9ZnVuY3Rpb24gdShlKXtyZXR1cm4gdT1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LmdldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihlKX0sdShlKX1mdW5jdGlvbiBkKGUsdCxuKXtyZXR1cm4odD1yKHQpKWluIGU/T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOmVbdF09bixlfWZ1bmN0aW9uIHAoZSx0LG4scixpLG8sYSl7dHJ5e3ZhciBzPWVbb10oYSksYz1zLnZhbHVlfWNhdGNoKGUpe3JldHVybiB2b2lkIG4oZSl9cy5kb25lP3QoYyk6UHJvbWlzZS5yZXNvbHZlKGMpLnRoZW4ocixpKX1mdW5jdGlvbiBoKGUpe3JldHVybiBmdW5jdGlvbigpe3ZhciB0PXRoaXMsbj1hcmd1bWVudHM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihyLGkpe3ZhciBvPWUuYXBwbHkodCxuKTtmdW5jdGlvbiBhKGUpe3AobyxyLGksYSxzLFwibmV4dFwiLGUpfWZ1bmN0aW9uIHMoZSl7cChvLHIsaSxhLHMsXCJ0aHJvd1wiLGUpfWEodm9pZCAwKX0pKX19ZnVuY3Rpb24gZihlLHQpeyhudWxsPT10fHx0PmUubGVuZ3RoKSYmKHQ9ZS5sZW5ndGgpO2Zvcih2YXIgbj0wLHI9bmV3IEFycmF5KHQpO248dDtuKyspcltuXT1lW25dO3JldHVybiByfWZ1bmN0aW9uIHYoZSx0KXtyZXR1cm4gZnVuY3Rpb24oZSl7aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZX0oZSl8fGZ1bmN0aW9uKGUsdCl7dmFyIG49bnVsbD09ZT9udWxsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmVbU3ltYm9sLml0ZXJhdG9yXXx8ZVtcIkBAaXRlcmF0b3JcIl07aWYobnVsbCE9bil7dmFyIHIsaSxvLGEscz1bXSxjPSEwLGw9ITE7dHJ5e2lmKG89KG49bi5jYWxsKGUpKS5uZXh0LDA9PT10KXtpZihPYmplY3QobikhPT1uKXJldHVybjtjPSExfWVsc2UgZm9yKDshKGM9KHI9by5jYWxsKG4pKS5kb25lKSYmKHMucHVzaChyLnZhbHVlKSxzLmxlbmd0aCE9PXQpO2M9ITApO31jYXRjaChlKXtsPSEwLGk9ZX1maW5hbGx5e3RyeXtpZighYyYmbnVsbCE9bi5yZXR1cm4mJihhPW4ucmV0dXJuKCksT2JqZWN0KGEpIT09YSkpcmV0dXJufWZpbmFsbHl7aWYobCl0aHJvdyBpfX1yZXR1cm4gc319KGUsdCl8fGZ1bmN0aW9uKGUsdCl7aWYoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGYoZSx0KTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7cmV0dXJuXCJPYmplY3RcIj09PW4mJmUuY29uc3RydWN0b3ImJihuPWUuY29uc3RydWN0b3IubmFtZSksXCJNYXBcIj09PW58fFwiU2V0XCI9PT1uP0FycmF5LmZyb20oZSk6XCJBcmd1bWVudHNcIj09PW58fC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pP2YoZSx0KTp2b2lkIDB9fShlLHQpfHxmdW5jdGlvbigpe3Rocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIil9KCl9dmFyIGcsbT17fSx5PXtnZXQgZXhwb3J0cygpe3JldHVybiBtfSxzZXQgZXhwb3J0cyhlKXttPWV9fSxfPVwib2JqZWN0XCI9PXR5cGVvZiBSZWZsZWN0P1JlZmxlY3Q6bnVsbCxiPV8mJlwiZnVuY3Rpb25cIj09dHlwZW9mIF8uYXBwbHk/Xy5hcHBseTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGUsdCxuKX07Zz1fJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBfLm93bktleXM/Xy5vd25LZXlzOk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpKX06ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpfTt2YXIgdz1OdW1iZXIuaXNOYU58fGZ1bmN0aW9uKGUpe3JldHVybiBlIT1lfTtmdW5jdGlvbiBrKCl7ay5pbml0LmNhbGwodGhpcyl9eS5leHBvcnRzPWssbS5vbmNlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe2Z1bmN0aW9uIGkobil7ZS5yZW1vdmVMaXN0ZW5lcih0LG8pLHIobil9ZnVuY3Rpb24gbygpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUucmVtb3ZlTGlzdGVuZXImJmUucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLGkpLG4oW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKX1MKGUsdCxvLHtvbmNlOiEwfSksXCJlcnJvclwiIT09dCYmZnVuY3Rpb24oZSx0LG4pe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUub24mJkwoZSxcImVycm9yXCIsdCxuKX0oZSxpLHtvbmNlOiEwfSl9KSl9LGsuRXZlbnRFbWl0dGVyPWssay5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAsay5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTAsay5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDA7dmFyIFM9MTA7ZnVuY3Rpb24gTShlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGUpfWZ1bmN0aW9uIEMoZSl7cmV0dXJuIHZvaWQgMD09PWUuX21heExpc3RlbmVycz9rLmRlZmF1bHRNYXhMaXN0ZW5lcnM6ZS5fbWF4TGlzdGVuZXJzfWZ1bmN0aW9uIEUoZSx0LG4scil7dmFyIGksbyxhLHM7aWYoTShuKSx2b2lkIDA9PT0obz1lLl9ldmVudHMpPyhvPWUuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLGUuX2V2ZW50c0NvdW50PTApOih2b2lkIDAhPT1vLm5ld0xpc3RlbmVyJiYoZS5lbWl0KFwibmV3TGlzdGVuZXJcIix0LG4ubGlzdGVuZXI/bi5saXN0ZW5lcjpuKSxvPWUuX2V2ZW50cyksYT1vW3RdKSx2b2lkIDA9PT1hKWE9b1t0XT1uLCsrZS5fZXZlbnRzQ291bnQ7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2E9b1t0XT1yP1tuLGFdOlthLG5dOnI/YS51bnNoaWZ0KG4pOmEucHVzaChuKSwoaT1DKGUpKT4wJiZhLmxlbmd0aD5pJiYhYS53YXJuZWQpe2Eud2FybmVkPSEwO3ZhciBjPW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrYS5sZW5ndGgrXCIgXCIrU3RyaW5nKHQpK1wiIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXRcIik7Yy5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCIsYy5lbWl0dGVyPWUsYy50eXBlPXQsYy5jb3VudD1hLmxlbmd0aCxzPWMsY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4ocyl9cmV0dXJuIGV9ZnVuY3Rpb24gVCgpe2lmKCF0aGlzLmZpcmVkKXJldHVybiB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsdGhpcy53cmFwRm4pLHRoaXMuZmlyZWQ9ITAsMD09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTp0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LGFyZ3VtZW50cyl9ZnVuY3Rpb24gUChlLHQsbil7dmFyIHI9e2ZpcmVkOiExLHdyYXBGbjp2b2lkIDAsdGFyZ2V0OmUsdHlwZTp0LGxpc3RlbmVyOm59LGk9VC5iaW5kKHIpO3JldHVybiBpLmxpc3RlbmVyPW4sci53cmFwRm49aSxpfWZ1bmN0aW9uIE8oZSx0LG4pe3ZhciByPWUuX2V2ZW50cztpZih2b2lkIDA9PT1yKXJldHVybltdO3ZhciBpPXJbdF07cmV0dXJuIHZvaWQgMD09PWk/W106XCJmdW5jdGlvblwiPT10eXBlb2YgaT9uP1tpLmxpc3RlbmVyfHxpXTpbaV06bj9mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IEFycmF5KGUubGVuZ3RoKSxuPTA7bjx0Lmxlbmd0aDsrK24pdFtuXT1lW25dLmxpc3RlbmVyfHxlW25dO3JldHVybiB0fShpKTpqKGksaS5sZW5ndGgpfWZ1bmN0aW9uIEEoZSl7dmFyIHQ9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXQpe3ZhciBuPXRbZV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gMTtpZih2b2lkIDAhPT1uKXJldHVybiBuLmxlbmd0aH1yZXR1cm4gMH1mdW5jdGlvbiBqKGUsdCl7Zm9yKHZhciBuPW5ldyBBcnJheSh0KSxyPTA7cjx0OysrciluW3JdPWVbcl07cmV0dXJuIG59ZnVuY3Rpb24gTChlLHQsbixyKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9uKXIub25jZT9lLm9uY2UodCxuKTplLm9uKHQsbik7ZWxzZXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlLmFkZEV2ZW50TGlzdGVuZXIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgZSk7ZS5hZGRFdmVudExpc3RlbmVyKHQsKGZ1bmN0aW9uIGkobyl7ci5vbmNlJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxpKSxuKG8pfSkpfX1PYmplY3QuZGVmaW5lUHJvcGVydHkoayxcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gU30sc2V0OmZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDB8fHcoZSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK2UrXCIuXCIpO1M9ZX19KSxrLmluaXQ9ZnVuY3Rpb24oKXt2b2lkIDAhPT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50cyE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzfHwodGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCksdGhpcy5fbWF4TGlzdGVuZXJzPXRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfSxrLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGV8fGU8MHx8dyhlKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZStcIi5cIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LGsucHJvdG90eXBlLmdldE1heExpc3RlbmVycz1mdW5jdGlvbigpe3JldHVybiBDKHRoaXMpfSxrLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0LnB1c2goYXJndW1lbnRzW25dKTt2YXIgcj1cImVycm9yXCI9PT1lLGk9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PWkpcj1yJiZ2b2lkIDA9PT1pLmVycm9yO2Vsc2UgaWYoIXIpcmV0dXJuITE7aWYocil7dmFyIG87aWYodC5sZW5ndGg+MCYmKG89dFswXSksbyBpbnN0YW5jZW9mIEVycm9yKXRocm93IG87dmFyIGE9bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhvP1wiIChcIitvLm1lc3NhZ2UrXCIpXCI6XCJcIikpO3Rocm93IGEuY29udGV4dD1vLGF9dmFyIHM9aVtlXTtpZih2b2lkIDA9PT1zKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHMpYihzLHRoaXMsdCk7ZWxzZXt2YXIgYz1zLmxlbmd0aCxsPWoocyxjKTtmb3Iobj0wO248YzsrK24pYihsW25dLHRoaXMsdCl9cmV0dXJuITB9LGsucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEUodGhpcyxlLHQsITEpfSxrLnByb3RvdHlwZS5vbj1rLnByb3RvdHlwZS5hZGRMaXN0ZW5lcixrLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gRSh0aGlzLGUsdCwhMCl9LGsucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTSh0KSx0aGlzLm9uKGUsUCh0aGlzLGUsdCkpLHRoaXN9LGsucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTSh0KSx0aGlzLnByZXBlbmRMaXN0ZW5lcihlLFAodGhpcyxlLHQpKSx0aGlzfSxrLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGE7aWYoTSh0KSx2b2lkIDA9PT0ocj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PShuPXJbZV0pKXJldHVybiB0aGlzO2lmKG49PT10fHxuLmxpc3RlbmVyPT09dCkwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOihkZWxldGUgcltlXSxyLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsbi5saXN0ZW5lcnx8dCkpO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil7Zm9yKGk9LTEsbz1uLmxlbmd0aC0xO28+PTA7by0tKWlmKG5bb109PT10fHxuW29dLmxpc3RlbmVyPT09dCl7YT1uW29dLmxpc3RlbmVyLGk9bzticmVha31pZihpPDApcmV0dXJuIHRoaXM7MD09PWk/bi5zaGlmdCgpOmZ1bmN0aW9uKGUsdCl7Zm9yKDt0KzE8ZS5sZW5ndGg7dCsrKWVbdF09ZVt0KzFdO2UucG9wKCl9KG4saSksMT09PW4ubGVuZ3RoJiYocltlXT1uWzBdKSx2b2lkIDAhPT1yLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsYXx8dCl9cmV0dXJuIHRoaXN9LGsucHJvdG90eXBlLm9mZj1rLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcixrLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQsbixyO2lmKHZvaWQgMD09PShuPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYodm9pZCAwPT09bi5yZW1vdmVMaXN0ZW5lcilyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApOnZvaWQgMCE9PW5bZV0mJigwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOmRlbGV0ZSBuW2VdKSx0aGlzO2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgaSxvPU9iamVjdC5rZXlzKG4pO2ZvcihyPTA7cjxvLmxlbmd0aDsrK3IpXCJyZW1vdmVMaXN0ZW5lclwiIT09KGk9b1tyXSkmJnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGkpO3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpLHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTAsdGhpc31pZihcImZ1bmN0aW9uXCI9PXR5cGVvZih0PW5bZV0pKXRoaXMucmVtb3ZlTGlzdGVuZXIoZSx0KTtlbHNlIGlmKHZvaWQgMCE9PXQpZm9yKHI9dC5sZW5ndGgtMTtyPj0wO3ItLSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdFtyXSk7cmV0dXJuIHRoaXN9LGsucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gTyh0aGlzLGUsITApfSxrLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIE8odGhpcyxlLCExKX0say5saXN0ZW5lckNvdW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZS5saXN0ZW5lckNvdW50P2UubGlzdGVuZXJDb3VudCh0KTpBLmNhbGwoZSx0KX0say5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1BLGsucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9nKHRoaXMuX2V2ZW50cyk6W119O3ZhciB4PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gSShlLHQsbil7Zm9yKG4gb2YgZS5rZXlzKCkpaWYoRChuLHQpKXJldHVybiBufWZ1bmN0aW9uIEQoZSx0KXt2YXIgbixyLGk7aWYoZT09PXQpcmV0dXJuITA7aWYoZSYmdCYmKG49ZS5jb25zdHJ1Y3Rvcik9PT10LmNvbnN0cnVjdG9yKXtpZihuPT09RGF0ZSlyZXR1cm4gZS5nZXRUaW1lKCk9PT10LmdldFRpbWUoKTtpZihuPT09UmVnRXhwKXJldHVybiBlLnRvU3RyaW5nKCk9PT10LnRvU3RyaW5nKCk7aWYobj09PUFycmF5KXtpZigocj1lLmxlbmd0aCk9PT10Lmxlbmd0aClmb3IoO3ItLSYmRChlW3JdLHRbcl0pOyk7cmV0dXJuLTE9PT1yfWlmKG49PT1TZXQpe2lmKGUuc2l6ZSE9PXQuc2l6ZSlyZXR1cm4hMTtmb3IociBvZiBlKXtpZigoaT1yKSYmXCJvYmplY3RcIj09dHlwZW9mIGkmJiEoaT1JKHQsaSkpKXJldHVybiExO2lmKCF0LmhhcyhpKSlyZXR1cm4hMX1yZXR1cm4hMH1pZihuPT09TWFwKXtpZihlLnNpemUhPT10LnNpemUpcmV0dXJuITE7Zm9yKHIgb2YgZSl7aWYoKGk9clswXSkmJlwib2JqZWN0XCI9PXR5cGVvZiBpJiYhKGk9SSh0LGkpKSlyZXR1cm4hMTtpZighRChyWzFdLHQuZ2V0KGkpKSlyZXR1cm4hMX1yZXR1cm4hMH1pZihuPT09QXJyYXlCdWZmZXIpZT1uZXcgVWludDhBcnJheShlKSx0PW5ldyBVaW50OEFycmF5KHQpO2Vsc2UgaWYobj09PURhdGFWaWV3KXtpZigocj1lLmJ5dGVMZW5ndGgpPT09dC5ieXRlTGVuZ3RoKWZvcig7ci0tJiZlLmdldEludDgocik9PT10LmdldEludDgocik7KTtyZXR1cm4tMT09PXJ9aWYoQXJyYXlCdWZmZXIuaXNWaWV3KGUpKXtpZigocj1lLmJ5dGVMZW5ndGgpPT09dC5ieXRlTGVuZ3RoKWZvcig7ci0tJiZlW3JdPT09dFtyXTspO3JldHVybi0xPT09cn1pZighbnx8XCJvYmplY3RcIj09dHlwZW9mIGUpe2ZvcihuIGluIHI9MCxlKXtpZih4LmNhbGwoZSxuKSYmKytyJiYheC5jYWxsKHQsbikpcmV0dXJuITE7aWYoIShuIGluIHQpfHwhRChlW25dLHRbbl0pKXJldHVybiExfXJldHVybiBPYmplY3Qua2V5cyh0KS5sZW5ndGg9PT1yfX1yZXR1cm4gZSE9ZSYmdCE9dH1jb25zdCBOPXtcIkFtYXpvbiBTaWxrXCI6XCJhbWF6b25fc2lsa1wiLFwiQW5kcm9pZCBCcm93c2VyXCI6XCJhbmRyb2lkXCIsQmFkYTpcImJhZGFcIixCbGFja0JlcnJ5OlwiYmxhY2tiZXJyeVwiLENocm9tZTpcImNocm9tZVwiLENocm9taXVtOlwiY2hyb21pdW1cIixFbGVjdHJvbjpcImVsZWN0cm9uXCIsRXBpcGhhbnk6XCJlcGlwaGFueVwiLEZpcmVmb3g6XCJmaXJlZm94XCIsRm9jdXM6XCJmb2N1c1wiLEdlbmVyaWM6XCJnZW5lcmljXCIsXCJHb29nbGUgU2VhcmNoXCI6XCJnb29nbGVfc2VhcmNoXCIsR29vZ2xlYm90OlwiZ29vZ2xlYm90XCIsXCJJbnRlcm5ldCBFeHBsb3JlclwiOlwiaWVcIixcIkstTWVsZW9uXCI6XCJrX21lbGVvblwiLE1heHRob246XCJtYXh0aG9uXCIsXCJNaWNyb3NvZnQgRWRnZVwiOlwiZWRnZVwiLFwiTVogQnJvd3NlclwiOlwibXpcIixcIk5BVkVSIFdoYWxlIEJyb3dzZXJcIjpcIm5hdmVyXCIsT3BlcmE6XCJvcGVyYVwiLFwiT3BlcmEgQ29hc3RcIjpcIm9wZXJhX2NvYXN0XCIsUGhhbnRvbUpTOlwicGhhbnRvbWpzXCIsUHVmZmluOlwicHVmZmluXCIsUXVwWmlsbGE6XCJxdXB6aWxsYVwiLFFROlwicXFcIixRUUxpdGU6XCJxcWxpdGVcIixTYWZhcmk6XCJzYWZhcmlcIixTYWlsZmlzaDpcInNhaWxmaXNoXCIsXCJTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkXCI6XCJzYW1zdW5nX2ludGVybmV0XCIsU2VhTW9ua2V5Olwic2VhbW9ua2V5XCIsU2xlaXBuaXI6XCJzbGVpcG5pclwiLFN3aW5nOlwic3dpbmdcIixUaXplbjpcInRpemVuXCIsXCJVQyBCcm93c2VyXCI6XCJ1Y1wiLFZpdmFsZGk6XCJ2aXZhbGRpXCIsXCJXZWJPUyBCcm93c2VyXCI6XCJ3ZWJvc1wiLFdlQ2hhdDpcIndlY2hhdFwiLFwiWWFuZGV4IEJyb3dzZXJcIjpcInlhbmRleFwiLFJva3U6XCJyb2t1XCJ9LEY9e2FtYXpvbl9zaWxrOlwiQW1hem9uIFNpbGtcIixhbmRyb2lkOlwiQW5kcm9pZCBCcm93c2VyXCIsYmFkYTpcIkJhZGFcIixibGFja2JlcnJ5OlwiQmxhY2tCZXJyeVwiLGNocm9tZTpcIkNocm9tZVwiLGNocm9taXVtOlwiQ2hyb21pdW1cIixlbGVjdHJvbjpcIkVsZWN0cm9uXCIsZXBpcGhhbnk6XCJFcGlwaGFueVwiLGZpcmVmb3g6XCJGaXJlZm94XCIsZm9jdXM6XCJGb2N1c1wiLGdlbmVyaWM6XCJHZW5lcmljXCIsZ29vZ2xlYm90OlwiR29vZ2xlYm90XCIsZ29vZ2xlX3NlYXJjaDpcIkdvb2dsZSBTZWFyY2hcIixpZTpcIkludGVybmV0IEV4cGxvcmVyXCIsa19tZWxlb246XCJLLU1lbGVvblwiLG1heHRob246XCJNYXh0aG9uXCIsZWRnZTpcIk1pY3Jvc29mdCBFZGdlXCIsbXo6XCJNWiBCcm93c2VyXCIsbmF2ZXI6XCJOQVZFUiBXaGFsZSBCcm93c2VyXCIsb3BlcmE6XCJPcGVyYVwiLG9wZXJhX2NvYXN0OlwiT3BlcmEgQ29hc3RcIixwaGFudG9tanM6XCJQaGFudG9tSlNcIixwdWZmaW46XCJQdWZmaW5cIixxdXB6aWxsYTpcIlF1cFppbGxhXCIscXE6XCJRUSBCcm93c2VyXCIscXFsaXRlOlwiUVEgQnJvd3NlciBMaXRlXCIsc2FmYXJpOlwiU2FmYXJpXCIsc2FpbGZpc2g6XCJTYWlsZmlzaFwiLHNhbXN1bmdfaW50ZXJuZXQ6XCJTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkXCIsc2VhbW9ua2V5OlwiU2VhTW9ua2V5XCIsc2xlaXBuaXI6XCJTbGVpcG5pclwiLHN3aW5nOlwiU3dpbmdcIix0aXplbjpcIlRpemVuXCIsdWM6XCJVQyBCcm93c2VyXCIsdml2YWxkaTpcIlZpdmFsZGlcIix3ZWJvczpcIldlYk9TIEJyb3dzZXJcIix3ZWNoYXQ6XCJXZUNoYXRcIix5YW5kZXg6XCJZYW5kZXggQnJvd3NlclwifSxSPXt0YWJsZXQ6XCJ0YWJsZXRcIixtb2JpbGU6XCJtb2JpbGVcIixkZXNrdG9wOlwiZGVza3RvcFwiLHR2OlwidHZcIn0sQj17V2luZG93c1Bob25lOlwiV2luZG93cyBQaG9uZVwiLFdpbmRvd3M6XCJXaW5kb3dzXCIsTWFjT1M6XCJtYWNPU1wiLGlPUzpcImlPU1wiLEFuZHJvaWQ6XCJBbmRyb2lkXCIsV2ViT1M6XCJXZWJPU1wiLEJsYWNrQmVycnk6XCJCbGFja0JlcnJ5XCIsQmFkYTpcIkJhZGFcIixUaXplbjpcIlRpemVuXCIsTGludXg6XCJMaW51eFwiLENocm9tZU9TOlwiQ2hyb21lIE9TXCIsUGxheVN0YXRpb240OlwiUGxheVN0YXRpb24gNFwiLFJva3U6XCJSb2t1XCJ9LFU9e0VkZ2VIVE1MOlwiRWRnZUhUTUxcIixCbGluazpcIkJsaW5rXCIsVHJpZGVudDpcIlRyaWRlbnRcIixQcmVzdG86XCJQcmVzdG9cIixHZWNrbzpcIkdlY2tvXCIsV2ViS2l0OlwiV2ViS2l0XCJ9O2NsYXNzIFZ7c3RhdGljIGdldEZpcnN0TWF0Y2goZSx0KXtjb25zdCBuPXQubWF0Y2goZSk7cmV0dXJuIG4mJm4ubGVuZ3RoPjAmJm5bMV18fFwiXCJ9c3RhdGljIGdldFNlY29uZE1hdGNoKGUsdCl7Y29uc3Qgbj10Lm1hdGNoKGUpO3JldHVybiBuJiZuLmxlbmd0aD4xJiZuWzJdfHxcIlwifXN0YXRpYyBtYXRjaEFuZFJldHVybkNvbnN0KGUsdCxuKXtpZihlLnRlc3QodCkpcmV0dXJuIG59c3RhdGljIGdldFdpbmRvd3NWZXJzaW9uTmFtZShlKXtzd2l0Y2goZSl7Y2FzZVwiTlRcIjpyZXR1cm5cIk5UXCI7Y2FzZVwiWFBcIjpjYXNlXCJOVCA1LjFcIjpyZXR1cm5cIlhQXCI7Y2FzZVwiTlQgNS4wXCI6cmV0dXJuXCIyMDAwXCI7Y2FzZVwiTlQgNS4yXCI6cmV0dXJuXCIyMDAzXCI7Y2FzZVwiTlQgNi4wXCI6cmV0dXJuXCJWaXN0YVwiO2Nhc2VcIk5UIDYuMVwiOnJldHVyblwiN1wiO2Nhc2VcIk5UIDYuMlwiOnJldHVyblwiOFwiO2Nhc2VcIk5UIDYuM1wiOnJldHVyblwiOC4xXCI7Y2FzZVwiTlQgMTAuMFwiOnJldHVyblwiMTBcIjtkZWZhdWx0OnJldHVybn19c3RhdGljIGdldE1hY09TVmVyc2lvbk5hbWUoZSl7Y29uc3QgdD1lLnNwbGl0KFwiLlwiKS5zcGxpY2UoMCwyKS5tYXAoKGU9PnBhcnNlSW50KGUsMTApfHwwKSk7aWYodC5wdXNoKDApLDEwPT09dFswXSlzd2l0Y2godFsxXSl7Y2FzZSA1OnJldHVyblwiTGVvcGFyZFwiO2Nhc2UgNjpyZXR1cm5cIlNub3cgTGVvcGFyZFwiO2Nhc2UgNzpyZXR1cm5cIkxpb25cIjtjYXNlIDg6cmV0dXJuXCJNb3VudGFpbiBMaW9uXCI7Y2FzZSA5OnJldHVyblwiTWF2ZXJpY2tzXCI7Y2FzZSAxMDpyZXR1cm5cIllvc2VtaXRlXCI7Y2FzZSAxMTpyZXR1cm5cIkVsIENhcGl0YW5cIjtjYXNlIDEyOnJldHVyblwiU2llcnJhXCI7Y2FzZSAxMzpyZXR1cm5cIkhpZ2ggU2llcnJhXCI7Y2FzZSAxNDpyZXR1cm5cIk1vamF2ZVwiO2Nhc2UgMTU6cmV0dXJuXCJDYXRhbGluYVwiO2RlZmF1bHQ6cmV0dXJufX1zdGF0aWMgZ2V0QW5kcm9pZFZlcnNpb25OYW1lKGUpe2NvbnN0IHQ9ZS5zcGxpdChcIi5cIikuc3BsaWNlKDAsMikubWFwKChlPT5wYXJzZUludChlLDEwKXx8MCkpO2lmKHQucHVzaCgwKSwhKDE9PT10WzBdJiZ0WzFdPDUpKXJldHVybiAxPT09dFswXSYmdFsxXTw2P1wiQ3VwY2FrZVwiOjE9PT10WzBdJiZ0WzFdPj02P1wiRG9udXRcIjoyPT09dFswXSYmdFsxXTwyP1wiRWNsYWlyXCI6Mj09PXRbMF0mJjI9PT10WzFdP1wiRnJveW9cIjoyPT09dFswXSYmdFsxXT4yP1wiR2luZ2VyYnJlYWRcIjozPT09dFswXT9cIkhvbmV5Y29tYlwiOjQ9PT10WzBdJiZ0WzFdPDE/XCJJY2UgQ3JlYW0gU2FuZHdpY2hcIjo0PT09dFswXSYmdFsxXTw0P1wiSmVsbHkgQmVhblwiOjQ9PT10WzBdJiZ0WzFdPj00P1wiS2l0S2F0XCI6NT09PXRbMF0/XCJMb2xsaXBvcFwiOjY9PT10WzBdP1wiTWFyc2htYWxsb3dcIjo3PT09dFswXT9cIk5vdWdhdFwiOjg9PT10WzBdP1wiT3Jlb1wiOjk9PT10WzBdP1wiUGllXCI6dm9pZCAwfXN0YXRpYyBnZXRWZXJzaW9uUHJlY2lzaW9uKGUpe3JldHVybiBlLnNwbGl0KFwiLlwiKS5sZW5ndGh9c3RhdGljIGNvbXBhcmVWZXJzaW9ucyhlLHQsbj0hMSl7Y29uc3Qgcj1WLmdldFZlcnNpb25QcmVjaXNpb24oZSksaT1WLmdldFZlcnNpb25QcmVjaXNpb24odCk7bGV0IG89TWF0aC5tYXgocixpKSxhPTA7Y29uc3Qgcz1WLm1hcChbZSx0XSwoZT0+e2NvbnN0IHQ9by1WLmdldFZlcnNpb25QcmVjaXNpb24oZSksbj1lK25ldyBBcnJheSh0KzEpLmpvaW4oXCIuMFwiKTtyZXR1cm4gVi5tYXAobi5zcGxpdChcIi5cIiksKGU9Pm5ldyBBcnJheSgyMC1lLmxlbmd0aCkuam9pbihcIjBcIikrZSkpLnJldmVyc2UoKX0pKTtmb3IobiYmKGE9by1NYXRoLm1pbihyLGkpKSxvLT0xO28+PWE7KXtpZihzWzBdW29dPnNbMV1bb10pcmV0dXJuIDE7aWYoc1swXVtvXT09PXNbMV1bb10pe2lmKG89PT1hKXJldHVybiAwO28tPTF9ZWxzZSBpZihzWzBdW29dPHNbMV1bb10pcmV0dXJuLTF9fXN0YXRpYyBtYXAoZSx0KXtjb25zdCBuPVtdO2xldCByO2lmKEFycmF5LnByb3RvdHlwZS5tYXApcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChlLHQpO2ZvcihyPTA7cjxlLmxlbmd0aDtyKz0xKW4ucHVzaCh0KGVbcl0pKTtyZXR1cm4gbn1zdGF0aWMgZmluZChlLHQpe2xldCBuLHI7aWYoQXJyYXkucHJvdG90eXBlLmZpbmQpcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maW5kLmNhbGwoZSx0KTtmb3Iobj0wLHI9ZS5sZW5ndGg7bjxyO24rPTEpe2NvbnN0IHI9ZVtuXTtpZih0KHIsbikpcmV0dXJuIHJ9fXN0YXRpYyBhc3NpZ24oZSwuLi50KXtjb25zdCBuPWU7bGV0IHIsaTtpZihPYmplY3QuYXNzaWduKXJldHVybiBPYmplY3QuYXNzaWduKGUsLi4udCk7Zm9yKHI9MCxpPXQubGVuZ3RoO3I8aTtyKz0xKXtjb25zdCBlPXRbcl07aWYoXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lKXtPYmplY3Qua2V5cyhlKS5mb3JFYWNoKCh0PT57blt0XT1lW3RdfSkpfX1yZXR1cm4gZX1zdGF0aWMgZ2V0QnJvd3NlckFsaWFzKGUpe3JldHVybiBOW2VdfXN0YXRpYyBnZXRCcm93c2VyVHlwZUJ5QWxpYXMoZSl7cmV0dXJuIEZbZV18fFwiXCJ9fWNvbnN0IEo9L3ZlcnNpb25cXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksJD1be3Rlc3Q6Wy9nb29nbGVib3QvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIkdvb2dsZWJvdFwifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvZ29vZ2xlYm90XFwvKFxcZCsoXFwuXFxkKykpL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL29wZXJhL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJPcGVyYVwifSxuPVYuZ2V0Rmlyc3RNYXRjaChKLGUpfHxWLmdldEZpcnN0TWF0Y2goLyg/Om9wZXJhKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9vcHJcXC98b3Bpb3MvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIk9wZXJhXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKC8oPzpvcHJ8b3Bpb3MpW1xccy9dKFxcUyspL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL1NhbXN1bmdCcm93c2VyL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKEosZSl8fFYuZ2V0Rmlyc3RNYXRjaCgvKD86U2Ftc3VuZ0Jyb3dzZXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL1doYWxlL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJOQVZFUiBXaGFsZSBCcm93c2VyXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKEosZSl8fFYuZ2V0Rmlyc3RNYXRjaCgvKD86d2hhbGUpW1xccy9dKFxcZCsoPzpcXC5cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvTVpCcm93c2VyL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJNWiBCcm93c2VyXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKC8oPzpNWkJyb3dzZXIpW1xccy9dKFxcZCsoPzpcXC5cXGQrKSspL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2ZvY3VzL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJGb2N1c1wifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvKD86Zm9jdXMpW1xccy9dKFxcZCsoPzpcXC5cXGQrKSspL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3N3aW5nL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJTd2luZ1wifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvKD86c3dpbmcpW1xccy9dKFxcZCsoPzpcXC5cXGQrKSspL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2NvYXN0L2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJPcGVyYSBDb2FzdFwifSxuPVYuZ2V0Rmlyc3RNYXRjaChKLGUpfHxWLmdldEZpcnN0TWF0Y2goLyg/OmNvYXN0KVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9vcHRcXC9cXGQrKD86Lj9fP1xcZCspKy9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiT3BlcmEgVG91Y2hcIn0sbj1WLmdldEZpcnN0TWF0Y2goLyg/Om9wdClbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3lhYnJvd3Nlci9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiWWFuZGV4IEJyb3dzZXJcIn0sbj1WLmdldEZpcnN0TWF0Y2goLyg/OnlhYnJvd3NlcilbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3VjYnJvd3Nlci9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiVUMgQnJvd3NlclwifSxuPVYuZ2V0Rmlyc3RNYXRjaChKLGUpfHxWLmdldEZpcnN0TWF0Y2goLyg/OnVjYnJvd3NlcilbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvTWF4dGhvbnxteGlvcy9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiTWF4dGhvblwifSxuPVYuZ2V0Rmlyc3RNYXRjaChKLGUpfHxWLmdldEZpcnN0TWF0Y2goLyg/Ok1heHRob258bXhpb3MpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2VwaXBoYW55L2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJFcGlwaGFueVwifSxuPVYuZ2V0Rmlyc3RNYXRjaChKLGUpfHxWLmdldEZpcnN0TWF0Y2goLyg/OmVwaXBoYW55KVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9wdWZmaW4vaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIlB1ZmZpblwifSxuPVYuZ2V0Rmlyc3RNYXRjaChKLGUpfHxWLmdldEZpcnN0TWF0Y2goLyg/OnB1ZmZpbilbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0Olsvc2xlaXBuaXIvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIlNsZWlwbmlyXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKEosZSl8fFYuZ2V0Rmlyc3RNYXRjaCgvKD86c2xlaXBuaXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2stbWVsZW9uL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJLLU1lbGVvblwifSxuPVYuZ2V0Rmlyc3RNYXRjaChKLGUpfHxWLmdldEZpcnN0TWF0Y2goLyg/OmstbWVsZW9uKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9taWNyb21lc3Nlbmdlci9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiV2VDaGF0XCJ9LG49Vi5nZXRGaXJzdE1hdGNoKC8oPzptaWNyb21lc3NlbmdlcilbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3FxYnJvd3Nlci9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOi9xcWJyb3dzZXJsaXRlL2kudGVzdChlKT9cIlFRIEJyb3dzZXIgTGl0ZVwiOlwiUVEgQnJvd3NlclwifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvKD86cXFicm93c2VybGl0ZXxxcWJyb3dzZXIpWy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpfHxWLmdldEZpcnN0TWF0Y2goSixlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9tc2llfHRyaWRlbnQvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIkludGVybmV0IEV4cGxvcmVyXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKC8oPzptc2llIHxydjopKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL1xcc2VkZ1xcLy9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiTWljcm9zb2Z0IEVkZ2VcIn0sbj1WLmdldEZpcnN0TWF0Y2goL1xcc2VkZ1xcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9lZGcoW2VhXXxpb3MpL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJNaWNyb3NvZnQgRWRnZVwifSxuPVYuZ2V0U2Vjb25kTWF0Y2goL2VkZyhbZWFdfGlvcylcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0Olsvdml2YWxkaS9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiVml2YWxkaVwifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvdml2YWxkaVxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9zZWFtb25rZXkvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIlNlYU1vbmtleVwifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvc2VhbW9ua2V5XFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3NhaWxmaXNoL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJTYWlsZmlzaFwifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvc2FpbGZpc2hcXHM/YnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9zaWxrL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJBbWF6b24gU2lsa1wifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvc2lsa1xcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9waGFudG9tL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJQaGFudG9tSlNcIn0sbj1WLmdldEZpcnN0TWF0Y2goL3BoYW50b21qc1xcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9zbGltZXJqcy9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiU2xpbWVySlNcIn0sbj1WLmdldEZpcnN0TWF0Y2goL3NsaW1lcmpzXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2JsYWNrYmVycnl8XFxiYmJcXGQrL2ksL3JpbVxcc3RhYmxldC9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiQmxhY2tCZXJyeVwifSxuPVYuZ2V0Rmlyc3RNYXRjaChKLGUpfHxWLmdldEZpcnN0TWF0Y2goL2JsYWNrYmVycnlbXFxkXStcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvKHdlYnxocHcpW28wXXMvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIldlYk9TIEJyb3dzZXJcIn0sbj1WLmdldEZpcnN0TWF0Y2goSixlKXx8Vi5nZXRGaXJzdE1hdGNoKC93KD86ZWIpP1tvMF1zYnJvd3NlclxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9iYWRhL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJCYWRhXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKC9kb2xmaW5cXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvdGl6ZW4vaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIlRpemVuXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKC8oPzp0aXplblxccz8pP2Jyb3dzZXJcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3F1cHppbGxhL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJRdXBaaWxsYVwifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvKD86cXVwemlsbGEpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpfHxWLmdldEZpcnN0TWF0Y2goSixlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9maXJlZm94fGljZXdlYXNlbHxmeGlvcy9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiRmlyZWZveFwifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvKD86ZmlyZWZveHxpY2V3ZWFzZWx8Znhpb3MpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2VsZWN0cm9uL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJFbGVjdHJvblwifSxuPVYuZ2V0Rmlyc3RNYXRjaCgvKD86ZWxlY3Ryb24pXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL01pdWlCcm93c2VyL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJNaXVpXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKC8oPzpNaXVpQnJvd3NlcilbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvY2hyb21pdW0vaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIkNocm9taXVtXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKC8oPzpjaHJvbWl1bSlbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL2Nocm9tZXxjcmlvc3xjcm1vL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6XCJDaHJvbWVcIn0sbj1WLmdldEZpcnN0TWF0Y2goLyg/OmNocm9tZXxjcmlvc3xjcm1vKVxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy9HU0EvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpcIkdvb2dsZSBTZWFyY2hcIn0sbj1WLmdldEZpcnN0TWF0Y2goLyg/OkdTQSlcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0KGUpe2NvbnN0IHQ9IWUudGVzdCgvbGlrZSBhbmRyb2lkL2kpLG49ZS50ZXN0KC9hbmRyb2lkL2kpO3JldHVybiB0JiZufSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiQW5kcm9pZCBCcm93c2VyXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKEosZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvcGxheXN0YXRpb24gNC9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiUGxheVN0YXRpb24gNFwifSxuPVYuZ2V0Rmlyc3RNYXRjaChKLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDpbL3NhZmFyaXxhcHBsZXdlYmtpdC9pXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlwiU2FmYXJpXCJ9LG49Vi5nZXRGaXJzdE1hdGNoKEosZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvLiovaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD0tMSE9PWUuc2VhcmNoKFwiXFxcXChcIik/L14oLiopXFwvKC4qKVsgXFx0XVxcKCguKikvOi9eKC4qKVxcLyguKikgLztyZXR1cm57bmFtZTpWLmdldEZpcnN0TWF0Y2godCxlKSx2ZXJzaW9uOlYuZ2V0U2Vjb25kTWF0Y2godCxlKX19fV07dmFyIHE9W3t0ZXN0OlsvUm9rdVxcL0RWUC9dLGRlc2NyaWJlKGUpe2NvbnN0IHQ9Vi5nZXRGaXJzdE1hdGNoKC9Sb2t1XFwvRFZQLShcXGQrXFwuXFxkKykvaSxlKTtyZXR1cm57bmFtZTpCLlJva3UsdmVyc2lvbjp0fX19LHt0ZXN0Olsvd2luZG93cyBwaG9uZS9pXSxkZXNjcmliZShlKXtjb25zdCB0PVYuZ2V0Rmlyc3RNYXRjaCgvd2luZG93cyBwaG9uZSAoPzpvcyk/XFxzPyhcXGQrKFxcLlxcZCspKikvaSxlKTtyZXR1cm57bmFtZTpCLldpbmRvd3NQaG9uZSx2ZXJzaW9uOnR9fX0se3Rlc3Q6Wy93aW5kb3dzIC9pXSxkZXNjcmliZShlKXtjb25zdCB0PVYuZ2V0Rmlyc3RNYXRjaCgvV2luZG93cyAoKE5UfFhQKSggXFxkXFxkPy5cXGQpPykvaSxlKSxuPVYuZ2V0V2luZG93c1ZlcnNpb25OYW1lKHQpO3JldHVybntuYW1lOkIuV2luZG93cyx2ZXJzaW9uOnQsdmVyc2lvbk5hbWU6bn19fSx7dGVzdDpbL01hY2ludG9zaCguKj8pIEZ4aU9TKC4qPylcXC8vXSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOkIuaU9TfSxuPVYuZ2V0U2Vjb25kTWF0Y2goLyhWZXJzaW9uXFwvKShcXGRbXFxkLl0rKS8sZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19LHt0ZXN0OlsvbWFjaW50b3NoL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9Vi5nZXRGaXJzdE1hdGNoKC9tYWMgb3MgeCAoXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSkucmVwbGFjZSgvW19cXHNdL2csXCIuXCIpLG49Vi5nZXRNYWNPU1ZlcnNpb25OYW1lKHQpLHI9e25hbWU6Qi5NYWNPUyx2ZXJzaW9uOnR9O3JldHVybiBuJiYoci52ZXJzaW9uTmFtZT1uKSxyfX0se3Rlc3Q6Wy8oaXBvZHxpcGhvbmV8aXBhZCkvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD1WLmdldEZpcnN0TWF0Y2goL29zIChcXGQrKFtfXFxzXVxcZCspKikgbGlrZSBtYWMgb3MgeC9pLGUpLnJlcGxhY2UoL1tfXFxzXS9nLFwiLlwiKTtyZXR1cm57bmFtZTpCLmlPUyx2ZXJzaW9uOnR9fX0se3Rlc3QoZSl7Y29uc3QgdD0hZS50ZXN0KC9saWtlIGFuZHJvaWQvaSksbj1lLnRlc3QoL2FuZHJvaWQvaSk7cmV0dXJuIHQmJm59LGRlc2NyaWJlKGUpe2NvbnN0IHQ9Vi5nZXRGaXJzdE1hdGNoKC9hbmRyb2lkW1xccy8tXShcXGQrKFxcLlxcZCspKikvaSxlKSxuPVYuZ2V0QW5kcm9pZFZlcnNpb25OYW1lKHQpLHI9e25hbWU6Qi5BbmRyb2lkLHZlcnNpb246dH07cmV0dXJuIG4mJihyLnZlcnNpb25OYW1lPW4pLHJ9fSx7dGVzdDpbLyh3ZWJ8aHB3KVtvMF1zL2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9Vi5nZXRGaXJzdE1hdGNoKC8oPzp3ZWJ8aHB3KVtvMF1zXFwvKFxcZCsoXFwuXFxkKykqKS9pLGUpLG49e25hbWU6Qi5XZWJPU307cmV0dXJuIHQmJnQubGVuZ3RoJiYobi52ZXJzaW9uPXQpLG59fSx7dGVzdDpbL2JsYWNrYmVycnl8XFxiYmJcXGQrL2ksL3JpbVxcc3RhYmxldC9pXSxkZXNjcmliZShlKXtjb25zdCB0PVYuZ2V0Rmlyc3RNYXRjaCgvcmltXFxzdGFibGV0XFxzb3NcXHMoXFxkKyhcXC5cXGQrKSopL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaCgvYmxhY2tiZXJyeVxcZCtcXC8oXFxkKyhbX1xcc11cXGQrKSopL2ksZSl8fFYuZ2V0Rmlyc3RNYXRjaCgvXFxiYmIoXFxkKykvaSxlKTtyZXR1cm57bmFtZTpCLkJsYWNrQmVycnksdmVyc2lvbjp0fX19LHt0ZXN0OlsvYmFkYS9pXSxkZXNjcmliZShlKXtjb25zdCB0PVYuZ2V0Rmlyc3RNYXRjaCgvYmFkYVxcLyhcXGQrKFxcLlxcZCspKikvaSxlKTtyZXR1cm57bmFtZTpCLkJhZGEsdmVyc2lvbjp0fX19LHt0ZXN0OlsvdGl6ZW4vaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD1WLmdldEZpcnN0TWF0Y2goL3RpemVuWy9cXHNdKFxcZCsoXFwuXFxkKykqKS9pLGUpO3JldHVybntuYW1lOkIuVGl6ZW4sdmVyc2lvbjp0fX19LHt0ZXN0OlsvbGludXgvaV0sZGVzY3JpYmU6KCk9Pih7bmFtZTpCLkxpbnV4fSl9LHt0ZXN0OlsvQ3JPUy9dLGRlc2NyaWJlOigpPT4oe25hbWU6Qi5DaHJvbWVPU30pfSx7dGVzdDpbL1BsYXlTdGF0aW9uIDQvXSxkZXNjcmliZShlKXtjb25zdCB0PVYuZ2V0Rmlyc3RNYXRjaCgvUGxheVN0YXRpb24gNFsvXFxzXShcXGQrKFxcLlxcZCspKikvaSxlKTtyZXR1cm57bmFtZTpCLlBsYXlTdGF0aW9uNCx2ZXJzaW9uOnR9fX1dLHo9W3t0ZXN0OlsvZ29vZ2xlYm90L2ldLGRlc2NyaWJlOigpPT4oe3R5cGU6XCJib3RcIix2ZW5kb3I6XCJHb29nbGVcIn0pfSx7dGVzdDpbL2h1YXdlaS9pXSxkZXNjcmliZShlKXtjb25zdCB0PVYuZ2V0Rmlyc3RNYXRjaCgvKGNhbi1sMDEpL2ksZSkmJlwiTm92YVwiLG49e3R5cGU6Ui5tb2JpbGUsdmVuZG9yOlwiSHVhd2VpXCJ9O3JldHVybiB0JiYobi5tb2RlbD10KSxufX0se3Rlc3Q6Wy9uZXh1c1xccyooPzo3fDh8OXwxMCkuKi9pXSxkZXNjcmliZTooKT0+KHt0eXBlOlIudGFibGV0LHZlbmRvcjpcIk5leHVzXCJ9KX0se3Rlc3Q6Wy9pcGFkL2ldLGRlc2NyaWJlOigpPT4oe3R5cGU6Ui50YWJsZXQsdmVuZG9yOlwiQXBwbGVcIixtb2RlbDpcImlQYWRcIn0pfSx7dGVzdDpbL01hY2ludG9zaCguKj8pIEZ4aU9TKC4qPylcXC8vXSxkZXNjcmliZTooKT0+KHt0eXBlOlIudGFibGV0LHZlbmRvcjpcIkFwcGxlXCIsbW9kZWw6XCJpUGFkXCJ9KX0se3Rlc3Q6Wy9rZnR0IGJ1aWxkL2ldLGRlc2NyaWJlOigpPT4oe3R5cGU6Ui50YWJsZXQsdmVuZG9yOlwiQW1hem9uXCIsbW9kZWw6XCJLaW5kbGUgRmlyZSBIRCA3XCJ9KX0se3Rlc3Q6Wy9zaWxrL2ldLGRlc2NyaWJlOigpPT4oe3R5cGU6Ui50YWJsZXQsdmVuZG9yOlwiQW1hem9uXCJ9KX0se3Rlc3Q6Wy90YWJsZXQoPyEgcGMpL2ldLGRlc2NyaWJlOigpPT4oe3R5cGU6Ui50YWJsZXR9KX0se3Rlc3QoZSl7Y29uc3QgdD1lLnRlc3QoL2lwb2R8aXBob25lL2kpLG49ZS50ZXN0KC9saWtlIChpcG9kfGlwaG9uZSkvaSk7cmV0dXJuIHQmJiFufSxkZXNjcmliZShlKXtjb25zdCB0PVYuZ2V0Rmlyc3RNYXRjaCgvKGlwb2R8aXBob25lKS9pLGUpO3JldHVybnt0eXBlOlIubW9iaWxlLHZlbmRvcjpcIkFwcGxlXCIsbW9kZWw6dH19fSx7dGVzdDpbL25leHVzXFxzKlswLTZdLiovaSwvZ2FsYXh5IG5leHVzL2ldLGRlc2NyaWJlOigpPT4oe3R5cGU6Ui5tb2JpbGUsdmVuZG9yOlwiTmV4dXNcIn0pfSx7dGVzdDpbL1teLV1tb2JpL2ldLGRlc2NyaWJlOigpPT4oe3R5cGU6Ui5tb2JpbGV9KX0se3Rlc3Q6ZT0+XCJibGFja2JlcnJ5XCI9PT1lLmdldEJyb3dzZXJOYW1lKCEwKSxkZXNjcmliZTooKT0+KHt0eXBlOlIubW9iaWxlLHZlbmRvcjpcIkJsYWNrQmVycnlcIn0pfSx7dGVzdDplPT5cImJhZGFcIj09PWUuZ2V0QnJvd3Nlck5hbWUoITApLGRlc2NyaWJlOigpPT4oe3R5cGU6Ui5tb2JpbGV9KX0se3Rlc3Q6ZT0+XCJ3aW5kb3dzIHBob25lXCI9PT1lLmdldEJyb3dzZXJOYW1lKCksZGVzY3JpYmU6KCk9Pih7dHlwZTpSLm1vYmlsZSx2ZW5kb3I6XCJNaWNyb3NvZnRcIn0pfSx7dGVzdChlKXtjb25zdCB0PU51bWJlcihTdHJpbmcoZS5nZXRPU1ZlcnNpb24oKSkuc3BsaXQoXCIuXCIpWzBdKTtyZXR1cm5cImFuZHJvaWRcIj09PWUuZ2V0T1NOYW1lKCEwKSYmdD49M30sZGVzY3JpYmU6KCk9Pih7dHlwZTpSLnRhYmxldH0pfSx7dGVzdDplPT5cImFuZHJvaWRcIj09PWUuZ2V0T1NOYW1lKCEwKSxkZXNjcmliZTooKT0+KHt0eXBlOlIubW9iaWxlfSl9LHt0ZXN0OmU9PlwibWFjb3NcIj09PWUuZ2V0T1NOYW1lKCEwKSxkZXNjcmliZTooKT0+KHt0eXBlOlIuZGVza3RvcCx2ZW5kb3I6XCJBcHBsZVwifSl9LHt0ZXN0OmU9Plwid2luZG93c1wiPT09ZS5nZXRPU05hbWUoITApLGRlc2NyaWJlOigpPT4oe3R5cGU6Ui5kZXNrdG9wfSl9LHt0ZXN0OmU9PlwibGludXhcIj09PWUuZ2V0T1NOYW1lKCEwKSxkZXNjcmliZTooKT0+KHt0eXBlOlIuZGVza3RvcH0pfSx7dGVzdDplPT5cInBsYXlzdGF0aW9uIDRcIj09PWUuZ2V0T1NOYW1lKCEwKSxkZXNjcmliZTooKT0+KHt0eXBlOlIudHZ9KX0se3Rlc3Q6ZT0+XCJyb2t1XCI9PT1lLmdldE9TTmFtZSghMCksZGVzY3JpYmU6KCk9Pih7dHlwZTpSLnR2fSl9XSxXPVt7dGVzdDplPT5cIm1pY3Jvc29mdCBlZGdlXCI9PT1lLmdldEJyb3dzZXJOYW1lKCEwKSxkZXNjcmliZShlKXtpZigvXFxzZWRnXFwvL2kudGVzdChlKSlyZXR1cm57bmFtZTpVLkJsaW5rfTtjb25zdCB0PVYuZ2V0Rmlyc3RNYXRjaCgvZWRnZVxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm57bmFtZTpVLkVkZ2VIVE1MLHZlcnNpb246dH19fSx7dGVzdDpbL3RyaWRlbnQvaV0sZGVzY3JpYmUoZSl7Y29uc3QgdD17bmFtZTpVLlRyaWRlbnR9LG49Vi5nZXRGaXJzdE1hdGNoKC90cmlkZW50XFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdDplPT5lLnRlc3QoL3ByZXN0by9pKSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlUuUHJlc3RvfSxuPVYuZ2V0Rmlyc3RNYXRjaCgvcHJlc3RvXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLGUpO3JldHVybiBuJiYodC52ZXJzaW9uPW4pLHR9fSx7dGVzdChlKXtjb25zdCB0PWUudGVzdCgvZ2Vja28vaSksbj1lLnRlc3QoL2xpa2UgZ2Vja28vaSk7cmV0dXJuIHQmJiFufSxkZXNjcmliZShlKXtjb25zdCB0PXtuYW1lOlUuR2Vja299LG49Vi5nZXRGaXJzdE1hdGNoKC9nZWNrb1xcLyhcXGQrKFxcLj9fP1xcZCspKykvaSxlKTtyZXR1cm4gbiYmKHQudmVyc2lvbj1uKSx0fX0se3Rlc3Q6Wy8oYXBwbGUpP3dlYmtpdFxcLzUzN1xcLjM2L2ldLGRlc2NyaWJlOigpPT4oe25hbWU6VS5CbGlua30pfSx7dGVzdDpbLyhhcHBsZSk/d2Via2l0L2ldLGRlc2NyaWJlKGUpe2NvbnN0IHQ9e25hbWU6VS5XZWJLaXR9LG49Vi5nZXRGaXJzdE1hdGNoKC93ZWJraXRcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksZSk7cmV0dXJuIG4mJih0LnZlcnNpb249biksdH19XTtjbGFzcyBIe2NvbnN0cnVjdG9yKGUsdD0hMSl7aWYobnVsbD09ZXx8XCJcIj09PWUpdGhyb3cgbmV3IEVycm9yKFwiVXNlckFnZW50IHBhcmFtZXRlciBjYW4ndCBiZSBlbXB0eVwiKTt0aGlzLl91YT1lLHRoaXMucGFyc2VkUmVzdWx0PXt9LCEwIT09dCYmdGhpcy5wYXJzZSgpfWdldFVBKCl7cmV0dXJuIHRoaXMuX3VhfXRlc3QoZSl7cmV0dXJuIGUudGVzdCh0aGlzLl91YSl9cGFyc2VCcm93c2VyKCl7dGhpcy5wYXJzZWRSZXN1bHQuYnJvd3Nlcj17fTtjb25zdCBlPVYuZmluZCgkLChlPT57aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS50ZXN0KXJldHVybiBlLnRlc3QodGhpcyk7aWYoZS50ZXN0IGluc3RhbmNlb2YgQXJyYXkpcmV0dXJuIGUudGVzdC5zb21lKChlPT50aGlzLnRlc3QoZSkpKTt0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyJ3MgdGVzdCBmdW5jdGlvbiBpcyBub3QgdmFsaWRcIil9KSk7cmV0dXJuIGUmJih0aGlzLnBhcnNlZFJlc3VsdC5icm93c2VyPWUuZGVzY3JpYmUodGhpcy5nZXRVQSgpKSksdGhpcy5wYXJzZWRSZXN1bHQuYnJvd3Nlcn1nZXRCcm93c2VyKCl7cmV0dXJuIHRoaXMucGFyc2VkUmVzdWx0LmJyb3dzZXI/dGhpcy5wYXJzZWRSZXN1bHQuYnJvd3Nlcjp0aGlzLnBhcnNlQnJvd3NlcigpfWdldEJyb3dzZXJOYW1lKGUpe3JldHVybiBlP1N0cmluZyh0aGlzLmdldEJyb3dzZXIoKS5uYW1lKS50b0xvd2VyQ2FzZSgpfHxcIlwiOnRoaXMuZ2V0QnJvd3NlcigpLm5hbWV8fFwiXCJ9Z2V0QnJvd3NlclZlcnNpb24oKXtyZXR1cm4gdGhpcy5nZXRCcm93c2VyKCkudmVyc2lvbn1nZXRPUygpe3JldHVybiB0aGlzLnBhcnNlZFJlc3VsdC5vcz90aGlzLnBhcnNlZFJlc3VsdC5vczp0aGlzLnBhcnNlT1MoKX1wYXJzZU9TKCl7dGhpcy5wYXJzZWRSZXN1bHQub3M9e307Y29uc3QgZT1WLmZpbmQocSwoZT0+e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUudGVzdClyZXR1cm4gZS50ZXN0KHRoaXMpO2lmKGUudGVzdCBpbnN0YW5jZW9mIEFycmF5KXJldHVybiBlLnRlc3Quc29tZSgoZT0+dGhpcy50ZXN0KGUpKSk7dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkXCIpfSkpO3JldHVybiBlJiYodGhpcy5wYXJzZWRSZXN1bHQub3M9ZS5kZXNjcmliZSh0aGlzLmdldFVBKCkpKSx0aGlzLnBhcnNlZFJlc3VsdC5vc31nZXRPU05hbWUoZSl7Y29uc3R7bmFtZTp0fT10aGlzLmdldE9TKCk7cmV0dXJuIGU/U3RyaW5nKHQpLnRvTG93ZXJDYXNlKCl8fFwiXCI6dHx8XCJcIn1nZXRPU1ZlcnNpb24oKXtyZXR1cm4gdGhpcy5nZXRPUygpLnZlcnNpb259Z2V0UGxhdGZvcm0oKXtyZXR1cm4gdGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm0/dGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm06dGhpcy5wYXJzZVBsYXRmb3JtKCl9Z2V0UGxhdGZvcm1UeXBlKGU9ITEpe2NvbnN0e3R5cGU6dH09dGhpcy5nZXRQbGF0Zm9ybSgpO3JldHVybiBlP1N0cmluZyh0KS50b0xvd2VyQ2FzZSgpfHxcIlwiOnR8fFwiXCJ9cGFyc2VQbGF0Zm9ybSgpe3RoaXMucGFyc2VkUmVzdWx0LnBsYXRmb3JtPXt9O2NvbnN0IGU9Vi5maW5kKHosKGU9PntpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnRlc3QpcmV0dXJuIGUudGVzdCh0aGlzKTtpZihlLnRlc3QgaW5zdGFuY2VvZiBBcnJheSlyZXR1cm4gZS50ZXN0LnNvbWUoKGU9PnRoaXMudGVzdChlKSkpO3Rocm93IG5ldyBFcnJvcihcIkJyb3dzZXIncyB0ZXN0IGZ1bmN0aW9uIGlzIG5vdCB2YWxpZFwiKX0pKTtyZXR1cm4gZSYmKHRoaXMucGFyc2VkUmVzdWx0LnBsYXRmb3JtPWUuZGVzY3JpYmUodGhpcy5nZXRVQSgpKSksdGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm19Z2V0RW5naW5lKCl7cmV0dXJuIHRoaXMucGFyc2VkUmVzdWx0LmVuZ2luZT90aGlzLnBhcnNlZFJlc3VsdC5lbmdpbmU6dGhpcy5wYXJzZUVuZ2luZSgpfWdldEVuZ2luZU5hbWUoZSl7cmV0dXJuIGU/U3RyaW5nKHRoaXMuZ2V0RW5naW5lKCkubmFtZSkudG9Mb3dlckNhc2UoKXx8XCJcIjp0aGlzLmdldEVuZ2luZSgpLm5hbWV8fFwiXCJ9cGFyc2VFbmdpbmUoKXt0aGlzLnBhcnNlZFJlc3VsdC5lbmdpbmU9e307Y29uc3QgZT1WLmZpbmQoVywoZT0+e2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUudGVzdClyZXR1cm4gZS50ZXN0KHRoaXMpO2lmKGUudGVzdCBpbnN0YW5jZW9mIEFycmF5KXJldHVybiBlLnRlc3Quc29tZSgoZT0+dGhpcy50ZXN0KGUpKSk7dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkXCIpfSkpO3JldHVybiBlJiYodGhpcy5wYXJzZWRSZXN1bHQuZW5naW5lPWUuZGVzY3JpYmUodGhpcy5nZXRVQSgpKSksdGhpcy5wYXJzZWRSZXN1bHQuZW5naW5lfXBhcnNlKCl7cmV0dXJuIHRoaXMucGFyc2VCcm93c2VyKCksdGhpcy5wYXJzZU9TKCksdGhpcy5wYXJzZVBsYXRmb3JtKCksdGhpcy5wYXJzZUVuZ2luZSgpLHRoaXN9Z2V0UmVzdWx0KCl7cmV0dXJuIFYuYXNzaWduKHt9LHRoaXMucGFyc2VkUmVzdWx0KX1zYXRpc2ZpZXMoZSl7Y29uc3QgdD17fTtsZXQgbj0wO2NvbnN0IHI9e307bGV0IGk9MDtpZihPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChvPT57Y29uc3QgYT1lW29dO1wic3RyaW5nXCI9PXR5cGVvZiBhPyhyW29dPWEsaSs9MSk6XCJvYmplY3RcIj09dHlwZW9mIGEmJih0W29dPWEsbis9MSl9KSksbj4wKXtjb25zdCBlPU9iamVjdC5rZXlzKHQpLG49Vi5maW5kKGUsKGU9PnRoaXMuaXNPUyhlKSkpO2lmKG4pe2NvbnN0IGU9dGhpcy5zYXRpc2ZpZXModFtuXSk7aWYodm9pZCAwIT09ZSlyZXR1cm4gZX1jb25zdCByPVYuZmluZChlLChlPT50aGlzLmlzUGxhdGZvcm0oZSkpKTtpZihyKXtjb25zdCBlPXRoaXMuc2F0aXNmaWVzKHRbcl0pO2lmKHZvaWQgMCE9PWUpcmV0dXJuIGV9fWlmKGk+MCl7Y29uc3QgZT1PYmplY3Qua2V5cyhyKSx0PVYuZmluZChlLChlPT50aGlzLmlzQnJvd3NlcihlLCEwKSkpO2lmKHZvaWQgMCE9PXQpcmV0dXJuIHRoaXMuY29tcGFyZVZlcnNpb24oclt0XSl9fWlzQnJvd3NlcihlLHQ9ITEpe2NvbnN0IG49dGhpcy5nZXRCcm93c2VyTmFtZSgpLnRvTG93ZXJDYXNlKCk7bGV0IHI9ZS50b0xvd2VyQ2FzZSgpO2NvbnN0IGk9Vi5nZXRCcm93c2VyVHlwZUJ5QWxpYXMocik7cmV0dXJuIHQmJmkmJihyPWkudG9Mb3dlckNhc2UoKSkscj09PW59Y29tcGFyZVZlcnNpb24oZSl7bGV0IHQ9WzBdLG49ZSxyPSExO2NvbnN0IGk9dGhpcy5nZXRCcm93c2VyVmVyc2lvbigpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpKXJldHVyblwiPlwiPT09ZVswXXx8XCI8XCI9PT1lWzBdPyhuPWUuc3Vic3RyKDEpLFwiPVwiPT09ZVsxXT8ocj0hMCxuPWUuc3Vic3RyKDIpKTp0PVtdLFwiPlwiPT09ZVswXT90LnB1c2goMSk6dC5wdXNoKC0xKSk6XCI9XCI9PT1lWzBdP249ZS5zdWJzdHIoMSk6XCJ+XCI9PT1lWzBdJiYocj0hMCxuPWUuc3Vic3RyKDEpKSx0LmluZGV4T2YoVi5jb21wYXJlVmVyc2lvbnMoaSxuLHIpKT4tMX1pc09TKGUpe3JldHVybiB0aGlzLmdldE9TTmFtZSghMCk9PT1TdHJpbmcoZSkudG9Mb3dlckNhc2UoKX1pc1BsYXRmb3JtKGUpe3JldHVybiB0aGlzLmdldFBsYXRmb3JtVHlwZSghMCk9PT1TdHJpbmcoZSkudG9Mb3dlckNhc2UoKX1pc0VuZ2luZShlKXtyZXR1cm4gdGhpcy5nZXRFbmdpbmVOYW1lKCEwKT09PVN0cmluZyhlKS50b0xvd2VyQ2FzZSgpfWlzKGUsdD0hMSl7cmV0dXJuIHRoaXMuaXNCcm93c2VyKGUsdCl8fHRoaXMuaXNPUyhlKXx8dGhpcy5pc1BsYXRmb3JtKGUpfXNvbWUoZT1bXSl7cmV0dXJuIGUuc29tZSgoZT0+dGhpcy5pcyhlKSkpfX1cbi8qIVxuICogQm93c2VyIC0gYSBicm93c2VyIGRldGVjdG9yXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbGFuY2VkaWtzb24vYm93c2VyXG4gKiBNSVQgTGljZW5zZSB8IChjKSBEdXN0aW4gRGlheiAyMDEyLTIwMTVcbiAqIE1JVCBMaWNlbnNlIHwgKGMpIERlbmlzIERlbWNoZW5rbyAyMDE1LTIwMTlcbiAqL2NsYXNzIEd7c3RhdGljIGdldFBhcnNlcihlLHQ9ITEpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIlVzZXJBZ2VudCBzaG91bGQgYmUgYSBzdHJpbmdcIik7cmV0dXJuIG5ldyBIKGUsdCl9c3RhdGljIHBhcnNlKGUpe3JldHVybiBuZXcgSChlKS5nZXRSZXN1bHQoKX1zdGF0aWMgZ2V0IEJST1dTRVJfTUFQKCl7cmV0dXJuIEZ9c3RhdGljIGdldCBFTkdJTkVfTUFQKCl7cmV0dXJuIFV9c3RhdGljIGdldCBPU19NQVAoKXtyZXR1cm4gQn1zdGF0aWMgZ2V0IFBMQVRGT1JNU19NQVAoKXtyZXR1cm4gUn19ZnVuY3Rpb24gUSgpe3JldHVybiBEYXRlLm5vdygpK01hdGgucmFuZG9tKCkudG9TdHJpbmcoKX1mdW5jdGlvbiBZKCl7dGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gc3ViY2xhc3NcIil9ZnVuY3Rpb24gSyhlLHQpe3JldHVybiBudWxsIT10JiZ0LnByb3h5VXJsP3QucHJveHlVcmwrKFwiL1wiPT09dC5wcm94eVVybC5zbGljZSgtMSk/XCJcIjpcIi9cIikrZS5zdWJzdHJpbmcoOCk6ZX1mdW5jdGlvbiBYKGUpe3JldHVybiBudWxsIT1lJiZlLmNhbGxPYmplY3RCdW5kbGVVcmxPdmVycmlkZT9lLmNhbGxPYmplY3RCdW5kbGVVcmxPdmVycmlkZTpLKFwiaHR0cHM6Ly9jLmRhaWx5LmNvL2NhbGwtbWFjaGluZS92ZXJzaW9uZWQvXCIuY29uY2F0KFwiMC43NS4yXCIsXCIvc3RhdGljL2NhbGwtbWFjaGluZS1vYmplY3QtYnVuZGxlLmpzXCIpLGUpfWZ1bmN0aW9uIFooZSl7dHJ5e25ldyBVUkwoZSl9Y2F0Y2goZSl7cmV0dXJuITF9cmV0dXJuITB9Y29uc3QgZWU9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztmdW5jdGlvbiB0ZShlKXtzd2l0Y2goZWUuY2FsbChlKSl7Y2FzZVwiW29iamVjdCBFcnJvcl1cIjpjYXNlXCJbb2JqZWN0IEV4Y2VwdGlvbl1cIjpjYXNlXCJbb2JqZWN0IERPTUV4Y2VwdGlvbl1cIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiBkZShlLEVycm9yKX19ZnVuY3Rpb24gbmUoZSx0KXtyZXR1cm4gZWUuY2FsbChlKT09PWBbb2JqZWN0ICR7dH1dYH1mdW5jdGlvbiByZShlKXtyZXR1cm4gbmUoZSxcIkVycm9yRXZlbnRcIil9ZnVuY3Rpb24gaWUoZSl7cmV0dXJuIG5lKGUsXCJET01FcnJvclwiKX1mdW5jdGlvbiBvZShlKXtyZXR1cm4gbmUoZSxcIlN0cmluZ1wiKX1mdW5jdGlvbiBhZShlKXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiX19zZW50cnlfdGVtcGxhdGVfc3RyaW5nX19cImluIGUmJlwiX19zZW50cnlfdGVtcGxhdGVfdmFsdWVzX19cImluIGV9ZnVuY3Rpb24gc2UoZSl7cmV0dXJuIG51bGw9PT1lfHxhZShlKXx8XCJvYmplY3RcIiE9dHlwZW9mIGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGV9ZnVuY3Rpb24gY2UoZSl7cmV0dXJuIG5lKGUsXCJPYmplY3RcIil9ZnVuY3Rpb24gbGUoZSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEV2ZW50JiZkZShlLEV2ZW50KX1mdW5jdGlvbiB1ZShlKXtyZXR1cm4gQm9vbGVhbihlJiZlLnRoZW4mJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUudGhlbil9ZnVuY3Rpb24gZGUoZSx0KXt0cnl7cmV0dXJuIGUgaW5zdGFuY2VvZiB0fWNhdGNoKGUpe3JldHVybiExfX1mdW5jdGlvbiBwZShlKXtyZXR1cm4hKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZXx8IWUuX19pc1Z1ZSYmIWUuX2lzVnVlKX1mdW5jdGlvbiBoZShlLHQ9MCl7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGV8fDA9PT10fHxlLmxlbmd0aDw9dD9lOmAke2Uuc2xpY2UoMCx0KX0uLi5gfWZ1bmN0aW9uIGZlKGUsdCl7aWYoIUFycmF5LmlzQXJyYXkoZSkpcmV0dXJuXCJcIjtjb25zdCBuPVtdO2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXtjb25zdCByPWVbdF07dHJ5e3BlKHIpP24ucHVzaChcIltWdWVWaWV3TW9kZWxdXCIpOm4ucHVzaChTdHJpbmcocikpfWNhdGNoKGUpe24ucHVzaChcIlt2YWx1ZSBjYW5ub3QgYmUgc2VyaWFsaXplZF1cIil9fXJldHVybiBuLmpvaW4odCl9ZnVuY3Rpb24gdmUoZSx0LG49ITEpe3JldHVybiEhb2UoZSkmJihuZSh0LFwiUmVnRXhwXCIpP3QudGVzdChlKTohIW9lKHQpJiYobj9lPT09dDplLmluY2x1ZGVzKHQpKSl9ZnVuY3Rpb24gZ2UoZSx0PVtdLG49ITEpe3JldHVybiB0LnNvbWUoKHQ9PnZlKGUsdCxuKSkpfWZ1bmN0aW9uIG1lKGUsdCxuPTI1MCxyLGksbyxhKXtpZighKG8uZXhjZXB0aW9uJiZvLmV4Y2VwdGlvbi52YWx1ZXMmJmEmJmRlKGEub3JpZ2luYWxFeGNlcHRpb24sRXJyb3IpKSlyZXR1cm47Y29uc3Qgcz1vLmV4Y2VwdGlvbi52YWx1ZXMubGVuZ3RoPjA/by5leGNlcHRpb24udmFsdWVzW28uZXhjZXB0aW9uLnZhbHVlcy5sZW5ndGgtMV06dm9pZCAwO3ZhciBjLGw7cyYmKG8uZXhjZXB0aW9uLnZhbHVlcz0oYz15ZShlLHQsaSxhLm9yaWdpbmFsRXhjZXB0aW9uLHIsby5leGNlcHRpb24udmFsdWVzLHMsMCksbD1uLGMubWFwKChlPT4oZS52YWx1ZSYmKGUudmFsdWU9aGUoZS52YWx1ZSxsKSksZSkpKSkpfWZ1bmN0aW9uIHllKGUsdCxuLHIsaSxvLGEscyl7aWYoby5sZW5ndGg+PW4rMSlyZXR1cm4gbztsZXQgYz1bLi4ub107aWYoZGUocltpXSxFcnJvcikpe19lKGEscyk7Y29uc3Qgbz1lKHQscltpXSksbD1jLmxlbmd0aDtiZShvLGksbCxzKSxjPXllKGUsdCxuLHJbaV0saSxbbywuLi5jXSxvLGwpfXJldHVybiBBcnJheS5pc0FycmF5KHIuZXJyb3JzKSYmci5lcnJvcnMuZm9yRWFjaCgoKHIsbyk9PntpZihkZShyLEVycm9yKSl7X2UoYSxzKTtjb25zdCBsPWUodCxyKSx1PWMubGVuZ3RoO2JlKGwsYGVycm9yc1ske299XWAsdSxzKSxjPXllKGUsdCxuLHIsaSxbbCwuLi5jXSxsLHUpfX0pKSxjfWZ1bmN0aW9uIF9lKGUsdCl7ZS5tZWNoYW5pc209ZS5tZWNoYW5pc218fHt0eXBlOlwiZ2VuZXJpY1wiLGhhbmRsZWQ6ITB9LGUubWVjaGFuaXNtPXsuLi5lLm1lY2hhbmlzbSwuLi5cIkFnZ3JlZ2F0ZUVycm9yXCI9PT1lLnR5cGUmJntpc19leGNlcHRpb25fZ3JvdXA6ITB9LGV4Y2VwdGlvbl9pZDp0fX1mdW5jdGlvbiBiZShlLHQsbixyKXtlLm1lY2hhbmlzbT1lLm1lY2hhbmlzbXx8e3R5cGU6XCJnZW5lcmljXCIsaGFuZGxlZDohMH0sZS5tZWNoYW5pc209ey4uLmUubWVjaGFuaXNtLHR5cGU6XCJjaGFpbmVkXCIsc291cmNlOnQsZXhjZXB0aW9uX2lkOm4scGFyZW50X2lkOnJ9fWZ1bmN0aW9uIHdlKGUpe3JldHVybiB2b2lkIDA9PT1lP3ZvaWQgMDplPj00MDAmJmU8NTAwP1wid2FybmluZ1wiOmU+PTUwMD9cImVycm9yXCI6dm9pZCAwfWNvbnN0IGtlPVwiOC4zMy4xXCIsU2U9Z2xvYmFsVGhpcztmdW5jdGlvbiBNZShlLHQsbil7Y29uc3Qgcj1ufHxTZSxpPXIuX19TRU5UUllfXz1yLl9fU0VOVFJZX198fHt9LG89aVtrZV09aVtrZV18fHt9O3JldHVybiBvW2VdfHwob1tlXT10KCkpfWNvbnN0IENlPVNlO2Z1bmN0aW9uIEVlKGUsdD17fSl7aWYoIWUpcmV0dXJuXCI8dW5rbm93bj5cIjt0cnl7bGV0IG49ZTtjb25zdCByPTUsaT1bXTtsZXQgbz0wLGE9MDtjb25zdCBzPVwiID4gXCIsYz1zLmxlbmd0aDtsZXQgbDtjb25zdCB1PUFycmF5LmlzQXJyYXkodCk/dDp0LmtleUF0dHJzLGQ9IUFycmF5LmlzQXJyYXkodCkmJnQubWF4U3RyaW5nTGVuZ3RofHw4MDtmb3IoO24mJm8rKzxyJiYobD1UZShuLHUpLCEoXCJodG1sXCI9PT1sfHxvPjEmJmEraS5sZW5ndGgqYytsLmxlbmd0aD49ZCkpOylpLnB1c2gobCksYSs9bC5sZW5ndGgsbj1uLnBhcmVudE5vZGU7cmV0dXJuIGkucmV2ZXJzZSgpLmpvaW4ocyl9Y2F0Y2goZSl7cmV0dXJuXCI8dW5rbm93bj5cIn19ZnVuY3Rpb24gVGUoZSx0KXtjb25zdCBuPWUscj1bXTtpZighbnx8IW4udGFnTmFtZSlyZXR1cm5cIlwiO2lmKENlLkhUTUxFbGVtZW50JiZuIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQmJm4uZGF0YXNldCl7aWYobi5kYXRhc2V0LnNlbnRyeUNvbXBvbmVudClyZXR1cm4gbi5kYXRhc2V0LnNlbnRyeUNvbXBvbmVudDtpZihuLmRhdGFzZXQuc2VudHJ5RWxlbWVudClyZXR1cm4gbi5kYXRhc2V0LnNlbnRyeUVsZW1lbnR9ci5wdXNoKG4udGFnTmFtZS50b0xvd2VyQ2FzZSgpKTtjb25zdCBpPXQmJnQubGVuZ3RoP3QuZmlsdGVyKChlPT5uLmdldEF0dHJpYnV0ZShlKSkpLm1hcCgoZT0+W2Usbi5nZXRBdHRyaWJ1dGUoZSldKSk6bnVsbDtpZihpJiZpLmxlbmd0aClpLmZvckVhY2goKGU9PntyLnB1c2goYFske2VbMF19PVwiJHtlWzFdfVwiXWApfSkpO2Vsc2V7bi5pZCYmci5wdXNoKGAjJHtuLmlkfWApO2NvbnN0IGU9bi5jbGFzc05hbWU7aWYoZSYmb2UoZSkpe2NvbnN0IHQ9ZS5zcGxpdCgvXFxzKy8pO2Zvcihjb25zdCBlIG9mIHQpci5wdXNoKGAuJHtlfWApfX1jb25zdCBvPVtcImFyaWEtbGFiZWxcIixcInR5cGVcIixcIm5hbWVcIixcInRpdGxlXCIsXCJhbHRcIl07Zm9yKGNvbnN0IGUgb2Ygbyl7Y29uc3QgdD1uLmdldEF0dHJpYnV0ZShlKTt0JiZyLnB1c2goYFske2V9PVwiJHt0fVwiXWApfXJldHVybiByLmpvaW4oXCJcIil9Y29uc3QgUGU9XCJ1bmRlZmluZWRcIj09dHlwZW9mIF9fU0VOVFJZX0RFQlVHX198fF9fU0VOVFJZX0RFQlVHX18sT2U9W1wiZGVidWdcIixcImluZm9cIixcIndhcm5cIixcImVycm9yXCIsXCJsb2dcIixcImFzc2VydFwiLFwidHJhY2VcIl0sQWU9e307ZnVuY3Rpb24gamUoZSl7aWYoIShcImNvbnNvbGVcImluIFNlKSlyZXR1cm4gZSgpO2NvbnN0IHQ9U2UuY29uc29sZSxuPXt9LHI9T2JqZWN0LmtleXMoQWUpO3IuZm9yRWFjaCgoZT0+e2NvbnN0IHI9QWVbZV07bltlXT10W2VdLHRbZV09cn0pKTt0cnl7cmV0dXJuIGUoKX1maW5hbGx5e3IuZm9yRWFjaCgoZT0+e3RbZV09bltlXX0pKX19Y29uc3QgTGU9TWUoXCJsb2dnZXJcIiwoZnVuY3Rpb24oKXtsZXQgZT0hMTtjb25zdCB0PXtlbmFibGU6KCk9PntlPSEwfSxkaXNhYmxlOigpPT57ZT0hMX0saXNFbmFibGVkOigpPT5lfTtyZXR1cm4gUGU/T2UuZm9yRWFjaCgobj0+e3Rbbl09KC4uLnQpPT57ZSYmamUoKCgpPT57U2UuY29uc29sZVtuXShgU2VudHJ5IExvZ2dlciBbJHtufV06YCwuLi50KX0pKX19KSk6T2UuZm9yRWFjaCgoZT0+e3RbZV09KCk9Pnt9fSkpLHR9KSkseGU9L14oPzooXFx3Kyk6KVxcL1xcLyg/OihcXHcrKSg/OjooXFx3Kyk/KT9AKShbXFx3Li1dKykoPzo6KFxcZCspKT9cXC8oLispLztmdW5jdGlvbiBJZShlLHQ9ITEpe2NvbnN0e2hvc3Q6bixwYXRoOnIscGFzczppLHBvcnQ6byxwcm9qZWN0SWQ6YSxwcm90b2NvbDpzLHB1YmxpY0tleTpjfT1lO3JldHVybmAke3N9Oi8vJHtjfSR7dCYmaT9gOiR7aX1gOlwiXCJ9QCR7bn0ke28/YDoke299YDpcIlwifS8ke3I/YCR7cn0vYDpyfSR7YX1gfWZ1bmN0aW9uIERlKGUpe3JldHVybntwcm90b2NvbDplLnByb3RvY29sLHB1YmxpY0tleTplLnB1YmxpY0tleXx8XCJcIixwYXNzOmUucGFzc3x8XCJcIixob3N0OmUuaG9zdCxwb3J0OmUucG9ydHx8XCJcIixwYXRoOmUucGF0aHx8XCJcIixwcm9qZWN0SWQ6ZS5wcm9qZWN0SWR9fWZ1bmN0aW9uIE5lKGUpe2NvbnN0IHQ9XCJzdHJpbmdcIj09dHlwZW9mIGU/ZnVuY3Rpb24oZSl7Y29uc3QgdD14ZS5leGVjKGUpO2lmKCF0KXJldHVybiB2b2lkIGplKCgoKT0+e2NvbnNvbGUuZXJyb3IoYEludmFsaWQgU2VudHJ5IERzbjogJHtlfWApfSkpO2NvbnN0W24scixpPVwiXCIsbz1cIlwiLGE9XCJcIixzPVwiXCJdPXQuc2xpY2UoMSk7bGV0IGM9XCJcIixsPXM7Y29uc3QgdT1sLnNwbGl0KFwiL1wiKTtpZih1Lmxlbmd0aD4xJiYoYz11LnNsaWNlKDAsLTEpLmpvaW4oXCIvXCIpLGw9dS5wb3AoKSksbCl7Y29uc3QgZT1sLm1hdGNoKC9eXFxkKy8pO2UmJihsPWVbMF0pfXJldHVybiBEZSh7aG9zdDpvLHBhc3M6aSxwYXRoOmMscHJvamVjdElkOmwscG9ydDphLHByb3RvY29sOm4scHVibGljS2V5OnJ9KX0oZSk6RGUoZSk7aWYodCYmZnVuY3Rpb24oZSl7aWYoIVBlKXJldHVybiEwO2NvbnN0e3BvcnQ6dCxwcm9qZWN0SWQ6bixwcm90b2NvbDpyfT1lO3JldHVybiEoW1wicHJvdG9jb2xcIixcInB1YmxpY0tleVwiLFwiaG9zdFwiLFwicHJvamVjdElkXCJdLmZpbmQoKHQ9PiFlW3RdJiYoTGUuZXJyb3IoYEludmFsaWQgU2VudHJ5IERzbjogJHt0fSBtaXNzaW5nYCksITApKSl8fChuLm1hdGNoKC9eXFxkKyQvKT9mdW5jdGlvbihlKXtyZXR1cm5cImh0dHBcIj09PWV8fFwiaHR0cHNcIj09PWV9KHIpP3QmJmlzTmFOKHBhcnNlSW50KHQsMTApKSYmKExlLmVycm9yKGBJbnZhbGlkIFNlbnRyeSBEc246IEludmFsaWQgcG9ydCAke3R9YCksMSk6KExlLmVycm9yKGBJbnZhbGlkIFNlbnRyeSBEc246IEludmFsaWQgcHJvdG9jb2wgJHtyfWApLDEpOihMZS5lcnJvcihgSW52YWxpZCBTZW50cnkgRHNuOiBJbnZhbGlkIHByb2plY3RJZCAke259YCksMSkpKX0odCkpcmV0dXJuIHR9Y2xhc3MgRmUgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlLHQ9XCJ3YXJuXCIpe3N1cGVyKGUpLHRoaXMubWVzc2FnZT1lLHRoaXMubmFtZT1uZXcudGFyZ2V0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lLE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLG5ldy50YXJnZXQucHJvdG90eXBlKSx0aGlzLmxvZ0xldmVsPXR9fWZ1bmN0aW9uIFJlKGUsdCxuKXtpZighKHQgaW4gZSkpcmV0dXJuO2NvbnN0IHI9ZVt0XSxpPW4ocik7XCJmdW5jdGlvblwiPT10eXBlb2YgaSYmVWUoaSxyKSxlW3RdPWl9ZnVuY3Rpb24gQmUoZSx0LG4pe3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpuLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfWNhdGNoKG4pe1BlJiZMZS5sb2coYEZhaWxlZCB0byBhZGQgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgXCIke3R9XCIgdG8gb2JqZWN0YCxlKX19ZnVuY3Rpb24gVWUoZSx0KXt0cnl7Y29uc3Qgbj10LnByb3RvdHlwZXx8e307ZS5wcm90b3R5cGU9dC5wcm90b3R5cGU9bixCZShlLFwiX19zZW50cnlfb3JpZ2luYWxfX1wiLHQpfWNhdGNoKGUpe319ZnVuY3Rpb24gVmUoZSl7cmV0dXJuIGUuX19zZW50cnlfb3JpZ2luYWxfX31mdW5jdGlvbiBKZShlKXtpZih0ZShlKSlyZXR1cm57bWVzc2FnZTplLm1lc3NhZ2UsbmFtZTplLm5hbWUsc3RhY2s6ZS5zdGFjaywuLi5xZShlKX07aWYobGUoZSkpe2NvbnN0IHQ9e3R5cGU6ZS50eXBlLHRhcmdldDokZShlLnRhcmdldCksY3VycmVudFRhcmdldDokZShlLmN1cnJlbnRUYXJnZXQpLC4uLnFlKGUpfTtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgQ3VzdG9tRXZlbnQmJmRlKGUsQ3VzdG9tRXZlbnQpJiYodC5kZXRhaWw9ZS5kZXRhaWwpLHR9cmV0dXJuIGV9ZnVuY3Rpb24gJGUoZSl7dHJ5e3JldHVybiB0PWUsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIEVsZW1lbnQmJmRlKHQsRWxlbWVudCk/RWUoZSk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfWNhdGNoKGUpe3JldHVyblwiPHVua25vd24+XCJ9dmFyIHR9ZnVuY3Rpb24gcWUoZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGUmJm51bGwhPT1lKXtjb25zdCB0PXt9O2Zvcihjb25zdCBuIGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsbikmJih0W25dPWVbbl0pO3JldHVybiB0fXJldHVybnt9fWZ1bmN0aW9uIHplKGUpe3JldHVybiBXZShlLG5ldyBNYXApfWZ1bmN0aW9uIFdlKGUsdCl7aWYoZnVuY3Rpb24oZSl7aWYoIWNlKGUpKXJldHVybiExO3RyeXtjb25zdCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZihlKS5jb25zdHJ1Y3Rvci5uYW1lO3JldHVybiF0fHxcIk9iamVjdFwiPT09dH1jYXRjaChlKXtyZXR1cm4hMH19KGUpKXtjb25zdCBuPXQuZ2V0KGUpO2lmKHZvaWQgMCE9PW4pcmV0dXJuIG47Y29uc3Qgcj17fTt0LnNldChlLHIpO2Zvcihjb25zdCBuIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpKXZvaWQgMCE9PWVbbl0mJihyW25dPVdlKGVbbl0sdCkpO3JldHVybiByfWlmKEFycmF5LmlzQXJyYXkoZSkpe2NvbnN0IG49dC5nZXQoZSk7aWYodm9pZCAwIT09bilyZXR1cm4gbjtjb25zdCByPVtdO3JldHVybiB0LnNldChlLHIpLGUuZm9yRWFjaCgoZT0+e3IucHVzaChXZShlLHQpKX0pKSxyfXJldHVybiBlfWNvbnN0IEhlPVwiP1wiLEdlPS9cXChlcnJvcjogKC4qKVxcKS8sUWU9L2NhcHR1cmVNZXNzYWdlfGNhcHR1cmVFeGNlcHRpb24vO2Z1bmN0aW9uIFllKGUpe3JldHVybiBlW2UubGVuZ3RoLTFdfHx7fX1jb25zdCBLZT1cIjxhbm9ueW1vdXM+XCI7ZnVuY3Rpb24gWGUoZSl7dHJ5e3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLm5hbWV8fEtlfWNhdGNoKGUpe3JldHVybiBLZX19ZnVuY3Rpb24gWmUoZSl7Y29uc3QgdD1lLmV4Y2VwdGlvbjtpZih0KXtjb25zdCBlPVtdO3RyeXtyZXR1cm4gdC52YWx1ZXMuZm9yRWFjaCgodD0+e3Quc3RhY2t0cmFjZS5mcmFtZXMmJmUucHVzaCguLi50LnN0YWNrdHJhY2UuZnJhbWVzKX0pKSxlfWNhdGNoKGUpe3JldHVybn19fWNvbnN0IGV0PXt9LHR0PXt9O2Z1bmN0aW9uIG50KGUsdCl7ZXRbZV09ZXRbZV18fFtdLGV0W2VdLnB1c2godCl9ZnVuY3Rpb24gcnQoZSx0KXt0dFtlXXx8KHQoKSx0dFtlXT0hMCl9ZnVuY3Rpb24gaXQoZSx0KXtjb25zdCBuPWUmJmV0W2VdO2lmKG4pZm9yKGNvbnN0IHIgb2Ygbil0cnl7cih0KX1jYXRjaCh0KXtQZSYmTGUuZXJyb3IoYEVycm9yIHdoaWxlIHRyaWdnZXJpbmcgaW5zdHJ1bWVudGF0aW9uIGhhbmRsZXIuXFxuVHlwZTogJHtlfVxcbk5hbWU6ICR7WGUocil9XFxuRXJyb3I6YCx0KX19ZnVuY3Rpb24gb3QoKXtcImNvbnNvbGVcImluIFNlJiZPZS5mb3JFYWNoKChmdW5jdGlvbihlKXtlIGluIFNlLmNvbnNvbGUmJlJlKFNlLmNvbnNvbGUsZSwoZnVuY3Rpb24odCl7cmV0dXJuIEFlW2VdPXQsZnVuY3Rpb24oLi4udCl7aXQoXCJjb25zb2xlXCIse2FyZ3M6dCxsZXZlbDplfSk7Y29uc3Qgbj1BZVtlXTtuJiZuLmFwcGx5KFNlLmNvbnNvbGUsdCl9fSkpfSkpfWNvbnN0IGF0PVNlO2Z1bmN0aW9uIHN0KGUpe3JldHVybiBlJiYvXmZ1bmN0aW9uXFxzK1xcdytcXChcXClcXHMrXFx7XFxzK1xcW25hdGl2ZSBjb2RlXFxdXFxzK1xcfSQvLnRlc3QoZS50b1N0cmluZygpKX1mdW5jdGlvbiBjdCgpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBFZGdlUnVudGltZSlyZXR1cm4hMDtpZighZnVuY3Rpb24oKXtpZighKFwiZmV0Y2hcImluIGF0KSlyZXR1cm4hMTt0cnl7cmV0dXJuIG5ldyBIZWFkZXJzLG5ldyBSZXF1ZXN0KFwiaHR0cDovL3d3dy5leGFtcGxlLmNvbVwiKSxuZXcgUmVzcG9uc2UsITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpKXJldHVybiExO2lmKHN0KGF0LmZldGNoKSlyZXR1cm4hMDtsZXQgZT0hMTtjb25zdCB0PWF0LmRvY3VtZW50O2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuY3JlYXRlRWxlbWVudCl0cnl7Y29uc3Qgbj10LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7bi5oaWRkZW49ITAsdC5oZWFkLmFwcGVuZENoaWxkKG4pLG4uY29udGVudFdpbmRvdyYmbi5jb250ZW50V2luZG93LmZldGNoJiYoZT1zdChuLmNvbnRlbnRXaW5kb3cuZmV0Y2gpKSx0LmhlYWQucmVtb3ZlQ2hpbGQobil9Y2F0Y2goZSl7UGUmJkxlLndhcm4oXCJDb3VsZCBub3QgY3JlYXRlIHNhbmRib3ggaWZyYW1lIGZvciBwdXJlIGZldGNoIGNoZWNrLCBiYWlsaW5nIHRvIHdpbmRvdy5mZXRjaDogXCIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gbHQoKXtyZXR1cm4gRGF0ZS5ub3coKS8xZTN9Y29uc3QgdXQ9ZnVuY3Rpb24oKXtjb25zdHtwZXJmb3JtYW5jZTplfT1TZTtpZighZXx8IWUubm93KXJldHVybiBsdDtjb25zdCB0PURhdGUubm93KCktZS5ub3coKSxuPW51bGw9PWUudGltZU9yaWdpbj90OmUudGltZU9yaWdpbjtyZXR1cm4oKT0+KG4rZS5ub3coKSkvMWUzfSgpO2Z1bmN0aW9uIGR0KGUsdCl7Y29uc3Qgbj1cImZldGNoXCI7bnQobixlKSxydChuLCgoKT0+ZnVuY3Rpb24oZSx0PSExKXtpZih0JiYhY3QoKSlyZXR1cm47UmUoU2UsXCJmZXRjaFwiLChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oLi4ubil7Y29uc3R7bWV0aG9kOnIsdXJsOml9PWZ1bmN0aW9uKGUpe2lmKDA9PT1lLmxlbmd0aClyZXR1cm57bWV0aG9kOlwiR0VUXCIsdXJsOlwiXCJ9O2lmKDI9PT1lLmxlbmd0aCl7Y29uc3RbdCxuXT1lO3JldHVybnt1cmw6aHQodCksbWV0aG9kOnB0KG4sXCJtZXRob2RcIik/U3RyaW5nKG4ubWV0aG9kKS50b1VwcGVyQ2FzZSgpOlwiR0VUXCJ9fWNvbnN0IHQ9ZVswXTtyZXR1cm57dXJsOmh0KHQpLG1ldGhvZDpwdCh0LFwibWV0aG9kXCIpP1N0cmluZyh0Lm1ldGhvZCkudG9VcHBlckNhc2UoKTpcIkdFVFwifX0obiksbz17YXJnczpuLGZldGNoRGF0YTp7bWV0aG9kOnIsdXJsOml9LHN0YXJ0VGltZXN0YW1wOjFlMyp1dCgpfTtlfHxpdChcImZldGNoXCIsey4uLm99KTtjb25zdCBhPShuZXcgRXJyb3IpLnN0YWNrO3JldHVybiB0LmFwcGx5KFNlLG4pLnRoZW4oKGFzeW5jIHQ9PihlP2UodCk6aXQoXCJmZXRjaFwiLHsuLi5vLGVuZFRpbWVzdGFtcDoxZTMqdXQoKSxyZXNwb25zZTp0fSksdCkpLChlPT57dGhyb3cgaXQoXCJmZXRjaFwiLHsuLi5vLGVuZFRpbWVzdGFtcDoxZTMqdXQoKSxlcnJvcjplfSksdGUoZSkmJnZvaWQgMD09PWUuc3RhY2smJihlLnN0YWNrPWEsQmUoZSxcImZyYW1lc1RvUG9wXCIsMSkpLGV9KSl9fSkpfSh2b2lkIDAsdCkpKX1mdW5jdGlvbiBwdChlLHQpe3JldHVybiEhZSYmXCJvYmplY3RcIj09dHlwZW9mIGUmJiEhZVt0XX1mdW5jdGlvbiBodChlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT9lOmU/cHQoZSxcInVybFwiKT9lLnVybDplLnRvU3RyaW5nP2UudG9TdHJpbmcoKTpcIlwiOlwiXCJ9KCgpPT57Y29uc3R7cGVyZm9ybWFuY2U6ZX09U2U7aWYoIWV8fCFlLm5vdylyZXR1cm47Y29uc3QgdD0zNmU1LG49ZS5ub3coKSxyPURhdGUubm93KCksaT1lLnRpbWVPcmlnaW4/TWF0aC5hYnMoZS50aW1lT3JpZ2luK24tcik6dCxvPWk8dCxhPWUudGltaW5nJiZlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQscz1cIm51bWJlclwiPT10eXBlb2YgYT9NYXRoLmFicyhhK24tcik6dDsob3x8czx0KSYmKGk8PXMmJmUudGltZU9yaWdpbil9KSgpO2xldCBmdD1udWxsO2Z1bmN0aW9uIHZ0KCl7ZnQ9U2Uub25lcnJvcixTZS5vbmVycm9yPWZ1bmN0aW9uKGUsdCxuLHIsaSl7cmV0dXJuIGl0KFwiZXJyb3JcIix7Y29sdW1uOnIsZXJyb3I6aSxsaW5lOm4sbXNnOmUsdXJsOnR9KSwhKCFmdHx8ZnQuX19TRU5UUllfTE9BREVSX18pJiZmdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LFNlLm9uZXJyb3IuX19TRU5UUllfSU5TVFJVTUVOVEVEX189ITB9bGV0IGd0PW51bGw7ZnVuY3Rpb24gbXQoKXtndD1TZS5vbnVuaGFuZGxlZHJlamVjdGlvbixTZS5vbnVuaGFuZGxlZHJlamVjdGlvbj1mdW5jdGlvbihlKXtyZXR1cm4gaXQoXCJ1bmhhbmRsZWRyZWplY3Rpb25cIixlKSwhKGd0JiYhZ3QuX19TRU5UUllfTE9BREVSX18pfHxndC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LFNlLm9udW5oYW5kbGVkcmVqZWN0aW9uLl9fU0VOVFJZX0lOU1RSVU1FTlRFRF9fPSEwfWZ1bmN0aW9uIHl0KCl7Y29uc3QgZT1TZSx0PWUuY3J5cHRvfHxlLm1zQ3J5cHRvO2xldCBuPSgpPT4xNipNYXRoLnJhbmRvbSgpO3RyeXtpZih0JiZ0LnJhbmRvbVVVSUQpcmV0dXJuIHQucmFuZG9tVVVJRCgpLnJlcGxhY2UoLy0vZyxcIlwiKTt0JiZ0LmdldFJhbmRvbVZhbHVlcyYmKG49KCk9Pntjb25zdCBlPW5ldyBVaW50OEFycmF5KDEpO3JldHVybiB0LmdldFJhbmRvbVZhbHVlcyhlKSxlWzBdfSl9Y2F0Y2goZSl7fXJldHVybihbMWU3XSsxZTMrNGUzKzhlMysxZTExKS5yZXBsYWNlKC9bMDE4XS9nLChlPT4oZV4oMTUmbigpKT4+ZS80KS50b1N0cmluZygxNikpKX1mdW5jdGlvbiBfdChlKXtyZXR1cm4gZS5leGNlcHRpb24mJmUuZXhjZXB0aW9uLnZhbHVlcz9lLmV4Y2VwdGlvbi52YWx1ZXNbMF06dm9pZCAwfWZ1bmN0aW9uIGJ0KGUpe2NvbnN0e21lc3NhZ2U6dCxldmVudF9pZDpufT1lO2lmKHQpcmV0dXJuIHQ7Y29uc3Qgcj1fdChlKTtyZXR1cm4gcj9yLnR5cGUmJnIudmFsdWU/YCR7ci50eXBlfTogJHtyLnZhbHVlfWA6ci50eXBlfHxyLnZhbHVlfHxufHxcIjx1bmtub3duPlwiOm58fFwiPHVua25vd24+XCJ9ZnVuY3Rpb24gd3QoZSx0LG4pe2NvbnN0IHI9ZS5leGNlcHRpb249ZS5leGNlcHRpb258fHt9LGk9ci52YWx1ZXM9ci52YWx1ZXN8fFtdLG89aVswXT1pWzBdfHx7fTtvLnZhbHVlfHwoby52YWx1ZT10fHxcIlwiKSxvLnR5cGV8fChvLnR5cGU9bnx8XCJFcnJvclwiKX1mdW5jdGlvbiBrdChlLHQpe2NvbnN0IG49X3QoZSk7aWYoIW4pcmV0dXJuO2NvbnN0IHI9bi5tZWNoYW5pc207aWYobi5tZWNoYW5pc209e3R5cGU6XCJnZW5lcmljXCIsaGFuZGxlZDohMCwuLi5yLC4uLnR9LHQmJlwiZGF0YVwiaW4gdCl7Y29uc3QgZT17Li4uciYmci5kYXRhLC4uLnQuZGF0YX07bi5tZWNoYW5pc20uZGF0YT1lfX1mdW5jdGlvbiBTdChlKXtpZihlJiZlLl9fc2VudHJ5X2NhcHR1cmVkX18pcmV0dXJuITA7dHJ5e0JlKGUsXCJfX3NlbnRyeV9jYXB0dXJlZF9fXCIsITApfWNhdGNoKGUpe31yZXR1cm4hMX1mdW5jdGlvbiBNdChlLHQ9MTAwLG49MS8wKXt0cnl7cmV0dXJuIEV0KFwiXCIsZSx0LG4pfWNhdGNoKGUpe3JldHVybntFUlJPUjpgKipub24tc2VyaWFsaXphYmxlKiogKCR7ZX0pYH19fWZ1bmN0aW9uIEN0KGUsdD0zLG49MTAyNDAwKXtjb25zdCByPU10KGUsdCk7cmV0dXJuIGk9cixmdW5jdGlvbihlKXtyZXR1cm5+LWVuY29kZVVSSShlKS5zcGxpdCgvJS4ufC4vKS5sZW5ndGh9KEpTT04uc3RyaW5naWZ5KGkpKT5uP0N0KGUsdC0xLG4pOnI7dmFyIGl9ZnVuY3Rpb24gRXQoZSx0LG49MS8wLHI9MS8wLGk9ZnVuY3Rpb24oKXtjb25zdCBlPVwiZnVuY3Rpb25cIj09dHlwZW9mIFdlYWtTZXQsdD1lP25ldyBXZWFrU2V0OltdO3JldHVybltmdW5jdGlvbihuKXtpZihlKXJldHVybiEhdC5oYXMobil8fCh0LmFkZChuKSwhMSk7Zm9yKGxldCBlPTA7ZTx0Lmxlbmd0aDtlKyspaWYodFtlXT09PW4pcmV0dXJuITA7cmV0dXJuIHQucHVzaChuKSwhMX0sZnVuY3Rpb24obil7aWYoZSl0LmRlbGV0ZShuKTtlbHNlIGZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSsrKWlmKHRbZV09PT1uKXt0LnNwbGljZShlLDEpO2JyZWFrfX1dfSgpKXtjb25zdFtvLGFdPWk7aWYobnVsbD09dHx8W1wiYm9vbGVhblwiLFwic3RyaW5nXCJdLmluY2x1ZGVzKHR5cGVvZiB0KXx8XCJudW1iZXJcIj09dHlwZW9mIHQmJk51bWJlci5pc0Zpbml0ZSh0KSlyZXR1cm4gdDtjb25zdCBzPWZ1bmN0aW9uKGUsdCl7dHJ5e2lmKFwiZG9tYWluXCI9PT1lJiZ0JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmdC5fZXZlbnRzKXJldHVyblwiW0RvbWFpbl1cIjtpZihcImRvbWFpbkVtaXR0ZXJcIj09PWUpcmV0dXJuXCJbRG9tYWluRW1pdHRlcl1cIjtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsJiZ0PT09Z2xvYmFsKXJldHVyblwiW0dsb2JhbF1cIjtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ0PT09d2luZG93KXJldHVyblwiW1dpbmRvd11cIjtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQmJnQ9PT1kb2N1bWVudClyZXR1cm5cIltEb2N1bWVudF1cIjtpZihwZSh0KSlyZXR1cm5cIltWdWVWaWV3TW9kZWxdXCI7aWYoY2Uobj10KSYmXCJuYXRpdmVFdmVudFwiaW4gbiYmXCJwcmV2ZW50RGVmYXVsdFwiaW4gbiYmXCJzdG9wUHJvcGFnYXRpb25cImluIG4pcmV0dXJuXCJbU3ludGhldGljRXZlbnRdXCI7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQmJiFOdW1iZXIuaXNGaW5pdGUodCkpcmV0dXJuYFske3R9XWA7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdClyZXR1cm5gW0Z1bmN0aW9uOiAke1hlKHQpfV1gO2lmKFwic3ltYm9sXCI9PXR5cGVvZiB0KXJldHVybmBbJHtTdHJpbmcodCl9XWA7aWYoXCJiaWdpbnRcIj09dHlwZW9mIHQpcmV0dXJuYFtCaWdJbnQ6ICR7U3RyaW5nKHQpfV1gO2NvbnN0IHI9ZnVuY3Rpb24oZSl7Y29uc3QgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2YoZSk7cmV0dXJuIHQ/dC5jb25zdHJ1Y3Rvci5uYW1lOlwibnVsbCBwcm90b3R5cGVcIn0odCk7cmV0dXJuL15IVE1MKFxcdyopRWxlbWVudCQvLnRlc3Qocik/YFtIVE1MRWxlbWVudDogJHtyfV1gOmBbb2JqZWN0ICR7cn1dYH1jYXRjaChlKXtyZXR1cm5gKipub24tc2VyaWFsaXphYmxlKiogKCR7ZX0pYH12YXIgbn0oZSx0KTtpZighcy5zdGFydHNXaXRoKFwiW29iamVjdCBcIikpcmV0dXJuIHM7aWYodC5fX3NlbnRyeV9za2lwX25vcm1hbGl6YXRpb25fXylyZXR1cm4gdDtjb25zdCBjPVwibnVtYmVyXCI9PXR5cGVvZiB0Ll9fc2VudHJ5X292ZXJyaWRlX25vcm1hbGl6YXRpb25fZGVwdGhfXz90Ll9fc2VudHJ5X292ZXJyaWRlX25vcm1hbGl6YXRpb25fZGVwdGhfXzpuO2lmKDA9PT1jKXJldHVybiBzLnJlcGxhY2UoXCJvYmplY3QgXCIsXCJcIik7aWYobyh0KSlyZXR1cm5cIltDaXJjdWxhciB+XVwiO2NvbnN0IGw9dDtpZihsJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBsLnRvSlNPTil0cnl7cmV0dXJuIEV0KFwiXCIsbC50b0pTT04oKSxjLTEscixpKX1jYXRjaChlKXt9Y29uc3QgdT1BcnJheS5pc0FycmF5KHQpP1tdOnt9O2xldCBkPTA7Y29uc3QgcD1KZSh0KTtmb3IoY29uc3QgZSBpbiBwKXtpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHAsZSkpY29udGludWU7aWYoZD49cil7dVtlXT1cIltNYXhQcm9wZXJ0aWVzIH5dXCI7YnJlYWt9Y29uc3QgdD1wW2VdO3VbZV09RXQoZSx0LGMtMSxyLGkpLGQrK31yZXR1cm4gYSh0KSx1fXZhciBUdDtmdW5jdGlvbiBQdChlKXtyZXR1cm4gbmV3IEF0KCh0PT57dChlKX0pKX1mdW5jdGlvbiBPdChlKXtyZXR1cm4gbmV3IEF0KCgodCxuKT0+e24oZSl9KSl9IWZ1bmN0aW9uKGUpe2VbZS5QRU5ESU5HPTBdPVwiUEVORElOR1wiO2VbZS5SRVNPTFZFRD0xXT1cIlJFU09MVkVEXCI7ZVtlLlJFSkVDVEVEPTJdPVwiUkVKRUNURURcIn0oVHR8fChUdD17fSkpO2NsYXNzIEF0e2NvbnN0cnVjdG9yKGUpe0F0LnByb3RvdHlwZS5fX2luaXQuY2FsbCh0aGlzKSxBdC5wcm90b3R5cGUuX19pbml0Mi5jYWxsKHRoaXMpLEF0LnByb3RvdHlwZS5fX2luaXQzLmNhbGwodGhpcyksQXQucHJvdG90eXBlLl9faW5pdDQuY2FsbCh0aGlzKSx0aGlzLl9zdGF0ZT1UdC5QRU5ESU5HLHRoaXMuX2hhbmRsZXJzPVtdO3RyeXtlKHRoaXMuX3Jlc29sdmUsdGhpcy5fcmVqZWN0KX1jYXRjaChlKXt0aGlzLl9yZWplY3QoZSl9fXRoZW4oZSx0KXtyZXR1cm4gbmV3IEF0KCgobixyKT0+e3RoaXMuX2hhbmRsZXJzLnB1c2goWyExLHQ9PntpZihlKXRyeXtuKGUodCkpfWNhdGNoKGUpe3IoZSl9ZWxzZSBuKHQpfSxlPT57aWYodCl0cnl7bih0KGUpKX1jYXRjaChlKXtyKGUpfWVsc2UgcihlKX1dKSx0aGlzLl9leGVjdXRlSGFuZGxlcnMoKX0pKX1jYXRjaChlKXtyZXR1cm4gdGhpcy50aGVuKChlPT5lKSxlKX1maW5hbGx5KGUpe3JldHVybiBuZXcgQXQoKCh0LG4pPT57bGV0IHIsaTtyZXR1cm4gdGhpcy50aGVuKCh0PT57aT0hMSxyPXQsZSYmZSgpfSksKHQ9PntpPSEwLHI9dCxlJiZlKCl9KSkudGhlbigoKCk9PntpP24ocik6dChyKX0pKX0pKX1fX2luaXQoKXt0aGlzLl9yZXNvbHZlPWU9Pnt0aGlzLl9zZXRSZXN1bHQoVHQuUkVTT0xWRUQsZSl9fV9faW5pdDIoKXt0aGlzLl9yZWplY3Q9ZT0+e3RoaXMuX3NldFJlc3VsdChUdC5SRUpFQ1RFRCxlKX19X19pbml0Mygpe3RoaXMuX3NldFJlc3VsdD0oZSx0KT0+e3RoaXMuX3N0YXRlPT09VHQuUEVORElORyYmKHVlKHQpP3QudGhlbih0aGlzLl9yZXNvbHZlLHRoaXMuX3JlamVjdCk6KHRoaXMuX3N0YXRlPWUsdGhpcy5fdmFsdWU9dCx0aGlzLl9leGVjdXRlSGFuZGxlcnMoKSkpfX1fX2luaXQ0KCl7dGhpcy5fZXhlY3V0ZUhhbmRsZXJzPSgpPT57aWYodGhpcy5fc3RhdGU9PT1UdC5QRU5ESU5HKXJldHVybjtjb25zdCBlPXRoaXMuX2hhbmRsZXJzLnNsaWNlKCk7dGhpcy5faGFuZGxlcnM9W10sZS5mb3JFYWNoKChlPT57ZVswXXx8KHRoaXMuX3N0YXRlPT09VHQuUkVTT0xWRUQmJmVbMV0odGhpcy5fdmFsdWUpLHRoaXMuX3N0YXRlPT09VHQuUkVKRUNURUQmJmVbMl0odGhpcy5fdmFsdWUpLGVbMF09ITApfSkpfX19ZnVuY3Rpb24ganQoZSl7Y29uc3QgdD1bXTtmdW5jdGlvbiBuKGUpe3JldHVybiB0LnNwbGljZSh0LmluZGV4T2YoZSksMSlbMF18fFByb21pc2UucmVzb2x2ZSh2b2lkIDApfXJldHVybnskOnQsYWRkOmZ1bmN0aW9uKHIpe2lmKCEodm9pZCAwPT09ZXx8dC5sZW5ndGg8ZSkpcmV0dXJuIE90KG5ldyBGZShcIk5vdCBhZGRpbmcgUHJvbWlzZSBiZWNhdXNlIGJ1ZmZlciBsaW1pdCB3YXMgcmVhY2hlZC5cIikpO2NvbnN0IGk9cigpO3JldHVybi0xPT09dC5pbmRleE9mKGkpJiZ0LnB1c2goaSksaS50aGVuKCgoKT0+bihpKSkpLnRoZW4obnVsbCwoKCk9Pm4oaSkudGhlbihudWxsLCgoKT0+e30pKSkpLGl9LGRyYWluOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgQXQoKChuLHIpPT57bGV0IGk9dC5sZW5ndGg7aWYoIWkpcmV0dXJuIG4oITApO2NvbnN0IG89c2V0VGltZW91dCgoKCk9PntlJiZlPjAmJm4oITEpfSksZSk7dC5mb3JFYWNoKChlPT57UHQoZSkudGhlbigoKCk9PnstLWl8fChjbGVhclRpbWVvdXQobyksbighMCkpfSkscil9KSl9KSl9fX1mdW5jdGlvbiBMdChlKXtpZighZSlyZXR1cm57fTtjb25zdCB0PWUubWF0Y2goL14oKFteOi8/I10rKTopPyhcXC9cXC8oW14vPyNdKikpPyhbXj8jXSopKFxcPyhbXiNdKikpPygjKC4qKSk/JC8pO2lmKCF0KXJldHVybnt9O2NvbnN0IG49dFs2XXx8XCJcIixyPXRbOF18fFwiXCI7cmV0dXJue2hvc3Q6dFs0XSxwYXRoOnRbNV0scHJvdG9jb2w6dFsyXSxzZWFyY2g6bixoYXNoOnIscmVsYXRpdmU6dFs1XStuK3J9fWNvbnN0IHh0PVtcImZhdGFsXCIsXCJlcnJvclwiLFwid2FybmluZ1wiLFwibG9nXCIsXCJpbmZvXCIsXCJkZWJ1Z1wiXTtmdW5jdGlvbiBJdChlKXtyZXR1cm5cIndhcm5cIj09PWU/XCJ3YXJuaW5nXCI6eHQuaW5jbHVkZXMoZSk/ZTpcImxvZ1wifWNvbnN0IER0PS9ec2VudHJ5LS87ZnVuY3Rpb24gTnQoZSl7Y29uc3QgdD1mdW5jdGlvbihlKXtpZighZXx8IW9lKGUpJiYhQXJyYXkuaXNBcnJheShlKSlyZXR1cm47aWYoQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gZS5yZWR1Y2UoKChlLHQpPT57Y29uc3Qgbj1GdCh0KTtyZXR1cm4gT2JqZWN0LmVudHJpZXMobikuZm9yRWFjaCgoKFt0LG5dKT0+e2VbdF09bn0pKSxlfSkse30pO3JldHVybiBGdChlKX0oZSk7aWYoIXQpcmV0dXJuO2NvbnN0IG49T2JqZWN0LmVudHJpZXModCkucmVkdWNlKCgoZSxbdCxuXSk9PntpZih0Lm1hdGNoKER0KSl7ZVt0LnNsaWNlKDcpXT1ufXJldHVybiBlfSkse30pO3JldHVybiBPYmplY3Qua2V5cyhuKS5sZW5ndGg+MD9uOnZvaWQgMH1mdW5jdGlvbiBGdChlKXtyZXR1cm4gZS5zcGxpdChcIixcIikubWFwKChlPT5lLnNwbGl0KFwiPVwiKS5tYXAoKGU9PmRlY29kZVVSSUNvbXBvbmVudChlLnRyaW0oKSkpKSkpLnJlZHVjZSgoKGUsW3Qsbl0pPT4odCYmbiYmKGVbdF09biksZSkpLHt9KX1mdW5jdGlvbiBSdChlLHQ9W10pe3JldHVybltlLHRdfWZ1bmN0aW9uIEJ0KGUsdCl7Y29uc3RbbixyXT1lO3JldHVybltuLFsuLi5yLHRdXX1mdW5jdGlvbiBVdChlLHQpe2NvbnN0IG49ZVsxXTtmb3IoY29uc3QgZSBvZiBuKXtpZih0KGUsZVswXS50eXBlKSlyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBWdChlKXtyZXR1cm4gU2UuX19TRU5UUllfXyYmU2UuX19TRU5UUllfXy5lbmNvZGVQb2x5ZmlsbD9TZS5fX1NFTlRSWV9fLmVuY29kZVBvbHlmaWxsKGUpOihuZXcgVGV4dEVuY29kZXIpLmVuY29kZShlKX1mdW5jdGlvbiBKdChlKXtjb25zdFt0LG5dPWU7bGV0IHI9SlNPTi5zdHJpbmdpZnkodCk7ZnVuY3Rpb24gaShlKXtcInN0cmluZ1wiPT10eXBlb2Ygcj9yPVwic3RyaW5nXCI9PXR5cGVvZiBlP3IrZTpbVnQociksZV06ci5wdXNoKFwic3RyaW5nXCI9PXR5cGVvZiBlP1Z0KGUpOmUpfWZvcihjb25zdCBlIG9mIG4pe2NvbnN0W3Qsbl09ZTtpZihpKGBcXG4ke0pTT04uc3RyaW5naWZ5KHQpfVxcbmApLFwic3RyaW5nXCI9PXR5cGVvZiBufHxuIGluc3RhbmNlb2YgVWludDhBcnJheSlpKG4pO2Vsc2V7bGV0IGU7dHJ5e2U9SlNPTi5zdHJpbmdpZnkobil9Y2F0Y2godCl7ZT1KU09OLnN0cmluZ2lmeShNdChuKSl9aShlKX19cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHI/cjpmdW5jdGlvbihlKXtjb25zdCB0PWUucmVkdWNlKCgoZSx0KT0+ZSt0Lmxlbmd0aCksMCksbj1uZXcgVWludDhBcnJheSh0KTtsZXQgcj0wO2Zvcihjb25zdCB0IG9mIGUpbi5zZXQodCxyKSxyKz10Lmxlbmd0aDtyZXR1cm4gbn0ocil9ZnVuY3Rpb24gJHQoZSl7Y29uc3QgdD1cInN0cmluZ1wiPT10eXBlb2YgZS5kYXRhP1Z0KGUuZGF0YSk6ZS5kYXRhO3JldHVyblt6ZSh7dHlwZTpcImF0dGFjaG1lbnRcIixsZW5ndGg6dC5sZW5ndGgsZmlsZW5hbWU6ZS5maWxlbmFtZSxjb250ZW50X3R5cGU6ZS5jb250ZW50VHlwZSxhdHRhY2htZW50X3R5cGU6ZS5hdHRhY2htZW50VHlwZX0pLHRdfWNvbnN0IHF0PXtzZXNzaW9uOlwic2Vzc2lvblwiLHNlc3Npb25zOlwic2Vzc2lvblwiLGF0dGFjaG1lbnQ6XCJhdHRhY2htZW50XCIsdHJhbnNhY3Rpb246XCJ0cmFuc2FjdGlvblwiLGV2ZW50OlwiZXJyb3JcIixjbGllbnRfcmVwb3J0OlwiaW50ZXJuYWxcIix1c2VyX3JlcG9ydDpcImRlZmF1bHRcIixwcm9maWxlOlwicHJvZmlsZVwiLHByb2ZpbGVfY2h1bms6XCJwcm9maWxlXCIscmVwbGF5X2V2ZW50OlwicmVwbGF5XCIscmVwbGF5X3JlY29yZGluZzpcInJlcGxheVwiLGNoZWNrX2luOlwibW9uaXRvclwiLGZlZWRiYWNrOlwiZmVlZGJhY2tcIixzcGFuOlwic3BhblwiLHN0YXRzZDpcIm1ldHJpY19idWNrZXRcIn07ZnVuY3Rpb24genQoZSl7cmV0dXJuIHF0W2VdfWZ1bmN0aW9uIFd0KGUpe2lmKCFlfHwhZS5zZGspcmV0dXJuO2NvbnN0e25hbWU6dCx2ZXJzaW9uOm59PWUuc2RrO3JldHVybntuYW1lOnQsdmVyc2lvbjpufX1mdW5jdGlvbiBIdChlLHtzdGF0dXNDb2RlOnQsaGVhZGVyczpufSxyPURhdGUubm93KCkpe2NvbnN0IGk9ey4uLmV9LG89biYmbltcIngtc2VudHJ5LXJhdGUtbGltaXRzXCJdLGE9biYmbltcInJldHJ5LWFmdGVyXCJdO2lmKG8pZm9yKGNvbnN0IGUgb2Ygby50cmltKCkuc3BsaXQoXCIsXCIpKXtjb25zdFt0LG4sLCxvXT1lLnNwbGl0KFwiOlwiLDUpLGE9cGFyc2VJbnQodCwxMCkscz0xZTMqKGlzTmFOKGEpPzYwOmEpO2lmKG4pZm9yKGNvbnN0IGUgb2Ygbi5zcGxpdChcIjtcIikpXCJtZXRyaWNfYnVja2V0XCI9PT1lJiZvJiYhby5zcGxpdChcIjtcIikuaW5jbHVkZXMoXCJjdXN0b21cIil8fChpW2VdPXIrcyk7ZWxzZSBpLmFsbD1yK3N9ZWxzZSBhP2kuYWxsPXIrZnVuY3Rpb24oZSx0PURhdGUubm93KCkpe2NvbnN0IG49cGFyc2VJbnQoYCR7ZX1gLDEwKTtpZighaXNOYU4obikpcmV0dXJuIDFlMypuO2NvbnN0IHI9RGF0ZS5wYXJzZShgJHtlfWApO3JldHVybiBpc05hTihyKT82ZTQ6ci10fShhLHIpOjQyOT09PXQmJihpLmFsbD1yKzZlNCk7cmV0dXJuIGl9ZnVuY3Rpb24gR3QoKXtyZXR1cm57dHJhY2VJZDp5dCgpLHNwYW5JZDp5dCgpLnN1YnN0cmluZygxNil9fWNvbnN0IFF0PVNlO2NvbnN0IFl0PVwidW5kZWZpbmVkXCI9PXR5cGVvZiBfX1NFTlRSWV9ERUJVR19ffHxfX1NFTlRSWV9ERUJVR19fO2Z1bmN0aW9uIEt0KCl7cmV0dXJuIFh0KFNlKSxTZX1mdW5jdGlvbiBYdChlKXtjb25zdCB0PWUuX19TRU5UUllfXz1lLl9fU0VOVFJZX198fHt9O3JldHVybiB0LnZlcnNpb249dC52ZXJzaW9ufHxrZSx0W2tlXT10W2tlXXx8e319ZnVuY3Rpb24gWnQoZSx0PXt9KXtpZih0LnVzZXImJighZS5pcEFkZHJlc3MmJnQudXNlci5pcF9hZGRyZXNzJiYoZS5pcEFkZHJlc3M9dC51c2VyLmlwX2FkZHJlc3MpLGUuZGlkfHx0LmRpZHx8KGUuZGlkPXQudXNlci5pZHx8dC51c2VyLmVtYWlsfHx0LnVzZXIudXNlcm5hbWUpKSxlLnRpbWVzdGFtcD10LnRpbWVzdGFtcHx8dXQoKSx0LmFibm9ybWFsX21lY2hhbmlzbSYmKGUuYWJub3JtYWxfbWVjaGFuaXNtPXQuYWJub3JtYWxfbWVjaGFuaXNtKSx0Lmlnbm9yZUR1cmF0aW9uJiYoZS5pZ25vcmVEdXJhdGlvbj10Lmlnbm9yZUR1cmF0aW9uKSx0LnNpZCYmKGUuc2lkPTMyPT09dC5zaWQubGVuZ3RoP3Quc2lkOnl0KCkpLHZvaWQgMCE9PXQuaW5pdCYmKGUuaW5pdD10LmluaXQpLCFlLmRpZCYmdC5kaWQmJihlLmRpZD1gJHt0LmRpZH1gKSxcIm51bWJlclwiPT10eXBlb2YgdC5zdGFydGVkJiYoZS5zdGFydGVkPXQuc3RhcnRlZCksZS5pZ25vcmVEdXJhdGlvbillLmR1cmF0aW9uPXZvaWQgMDtlbHNlIGlmKFwibnVtYmVyXCI9PXR5cGVvZiB0LmR1cmF0aW9uKWUuZHVyYXRpb249dC5kdXJhdGlvbjtlbHNle2NvbnN0IHQ9ZS50aW1lc3RhbXAtZS5zdGFydGVkO2UuZHVyYXRpb249dD49MD90OjB9dC5yZWxlYXNlJiYoZS5yZWxlYXNlPXQucmVsZWFzZSksdC5lbnZpcm9ubWVudCYmKGUuZW52aXJvbm1lbnQ9dC5lbnZpcm9ubWVudCksIWUuaXBBZGRyZXNzJiZ0LmlwQWRkcmVzcyYmKGUuaXBBZGRyZXNzPXQuaXBBZGRyZXNzKSwhZS51c2VyQWdlbnQmJnQudXNlckFnZW50JiYoZS51c2VyQWdlbnQ9dC51c2VyQWdlbnQpLFwibnVtYmVyXCI9PXR5cGVvZiB0LmVycm9ycyYmKGUuZXJyb3JzPXQuZXJyb3JzKSx0LnN0YXR1cyYmKGUuc3RhdHVzPXQuc3RhdHVzKX1jb25zdCBlbj1cIl9zZW50cnlTcGFuXCI7ZnVuY3Rpb24gdG4oZSx0KXt0P0JlKGUsZW4sdCk6ZGVsZXRlIGVbZW5dfWZ1bmN0aW9uIG5uKGUpe3JldHVybiBlW2VuXX1jbGFzcyBybntjb25zdHJ1Y3Rvcigpe3RoaXMuX25vdGlmeWluZ0xpc3RlbmVycz0hMSx0aGlzLl9zY29wZUxpc3RlbmVycz1bXSx0aGlzLl9ldmVudFByb2Nlc3NvcnM9W10sdGhpcy5fYnJlYWRjcnVtYnM9W10sdGhpcy5fYXR0YWNobWVudHM9W10sdGhpcy5fdXNlcj17fSx0aGlzLl90YWdzPXt9LHRoaXMuX2V4dHJhPXt9LHRoaXMuX2NvbnRleHRzPXt9LHRoaXMuX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YT17fSx0aGlzLl9wcm9wYWdhdGlvbkNvbnRleHQ9R3QoKX1jbG9uZSgpe2NvbnN0IGU9bmV3IHJuO3JldHVybiBlLl9icmVhZGNydW1icz1bLi4udGhpcy5fYnJlYWRjcnVtYnNdLGUuX3RhZ3M9ey4uLnRoaXMuX3RhZ3N9LGUuX2V4dHJhPXsuLi50aGlzLl9leHRyYX0sZS5fY29udGV4dHM9ey4uLnRoaXMuX2NvbnRleHRzfSxlLl91c2VyPXRoaXMuX3VzZXIsZS5fbGV2ZWw9dGhpcy5fbGV2ZWwsZS5fc2Vzc2lvbj10aGlzLl9zZXNzaW9uLGUuX3RyYW5zYWN0aW9uTmFtZT10aGlzLl90cmFuc2FjdGlvbk5hbWUsZS5fZmluZ2VycHJpbnQ9dGhpcy5fZmluZ2VycHJpbnQsZS5fZXZlbnRQcm9jZXNzb3JzPVsuLi50aGlzLl9ldmVudFByb2Nlc3NvcnNdLGUuX3JlcXVlc3RTZXNzaW9uPXRoaXMuX3JlcXVlc3RTZXNzaW9uLGUuX2F0dGFjaG1lbnRzPVsuLi50aGlzLl9hdHRhY2htZW50c10sZS5fc2RrUHJvY2Vzc2luZ01ldGFkYXRhPXsuLi50aGlzLl9zZGtQcm9jZXNzaW5nTWV0YWRhdGF9LGUuX3Byb3BhZ2F0aW9uQ29udGV4dD17Li4udGhpcy5fcHJvcGFnYXRpb25Db250ZXh0fSxlLl9jbGllbnQ9dGhpcy5fY2xpZW50LGUuX2xhc3RFdmVudElkPXRoaXMuX2xhc3RFdmVudElkLHRuKGUsbm4odGhpcykpLGV9c2V0Q2xpZW50KGUpe3RoaXMuX2NsaWVudD1lfXNldExhc3RFdmVudElkKGUpe3RoaXMuX2xhc3RFdmVudElkPWV9Z2V0Q2xpZW50KCl7cmV0dXJuIHRoaXMuX2NsaWVudH1sYXN0RXZlbnRJZCgpe3JldHVybiB0aGlzLl9sYXN0RXZlbnRJZH1hZGRTY29wZUxpc3RlbmVyKGUpe3RoaXMuX3Njb3BlTGlzdGVuZXJzLnB1c2goZSl9YWRkRXZlbnRQcm9jZXNzb3IoZSl7cmV0dXJuIHRoaXMuX2V2ZW50UHJvY2Vzc29ycy5wdXNoKGUpLHRoaXN9c2V0VXNlcihlKXtyZXR1cm4gdGhpcy5fdXNlcj1lfHx7ZW1haWw6dm9pZCAwLGlkOnZvaWQgMCxpcF9hZGRyZXNzOnZvaWQgMCx1c2VybmFtZTp2b2lkIDB9LHRoaXMuX3Nlc3Npb24mJlp0KHRoaXMuX3Nlc3Npb24se3VzZXI6ZX0pLHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCksdGhpc31nZXRVc2VyKCl7cmV0dXJuIHRoaXMuX3VzZXJ9Z2V0UmVxdWVzdFNlc3Npb24oKXtyZXR1cm4gdGhpcy5fcmVxdWVzdFNlc3Npb259c2V0UmVxdWVzdFNlc3Npb24oZSl7cmV0dXJuIHRoaXMuX3JlcXVlc3RTZXNzaW9uPWUsdGhpc31zZXRUYWdzKGUpe3JldHVybiB0aGlzLl90YWdzPXsuLi50aGlzLl90YWdzLC4uLmV9LHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCksdGhpc31zZXRUYWcoZSx0KXtyZXR1cm4gdGhpcy5fdGFncz17Li4udGhpcy5fdGFncyxbZV06dH0sdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKSx0aGlzfXNldEV4dHJhcyhlKXtyZXR1cm4gdGhpcy5fZXh0cmE9ey4uLnRoaXMuX2V4dHJhLC4uLmV9LHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCksdGhpc31zZXRFeHRyYShlLHQpe3JldHVybiB0aGlzLl9leHRyYT17Li4udGhpcy5fZXh0cmEsW2VdOnR9LHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCksdGhpc31zZXRGaW5nZXJwcmludChlKXtyZXR1cm4gdGhpcy5fZmluZ2VycHJpbnQ9ZSx0aGlzLl9ub3RpZnlTY29wZUxpc3RlbmVycygpLHRoaXN9c2V0TGV2ZWwoZSl7cmV0dXJuIHRoaXMuX2xldmVsPWUsdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKSx0aGlzfXNldFRyYW5zYWN0aW9uTmFtZShlKXtyZXR1cm4gdGhpcy5fdHJhbnNhY3Rpb25OYW1lPWUsdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKSx0aGlzfXNldENvbnRleHQoZSx0KXtyZXR1cm4gbnVsbD09PXQ/ZGVsZXRlIHRoaXMuX2NvbnRleHRzW2VdOnRoaXMuX2NvbnRleHRzW2VdPXQsdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKSx0aGlzfXNldFNlc3Npb24oZSl7cmV0dXJuIGU/dGhpcy5fc2Vzc2lvbj1lOmRlbGV0ZSB0aGlzLl9zZXNzaW9uLHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCksdGhpc31nZXRTZXNzaW9uKCl7cmV0dXJuIHRoaXMuX3Nlc3Npb259dXBkYXRlKGUpe2lmKCFlKXJldHVybiB0aGlzO2NvbnN0IHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lKHRoaXMpOmUsW24scl09dCBpbnN0YW5jZW9mIG9uP1t0LmdldFNjb3BlRGF0YSgpLHQuZ2V0UmVxdWVzdFNlc3Npb24oKV06Y2UodCk/W2UsZS5yZXF1ZXN0U2Vzc2lvbl06W10se3RhZ3M6aSxleHRyYTpvLHVzZXI6YSxjb250ZXh0czpzLGxldmVsOmMsZmluZ2VycHJpbnQ6bD1bXSxwcm9wYWdhdGlvbkNvbnRleHQ6dX09bnx8e307cmV0dXJuIHRoaXMuX3RhZ3M9ey4uLnRoaXMuX3RhZ3MsLi4uaX0sdGhpcy5fZXh0cmE9ey4uLnRoaXMuX2V4dHJhLC4uLm99LHRoaXMuX2NvbnRleHRzPXsuLi50aGlzLl9jb250ZXh0cywuLi5zfSxhJiZPYmplY3Qua2V5cyhhKS5sZW5ndGgmJih0aGlzLl91c2VyPWEpLGMmJih0aGlzLl9sZXZlbD1jKSxsLmxlbmd0aCYmKHRoaXMuX2ZpbmdlcnByaW50PWwpLHUmJih0aGlzLl9wcm9wYWdhdGlvbkNvbnRleHQ9dSksciYmKHRoaXMuX3JlcXVlc3RTZXNzaW9uPXIpLHRoaXN9Y2xlYXIoKXtyZXR1cm4gdGhpcy5fYnJlYWRjcnVtYnM9W10sdGhpcy5fdGFncz17fSx0aGlzLl9leHRyYT17fSx0aGlzLl91c2VyPXt9LHRoaXMuX2NvbnRleHRzPXt9LHRoaXMuX2xldmVsPXZvaWQgMCx0aGlzLl90cmFuc2FjdGlvbk5hbWU9dm9pZCAwLHRoaXMuX2ZpbmdlcnByaW50PXZvaWQgMCx0aGlzLl9yZXF1ZXN0U2Vzc2lvbj12b2lkIDAsdGhpcy5fc2Vzc2lvbj12b2lkIDAsdG4odGhpcyx2b2lkIDApLHRoaXMuX2F0dGFjaG1lbnRzPVtdLHRoaXMuX3Byb3BhZ2F0aW9uQ29udGV4dD1HdCgpLHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCksdGhpc31hZGRCcmVhZGNydW1iKGUsdCl7Y29uc3Qgbj1cIm51bWJlclwiPT10eXBlb2YgdD90OjEwMDtpZihuPD0wKXJldHVybiB0aGlzO2NvbnN0IHI9e3RpbWVzdGFtcDpsdCgpLC4uLmV9LGk9dGhpcy5fYnJlYWRjcnVtYnM7cmV0dXJuIGkucHVzaChyKSx0aGlzLl9icmVhZGNydW1icz1pLmxlbmd0aD5uP2kuc2xpY2UoLW4pOmksdGhpcy5fbm90aWZ5U2NvcGVMaXN0ZW5lcnMoKSx0aGlzfWdldExhc3RCcmVhZGNydW1iKCl7cmV0dXJuIHRoaXMuX2JyZWFkY3J1bWJzW3RoaXMuX2JyZWFkY3J1bWJzLmxlbmd0aC0xXX1jbGVhckJyZWFkY3J1bWJzKCl7cmV0dXJuIHRoaXMuX2JyZWFkY3J1bWJzPVtdLHRoaXMuX25vdGlmeVNjb3BlTGlzdGVuZXJzKCksdGhpc31hZGRBdHRhY2htZW50KGUpe3JldHVybiB0aGlzLl9hdHRhY2htZW50cy5wdXNoKGUpLHRoaXN9Y2xlYXJBdHRhY2htZW50cygpe3JldHVybiB0aGlzLl9hdHRhY2htZW50cz1bXSx0aGlzfWdldFNjb3BlRGF0YSgpe3JldHVybnticmVhZGNydW1iczp0aGlzLl9icmVhZGNydW1icyxhdHRhY2htZW50czp0aGlzLl9hdHRhY2htZW50cyxjb250ZXh0czp0aGlzLl9jb250ZXh0cyx0YWdzOnRoaXMuX3RhZ3MsZXh0cmE6dGhpcy5fZXh0cmEsdXNlcjp0aGlzLl91c2VyLGxldmVsOnRoaXMuX2xldmVsLGZpbmdlcnByaW50OnRoaXMuX2ZpbmdlcnByaW50fHxbXSxldmVudFByb2Nlc3NvcnM6dGhpcy5fZXZlbnRQcm9jZXNzb3JzLHByb3BhZ2F0aW9uQ29udGV4dDp0aGlzLl9wcm9wYWdhdGlvbkNvbnRleHQsc2RrUHJvY2Vzc2luZ01ldGFkYXRhOnRoaXMuX3Nka1Byb2Nlc3NpbmdNZXRhZGF0YSx0cmFuc2FjdGlvbk5hbWU6dGhpcy5fdHJhbnNhY3Rpb25OYW1lLHNwYW46bm4odGhpcyl9fXNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YShlKXtyZXR1cm4gdGhpcy5fc2RrUHJvY2Vzc2luZ01ldGFkYXRhPXsuLi50aGlzLl9zZGtQcm9jZXNzaW5nTWV0YWRhdGEsLi4uZX0sdGhpc31zZXRQcm9wYWdhdGlvbkNvbnRleHQoZSl7cmV0dXJuIHRoaXMuX3Byb3BhZ2F0aW9uQ29udGV4dD1lLHRoaXN9Z2V0UHJvcGFnYXRpb25Db250ZXh0KCl7cmV0dXJuIHRoaXMuX3Byb3BhZ2F0aW9uQ29udGV4dH1jYXB0dXJlRXhjZXB0aW9uKGUsdCl7Y29uc3Qgbj10JiZ0LmV2ZW50X2lkP3QuZXZlbnRfaWQ6eXQoKTtpZighdGhpcy5fY2xpZW50KXJldHVybiBMZS53YXJuKFwiTm8gY2xpZW50IGNvbmZpZ3VyZWQgb24gc2NvcGUgLSB3aWxsIG5vdCBjYXB0dXJlIGV4Y2VwdGlvbiFcIiksbjtjb25zdCByPW5ldyBFcnJvcihcIlNlbnRyeSBzeW50aGV0aWNFeGNlcHRpb25cIik7cmV0dXJuIHRoaXMuX2NsaWVudC5jYXB0dXJlRXhjZXB0aW9uKGUse29yaWdpbmFsRXhjZXB0aW9uOmUsc3ludGhldGljRXhjZXB0aW9uOnIsLi4udCxldmVudF9pZDpufSx0aGlzKSxufWNhcHR1cmVNZXNzYWdlKGUsdCxuKXtjb25zdCByPW4mJm4uZXZlbnRfaWQ/bi5ldmVudF9pZDp5dCgpO2lmKCF0aGlzLl9jbGllbnQpcmV0dXJuIExlLndhcm4oXCJObyBjbGllbnQgY29uZmlndXJlZCBvbiBzY29wZSAtIHdpbGwgbm90IGNhcHR1cmUgbWVzc2FnZSFcIikscjtjb25zdCBpPW5ldyBFcnJvcihlKTtyZXR1cm4gdGhpcy5fY2xpZW50LmNhcHR1cmVNZXNzYWdlKGUsdCx7b3JpZ2luYWxFeGNlcHRpb246ZSxzeW50aGV0aWNFeGNlcHRpb246aSwuLi5uLGV2ZW50X2lkOnJ9LHRoaXMpLHJ9Y2FwdHVyZUV2ZW50KGUsdCl7Y29uc3Qgbj10JiZ0LmV2ZW50X2lkP3QuZXZlbnRfaWQ6eXQoKTtyZXR1cm4gdGhpcy5fY2xpZW50Pyh0aGlzLl9jbGllbnQuY2FwdHVyZUV2ZW50KGUsey4uLnQsZXZlbnRfaWQ6bn0sdGhpcyksbik6KExlLndhcm4oXCJObyBjbGllbnQgY29uZmlndXJlZCBvbiBzY29wZSAtIHdpbGwgbm90IGNhcHR1cmUgZXZlbnQhXCIpLG4pfV9ub3RpZnlTY29wZUxpc3RlbmVycygpe3RoaXMuX25vdGlmeWluZ0xpc3RlbmVyc3x8KHRoaXMuX25vdGlmeWluZ0xpc3RlbmVycz0hMCx0aGlzLl9zY29wZUxpc3RlbmVycy5mb3JFYWNoKChlPT57ZSh0aGlzKX0pKSx0aGlzLl9ub3RpZnlpbmdMaXN0ZW5lcnM9ITEpfX1jb25zdCBvbj1ybjtjbGFzcyBhbntjb25zdHJ1Y3RvcihlLHQpe2xldCBuLHI7bj1lfHxuZXcgb24scj10fHxuZXcgb24sdGhpcy5fc3RhY2s9W3tzY29wZTpufV0sdGhpcy5faXNvbGF0aW9uU2NvcGU9cn13aXRoU2NvcGUoZSl7Y29uc3QgdD10aGlzLl9wdXNoU2NvcGUoKTtsZXQgbjt0cnl7bj1lKHQpfWNhdGNoKGUpe3Rocm93IHRoaXMuX3BvcFNjb3BlKCksZX1yZXR1cm4gdWUobik/bi50aGVuKChlPT4odGhpcy5fcG9wU2NvcGUoKSxlKSksKGU9Pnt0aHJvdyB0aGlzLl9wb3BTY29wZSgpLGV9KSk6KHRoaXMuX3BvcFNjb3BlKCksbil9Z2V0Q2xpZW50KCl7cmV0dXJuIHRoaXMuZ2V0U3RhY2tUb3AoKS5jbGllbnR9Z2V0U2NvcGUoKXtyZXR1cm4gdGhpcy5nZXRTdGFja1RvcCgpLnNjb3BlfWdldElzb2xhdGlvblNjb3BlKCl7cmV0dXJuIHRoaXMuX2lzb2xhdGlvblNjb3BlfWdldFN0YWNrVG9wKCl7cmV0dXJuIHRoaXMuX3N0YWNrW3RoaXMuX3N0YWNrLmxlbmd0aC0xXX1fcHVzaFNjb3BlKCl7Y29uc3QgZT10aGlzLmdldFNjb3BlKCkuY2xvbmUoKTtyZXR1cm4gdGhpcy5fc3RhY2sucHVzaCh7Y2xpZW50OnRoaXMuZ2V0Q2xpZW50KCksc2NvcGU6ZX0pLGV9X3BvcFNjb3BlKCl7cmV0dXJuISh0aGlzLl9zdGFjay5sZW5ndGg8PTEpJiYhIXRoaXMuX3N0YWNrLnBvcCgpfX1mdW5jdGlvbiBzbigpe2NvbnN0IGU9WHQoS3QoKSk7cmV0dXJuIGUuc3RhY2s9ZS5zdGFja3x8bmV3IGFuKE1lKFwiZGVmYXVsdEN1cnJlbnRTY29wZVwiLCgoKT0+bmV3IG9uKSksTWUoXCJkZWZhdWx0SXNvbGF0aW9uU2NvcGVcIiwoKCk9Pm5ldyBvbikpKX1mdW5jdGlvbiBjbihlKXtyZXR1cm4gc24oKS53aXRoU2NvcGUoZSl9ZnVuY3Rpb24gbG4oZSx0KXtjb25zdCBuPXNuKCk7cmV0dXJuIG4ud2l0aFNjb3BlKCgoKT0+KG4uZ2V0U3RhY2tUb3AoKS5zY29wZT1lLHQoZSkpKSl9ZnVuY3Rpb24gdW4oZSl7cmV0dXJuIHNuKCkud2l0aFNjb3BlKCgoKT0+ZShzbigpLmdldElzb2xhdGlvblNjb3BlKCkpKSl9ZnVuY3Rpb24gZG4oZSl7Y29uc3QgdD1YdChlKTtyZXR1cm4gdC5hY3M/dC5hY3M6e3dpdGhJc29sYXRpb25TY29wZTp1bix3aXRoU2NvcGU6Y24sd2l0aFNldFNjb3BlOmxuLHdpdGhTZXRJc29sYXRpb25TY29wZTooZSx0KT0+dW4odCksZ2V0Q3VycmVudFNjb3BlOigpPT5zbigpLmdldFNjb3BlKCksZ2V0SXNvbGF0aW9uU2NvcGU6KCk9PnNuKCkuZ2V0SXNvbGF0aW9uU2NvcGUoKX19ZnVuY3Rpb24gcG4oKXtyZXR1cm4gZG4oS3QoKSkuZ2V0Q3VycmVudFNjb3BlKCl9ZnVuY3Rpb24gaG4oKXtyZXR1cm4gZG4oS3QoKSkuZ2V0SXNvbGF0aW9uU2NvcGUoKX1mdW5jdGlvbiBmbigpe3JldHVybiBwbigpLmdldENsaWVudCgpfWZ1bmN0aW9uIHZuKGUpe2NvbnN0IHQ9ZS5fc2VudHJ5TWV0cmljcztpZighdClyZXR1cm47Y29uc3Qgbj17fTtmb3IoY29uc3RbLFtlLHJdXW9mIHQpeyhuW2VdfHwobltlXT1bXSkpLnB1c2goemUocikpfXJldHVybiBufWZ1bmN0aW9uIGduKGUpe2NvbnN0e3NwYW5JZDp0LHRyYWNlSWQ6bn09ZS5zcGFuQ29udGV4dCgpLHtwYXJlbnRfc3Bhbl9pZDpyfT1fbihlKTtyZXR1cm4gemUoe3BhcmVudF9zcGFuX2lkOnIsc3Bhbl9pZDp0LHRyYWNlX2lkOm59KX1mdW5jdGlvbiBtbihlKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgZT95bihlKTpBcnJheS5pc0FycmF5KGUpP2VbMF0rZVsxXS8xZTk6ZSBpbnN0YW5jZW9mIERhdGU/eW4oZS5nZXRUaW1lKCkpOnV0KCl9ZnVuY3Rpb24geW4oZSl7cmV0dXJuIGU+OTk5OTk5OTk5OT9lLzFlMzplfWZ1bmN0aW9uIF9uKGUpe2lmKGZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZ2V0U3BhbkpTT059KGUpKXJldHVybiBlLmdldFNwYW5KU09OKCk7dHJ5e2NvbnN0e3NwYW5JZDp0LHRyYWNlSWQ6bn09ZS5zcGFuQ29udGV4dCgpO2lmKGZ1bmN0aW9uKGUpe2NvbnN0IHQ9ZTtyZXR1cm4hISh0LmF0dHJpYnV0ZXMmJnQuc3RhcnRUaW1lJiZ0Lm5hbWUmJnQuZW5kVGltZSYmdC5zdGF0dXMpfShlKSl7Y29uc3R7YXR0cmlidXRlczpyLHN0YXJ0VGltZTppLG5hbWU6byxlbmRUaW1lOmEscGFyZW50U3BhbklkOnMsc3RhdHVzOmN9PWU7cmV0dXJuIHplKHtzcGFuX2lkOnQsdHJhY2VfaWQ6bixkYXRhOnIsZGVzY3JpcHRpb246byxwYXJlbnRfc3Bhbl9pZDpzLHN0YXJ0X3RpbWVzdGFtcDptbihpKSx0aW1lc3RhbXA6bW4oYSl8fHZvaWQgMCxzdGF0dXM6Ym4oYyksb3A6cltcInNlbnRyeS5vcFwiXSxvcmlnaW46cltcInNlbnRyeS5vcmlnaW5cIl0sX21ldHJpY3Nfc3VtbWFyeTp2bihlKX0pfXJldHVybntzcGFuX2lkOnQsdHJhY2VfaWQ6bn19Y2F0Y2goZSl7cmV0dXJue319fWZ1bmN0aW9uIGJuKGUpe2lmKGUmJjAhPT1lLmNvZGUpcmV0dXJuIDE9PT1lLmNvZGU/XCJva1wiOmUubWVzc2FnZXx8XCJ1bmtub3duX2Vycm9yXCJ9ZnVuY3Rpb24gd24oZSl7cmV0dXJuIGUuX3NlbnRyeVJvb3RTcGFufHxlfWNvbnN0IGtuPVwicHJvZHVjdGlvblwiO2Z1bmN0aW9uIFNuKGUsdCl7Y29uc3Qgbj10LmdldE9wdGlvbnMoKSx7cHVibGljS2V5OnJ9PXQuZ2V0RHNuKCl8fHt9LGk9emUoe2Vudmlyb25tZW50Om4uZW52aXJvbm1lbnR8fGtuLHJlbGVhc2U6bi5yZWxlYXNlLHB1YmxpY19rZXk6cix0cmFjZV9pZDplfSk7cmV0dXJuIHQuZW1pdChcImNyZWF0ZURzY1wiLGkpLGl9ZnVuY3Rpb24gTW4oZSl7Y29uc3QgdD1mbigpO2lmKCF0KXJldHVybnt9O2NvbnN0IG49U24oX24oZSkudHJhY2VfaWR8fFwiXCIsdCkscj13bihlKSxpPXIuX2Zyb3plbkRzYztpZihpKXJldHVybiBpO2NvbnN0IG89ci5zcGFuQ29udGV4dCgpLnRyYWNlU3RhdGUsYT1vJiZvLmdldChcInNlbnRyeS5kc2NcIikscz1hJiZOdChhKTtpZihzKXJldHVybiBzO2NvbnN0IGM9X24ociksbD1jLmRhdGF8fHt9LHU9bFtcInNlbnRyeS5zYW1wbGVfcmF0ZVwiXTtudWxsIT11JiYobi5zYW1wbGVfcmF0ZT1gJHt1fWApO2NvbnN0IGQ9bFtcInNlbnRyeS5zb3VyY2VcIl0scD1jLmRlc2NyaXB0aW9uO3JldHVyblwidXJsXCIhPT1kJiZwJiYobi50cmFuc2FjdGlvbj1wKSxmdW5jdGlvbihlKXtpZihcImJvb2xlYW5cIj09dHlwZW9mIF9fU0VOVFJZX1RSQUNJTkdfXyYmIV9fU0VOVFJZX1RSQUNJTkdfXylyZXR1cm4hMTtjb25zdCB0PWZuKCksbj1lfHx0JiZ0LmdldE9wdGlvbnMoKTtyZXR1cm4hIW4mJihuLmVuYWJsZVRyYWNpbmd8fFwidHJhY2VzU2FtcGxlUmF0ZVwiaW4gbnx8XCJ0cmFjZXNTYW1wbGVyXCJpbiBuKX0oKSYmKG4uc2FtcGxlZD1TdHJpbmcoZnVuY3Rpb24oZSl7Y29uc3R7dHJhY2VGbGFnczp0fT1lLnNwYW5Db250ZXh0KCk7cmV0dXJuIDE9PT10fShyKSkpLHQuZW1pdChcImNyZWF0ZURzY1wiLG4sciksbn1mdW5jdGlvbiBDbihlLHQsbixyKXtjb25zdCBpPVd0KG4pLG89ZS50eXBlJiZcInJlcGxheV9ldmVudFwiIT09ZS50eXBlP2UudHlwZTpcImV2ZW50XCI7IWZ1bmN0aW9uKGUsdCl7dCYmKGUuc2RrPWUuc2RrfHx7fSxlLnNkay5uYW1lPWUuc2RrLm5hbWV8fHQubmFtZSxlLnNkay52ZXJzaW9uPWUuc2RrLnZlcnNpb258fHQudmVyc2lvbixlLnNkay5pbnRlZ3JhdGlvbnM9Wy4uLmUuc2RrLmludGVncmF0aW9uc3x8W10sLi4udC5pbnRlZ3JhdGlvbnN8fFtdXSxlLnNkay5wYWNrYWdlcz1bLi4uZS5zZGsucGFja2FnZXN8fFtdLC4uLnQucGFja2FnZXN8fFtdXSl9KGUsbiYmbi5zZGspO2NvbnN0IGE9ZnVuY3Rpb24oZSx0LG4scil7Y29uc3QgaT1lLnNka1Byb2Nlc3NpbmdNZXRhZGF0YSYmZS5zZGtQcm9jZXNzaW5nTWV0YWRhdGEuZHluYW1pY1NhbXBsaW5nQ29udGV4dDtyZXR1cm57ZXZlbnRfaWQ6ZS5ldmVudF9pZCxzZW50X2F0OihuZXcgRGF0ZSkudG9JU09TdHJpbmcoKSwuLi50JiZ7c2RrOnR9LC4uLiEhbiYmciYme2RzbjpJZShyKX0sLi4uaSYme3RyYWNlOnplKHsuLi5pfSl9fX0oZSxpLHIsdCk7ZGVsZXRlIGUuc2RrUHJvY2Vzc2luZ01ldGFkYXRhO3JldHVybiBSdChhLFtbe3R5cGU6b30sZV1dKX1mdW5jdGlvbiBFbihlLHQsbixyPTApe3JldHVybiBuZXcgQXQoKChpLG8pPT57Y29uc3QgYT1lW3JdO2lmKG51bGw9PT10fHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBhKWkodCk7ZWxzZXtjb25zdCBzPWEoey4uLnR9LG4pO1l0JiZhLmlkJiZudWxsPT09cyYmTGUubG9nKGBFdmVudCBwcm9jZXNzb3IgXCIke2EuaWR9XCIgZHJvcHBlZCBldmVudGApLHVlKHMpP3MudGhlbigodD0+RW4oZSx0LG4scisxKS50aGVuKGkpKSkudGhlbihudWxsLG8pOkVuKGUscyxuLHIrMSkudGhlbihpKS50aGVuKG51bGwsbyl9fSkpfWZ1bmN0aW9uIFRuKGUsdCl7Y29uc3R7ZmluZ2VycHJpbnQ6bixzcGFuOnIsYnJlYWRjcnVtYnM6aSxzZGtQcm9jZXNzaW5nTWV0YWRhdGE6b309dDshZnVuY3Rpb24oZSx0KXtjb25zdHtleHRyYTpuLHRhZ3M6cix1c2VyOmksY29udGV4dHM6byxsZXZlbDphLHRyYW5zYWN0aW9uTmFtZTpzfT10LGM9emUobik7YyYmT2JqZWN0LmtleXMoYykubGVuZ3RoJiYoZS5leHRyYT17Li4uYywuLi5lLmV4dHJhfSk7Y29uc3QgbD16ZShyKTtsJiZPYmplY3Qua2V5cyhsKS5sZW5ndGgmJihlLnRhZ3M9ey4uLmwsLi4uZS50YWdzfSk7Y29uc3QgdT16ZShpKTt1JiZPYmplY3Qua2V5cyh1KS5sZW5ndGgmJihlLnVzZXI9ey4uLnUsLi4uZS51c2VyfSk7Y29uc3QgZD16ZShvKTtkJiZPYmplY3Qua2V5cyhkKS5sZW5ndGgmJihlLmNvbnRleHRzPXsuLi5kLC4uLmUuY29udGV4dHN9KTthJiYoZS5sZXZlbD1hKTtzJiZcInRyYW5zYWN0aW9uXCIhPT1lLnR5cGUmJihlLnRyYW5zYWN0aW9uPXMpfShlLHQpLHImJmZ1bmN0aW9uKGUsdCl7ZS5jb250ZXh0cz17dHJhY2U6Z24odCksLi4uZS5jb250ZXh0c30sZS5zZGtQcm9jZXNzaW5nTWV0YWRhdGE9e2R5bmFtaWNTYW1wbGluZ0NvbnRleHQ6TW4odCksLi4uZS5zZGtQcm9jZXNzaW5nTWV0YWRhdGF9O2NvbnN0IG49d24odCkscj1fbihuKS5kZXNjcmlwdGlvbjtyJiYhZS50cmFuc2FjdGlvbiYmXCJ0cmFuc2FjdGlvblwiPT09ZS50eXBlJiYoZS50cmFuc2FjdGlvbj1yKX0oZSxyKSxmdW5jdGlvbihlLHQpe2UuZmluZ2VycHJpbnQ9ZS5maW5nZXJwcmludD9mdW5jdGlvbihlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9lOltlXX0oZS5maW5nZXJwcmludCk6W10sdCYmKGUuZmluZ2VycHJpbnQ9ZS5maW5nZXJwcmludC5jb25jYXQodCkpO2UuZmluZ2VycHJpbnQmJiFlLmZpbmdlcnByaW50Lmxlbmd0aCYmZGVsZXRlIGUuZmluZ2VycHJpbnR9KGUsbiksZnVuY3Rpb24oZSx0KXtjb25zdCBuPVsuLi5lLmJyZWFkY3J1bWJzfHxbXSwuLi50XTtlLmJyZWFkY3J1bWJzPW4ubGVuZ3RoP246dm9pZCAwfShlLGkpLGZ1bmN0aW9uKGUsdCl7ZS5zZGtQcm9jZXNzaW5nTWV0YWRhdGE9ey4uLmUuc2RrUHJvY2Vzc2luZ01ldGFkYXRhLC4uLnR9fShlLG8pfWZ1bmN0aW9uIFBuKGUsdCl7Y29uc3R7ZXh0cmE6bix0YWdzOnIsdXNlcjppLGNvbnRleHRzOm8sbGV2ZWw6YSxzZGtQcm9jZXNzaW5nTWV0YWRhdGE6cyxicmVhZGNydW1iczpjLGZpbmdlcnByaW50OmwsZXZlbnRQcm9jZXNzb3JzOnUsYXR0YWNobWVudHM6ZCxwcm9wYWdhdGlvbkNvbnRleHQ6cCx0cmFuc2FjdGlvbk5hbWU6aCxzcGFuOmZ9PXQ7T24oZSxcImV4dHJhXCIsbiksT24oZSxcInRhZ3NcIixyKSxPbihlLFwidXNlclwiLGkpLE9uKGUsXCJjb250ZXh0c1wiLG8pLE9uKGUsXCJzZGtQcm9jZXNzaW5nTWV0YWRhdGFcIixzKSxhJiYoZS5sZXZlbD1hKSxoJiYoZS50cmFuc2FjdGlvbk5hbWU9aCksZiYmKGUuc3Bhbj1mKSxjLmxlbmd0aCYmKGUuYnJlYWRjcnVtYnM9Wy4uLmUuYnJlYWRjcnVtYnMsLi4uY10pLGwubGVuZ3RoJiYoZS5maW5nZXJwcmludD1bLi4uZS5maW5nZXJwcmludCwuLi5sXSksdS5sZW5ndGgmJihlLmV2ZW50UHJvY2Vzc29ycz1bLi4uZS5ldmVudFByb2Nlc3NvcnMsLi4udV0pLGQubGVuZ3RoJiYoZS5hdHRhY2htZW50cz1bLi4uZS5hdHRhY2htZW50cywuLi5kXSksZS5wcm9wYWdhdGlvbkNvbnRleHQ9ey4uLmUucHJvcGFnYXRpb25Db250ZXh0LC4uLnB9fWZ1bmN0aW9uIE9uKGUsdCxuKXtpZihuJiZPYmplY3Qua2V5cyhuKS5sZW5ndGgpe2VbdF09ey4uLmVbdF19O2Zvcihjb25zdCByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJihlW3RdW3JdPW5bcl0pfX1mdW5jdGlvbiBBbihlLHQsbixyLGksbyl7Y29uc3R7bm9ybWFsaXplRGVwdGg6YT0zLG5vcm1hbGl6ZU1heEJyZWFkdGg6cz0xZTN9PWUsYz17Li4udCxldmVudF9pZDp0LmV2ZW50X2lkfHxuLmV2ZW50X2lkfHx5dCgpLHRpbWVzdGFtcDp0LnRpbWVzdGFtcHx8bHQoKX0sbD1uLmludGVncmF0aW9uc3x8ZS5pbnRlZ3JhdGlvbnMubWFwKChlPT5lLm5hbWUpKTshZnVuY3Rpb24oZSx0KXtjb25zdHtlbnZpcm9ubWVudDpuLHJlbGVhc2U6cixkaXN0OmksbWF4VmFsdWVMZW5ndGg6bz0yNTB9PXQ7XCJlbnZpcm9ubWVudFwiaW4gZXx8KGUuZW52aXJvbm1lbnQ9XCJlbnZpcm9ubWVudFwiaW4gdD9uOmtuKTt2b2lkIDA9PT1lLnJlbGVhc2UmJnZvaWQgMCE9PXImJihlLnJlbGVhc2U9cik7dm9pZCAwPT09ZS5kaXN0JiZ2b2lkIDAhPT1pJiYoZS5kaXN0PWkpO2UubWVzc2FnZSYmKGUubWVzc2FnZT1oZShlLm1lc3NhZ2UsbykpO2NvbnN0IGE9ZS5leGNlcHRpb24mJmUuZXhjZXB0aW9uLnZhbHVlcyYmZS5leGNlcHRpb24udmFsdWVzWzBdO2EmJmEudmFsdWUmJihhLnZhbHVlPWhlKGEudmFsdWUsbykpO2NvbnN0IHM9ZS5yZXF1ZXN0O3MmJnMudXJsJiYocy51cmw9aGUocy51cmwsbykpfShjLGUpLGZ1bmN0aW9uKGUsdCl7dC5sZW5ndGg+MCYmKGUuc2RrPWUuc2RrfHx7fSxlLnNkay5pbnRlZ3JhdGlvbnM9Wy4uLmUuc2RrLmludGVncmF0aW9uc3x8W10sLi4udF0pfShjLGwpLGkmJmkuZW1pdChcImFwcGx5RnJhbWVNZXRhZGF0YVwiLHQpLHZvaWQgMD09PXQudHlwZSYmZnVuY3Rpb24oZSx0KXtjb25zdCBuPVNlLl9zZW50cnlEZWJ1Z0lkcztpZighbilyZXR1cm47bGV0IHI7Y29uc3QgaT1qbi5nZXQodCk7aT9yPWk6KHI9bmV3IE1hcCxqbi5zZXQodCxyKSk7Y29uc3Qgbz1PYmplY3QuZW50cmllcyhuKS5yZWR1Y2UoKChlLFtuLGldKT0+e2xldCBvO2NvbnN0IGE9ci5nZXQobik7YT9vPWE6KG89dChuKSxyLnNldChuLG8pKTtmb3IobGV0IHQ9by5sZW5ndGgtMTt0Pj0wO3QtLSl7Y29uc3Qgbj1vW3RdO2lmKG4uZmlsZW5hbWUpe2Vbbi5maWxlbmFtZV09aTticmVha319cmV0dXJuIGV9KSx7fSk7dHJ5e2UuZXhjZXB0aW9uLnZhbHVlcy5mb3JFYWNoKChlPT57ZS5zdGFja3RyYWNlLmZyYW1lcy5mb3JFYWNoKChlPT57ZS5maWxlbmFtZSYmKGUuZGVidWdfaWQ9b1tlLmZpbGVuYW1lXSl9KSl9KSl9Y2F0Y2goZSl7fX0oYyxlLnN0YWNrUGFyc2VyKTtjb25zdCB1PWZ1bmN0aW9uKGUsdCl7aWYoIXQpcmV0dXJuIGU7Y29uc3Qgbj1lP2UuY2xvbmUoKTpuZXcgb247cmV0dXJuIG4udXBkYXRlKHQpLG59KHIsbi5jYXB0dXJlQ29udGV4dCk7bi5tZWNoYW5pc20mJmt0KGMsbi5tZWNoYW5pc20pO2NvbnN0IGQ9aT9pLmdldEV2ZW50UHJvY2Vzc29ycygpOltdLHA9TWUoXCJnbG9iYWxTY29wZVwiLCgoKT0+bmV3IG9uKSkuZ2V0U2NvcGVEYXRhKCk7aWYobyl7UG4ocCxvLmdldFNjb3BlRGF0YSgpKX1pZih1KXtQbihwLHUuZ2V0U2NvcGVEYXRhKCkpfWNvbnN0IGg9Wy4uLm4uYXR0YWNobWVudHN8fFtdLC4uLnAuYXR0YWNobWVudHNdO2gubGVuZ3RoJiYobi5hdHRhY2htZW50cz1oKSxUbihjLHApO3JldHVybiBFbihbLi4uZCwuLi5wLmV2ZW50UHJvY2Vzc29yc10sYyxuKS50aGVuKChlPT4oZSYmZnVuY3Rpb24oZSl7Y29uc3QgdD17fTt0cnl7ZS5leGNlcHRpb24udmFsdWVzLmZvckVhY2goKGU9PntlLnN0YWNrdHJhY2UuZnJhbWVzLmZvckVhY2goKGU9PntlLmRlYnVnX2lkJiYoZS5hYnNfcGF0aD90W2UuYWJzX3BhdGhdPWUuZGVidWdfaWQ6ZS5maWxlbmFtZSYmKHRbZS5maWxlbmFtZV09ZS5kZWJ1Z19pZCksZGVsZXRlIGUuZGVidWdfaWQpfSkpfSkpfWNhdGNoKGUpe31pZigwPT09T2JqZWN0LmtleXModCkubGVuZ3RoKXJldHVybjtlLmRlYnVnX21ldGE9ZS5kZWJ1Z19tZXRhfHx7fSxlLmRlYnVnX21ldGEuaW1hZ2VzPWUuZGVidWdfbWV0YS5pbWFnZXN8fFtdO2NvbnN0IG49ZS5kZWJ1Z19tZXRhLmltYWdlcztPYmplY3QuZW50cmllcyh0KS5mb3JFYWNoKCgoW2UsdF0pPT57bi5wdXNoKHt0eXBlOlwic291cmNlbWFwXCIsY29kZV9maWxlOmUsZGVidWdfaWQ6dH0pfSkpfShlKSxcIm51bWJlclwiPT10eXBlb2YgYSYmYT4wP2Z1bmN0aW9uKGUsdCxuKXtpZighZSlyZXR1cm4gbnVsbDtjb25zdCByPXsuLi5lLC4uLmUuYnJlYWRjcnVtYnMmJnticmVhZGNydW1iczplLmJyZWFkY3J1bWJzLm1hcCgoZT0+KHsuLi5lLC4uLmUuZGF0YSYme2RhdGE6TXQoZS5kYXRhLHQsbil9fSkpKX0sLi4uZS51c2VyJiZ7dXNlcjpNdChlLnVzZXIsdCxuKX0sLi4uZS5jb250ZXh0cyYme2NvbnRleHRzOk10KGUuY29udGV4dHMsdCxuKX0sLi4uZS5leHRyYSYme2V4dHJhOk10KGUuZXh0cmEsdCxuKX19O2UuY29udGV4dHMmJmUuY29udGV4dHMudHJhY2UmJnIuY29udGV4dHMmJihyLmNvbnRleHRzLnRyYWNlPWUuY29udGV4dHMudHJhY2UsZS5jb250ZXh0cy50cmFjZS5kYXRhJiYoci5jb250ZXh0cy50cmFjZS5kYXRhPU10KGUuY29udGV4dHMudHJhY2UuZGF0YSx0LG4pKSk7ZS5zcGFucyYmKHIuc3BhbnM9ZS5zcGFucy5tYXAoKGU9Pih7Li4uZSwuLi5lLmRhdGEmJntkYXRhOk10KGUuZGF0YSx0LG4pfX0pKSkpO3JldHVybiByfShlLGEscyk6ZSkpKX1jb25zdCBqbj1uZXcgV2Vha01hcDtmdW5jdGlvbiBMbihlKXtpZihlKXJldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZSBpbnN0YW5jZW9mIG9ufHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlfShlKXx8ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUpLnNvbWUoKGU9PnhuLmluY2x1ZGVzKGUpKSl9KGUpP3tjYXB0dXJlQ29udGV4dDplfTplfWNvbnN0IHhuPVtcInVzZXJcIixcImxldmVsXCIsXCJleHRyYVwiLFwiY29udGV4dHNcIixcInRhZ3NcIixcImZpbmdlcnByaW50XCIsXCJyZXF1ZXN0U2Vzc2lvblwiLFwicHJvcGFnYXRpb25Db250ZXh0XCJdO2Z1bmN0aW9uIEluKGUsdCl7cmV0dXJuIHBuKCkuY2FwdHVyZUV2ZW50KGUsdCl9ZnVuY3Rpb24gRG4oZSx0KXtyZXR1cm4gbj17c2VudHJ5X2tleTplLnB1YmxpY0tleSxzZW50cnlfdmVyc2lvbjpcIjdcIiwuLi50JiZ7c2VudHJ5X2NsaWVudDpgJHt0Lm5hbWV9LyR7dC52ZXJzaW9ufWB9fSxPYmplY3Qua2V5cyhuKS5tYXAoKGU9PmAke2VuY29kZVVSSUNvbXBvbmVudChlKX09JHtlbmNvZGVVUklDb21wb25lbnQobltlXSl9YCkpLmpvaW4oXCImXCIpO3ZhciBufWNvbnN0IE5uPVtdO2Z1bmN0aW9uIEZuKGUsdCl7Zm9yKGNvbnN0IG4gb2YgdCluJiZuLmFmdGVyQWxsU2V0dXAmJm4uYWZ0ZXJBbGxTZXR1cChlKX1mdW5jdGlvbiBSbihlLHQsbil7aWYoblt0Lm5hbWVdKVl0JiZMZS5sb2coYEludGVncmF0aW9uIHNraXBwZWQgYmVjYXVzZSBpdCB3YXMgYWxyZWFkeSBpbnN0YWxsZWQ6ICR7dC5uYW1lfWApO2Vsc2V7aWYoblt0Lm5hbWVdPXQsLTE9PT1Obi5pbmRleE9mKHQubmFtZSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuc2V0dXBPbmNlJiYodC5zZXR1cE9uY2UoKSxObi5wdXNoKHQubmFtZSkpLHQuc2V0dXAmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQuc2V0dXAmJnQuc2V0dXAoZSksXCJmdW5jdGlvblwiPT10eXBlb2YgdC5wcmVwcm9jZXNzRXZlbnQpe2NvbnN0IG49dC5wcmVwcm9jZXNzRXZlbnQuYmluZCh0KTtlLm9uKFwicHJlcHJvY2Vzc0V2ZW50XCIsKCh0LHIpPT5uKHQscixlKSkpfWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQucHJvY2Vzc0V2ZW50KXtjb25zdCBuPXQucHJvY2Vzc0V2ZW50LmJpbmQodCkscj1PYmplY3QuYXNzaWduKCgodCxyKT0+bih0LHIsZSkpLHtpZDp0Lm5hbWV9KTtlLmFkZEV2ZW50UHJvY2Vzc29yKHIpfVl0JiZMZS5sb2coYEludGVncmF0aW9uIGluc3RhbGxlZDogJHt0Lm5hbWV9YCl9fWNvbnN0IEJuPVwiTm90IGNhcHR1cmluZyBleGNlcHRpb24gYmVjYXVzZSBpdCdzIGFscmVhZHkgYmVlbiBjYXB0dXJlZC5cIjtjbGFzcyBVbntjb25zdHJ1Y3RvcihlKXtpZih0aGlzLl9vcHRpb25zPWUsdGhpcy5faW50ZWdyYXRpb25zPXt9LHRoaXMuX251bVByb2Nlc3Npbmc9MCx0aGlzLl9vdXRjb21lcz17fSx0aGlzLl9ob29rcz17fSx0aGlzLl9ldmVudFByb2Nlc3NvcnM9W10sZS5kc24/dGhpcy5fZHNuPU5lKGUuZHNuKTpZdCYmTGUud2FybihcIk5vIERTTiBwcm92aWRlZCwgY2xpZW50IHdpbGwgbm90IHNlbmQgZXZlbnRzLlwiKSx0aGlzLl9kc24pe2NvbnN0IGk9KHQ9dGhpcy5fZHNuLG49ZS50dW5uZWwscj1lLl9tZXRhZGF0YT9lLl9tZXRhZGF0YS5zZGs6dm9pZCAwLG58fGAke2Z1bmN0aW9uKGUpe3JldHVybmAke2Z1bmN0aW9uKGUpe2NvbnN0IHQ9ZS5wcm90b2NvbD9gJHtlLnByb3RvY29sfTpgOlwiXCIsbj1lLnBvcnQ/YDoke2UucG9ydH1gOlwiXCI7cmV0dXJuYCR7dH0vLyR7ZS5ob3N0fSR7bn0ke2UucGF0aD9gLyR7ZS5wYXRofWA6XCJcIn0vYXBpL2B9KGUpfSR7ZS5wcm9qZWN0SWR9L2VudmVsb3BlL2B9KHQpfT8ke0RuKHQscil9YCk7dGhpcy5fdHJhbnNwb3J0PWUudHJhbnNwb3J0KHt0dW5uZWw6dGhpcy5fb3B0aW9ucy50dW5uZWwscmVjb3JkRHJvcHBlZEV2ZW50OnRoaXMucmVjb3JkRHJvcHBlZEV2ZW50LmJpbmQodGhpcyksLi4uZS50cmFuc3BvcnRPcHRpb25zLHVybDppfSl9dmFyIHQsbixyfWNhcHR1cmVFeGNlcHRpb24oZSx0LG4pe2NvbnN0IHI9eXQoKTtpZihTdChlKSlyZXR1cm4gWXQmJkxlLmxvZyhCbikscjtjb25zdCBpPXtldmVudF9pZDpyLC4uLnR9O3JldHVybiB0aGlzLl9wcm9jZXNzKHRoaXMuZXZlbnRGcm9tRXhjZXB0aW9uKGUsaSkudGhlbigoZT0+dGhpcy5fY2FwdHVyZUV2ZW50KGUsaSxuKSkpKSxpLmV2ZW50X2lkfWNhcHR1cmVNZXNzYWdlKGUsdCxuLHIpe2NvbnN0IGk9e2V2ZW50X2lkOnl0KCksLi4ubn0sbz1hZShlKT9lOlN0cmluZyhlKSxhPXNlKGUpP3RoaXMuZXZlbnRGcm9tTWVzc2FnZShvLHQsaSk6dGhpcy5ldmVudEZyb21FeGNlcHRpb24oZSxpKTtyZXR1cm4gdGhpcy5fcHJvY2VzcyhhLnRoZW4oKGU9PnRoaXMuX2NhcHR1cmVFdmVudChlLGkscikpKSksaS5ldmVudF9pZH1jYXB0dXJlRXZlbnQoZSx0LG4pe2NvbnN0IHI9eXQoKTtpZih0JiZ0Lm9yaWdpbmFsRXhjZXB0aW9uJiZTdCh0Lm9yaWdpbmFsRXhjZXB0aW9uKSlyZXR1cm4gWXQmJkxlLmxvZyhCbikscjtjb25zdCBpPXtldmVudF9pZDpyLC4uLnR9LG89KGUuc2RrUHJvY2Vzc2luZ01ldGFkYXRhfHx7fSkuY2FwdHVyZWRTcGFuU2NvcGU7cmV0dXJuIHRoaXMuX3Byb2Nlc3ModGhpcy5fY2FwdHVyZUV2ZW50KGUsaSxvfHxuKSksaS5ldmVudF9pZH1jYXB0dXJlU2Vzc2lvbihlKXtcInN0cmluZ1wiIT10eXBlb2YgZS5yZWxlYXNlP1l0JiZMZS53YXJuKFwiRGlzY2FyZGVkIHNlc3Npb24gYmVjYXVzZSBvZiBtaXNzaW5nIG9yIG5vbi1zdHJpbmcgcmVsZWFzZVwiKToodGhpcy5zZW5kU2Vzc2lvbihlKSxadChlLHtpbml0OiExfSkpfWdldERzbigpe3JldHVybiB0aGlzLl9kc259Z2V0T3B0aW9ucygpe3JldHVybiB0aGlzLl9vcHRpb25zfWdldFNka01ldGFkYXRhKCl7cmV0dXJuIHRoaXMuX29wdGlvbnMuX21ldGFkYXRhfWdldFRyYW5zcG9ydCgpe3JldHVybiB0aGlzLl90cmFuc3BvcnR9Zmx1c2goZSl7Y29uc3QgdD10aGlzLl90cmFuc3BvcnQ7cmV0dXJuIHQ/KHRoaXMuZW1pdChcImZsdXNoXCIpLHRoaXMuX2lzQ2xpZW50RG9uZVByb2Nlc3NpbmcoZSkudGhlbigobj0+dC5mbHVzaChlKS50aGVuKChlPT5uJiZlKSkpKSk6UHQoITApfWNsb3NlKGUpe3JldHVybiB0aGlzLmZsdXNoKGUpLnRoZW4oKGU9Pih0aGlzLmdldE9wdGlvbnMoKS5lbmFibGVkPSExLHRoaXMuZW1pdChcImNsb3NlXCIpLGUpKSl9Z2V0RXZlbnRQcm9jZXNzb3JzKCl7cmV0dXJuIHRoaXMuX2V2ZW50UHJvY2Vzc29yc31hZGRFdmVudFByb2Nlc3NvcihlKXt0aGlzLl9ldmVudFByb2Nlc3NvcnMucHVzaChlKX1pbml0KCl7KHRoaXMuX2lzRW5hYmxlZCgpfHx0aGlzLl9vcHRpb25zLmludGVncmF0aW9ucy5zb21lKCgoe25hbWU6ZX0pPT5lLnN0YXJ0c1dpdGgoXCJTcG90bGlnaHRcIikpKSkmJnRoaXMuX3NldHVwSW50ZWdyYXRpb25zKCl9Z2V0SW50ZWdyYXRpb25CeU5hbWUoZSl7cmV0dXJuIHRoaXMuX2ludGVncmF0aW9uc1tlXX1hZGRJbnRlZ3JhdGlvbihlKXtjb25zdCB0PXRoaXMuX2ludGVncmF0aW9uc1tlLm5hbWVdO1JuKHRoaXMsZSx0aGlzLl9pbnRlZ3JhdGlvbnMpLHR8fEZuKHRoaXMsW2VdKX1zZW5kRXZlbnQoZSx0PXt9KXt0aGlzLmVtaXQoXCJiZWZvcmVTZW5kRXZlbnRcIixlLHQpO2xldCBuPUNuKGUsdGhpcy5fZHNuLHRoaXMuX29wdGlvbnMuX21ldGFkYXRhLHRoaXMuX29wdGlvbnMudHVubmVsKTtmb3IoY29uc3QgZSBvZiB0LmF0dGFjaG1lbnRzfHxbXSluPUJ0KG4sJHQoZSkpO2NvbnN0IHI9dGhpcy5zZW5kRW52ZWxvcGUobik7ciYmci50aGVuKCh0PT50aGlzLmVtaXQoXCJhZnRlclNlbmRFdmVudFwiLGUsdCkpLG51bGwpfXNlbmRTZXNzaW9uKGUpe2NvbnN0IHQ9ZnVuY3Rpb24oZSx0LG4scil7Y29uc3QgaT1XdChuKTtyZXR1cm4gUnQoe3NlbnRfYXQ6KG5ldyBEYXRlKS50b0lTT1N0cmluZygpLC4uLmkmJntzZGs6aX0sLi4uISFyJiZ0JiZ7ZHNuOkllKHQpfX0sW1wiYWdncmVnYXRlc1wiaW4gZT9be3R5cGU6XCJzZXNzaW9uc1wifSxlXTpbe3R5cGU6XCJzZXNzaW9uXCJ9LGUudG9KU09OKCldXSl9KGUsdGhpcy5fZHNuLHRoaXMuX29wdGlvbnMuX21ldGFkYXRhLHRoaXMuX29wdGlvbnMudHVubmVsKTt0aGlzLnNlbmRFbnZlbG9wZSh0KX1yZWNvcmREcm9wcGVkRXZlbnQoZSx0LG4pe2lmKHRoaXMuX29wdGlvbnMuc2VuZENsaWVudFJlcG9ydHMpe2NvbnN0IHI9XCJudW1iZXJcIj09dHlwZW9mIG4/bjoxLGk9YCR7ZX06JHt0fWA7WXQmJkxlLmxvZyhgUmVjb3JkaW5nIG91dGNvbWU6IFwiJHtpfVwiJHtyPjE/YCAoJHtyfSB0aW1lcylgOlwiXCJ9YCksdGhpcy5fb3V0Y29tZXNbaV09KHRoaXMuX291dGNvbWVzW2ldfHwwKStyfX1vbihlLHQpe2NvbnN0IG49dGhpcy5faG9va3NbZV09dGhpcy5faG9va3NbZV18fFtdO3JldHVybiBuLnB1c2godCksKCk9Pntjb25zdCBlPW4uaW5kZXhPZih0KTtlPi0xJiZuLnNwbGljZShlLDEpfX1lbWl0KGUsLi4udCl7Y29uc3Qgbj10aGlzLl9ob29rc1tlXTtuJiZuLmZvckVhY2goKGU9PmUoLi4udCkpKX1zZW5kRW52ZWxvcGUoZSl7cmV0dXJuIHRoaXMuZW1pdChcImJlZm9yZUVudmVsb3BlXCIsZSksdGhpcy5faXNFbmFibGVkKCkmJnRoaXMuX3RyYW5zcG9ydD90aGlzLl90cmFuc3BvcnQuc2VuZChlKS50aGVuKG51bGwsKGU9PihZdCYmTGUuZXJyb3IoXCJFcnJvciB3aGlsZSBzZW5kaW5nIGV2ZW50OlwiLGUpLGUpKSk6KFl0JiZMZS5lcnJvcihcIlRyYW5zcG9ydCBkaXNhYmxlZFwiKSxQdCh7fSkpfV9zZXR1cEludGVncmF0aW9ucygpe2NvbnN0e2ludGVncmF0aW9uczplfT10aGlzLl9vcHRpb25zO3RoaXMuX2ludGVncmF0aW9ucz1mdW5jdGlvbihlLHQpe2NvbnN0IG49e307cmV0dXJuIHQuZm9yRWFjaCgodD0+e3QmJlJuKGUsdCxuKX0pKSxufSh0aGlzLGUpLEZuKHRoaXMsZSl9X3VwZGF0ZVNlc3Npb25Gcm9tRXZlbnQoZSx0KXtsZXQgbj0hMSxyPSExO2NvbnN0IGk9dC5leGNlcHRpb24mJnQuZXhjZXB0aW9uLnZhbHVlcztpZihpKXtyPSEwO2Zvcihjb25zdCBlIG9mIGkpe2NvbnN0IHQ9ZS5tZWNoYW5pc207aWYodCYmITE9PT10LmhhbmRsZWQpe249ITA7YnJlYWt9fX1jb25zdCBvPVwib2tcIj09PWUuc3RhdHVzOyhvJiYwPT09ZS5lcnJvcnN8fG8mJm4pJiYoWnQoZSx7Li4ubiYme3N0YXR1czpcImNyYXNoZWRcIn0sZXJyb3JzOmUuZXJyb3JzfHxOdW1iZXIocnx8bil9KSx0aGlzLmNhcHR1cmVTZXNzaW9uKGUpKX1faXNDbGllbnREb25lUHJvY2Vzc2luZyhlKXtyZXR1cm4gbmV3IEF0KCh0PT57bGV0IG49MDtjb25zdCByPXNldEludGVydmFsKCgoKT0+ezA9PXRoaXMuX251bVByb2Nlc3Npbmc/KGNsZWFySW50ZXJ2YWwociksdCghMCkpOihuKz0xLGUmJm4+PWUmJihjbGVhckludGVydmFsKHIpLHQoITEpKSl9KSwxKX0pKX1faXNFbmFibGVkKCl7cmV0dXJuITEhPT10aGlzLmdldE9wdGlvbnMoKS5lbmFibGVkJiZ2b2lkIDAhPT10aGlzLl90cmFuc3BvcnR9X3ByZXBhcmVFdmVudChlLHQsbixyPWhuKCkpe2NvbnN0IGk9dGhpcy5nZXRPcHRpb25zKCksbz1PYmplY3Qua2V5cyh0aGlzLl9pbnRlZ3JhdGlvbnMpO3JldHVybiF0LmludGVncmF0aW9ucyYmby5sZW5ndGg+MCYmKHQuaW50ZWdyYXRpb25zPW8pLHRoaXMuZW1pdChcInByZXByb2Nlc3NFdmVudFwiLGUsdCksZS50eXBlfHxyLnNldExhc3RFdmVudElkKGUuZXZlbnRfaWR8fHQuZXZlbnRfaWQpLEFuKGksZSx0LG4sdGhpcyxyKS50aGVuKChlPT57aWYobnVsbD09PWUpcmV0dXJuIGU7Y29uc3QgdD17Li4uci5nZXRQcm9wYWdhdGlvbkNvbnRleHQoKSwuLi5uP24uZ2V0UHJvcGFnYXRpb25Db250ZXh0KCk6dm9pZCAwfTtpZighKGUuY29udGV4dHMmJmUuY29udGV4dHMudHJhY2UpJiZ0KXtjb25zdHt0cmFjZUlkOm4sc3BhbklkOnIscGFyZW50U3BhbklkOmksZHNjOm99PXQ7ZS5jb250ZXh0cz17dHJhY2U6emUoe3RyYWNlX2lkOm4sc3Bhbl9pZDpyLHBhcmVudF9zcGFuX2lkOml9KSwuLi5lLmNvbnRleHRzfTtjb25zdCBhPW98fFNuKG4sdGhpcyk7ZS5zZGtQcm9jZXNzaW5nTWV0YWRhdGE9e2R5bmFtaWNTYW1wbGluZ0NvbnRleHQ6YSwuLi5lLnNka1Byb2Nlc3NpbmdNZXRhZGF0YX19cmV0dXJuIGV9KSl9X2NhcHR1cmVFdmVudChlLHQ9e30sbil7cmV0dXJuIHRoaXMuX3Byb2Nlc3NFdmVudChlLHQsbikudGhlbigoZT0+ZS5ldmVudF9pZCksKGU9PntpZihZdCl7Y29uc3QgdD1lO1wibG9nXCI9PT10LmxvZ0xldmVsP0xlLmxvZyh0Lm1lc3NhZ2UpOkxlLndhcm4odCl9fSkpfV9wcm9jZXNzRXZlbnQoZSx0LG4pe2NvbnN0IHI9dGhpcy5nZXRPcHRpb25zKCkse3NhbXBsZVJhdGU6aX09cixvPUpuKGUpLGE9Vm4oZSkscz1lLnR5cGV8fFwiZXJyb3JcIixjPWBiZWZvcmUgc2VuZCBmb3IgdHlwZSBcXGAke3N9XFxgYCxsPXZvaWQgMD09PWk/dm9pZCAwOmZ1bmN0aW9uKGUpe2lmKFwiYm9vbGVhblwiPT10eXBlb2YgZSlyZXR1cm4gTnVtYmVyKGUpO2NvbnN0IHQ9XCJzdHJpbmdcIj09dHlwZW9mIGU/cGFyc2VGbG9hdChlKTplO2lmKCEoXCJudW1iZXJcIiE9dHlwZW9mIHR8fGlzTmFOKHQpfHx0PDB8fHQ+MSkpcmV0dXJuIHQ7WXQmJkxlLndhcm4oYFtUcmFjaW5nXSBHaXZlbiBzYW1wbGUgcmF0ZSBpcyBpbnZhbGlkLiBTYW1wbGUgcmF0ZSBtdXN0IGJlIGEgYm9vbGVhbiBvciBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEuIEdvdCAke0pTT04uc3RyaW5naWZ5KGUpfSBvZiB0eXBlICR7SlNPTi5zdHJpbmdpZnkodHlwZW9mIGUpfS5gKX0oaSk7aWYoYSYmXCJudW1iZXJcIj09dHlwZW9mIGwmJk1hdGgucmFuZG9tKCk+bClyZXR1cm4gdGhpcy5yZWNvcmREcm9wcGVkRXZlbnQoXCJzYW1wbGVfcmF0ZVwiLFwiZXJyb3JcIixlKSxPdChuZXcgRmUoYERpc2NhcmRpbmcgZXZlbnQgYmVjYXVzZSBpdCdzIG5vdCBpbmNsdWRlZCBpbiB0aGUgcmFuZG9tIHNhbXBsZSAoc2FtcGxpbmcgcmF0ZSA9ICR7aX0pYCxcImxvZ1wiKSk7Y29uc3QgdT1cInJlcGxheV9ldmVudFwiPT09cz9cInJlcGxheVwiOnMsZD0oZS5zZGtQcm9jZXNzaW5nTWV0YWRhdGF8fHt9KS5jYXB0dXJlZFNwYW5Jc29sYXRpb25TY29wZTtyZXR1cm4gdGhpcy5fcHJlcGFyZUV2ZW50KGUsdCxuLGQpLnRoZW4oKG49PntpZihudWxsPT09bil0aHJvdyB0aGlzLnJlY29yZERyb3BwZWRFdmVudChcImV2ZW50X3Byb2Nlc3NvclwiLHUsZSksbmV3IEZlKFwiQW4gZXZlbnQgcHJvY2Vzc29yIHJldHVybmVkIGBudWxsYCwgd2lsbCBub3Qgc2VuZCBldmVudC5cIixcImxvZ1wiKTtpZih0LmRhdGEmJiEwPT09dC5kYXRhLl9fc2VudHJ5X18pcmV0dXJuIG47Y29uc3QgaT1mdW5jdGlvbihlLHQsbixyKXtjb25zdHtiZWZvcmVTZW5kOmksYmVmb3JlU2VuZFRyYW5zYWN0aW9uOm8sYmVmb3JlU2VuZFNwYW46YX09dDtpZihWbihuKSYmaSlyZXR1cm4gaShuLHIpO2lmKEpuKG4pKXtpZihuLnNwYW5zJiZhKXtjb25zdCB0PVtdO2Zvcihjb25zdCByIG9mIG4uc3BhbnMpe2NvbnN0IG49YShyKTtuP3QucHVzaChuKTplLnJlY29yZERyb3BwZWRFdmVudChcImJlZm9yZV9zZW5kXCIsXCJzcGFuXCIpfW4uc3BhbnM9dH1pZihvKXtpZihuLnNwYW5zKXtjb25zdCBlPW4uc3BhbnMubGVuZ3RoO24uc2RrUHJvY2Vzc2luZ01ldGFkYXRhPXsuLi5uLnNka1Byb2Nlc3NpbmdNZXRhZGF0YSxzcGFuQ291bnRCZWZvcmVQcm9jZXNzaW5nOmV9fXJldHVybiBvKG4scil9fXJldHVybiBufSh0aGlzLHIsbix0KTtyZXR1cm4gZnVuY3Rpb24oZSx0KXtjb25zdCBuPWAke3R9IG11c3QgcmV0dXJuIFxcYG51bGxcXGAgb3IgYSB2YWxpZCBldmVudC5gO2lmKHVlKGUpKXJldHVybiBlLnRoZW4oKGU9PntpZighY2UoZSkmJm51bGwhPT1lKXRocm93IG5ldyBGZShuKTtyZXR1cm4gZX0pLChlPT57dGhyb3cgbmV3IEZlKGAke3R9IHJlamVjdGVkIHdpdGggJHtlfWApfSkpO2lmKCFjZShlKSYmbnVsbCE9PWUpdGhyb3cgbmV3IEZlKG4pO3JldHVybiBlfShpLGMpfSkpLnRoZW4oKHI9PntpZihudWxsPT09cil7aWYodGhpcy5yZWNvcmREcm9wcGVkRXZlbnQoXCJiZWZvcmVfc2VuZFwiLHUsZSksbyl7Y29uc3QgdD0xKyhlLnNwYW5zfHxbXSkubGVuZ3RoO3RoaXMucmVjb3JkRHJvcHBlZEV2ZW50KFwiYmVmb3JlX3NlbmRcIixcInNwYW5cIix0KX10aHJvdyBuZXcgRmUoYCR7Y30gcmV0dXJuZWQgXFxgbnVsbFxcYCwgd2lsbCBub3Qgc2VuZCBldmVudC5gLFwibG9nXCIpfWNvbnN0IGk9biYmbi5nZXRTZXNzaW9uKCk7aWYoIW8mJmkmJnRoaXMuX3VwZGF0ZVNlc3Npb25Gcm9tRXZlbnQoaSxyKSxvKXtjb25zdCBlPShyLnNka1Byb2Nlc3NpbmdNZXRhZGF0YSYmci5zZGtQcm9jZXNzaW5nTWV0YWRhdGEuc3BhbkNvdW50QmVmb3JlUHJvY2Vzc2luZ3x8MCktKHIuc3BhbnM/ci5zcGFucy5sZW5ndGg6MCk7ZT4wJiZ0aGlzLnJlY29yZERyb3BwZWRFdmVudChcImJlZm9yZV9zZW5kXCIsXCJzcGFuXCIsZSl9Y29uc3QgYT1yLnRyYW5zYWN0aW9uX2luZm87aWYobyYmYSYmci50cmFuc2FjdGlvbiE9PWUudHJhbnNhY3Rpb24pe2NvbnN0IGU9XCJjdXN0b21cIjtyLnRyYW5zYWN0aW9uX2luZm89ey4uLmEsc291cmNlOmV9fXJldHVybiB0aGlzLnNlbmRFdmVudChyLHQpLHJ9KSkudGhlbihudWxsLChlPT57aWYoZSBpbnN0YW5jZW9mIEZlKXRocm93IGU7dGhyb3cgdGhpcy5jYXB0dXJlRXhjZXB0aW9uKGUse2RhdGE6e19fc2VudHJ5X186ITB9LG9yaWdpbmFsRXhjZXB0aW9uOmV9KSxuZXcgRmUoYEV2ZW50IHByb2Nlc3NpbmcgcGlwZWxpbmUgdGhyZXcgYW4gZXJyb3IsIG9yaWdpbmFsIGV2ZW50IHdpbGwgbm90IGJlIHNlbnQuIERldGFpbHMgaGF2ZSBiZWVuIHNlbnQgYXMgYSBuZXcgZXZlbnQuXFxuUmVhc29uOiAke2V9YCl9KSl9X3Byb2Nlc3MoZSl7dGhpcy5fbnVtUHJvY2Vzc2luZysrLGUudGhlbigoZT0+KHRoaXMuX251bVByb2Nlc3NpbmctLSxlKSksKGU9Pih0aGlzLl9udW1Qcm9jZXNzaW5nLS0sZSkpKX1fY2xlYXJPdXRjb21lcygpe2NvbnN0IGU9dGhpcy5fb3V0Y29tZXM7cmV0dXJuIHRoaXMuX291dGNvbWVzPXt9LE9iamVjdC5lbnRyaWVzKGUpLm1hcCgoKFtlLHRdKT0+e2NvbnN0W24scl09ZS5zcGxpdChcIjpcIik7cmV0dXJue3JlYXNvbjpuLGNhdGVnb3J5OnIscXVhbnRpdHk6dH19KSl9X2ZsdXNoT3V0Y29tZXMoKXtZdCYmTGUubG9nKFwiRmx1c2hpbmcgb3V0Y29tZXMuLi5cIik7Y29uc3QgZT10aGlzLl9jbGVhck91dGNvbWVzKCk7aWYoMD09PWUubGVuZ3RoKXJldHVybiB2b2lkKFl0JiZMZS5sb2coXCJObyBvdXRjb21lcyB0byBzZW5kXCIpKTtpZighdGhpcy5fZHNuKXJldHVybiB2b2lkKFl0JiZMZS5sb2coXCJObyBkc24gcHJvdmlkZWQsIHdpbGwgbm90IHNlbmQgb3V0Y29tZXNcIikpO1l0JiZMZS5sb2coXCJTZW5kaW5nIG91dGNvbWVzOlwiLGUpO2NvbnN0IHQ9KG49ZSxSdCgocj10aGlzLl9vcHRpb25zLnR1bm5lbCYmSWUodGhpcy5fZHNuKSk/e2RzbjpyfTp7fSxbW3t0eXBlOlwiY2xpZW50X3JlcG9ydFwifSx7dGltZXN0YW1wOml8fGx0KCksZGlzY2FyZGVkX2V2ZW50czpufV1dKSk7dmFyIG4scixpO3RoaXMuc2VuZEVudmVsb3BlKHQpfX1mdW5jdGlvbiBWbihlKXtyZXR1cm4gdm9pZCAwPT09ZS50eXBlfWZ1bmN0aW9uIEpuKGUpe3JldHVyblwidHJhbnNhY3Rpb25cIj09PWUudHlwZX1mdW5jdGlvbiAkbihlLHQsbj1qdChlLmJ1ZmZlclNpemV8fDY0KSl7bGV0IHI9e307cmV0dXJue3NlbmQ6ZnVuY3Rpb24oaSl7Y29uc3Qgbz1bXTtpZihVdChpLCgodCxuKT0+e2NvbnN0IGk9enQobik7aWYoZnVuY3Rpb24oZSx0LG49RGF0ZS5ub3coKSl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGVbdF18fGUuYWxsfHwwfShlLHQpPm59KHIsaSkpe2NvbnN0IHI9cW4odCxuKTtlLnJlY29yZERyb3BwZWRFdmVudChcInJhdGVsaW1pdF9iYWNrb2ZmXCIsaSxyKX1lbHNlIG8ucHVzaCh0KX0pKSwwPT09by5sZW5ndGgpcmV0dXJuIFB0KHt9KTtjb25zdCBhPVJ0KGlbMF0sbykscz10PT57VXQoYSwoKG4scik9Pntjb25zdCBpPXFuKG4scik7ZS5yZWNvcmREcm9wcGVkRXZlbnQodCx6dChyKSxpKX0pKX07cmV0dXJuIG4uYWRkKCgoKT0+dCh7Ym9keTpKdChhKX0pLnRoZW4oKGU9Pih2b2lkIDAhPT1lLnN0YXR1c0NvZGUmJihlLnN0YXR1c0NvZGU8MjAwfHxlLnN0YXR1c0NvZGU+PTMwMCkmJll0JiZMZS53YXJuKGBTZW50cnkgcmVzcG9uZGVkIHdpdGggc3RhdHVzIGNvZGUgJHtlLnN0YXR1c0NvZGV9IHRvIHNlbnQgZXZlbnQuYCkscj1IdChyLGUpLGUpKSwoZT0+e3Rocm93IHMoXCJuZXR3b3JrX2Vycm9yXCIpLGV9KSkpKS50aGVuKChlPT5lKSwoZT0+e2lmKGUgaW5zdGFuY2VvZiBGZSlyZXR1cm4gWXQmJkxlLmVycm9yKFwiU2tpcHBlZCBzZW5kaW5nIGV2ZW50IGJlY2F1c2UgYnVmZmVyIGlzIGZ1bGwuXCIpLHMoXCJxdWV1ZV9vdmVyZmxvd1wiKSxQdCh7fSk7dGhyb3cgZX0pKX0sZmx1c2g6ZT0+bi5kcmFpbihlKX19ZnVuY3Rpb24gcW4oZSx0KXtpZihcImV2ZW50XCI9PT10fHxcInRyYW5zYWN0aW9uXCI9PT10KXJldHVybiBBcnJheS5pc0FycmF5KGUpP2VbMV06dm9pZCAwfWNvbnN0IHpuPTEwMDtmdW5jdGlvbiBXbihlLHQpe2NvbnN0IG49Zm4oKSxyPWhuKCk7aWYoIW4pcmV0dXJuO2NvbnN0e2JlZm9yZUJyZWFkY3J1bWI6aT1udWxsLG1heEJyZWFkY3J1bWJzOm89em59PW4uZ2V0T3B0aW9ucygpO2lmKG88PTApcmV0dXJuO2NvbnN0IGE9e3RpbWVzdGFtcDpsdCgpLC4uLmV9LHM9aT9qZSgoKCk9PmkoYSx0KSkpOmE7bnVsbCE9PXMmJihuLmVtaXQmJm4uZW1pdChcImJlZm9yZUFkZEJyZWFkY3J1bWJcIixzLHQpLHIuYWRkQnJlYWRjcnVtYihzLG8pKX1sZXQgSG47Y29uc3QgR249bmV3IFdlYWtNYXAsUW49KCk9Pih7bmFtZTpcIkZ1bmN0aW9uVG9TdHJpbmdcIixzZXR1cE9uY2UoKXtIbj1GdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7dHJ5e0Z1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbiguLi5lKXtjb25zdCB0PVZlKHRoaXMpLG49R24uaGFzKGZuKCkpJiZ2b2lkIDAhPT10P3Q6dGhpcztyZXR1cm4gSG4uYXBwbHkobixlKX19Y2F0Y2goZSl7fX0sc2V0dXAoZSl7R24uc2V0KGUsITApfX0pLFluPVsvXlNjcmlwdCBlcnJvclxcLj8kLywvXkphdmFzY3JpcHQgZXJyb3I6IFNjcmlwdCBlcnJvclxcLj8gb24gbGluZSAwJC8sL15SZXNpemVPYnNlcnZlciBsb29wIGNvbXBsZXRlZCB3aXRoIHVuZGVsaXZlcmVkIG5vdGlmaWNhdGlvbnMuJC8sL15DYW5ub3QgcmVkZWZpbmUgcHJvcGVydHk6IGdvb2dsZXRhZyQvLFwidW5kZWZpbmVkIGlzIG5vdCBhbiBvYmplY3QgKGV2YWx1YXRpbmcgJ2EuTCcpXCIsJ2NhblxcJ3QgcmVkZWZpbmUgbm9uLWNvbmZpZ3VyYWJsZSBwcm9wZXJ0eSBcInNvbGFuYVwiJyxcInZ2KCkuZ2V0UmVzdHJpY3Rpb25zIGlzIG5vdCBhIGZ1bmN0aW9uLiAoSW4gJ3Z2KCkuZ2V0UmVzdHJpY3Rpb25zKDEsYSknLCAndnYoKS5nZXRSZXN0cmljdGlvbnMnIGlzIHVuZGVmaW5lZClcIixcIkNhbid0IGZpbmQgdmFyaWFibGU6IF9BdXRvZmlsbENhbGxiYWNrSGFuZGxlclwiXSxLbj0oZT17fSk9Pih7bmFtZTpcIkluYm91bmRGaWx0ZXJzXCIscHJvY2Vzc0V2ZW50KHQsbixyKXtjb25zdCBpPXIuZ2V0T3B0aW9ucygpLG89ZnVuY3Rpb24oZT17fSx0PXt9KXtyZXR1cm57YWxsb3dVcmxzOlsuLi5lLmFsbG93VXJsc3x8W10sLi4udC5hbGxvd1VybHN8fFtdXSxkZW55VXJsczpbLi4uZS5kZW55VXJsc3x8W10sLi4udC5kZW55VXJsc3x8W11dLGlnbm9yZUVycm9yczpbLi4uZS5pZ25vcmVFcnJvcnN8fFtdLC4uLnQuaWdub3JlRXJyb3JzfHxbXSwuLi5lLmRpc2FibGVFcnJvckRlZmF1bHRzP1tdOlluXSxpZ25vcmVUcmFuc2FjdGlvbnM6Wy4uLmUuaWdub3JlVHJhbnNhY3Rpb25zfHxbXSwuLi50Lmlnbm9yZVRyYW5zYWN0aW9uc3x8W11dLGlnbm9yZUludGVybmFsOnZvaWQgMD09PWUuaWdub3JlSW50ZXJuYWx8fGUuaWdub3JlSW50ZXJuYWx9fShlLGkpO3JldHVybiBmdW5jdGlvbihlLHQpe2lmKHQuaWdub3JlSW50ZXJuYWwmJmZ1bmN0aW9uKGUpe3RyeXtyZXR1cm5cIlNlbnRyeUVycm9yXCI9PT1lLmV4Y2VwdGlvbi52YWx1ZXNbMF0udHlwZX1jYXRjaChlKXt9cmV0dXJuITF9KGUpKXJldHVybiBZdCYmTGUud2FybihgRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgaW50ZXJuYWwgU2VudHJ5IEVycm9yLlxcbkV2ZW50OiAke2J0KGUpfWApLCEwO2lmKGZ1bmN0aW9uKGUsdCl7aWYoZS50eXBlfHwhdHx8IXQubGVuZ3RoKXJldHVybiExO3JldHVybiBmdW5jdGlvbihlKXtjb25zdCB0PVtdO2UubWVzc2FnZSYmdC5wdXNoKGUubWVzc2FnZSk7bGV0IG47dHJ5e249ZS5leGNlcHRpb24udmFsdWVzW2UuZXhjZXB0aW9uLnZhbHVlcy5sZW5ndGgtMV19Y2F0Y2goZSl7fW4mJm4udmFsdWUmJih0LnB1c2gobi52YWx1ZSksbi50eXBlJiZ0LnB1c2goYCR7bi50eXBlfTogJHtuLnZhbHVlfWApKTtyZXR1cm4gdH0oZSkuc29tZSgoZT0+Z2UoZSx0KSkpfShlLHQuaWdub3JlRXJyb3JzKSlyZXR1cm4gWXQmJkxlLndhcm4oYEV2ZW50IGRyb3BwZWQgZHVlIHRvIGJlaW5nIG1hdGNoZWQgYnkgXFxgaWdub3JlRXJyb3JzXFxgIG9wdGlvbi5cXG5FdmVudDogJHtidChlKX1gKSwhMDtpZihmdW5jdGlvbihlKXtpZihlLnR5cGUpcmV0dXJuITE7aWYoIWUuZXhjZXB0aW9ufHwhZS5leGNlcHRpb24udmFsdWVzfHwwPT09ZS5leGNlcHRpb24udmFsdWVzLmxlbmd0aClyZXR1cm4hMTtyZXR1cm4hZS5tZXNzYWdlJiYhZS5leGNlcHRpb24udmFsdWVzLnNvbWUoKGU9PmUuc3RhY2t0cmFjZXx8ZS50eXBlJiZcIkVycm9yXCIhPT1lLnR5cGV8fGUudmFsdWUpKX0oZSkpcmV0dXJuIFl0JiZMZS53YXJuKGBFdmVudCBkcm9wcGVkIGR1ZSB0byBub3QgaGF2aW5nIGFuIGVycm9yIG1lc3NhZ2UsIGVycm9yIHR5cGUgb3Igc3RhY2t0cmFjZS5cXG5FdmVudDogJHtidChlKX1gKSwhMDtpZihmdW5jdGlvbihlLHQpe2lmKFwidHJhbnNhY3Rpb25cIiE9PWUudHlwZXx8IXR8fCF0Lmxlbmd0aClyZXR1cm4hMTtjb25zdCBuPWUudHJhbnNhY3Rpb247cmV0dXJuISFuJiZnZShuLHQpfShlLHQuaWdub3JlVHJhbnNhY3Rpb25zKSlyZXR1cm4gWXQmJkxlLndhcm4oYEV2ZW50IGRyb3BwZWQgZHVlIHRvIGJlaW5nIG1hdGNoZWQgYnkgXFxgaWdub3JlVHJhbnNhY3Rpb25zXFxgIG9wdGlvbi5cXG5FdmVudDogJHtidChlKX1gKSwhMDtpZihmdW5jdGlvbihlLHQpe2lmKCF0fHwhdC5sZW5ndGgpcmV0dXJuITE7Y29uc3Qgbj1YbihlKTtyZXR1cm4hIW4mJmdlKG4sdCl9KGUsdC5kZW55VXJscykpcmV0dXJuIFl0JiZMZS53YXJuKGBFdmVudCBkcm9wcGVkIGR1ZSB0byBiZWluZyBtYXRjaGVkIGJ5IFxcYGRlbnlVcmxzXFxgIG9wdGlvbi5cXG5FdmVudDogJHtidChlKX0uXFxuVXJsOiAke1huKGUpfWApLCEwO2lmKCFmdW5jdGlvbihlLHQpe2lmKCF0fHwhdC5sZW5ndGgpcmV0dXJuITA7Y29uc3Qgbj1YbihlKTtyZXR1cm4hbnx8Z2Uobix0KX0oZSx0LmFsbG93VXJscykpcmV0dXJuIFl0JiZMZS53YXJuKGBFdmVudCBkcm9wcGVkIGR1ZSB0byBub3QgYmVpbmcgbWF0Y2hlZCBieSBcXGBhbGxvd1VybHNcXGAgb3B0aW9uLlxcbkV2ZW50OiAke2J0KGUpfS5cXG5Vcmw6ICR7WG4oZSl9YCksITA7cmV0dXJuITF9KHQsbyk/bnVsbDp0fX0pO2Z1bmN0aW9uIFhuKGUpe3RyeXtsZXQgdDt0cnl7dD1lLmV4Y2VwdGlvbi52YWx1ZXNbMF0uc3RhY2t0cmFjZS5mcmFtZXN9Y2F0Y2goZSl7fXJldHVybiB0P2Z1bmN0aW9uKGU9W10pe2ZvcihsZXQgdD1lLmxlbmd0aC0xO3Q+PTA7dC0tKXtjb25zdCBuPWVbdF07aWYobiYmXCI8YW5vbnltb3VzPlwiIT09bi5maWxlbmFtZSYmXCJbbmF0aXZlIGNvZGVdXCIhPT1uLmZpbGVuYW1lKXJldHVybiBuLmZpbGVuYW1lfHxudWxsfXJldHVybiBudWxsfSh0KTpudWxsfWNhdGNoKHQpe3JldHVybiBZdCYmTGUuZXJyb3IoYENhbm5vdCBleHRyYWN0IHVybCBmb3IgZXZlbnQgJHtidChlKX1gKSxudWxsfX1jb25zdCBabj0oKT0+e2xldCBlO3JldHVybntuYW1lOlwiRGVkdXBlXCIscHJvY2Vzc0V2ZW50KHQpe2lmKHQudHlwZSlyZXR1cm4gdDt0cnl7aWYoZnVuY3Rpb24oZSx0KXtpZighdClyZXR1cm4hMTtpZihmdW5jdGlvbihlLHQpe2NvbnN0IG49ZS5tZXNzYWdlLHI9dC5tZXNzYWdlO2lmKCFuJiYhcilyZXR1cm4hMTtpZihuJiYhcnx8IW4mJnIpcmV0dXJuITE7aWYobiE9PXIpcmV0dXJuITE7aWYoIXRyKGUsdCkpcmV0dXJuITE7aWYoIWVyKGUsdCkpcmV0dXJuITE7cmV0dXJuITB9KGUsdCkpcmV0dXJuITA7aWYoZnVuY3Rpb24oZSx0KXtjb25zdCBuPW5yKHQpLHI9bnIoZSk7aWYoIW58fCFyKXJldHVybiExO2lmKG4udHlwZSE9PXIudHlwZXx8bi52YWx1ZSE9PXIudmFsdWUpcmV0dXJuITE7aWYoIXRyKGUsdCkpcmV0dXJuITE7aWYoIWVyKGUsdCkpcmV0dXJuITE7cmV0dXJuITB9KGUsdCkpcmV0dXJuITA7cmV0dXJuITF9KHQsZSkpcmV0dXJuIFl0JiZMZS53YXJuKFwiRXZlbnQgZHJvcHBlZCBkdWUgdG8gYmVpbmcgYSBkdXBsaWNhdGUgb2YgcHJldmlvdXNseSBjYXB0dXJlZCBldmVudC5cIiksbnVsbH1jYXRjaChlKXt9cmV0dXJuIGU9dH19fTtmdW5jdGlvbiBlcihlLHQpe2xldCBuPVplKGUpLHI9WmUodCk7aWYoIW4mJiFyKXJldHVybiEwO2lmKG4mJiFyfHwhbiYmcilyZXR1cm4hMTtpZihyLmxlbmd0aCE9PW4ubGVuZ3RoKXJldHVybiExO2ZvcihsZXQgZT0wO2U8ci5sZW5ndGg7ZSsrKXtjb25zdCB0PXJbZV0saT1uW2VdO2lmKHQuZmlsZW5hbWUhPT1pLmZpbGVuYW1lfHx0LmxpbmVubyE9PWkubGluZW5vfHx0LmNvbG5vIT09aS5jb2xub3x8dC5mdW5jdGlvbiE9PWkuZnVuY3Rpb24pcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gdHIoZSx0KXtsZXQgbj1lLmZpbmdlcnByaW50LHI9dC5maW5nZXJwcmludDtpZighbiYmIXIpcmV0dXJuITA7aWYobiYmIXJ8fCFuJiZyKXJldHVybiExO3RyeXtyZXR1cm4hKG4uam9pbihcIlwiKSE9PXIuam9pbihcIlwiKSl9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIG5yKGUpe3JldHVybiBlLmV4Y2VwdGlvbiYmZS5leGNlcHRpb24udmFsdWVzJiZlLmV4Y2VwdGlvbi52YWx1ZXNbMF19Y29uc3QgcnI9U2U7bGV0IGlyPTA7ZnVuY3Rpb24gb3IoKXtyZXR1cm4gaXI+MH1mdW5jdGlvbiBhcihlLHQ9e30sbil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSlyZXR1cm4gZTt0cnl7Y29uc3QgdD1lLl9fc2VudHJ5X3dyYXBwZWRfXztpZih0KXJldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dDplO2lmKFZlKGUpKXJldHVybiBlfWNhdGNoKHQpe3JldHVybiBlfWNvbnN0IHI9ZnVuY3Rpb24oKXtjb25zdCByPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7dHJ5e24mJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJm4uYXBwbHkodGhpcyxhcmd1bWVudHMpO2NvbnN0IGk9ci5tYXAoKGU9PmFyKGUsdCkpKTtyZXR1cm4gZS5hcHBseSh0aGlzLGkpfWNhdGNoKGUpe3Rocm93IGlyKyssc2V0VGltZW91dCgoKCk9Pntpci0tfSkpLGZ1bmN0aW9uKC4uLmUpe2NvbnN0IHQ9ZG4oS3QoKSk7aWYoMj09PWUubGVuZ3RoKXtjb25zdFtuLHJdPWU7cmV0dXJuIG4/dC53aXRoU2V0U2NvcGUobixyKTp0LndpdGhTY29wZShyKX10LndpdGhTY29wZShlWzBdKX0oKG49Pnt2YXIgaSxvO24uYWRkRXZlbnRQcm9jZXNzb3IoKGU9Pih0Lm1lY2hhbmlzbSYmKHd0KGUsdm9pZCAwLHZvaWQgMCksa3QoZSx0Lm1lY2hhbmlzbSkpLGUuZXh0cmE9ey4uLmUuZXh0cmEsYXJndW1lbnRzOnJ9LGUpKSksaT1lLHBuKCkuY2FwdHVyZUV4Y2VwdGlvbihpLExuKG8pKX0pKSxlfX07dHJ5e2Zvcihjb25zdCB0IGluIGUpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCkmJihyW3RdPWVbdF0pfWNhdGNoKGUpe31VZShyLGUpLEJlKGUsXCJfX3NlbnRyeV93cmFwcGVkX19cIixyKTt0cnl7T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLFwibmFtZVwiKS5jb25maWd1cmFibGUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwibmFtZVwiLHtnZXQ6KCk9PmUubmFtZX0pfWNhdGNoKGUpe31yZXR1cm4gcn1jb25zdCBzcj1cInVuZGVmaW5lZFwiPT10eXBlb2YgX19TRU5UUllfREVCVUdfX3x8X19TRU5UUllfREVCVUdfXztmdW5jdGlvbiBjcihlLHQpe2NvbnN0IG49ZHIoZSx0KSxyPXt0eXBlOnQmJnQubmFtZSx2YWx1ZTpocih0KX07cmV0dXJuIG4ubGVuZ3RoJiYoci5zdGFja3RyYWNlPXtmcmFtZXM6bn0pLHZvaWQgMD09PXIudHlwZSYmXCJcIj09PXIudmFsdWUmJihyLnZhbHVlPVwiVW5yZWNvdmVyYWJsZSBlcnJvciBjYXVnaHRcIikscn1mdW5jdGlvbiBscihlLHQsbixyKXtjb25zdCBpPWZuKCksbz1pJiZpLmdldE9wdGlvbnMoKS5ub3JtYWxpemVEZXB0aCxhPWZ1bmN0aW9uKGUpe2Zvcihjb25zdCB0IGluIGUpaWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCkpe2NvbnN0IG49ZVt0XTtpZihuIGluc3RhbmNlb2YgRXJyb3IpcmV0dXJuIG59cmV0dXJufSh0KSxzPXtfX3NlcmlhbGl6ZWRfXzpDdCh0LG8pfTtpZihhKXJldHVybntleGNlcHRpb246e3ZhbHVlczpbY3IoZSxhKV19LGV4dHJhOnN9O2NvbnN0IGM9e2V4Y2VwdGlvbjp7dmFsdWVzOlt7dHlwZTpsZSh0KT90LmNvbnN0cnVjdG9yLm5hbWU6cj9cIlVuaGFuZGxlZFJlamVjdGlvblwiOlwiRXJyb3JcIix2YWx1ZTpncih0LHtpc1VuaGFuZGxlZFJlamVjdGlvbjpyfSl9XX0sZXh0cmE6c307aWYobil7Y29uc3QgdD1kcihlLG4pO3QubGVuZ3RoJiYoYy5leGNlcHRpb24udmFsdWVzWzBdLnN0YWNrdHJhY2U9e2ZyYW1lczp0fSl9cmV0dXJuIGN9ZnVuY3Rpb24gdXIoZSx0KXtyZXR1cm57ZXhjZXB0aW9uOnt2YWx1ZXM6W2NyKGUsdCldfX19ZnVuY3Rpb24gZHIoZSx0KXtjb25zdCBuPXQuc3RhY2t0cmFjZXx8dC5zdGFja3x8XCJcIixyPWZ1bmN0aW9uKGUpe2lmKGUmJnByLnRlc3QoZS5tZXNzYWdlKSlyZXR1cm4gMTtyZXR1cm4gMH0odCksaT1mdW5jdGlvbihlKXtpZihcIm51bWJlclwiPT10eXBlb2YgZS5mcmFtZXNUb1BvcClyZXR1cm4gZS5mcmFtZXNUb1BvcDtyZXR1cm4gMH0odCk7dHJ5e3JldHVybiBlKG4scixpKX1jYXRjaChlKXt9cmV0dXJuW119Y29uc3QgcHI9L01pbmlmaWVkIFJlYWN0IGVycm9yICNcXGQrOy9pO2Z1bmN0aW9uIGhyKGUpe2NvbnN0IHQ9ZSYmZS5tZXNzYWdlO3JldHVybiB0P3QuZXJyb3ImJlwic3RyaW5nXCI9PXR5cGVvZiB0LmVycm9yLm1lc3NhZ2U/dC5lcnJvci5tZXNzYWdlOnQ6XCJObyBlcnJvciBtZXNzYWdlXCJ9ZnVuY3Rpb24gZnIoZSx0LG4scixpKXtsZXQgbztpZihyZSh0KSYmdC5lcnJvcil7cmV0dXJuIHVyKGUsdC5lcnJvcil9aWYoaWUodCl8fG5lKHQsXCJET01FeGNlcHRpb25cIikpe2NvbnN0IGk9dDtpZihcInN0YWNrXCJpbiB0KW89dXIoZSx0KTtlbHNle2NvbnN0IHQ9aS5uYW1lfHwoaWUoaSk/XCJET01FcnJvclwiOlwiRE9NRXhjZXB0aW9uXCIpLGE9aS5tZXNzYWdlP2Ake3R9OiAke2kubWVzc2FnZX1gOnQ7bz12cihlLGEsbixyKSx3dChvLGEpfXJldHVyblwiY29kZVwiaW4gaSYmKG8udGFncz17Li4uby50YWdzLFwiRE9NRXhjZXB0aW9uLmNvZGVcIjpgJHtpLmNvZGV9YH0pLG99aWYodGUodCkpcmV0dXJuIHVyKGUsdCk7aWYoY2UodCl8fGxlKHQpKXtyZXR1cm4gbz1scihlLHQsbixpKSxrdChvLHtzeW50aGV0aWM6ITB9KSxvfXJldHVybiBvPXZyKGUsdCxuLHIpLHd0KG8sYCR7dH1gLHZvaWQgMCksa3Qobyx7c3ludGhldGljOiEwfSksb31mdW5jdGlvbiB2cihlLHQsbixyKXtjb25zdCBpPXt9O2lmKHImJm4pe2NvbnN0IHI9ZHIoZSxuKTtyLmxlbmd0aCYmKGkuZXhjZXB0aW9uPXt2YWx1ZXM6W3t2YWx1ZTp0LHN0YWNrdHJhY2U6e2ZyYW1lczpyfX1dfSl9aWYoYWUodCkpe2NvbnN0e19fc2VudHJ5X3RlbXBsYXRlX3N0cmluZ19fOmUsX19zZW50cnlfdGVtcGxhdGVfdmFsdWVzX186bn09dDtyZXR1cm4gaS5sb2dlbnRyeT17bWVzc2FnZTplLHBhcmFtczpufSxpfXJldHVybiBpLm1lc3NhZ2U9dCxpfWZ1bmN0aW9uIGdyKGUse2lzVW5oYW5kbGVkUmVqZWN0aW9uOnR9KXtjb25zdCBuPWZ1bmN0aW9uKGUsdD00MCl7Y29uc3Qgbj1PYmplY3Qua2V5cyhKZShlKSk7bi5zb3J0KCk7Y29uc3Qgcj1uWzBdO2lmKCFyKXJldHVyblwiW29iamVjdCBoYXMgbm8ga2V5c11cIjtpZihyLmxlbmd0aD49dClyZXR1cm4gaGUocix0KTtmb3IobGV0IGU9bi5sZW5ndGg7ZT4wO2UtLSl7Y29uc3Qgcj1uLnNsaWNlKDAsZSkuam9pbihcIiwgXCIpO2lmKCEoci5sZW5ndGg+dCkpcmV0dXJuIGU9PT1uLmxlbmd0aD9yOmhlKHIsdCl9cmV0dXJuXCJcIn0oZSkscj10P1wicHJvbWlzZSByZWplY3Rpb25cIjpcImV4Y2VwdGlvblwiO2lmKHJlKGUpKXJldHVybmBFdmVudCBcXGBFcnJvckV2ZW50XFxgIGNhcHR1cmVkIGFzICR7cn0gd2l0aCBtZXNzYWdlIFxcYCR7ZS5tZXNzYWdlfVxcYGA7aWYobGUoZSkpe3JldHVybmBFdmVudCBcXGAke2Z1bmN0aW9uKGUpe3RyeXtjb25zdCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZihlKTtyZXR1cm4gdD90LmNvbnN0cnVjdG9yLm5hbWU6dm9pZCAwfWNhdGNoKGUpe319KGUpfVxcYCAodHlwZT0ke2UudHlwZX0pIGNhcHR1cmVkIGFzICR7cn1gfXJldHVybmBPYmplY3QgY2FwdHVyZWQgYXMgJHtyfSB3aXRoIGtleXM6ICR7bn1gfWNsYXNzIG1yIGV4dGVuZHMgVW57Y29uc3RydWN0b3IoZSl7Y29uc3QgdD17cGFyZW50U3BhbklzQWx3YXlzUm9vdFNwYW46ITAsLi4uZX07IWZ1bmN0aW9uKGUsdCxuPVt0XSxyPVwibnBtXCIpe2NvbnN0IGk9ZS5fbWV0YWRhdGF8fHt9O2kuc2RrfHwoaS5zZGs9e25hbWU6YHNlbnRyeS5qYXZhc2NyaXB0LiR7dH1gLHBhY2thZ2VzOm4ubWFwKChlPT4oe25hbWU6YCR7cn06QHNlbnRyeS8ke2V9YCx2ZXJzaW9uOmtlfSkpKSx2ZXJzaW9uOmtlfSksZS5fbWV0YWRhdGE9aX0odCxcImJyb3dzZXJcIixbXCJicm93c2VyXCJdLHJyLlNFTlRSWV9TREtfU09VUkNFfHxcIm5wbVwiKSxzdXBlcih0KSx0LnNlbmRDbGllbnRSZXBvcnRzJiZyci5kb2N1bWVudCYmcnIuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwoKCk9PntcImhpZGRlblwiPT09cnIuZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlJiZ0aGlzLl9mbHVzaE91dGNvbWVzKCl9KSl9ZXZlbnRGcm9tRXhjZXB0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuLHIpe2NvbnN0IGk9ZnIoZSx0LG4mJm4uc3ludGhldGljRXhjZXB0aW9ufHx2b2lkIDAscik7cmV0dXJuIGt0KGkpLGkubGV2ZWw9XCJlcnJvclwiLG4mJm4uZXZlbnRfaWQmJihpLmV2ZW50X2lkPW4uZXZlbnRfaWQpLFB0KGkpfSh0aGlzLl9vcHRpb25zLnN0YWNrUGFyc2VyLGUsdCx0aGlzLl9vcHRpb25zLmF0dGFjaFN0YWNrdHJhY2UpfWV2ZW50RnJvbU1lc3NhZ2UoZSx0PVwiaW5mb1wiLG4pe3JldHVybiBmdW5jdGlvbihlLHQsbj1cImluZm9cIixyLGkpe2NvbnN0IG89dnIoZSx0LHImJnIuc3ludGhldGljRXhjZXB0aW9ufHx2b2lkIDAsaSk7cmV0dXJuIG8ubGV2ZWw9bixyJiZyLmV2ZW50X2lkJiYoby5ldmVudF9pZD1yLmV2ZW50X2lkKSxQdChvKX0odGhpcy5fb3B0aW9ucy5zdGFja1BhcnNlcixlLHQsbix0aGlzLl9vcHRpb25zLmF0dGFjaFN0YWNrdHJhY2UpfWNhcHR1cmVVc2VyRmVlZGJhY2soZSl7aWYoIXRoaXMuX2lzRW5hYmxlZCgpKXJldHVybiB2b2lkKHNyJiZMZS53YXJuKFwiU0RLIG5vdCBlbmFibGVkLCB3aWxsIG5vdCBjYXB0dXJlIHVzZXIgZmVlZGJhY2suXCIpKTtjb25zdCB0PWZ1bmN0aW9uKGUse21ldGFkYXRhOnQsdHVubmVsOm4sZHNuOnJ9KXtjb25zdCBpPXtldmVudF9pZDplLmV2ZW50X2lkLHNlbnRfYXQ6KG5ldyBEYXRlKS50b0lTT1N0cmluZygpLC4uLnQmJnQuc2RrJiZ7c2RrOntuYW1lOnQuc2RrLm5hbWUsdmVyc2lvbjp0LnNkay52ZXJzaW9ufX0sLi4uISFuJiYhIXImJntkc246SWUocil9fSxvPWZ1bmN0aW9uKGUpe3JldHVyblt7dHlwZTpcInVzZXJfcmVwb3J0XCJ9LGVdfShlKTtyZXR1cm4gUnQoaSxbb10pfShlLHttZXRhZGF0YTp0aGlzLmdldFNka01ldGFkYXRhKCksZHNuOnRoaXMuZ2V0RHNuKCksdHVubmVsOnRoaXMuZ2V0T3B0aW9ucygpLnR1bm5lbH0pO3RoaXMuc2VuZEVudmVsb3BlKHQpfV9wcmVwYXJlRXZlbnQoZSx0LG4pe3JldHVybiBlLnBsYXRmb3JtPWUucGxhdGZvcm18fFwiamF2YXNjcmlwdFwiLHN1cGVyLl9wcmVwYXJlRXZlbnQoZSx0LG4pfX1jb25zdCB5cj1cInVuZGVmaW5lZFwiPT10eXBlb2YgX19TRU5UUllfREVCVUdfX3x8X19TRU5UUllfREVCVUdfXyxfcj1TZTtsZXQgYnIsd3Isa3IsU3I7ZnVuY3Rpb24gTXIoKXtpZighX3IuZG9jdW1lbnQpcmV0dXJuO2NvbnN0IGU9aXQuYmluZChudWxsLFwiZG9tXCIpLHQ9Q3IoZSwhMCk7X3IuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdCwhMSksX3IuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsdCwhMSksW1wiRXZlbnRUYXJnZXRcIixcIk5vZGVcIl0uZm9yRWFjaCgodD0+e2NvbnN0IG49X3JbdF0mJl9yW3RdLnByb3RvdHlwZTtuJiZuLmhhc093blByb3BlcnR5JiZuLmhhc093blByb3BlcnR5KFwiYWRkRXZlbnRMaXN0ZW5lclwiKSYmKFJlKG4sXCJhZGRFdmVudExpc3RlbmVyXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihuLHIsaSl7aWYoXCJjbGlja1wiPT09bnx8XCJrZXlwcmVzc1wiPT1uKXRyeXtjb25zdCByPXRoaXMsbz1yLl9fc2VudHJ5X2luc3RydW1lbnRhdGlvbl9oYW5kbGVyc19fPXIuX19zZW50cnlfaW5zdHJ1bWVudGF0aW9uX2hhbmRsZXJzX198fHt9LGE9b1tuXT1vW25dfHx7cmVmQ291bnQ6MH07aWYoIWEuaGFuZGxlcil7Y29uc3Qgcj1DcihlKTthLmhhbmRsZXI9cix0LmNhbGwodGhpcyxuLHIsaSl9YS5yZWZDb3VudCsrfWNhdGNoKGUpe31yZXR1cm4gdC5jYWxsKHRoaXMsbixyLGkpfX0pKSxSZShuLFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLChmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuLHIpe2lmKFwiY2xpY2tcIj09PXR8fFwia2V5cHJlc3NcIj09dCl0cnl7Y29uc3Qgbj10aGlzLGk9bi5fX3NlbnRyeV9pbnN0cnVtZW50YXRpb25faGFuZGxlcnNfX3x8e30sbz1pW3RdO28mJihvLnJlZkNvdW50LS0sby5yZWZDb3VudDw9MCYmKGUuY2FsbCh0aGlzLHQsby5oYW5kbGVyLHIpLG8uaGFuZGxlcj12b2lkIDAsZGVsZXRlIGlbdF0pLDA9PT1PYmplY3Qua2V5cyhpKS5sZW5ndGgmJmRlbGV0ZSBuLl9fc2VudHJ5X2luc3RydW1lbnRhdGlvbl9oYW5kbGVyc19fKX1jYXRjaChlKXt9cmV0dXJuIGUuY2FsbCh0aGlzLHQsbixyKX19KSkpfSkpfWZ1bmN0aW9uIENyKGUsdD0hMSl7cmV0dXJuIG49PntpZighbnx8bi5fc2VudHJ5Q2FwdHVyZWQpcmV0dXJuO2NvbnN0IHI9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBlLnRhcmdldH1jYXRjaChlKXtyZXR1cm4gbnVsbH19KG4pO2lmKGZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJrZXlwcmVzc1wiPT09ZSYmKCF0fHwhdC50YWdOYW1lfHxcIklOUFVUXCIhPT10LnRhZ05hbWUmJlwiVEVYVEFSRUFcIiE9PXQudGFnTmFtZSYmIXQuaXNDb250ZW50RWRpdGFibGUpfShuLnR5cGUscikpcmV0dXJuO0JlKG4sXCJfc2VudHJ5Q2FwdHVyZWRcIiwhMCksciYmIXIuX3NlbnRyeUlkJiZCZShyLFwiX3NlbnRyeUlkXCIseXQoKSk7Y29uc3QgaT1cImtleXByZXNzXCI9PT1uLnR5cGU/XCJpbnB1dFwiOm4udHlwZTtpZighZnVuY3Rpb24oZSl7aWYoZS50eXBlIT09d3IpcmV0dXJuITE7dHJ5e2lmKCFlLnRhcmdldHx8ZS50YXJnZXQuX3NlbnRyeUlkIT09a3IpcmV0dXJuITF9Y2F0Y2goZSl7fXJldHVybiEwfShuKSl7ZSh7ZXZlbnQ6bixuYW1lOmksZ2xvYmFsOnR9KSx3cj1uLnR5cGUsa3I9cj9yLl9zZW50cnlJZDp2b2lkIDB9Y2xlYXJUaW1lb3V0KGJyKSxicj1fci5zZXRUaW1lb3V0KCgoKT0+e2tyPXZvaWQgMCx3cj12b2lkIDB9KSwxZTMpfX1mdW5jdGlvbiBFcigpe2lmKCFmdW5jdGlvbigpe2NvbnN0IGU9UXQuY2hyb21lLHQ9ZSYmZS5hcHAmJmUuYXBwLnJ1bnRpbWUsbj1cImhpc3RvcnlcImluIFF0JiYhIVF0Lmhpc3RvcnkucHVzaFN0YXRlJiYhIVF0Lmhpc3RvcnkucmVwbGFjZVN0YXRlO3JldHVybiF0JiZufSgpKXJldHVybjtjb25zdCBlPV9yLm9ucG9wc3RhdGU7ZnVuY3Rpb24gdChlKXtyZXR1cm4gZnVuY3Rpb24oLi4udCl7Y29uc3Qgbj10Lmxlbmd0aD4yP3RbMl06dm9pZCAwO2lmKG4pe2NvbnN0IGU9U3IsdD1TdHJpbmcobik7U3I9dDtpdChcImhpc3RvcnlcIix7ZnJvbTplLHRvOnR9KX1yZXR1cm4gZS5hcHBseSh0aGlzLHQpfX1fci5vbnBvcHN0YXRlPWZ1bmN0aW9uKC4uLnQpe2NvbnN0IG49X3IubG9jYXRpb24uaHJlZixyPVNyO1NyPW47aWYoaXQoXCJoaXN0b3J5XCIse2Zyb206cix0bzpufSksZSl0cnl7cmV0dXJuIGUuYXBwbHkodGhpcyx0KX1jYXRjaChlKXt9fSxSZShfci5oaXN0b3J5LFwicHVzaFN0YXRlXCIsdCksUmUoX3IuaGlzdG9yeSxcInJlcGxhY2VTdGF0ZVwiLHQpfWNvbnN0IFRyPXt9O2Z1bmN0aW9uIFByKGUpe1RyW2VdPXZvaWQgMH1jb25zdCBPcj1cIl9fc2VudHJ5X3hocl92M19fXCI7ZnVuY3Rpb24gQXIoKXtpZighX3IuWE1MSHR0cFJlcXVlc3QpcmV0dXJuO2NvbnN0IGU9WE1MSHR0cFJlcXVlc3QucHJvdG90eXBlO2Uub3Blbj1uZXcgUHJveHkoZS5vcGVuLHthcHBseShlLHQsbil7Y29uc3Qgcj0xZTMqdXQoKSxpPW9lKG5bMF0pP25bMF0udG9VcHBlckNhc2UoKTp2b2lkIDAsbz1mdW5jdGlvbihlKXtpZihvZShlKSlyZXR1cm4gZTt0cnl7cmV0dXJuIGUudG9TdHJpbmcoKX1jYXRjaChlKXt9cmV0dXJufShuWzFdKTtpZighaXx8IW8pcmV0dXJuIGUuYXBwbHkodCxuKTt0W09yXT17bWV0aG9kOmksdXJsOm8scmVxdWVzdF9oZWFkZXJzOnt9fSxcIlBPU1RcIj09PWkmJm8ubWF0Y2goL3NlbnRyeV9rZXkvKSYmKHQuX19zZW50cnlfb3duX3JlcXVlc3RfXz0hMCk7Y29uc3QgYT0oKT0+e2NvbnN0IGU9dFtPcl07aWYoZSYmND09PXQucmVhZHlTdGF0ZSl7dHJ5e2Uuc3RhdHVzX2NvZGU9dC5zdGF0dXN9Y2F0Y2goZSl7fWl0KFwieGhyXCIse2VuZFRpbWVzdGFtcDoxZTMqdXQoKSxzdGFydFRpbWVzdGFtcDpyLHhocjp0fSl9fTtyZXR1cm5cIm9ucmVhZHlzdGF0ZWNoYW5nZVwiaW4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5vbnJlYWR5c3RhdGVjaGFuZ2U/dC5vbnJlYWR5c3RhdGVjaGFuZ2U9bmV3IFByb3h5KHQub25yZWFkeXN0YXRlY2hhbmdlLHthcHBseTooZSx0LG4pPT4oYSgpLGUuYXBwbHkodCxuKSl9KTp0LmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsYSksdC5zZXRSZXF1ZXN0SGVhZGVyPW5ldyBQcm94eSh0LnNldFJlcXVlc3RIZWFkZXIse2FwcGx5KGUsdCxuKXtjb25zdFtyLGldPW4sbz10W09yXTtyZXR1cm4gbyYmb2UocikmJm9lKGkpJiYoby5yZXF1ZXN0X2hlYWRlcnNbci50b0xvd2VyQ2FzZSgpXT1pKSxlLmFwcGx5KHQsbil9fSksZS5hcHBseSh0LG4pfX0pLGUuc2VuZD1uZXcgUHJveHkoZS5zZW5kLHthcHBseShlLHQsbil7Y29uc3Qgcj10W09yXTtpZighcilyZXR1cm4gZS5hcHBseSh0LG4pO3ZvaWQgMCE9PW5bMF0mJihyLmJvZHk9blswXSk7cmV0dXJuIGl0KFwieGhyXCIse3N0YXJ0VGltZXN0YW1wOjFlMyp1dCgpLHhocjp0fSksZS5hcHBseSh0LG4pfX0pfWZ1bmN0aW9uIGpyKGUsdD1mdW5jdGlvbihlKXtjb25zdCB0PVRyW2VdO2lmKHQpcmV0dXJuIHQ7bGV0IG49X3JbZV07aWYoc3QobikpcmV0dXJuIFRyW2VdPW4uYmluZChfcik7Y29uc3Qgcj1fci5kb2N1bWVudDtpZihyJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiByLmNyZWF0ZUVsZW1lbnQpdHJ5e2NvbnN0IHQ9ci5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO3QuaGlkZGVuPSEwLHIuaGVhZC5hcHBlbmRDaGlsZCh0KTtjb25zdCBpPXQuY29udGVudFdpbmRvdztpJiZpW2VdJiYobj1pW2VdKSxyLmhlYWQucmVtb3ZlQ2hpbGQodCl9Y2F0Y2godCl7eXImJkxlLndhcm4oYENvdWxkIG5vdCBjcmVhdGUgc2FuZGJveCBpZnJhbWUgZm9yICR7ZX0gY2hlY2ssIGJhaWxpbmcgdG8gd2luZG93LiR7ZX06IGAsdCl9cmV0dXJuIG4/VHJbZV09bi5iaW5kKF9yKTpufShcImZldGNoXCIpKXtsZXQgbj0wLHI9MDtyZXR1cm4gJG4oZSwoZnVuY3Rpb24oaSl7Y29uc3Qgbz1pLmJvZHkubGVuZ3RoO24rPW8scisrO2NvbnN0IGE9e2JvZHk6aS5ib2R5LG1ldGhvZDpcIlBPU1RcIixyZWZlcnJlclBvbGljeTpcIm9yaWdpblwiLGhlYWRlcnM6ZS5oZWFkZXJzLGtlZXBhbGl2ZTpuPD02ZTQmJnI8MTUsLi4uZS5mZXRjaE9wdGlvbnN9O2lmKCF0KXJldHVybiBQcihcImZldGNoXCIpLE90KFwiTm8gZmV0Y2ggaW1wbGVtZW50YXRpb24gYXZhaWxhYmxlXCIpO3RyeXtyZXR1cm4gdChlLnVybCxhKS50aGVuKChlPT4obi09byxyLS0se3N0YXR1c0NvZGU6ZS5zdGF0dXMsaGVhZGVyczp7XCJ4LXNlbnRyeS1yYXRlLWxpbWl0c1wiOmUuaGVhZGVycy5nZXQoXCJYLVNlbnRyeS1SYXRlLUxpbWl0c1wiKSxcInJldHJ5LWFmdGVyXCI6ZS5oZWFkZXJzLmdldChcIlJldHJ5LUFmdGVyXCIpfX0pKSl9Y2F0Y2goZSl7cmV0dXJuIFByKFwiZmV0Y2hcIiksbi09byxyLS0sT3QoZSl9fSkpfWZ1bmN0aW9uIExyKGUsdCxuLHIpe2NvbnN0IGk9e2ZpbGVuYW1lOmUsZnVuY3Rpb246XCI8YW5vbnltb3VzPlwiPT09dD9IZTp0LGluX2FwcDohMH07cmV0dXJuIHZvaWQgMCE9PW4mJihpLmxpbmVubz1uKSx2b2lkIDAhPT1yJiYoaS5jb2xubz1yKSxpfWNvbnN0IHhyPS9eXFxzKmF0IChcXFMrPykoPzo6KFxcZCspKSg/OjooXFxkKykpXFxzKiQvaSxJcj0vXlxccyphdCAoPzooLis/XFwpKD86IFxcWy4rXFxdKT98Lio/KSA/XFwoKD86YWRkcmVzcyBhdCApPyk/KD86YXN5bmMgKT8oKD86PGFub255bW91cz58Wy1hLXpdKzp8LipidW5kbGV8XFwvKT8uKj8pKD86OihcXGQrKSk/KD86OihcXGQrKSk/XFwpP1xccyokL2ksRHI9L1xcKChcXFMqKSg/OjooXFxkKykpKD86OihcXGQrKSlcXCkvLE5yPS9eXFxzKiguKj8pKD86XFwoKC4qPylcXCkpPyg/Ol58QCk/KCg/OlstYS16XSspPzpcXC8uKj98XFxbbmF0aXZlIGNvZGVcXF18W15AXSooPzpidW5kbGV8XFxkK1xcLmpzKXxcXC9bXFx3XFwtLiAvPV0rKSg/OjooXFxkKykpPyg/OjooXFxkKykpP1xccyokL2ksRnI9LyhcXFMrKSBsaW5lIChcXGQrKSg/OiA+IGV2YWwgbGluZSBcXGQrKSogPiBldmFsL2ksUnI9ZnVuY3Rpb24oLi4uZSl7Y29uc3QgdD1lLnNvcnQoKChlLHQpPT5lWzBdLXRbMF0pKS5tYXAoKGU9PmVbMV0pKTtyZXR1cm4oZSxuPTAscj0wKT0+e2NvbnN0IGk9W10sbz1lLnNwbGl0KFwiXFxuXCIpO2ZvcihsZXQgZT1uO2U8by5sZW5ndGg7ZSsrKXtjb25zdCBuPW9bZV07aWYobi5sZW5ndGg+MTAyNCljb250aW51ZTtjb25zdCBhPUdlLnRlc3Qobik/bi5yZXBsYWNlKEdlLFwiJDFcIik6bjtpZighYS5tYXRjaCgvXFxTKkVycm9yOiAvKSl7Zm9yKGNvbnN0IGUgb2YgdCl7Y29uc3QgdD1lKGEpO2lmKHQpe2kucHVzaCh0KTticmVha319aWYoaS5sZW5ndGg+PTUwK3IpYnJlYWt9fXJldHVybiBmdW5jdGlvbihlKXtpZighZS5sZW5ndGgpcmV0dXJuW107Y29uc3QgdD1BcnJheS5mcm9tKGUpOy9zZW50cnlXcmFwcGVkLy50ZXN0KFllKHQpLmZ1bmN0aW9ufHxcIlwiKSYmdC5wb3AoKTt0LnJldmVyc2UoKSxRZS50ZXN0KFllKHQpLmZ1bmN0aW9ufHxcIlwiKSYmKHQucG9wKCksUWUudGVzdChZZSh0KS5mdW5jdGlvbnx8XCJcIikmJnQucG9wKCkpO3JldHVybiB0LnNsaWNlKDAsNTApLm1hcCgoZT0+KHsuLi5lLGZpbGVuYW1lOmUuZmlsZW5hbWV8fFllKHQpLmZpbGVuYW1lLGZ1bmN0aW9uOmUuZnVuY3Rpb258fEhlfSkpKX0oaS5zbGljZShyKSl9fSguLi5bWzMwLGU9Pntjb25zdCB0PXhyLmV4ZWMoZSk7aWYodCl7Y29uc3RbLGUsbixyXT10O3JldHVybiBMcihlLEhlLCtuLCtyKX1jb25zdCBuPUlyLmV4ZWMoZSk7aWYobil7aWYoblsyXSYmMD09PW5bMl0uaW5kZXhPZihcImV2YWxcIikpe2NvbnN0IGU9RHIuZXhlYyhuWzJdKTtlJiYoblsyXT1lWzFdLG5bM109ZVsyXSxuWzRdPWVbM10pfWNvbnN0W2UsdF09QnIoblsxXXx8SGUsblsyXSk7cmV0dXJuIExyKHQsZSxuWzNdPytuWzNdOnZvaWQgMCxuWzRdPytuWzRdOnZvaWQgMCl9fV0sWzUwLGU9Pntjb25zdCB0PU5yLmV4ZWMoZSk7aWYodCl7aWYodFszXSYmdFszXS5pbmRleE9mKFwiID4gZXZhbFwiKT4tMSl7Y29uc3QgZT1Gci5leGVjKHRbM10pO2UmJih0WzFdPXRbMV18fFwiZXZhbFwiLHRbM109ZVsxXSx0WzRdPWVbMl0sdFs1XT1cIlwiKX1sZXQgZT10WzNdLG49dFsxXXx8SGU7cmV0dXJuW24sZV09QnIobixlKSxMcihlLG4sdFs0XT8rdFs0XTp2b2lkIDAsdFs1XT8rdFs1XTp2b2lkIDApfX1dXSksQnI9KGUsdCk9Pntjb25zdCBuPS0xIT09ZS5pbmRleE9mKFwic2FmYXJpLWV4dGVuc2lvblwiKSxyPS0xIT09ZS5pbmRleE9mKFwic2FmYXJpLXdlYi1leHRlbnNpb25cIik7cmV0dXJuIG58fHI/Wy0xIT09ZS5pbmRleE9mKFwiQFwiKT9lLnNwbGl0KFwiQFwiKVswXTpIZSxuP2BzYWZhcmktZXh0ZW5zaW9uOiR7dH1gOmBzYWZhcmktd2ViLWV4dGVuc2lvbjoke3R9YF06W2UsdF19LFVyPTEwMjQsVnI9KGU9e30pPT57Y29uc3QgdD17Y29uc29sZTohMCxkb206ITAsZmV0Y2g6ITAsaGlzdG9yeTohMCxzZW50cnk6ITAseGhyOiEwLC4uLmV9O3JldHVybntuYW1lOlwiQnJlYWRjcnVtYnNcIixzZXR1cChlKXt2YXIgbjt0LmNvbnNvbGUmJmZ1bmN0aW9uKGUpe2NvbnN0IHQ9XCJjb25zb2xlXCI7bnQodCxlKSxydCh0LG90KX0oZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKGZuKCkhPT1lKXJldHVybjtjb25zdCBuPXtjYXRlZ29yeTpcImNvbnNvbGVcIixkYXRhOnthcmd1bWVudHM6dC5hcmdzLGxvZ2dlcjpcImNvbnNvbGVcIn0sbGV2ZWw6SXQodC5sZXZlbCksbWVzc2FnZTpmZSh0LmFyZ3MsXCIgXCIpfTtpZihcImFzc2VydFwiPT09dC5sZXZlbCl7aWYoITEhPT10LmFyZ3NbMF0pcmV0dXJuO24ubWVzc2FnZT1gQXNzZXJ0aW9uIGZhaWxlZDogJHtmZSh0LmFyZ3Muc2xpY2UoMSksXCIgXCIpfHxcImNvbnNvbGUuYXNzZXJ0XCJ9YCxuLmRhdGEuYXJndW1lbnRzPXQuYXJncy5zbGljZSgxKX1XbihuLHtpbnB1dDp0LmFyZ3MsbGV2ZWw6dC5sZXZlbH0pfX0oZSkpLHQuZG9tJiYobj1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihuKXtpZihmbigpIT09ZSlyZXR1cm47bGV0IHIsaSxvPVwib2JqZWN0XCI9PXR5cGVvZiB0P3Quc2VyaWFsaXplQXR0cmlidXRlOnZvaWQgMCxhPVwib2JqZWN0XCI9PXR5cGVvZiB0JiZcIm51bWJlclwiPT10eXBlb2YgdC5tYXhTdHJpbmdMZW5ndGg/dC5tYXhTdHJpbmdMZW5ndGg6dm9pZCAwO2EmJmE+VXImJihzciYmTGUud2FybihgXFxgZG9tLm1heFN0cmluZ0xlbmd0aFxcYCBjYW5ub3QgZXhjZWVkIDEwMjQsIGJ1dCBhIHZhbHVlIG9mICR7YX0gd2FzIGNvbmZpZ3VyZWQuIFNlbnRyeSB3aWxsIHVzZSAxMDI0IGluc3RlYWQuYCksYT1VciksXCJzdHJpbmdcIj09dHlwZW9mIG8mJihvPVtvXSk7dHJ5e2NvbnN0IGU9bi5ldmVudCx0PWZ1bmN0aW9uKGUpe3JldHVybiEhZSYmISFlLnRhcmdldH0oZSk/ZS50YXJnZXQ6ZTtyPUVlKHQse2tleUF0dHJzOm8sbWF4U3RyaW5nTGVuZ3RoOmF9KSxpPWZ1bmN0aW9uKGUpe2lmKCFDZS5IVE1MRWxlbWVudClyZXR1cm4gbnVsbDtsZXQgdD1lO2ZvcihsZXQgZT0wO2U8NTtlKyspe2lmKCF0KXJldHVybiBudWxsO2lmKHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCl7aWYodC5kYXRhc2V0LnNlbnRyeUNvbXBvbmVudClyZXR1cm4gdC5kYXRhc2V0LnNlbnRyeUNvbXBvbmVudDtpZih0LmRhdGFzZXQuc2VudHJ5RWxlbWVudClyZXR1cm4gdC5kYXRhc2V0LnNlbnRyeUVsZW1lbnR9dD10LnBhcmVudE5vZGV9cmV0dXJuIG51bGx9KHQpfWNhdGNoKGUpe3I9XCI8dW5rbm93bj5cIn1pZigwPT09ci5sZW5ndGgpcmV0dXJuO2NvbnN0IHM9e2NhdGVnb3J5OmB1aS4ke24ubmFtZX1gLG1lc3NhZ2U6cn07aSYmKHMuZGF0YT17XCJ1aS5jb21wb25lbnRfbmFtZVwiOml9KSxXbihzLHtldmVudDpuLmV2ZW50LG5hbWU6bi5uYW1lLGdsb2JhbDpuLmdsb2JhbH0pfX0oZSx0LmRvbSksbnQoXCJkb21cIixuKSxydChcImRvbVwiLE1yKSksdC54aHImJmZ1bmN0aW9uKGUpe250KFwieGhyXCIsZSkscnQoXCJ4aHJcIixBcil9KGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtpZihmbigpIT09ZSlyZXR1cm47Y29uc3R7c3RhcnRUaW1lc3RhbXA6bixlbmRUaW1lc3RhbXA6cn09dCxpPXQueGhyW09yXTtpZighbnx8IXJ8fCFpKXJldHVybjtjb25zdHttZXRob2Q6byx1cmw6YSxzdGF0dXNfY29kZTpzLGJvZHk6Y309aSxsPXttZXRob2Q6byx1cmw6YSxzdGF0dXNfY29kZTpzfSx1PXt4aHI6dC54aHIsaW5wdXQ6YyxzdGFydFRpbWVzdGFtcDpuLGVuZFRpbWVzdGFtcDpyfTtXbih7Y2F0ZWdvcnk6XCJ4aHJcIixkYXRhOmwsdHlwZTpcImh0dHBcIixsZXZlbDp3ZShzKX0sdSl9fShlKSksdC5mZXRjaCYmZHQoZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKGZuKCkhPT1lKXJldHVybjtjb25zdHtzdGFydFRpbWVzdGFtcDpuLGVuZFRpbWVzdGFtcDpyfT10O2lmKHImJighdC5mZXRjaERhdGEudXJsLm1hdGNoKC9zZW50cnlfa2V5Lyl8fFwiUE9TVFwiIT09dC5mZXRjaERhdGEubWV0aG9kKSlpZih0LmVycm9yKXtXbih7Y2F0ZWdvcnk6XCJmZXRjaFwiLGRhdGE6dC5mZXRjaERhdGEsbGV2ZWw6XCJlcnJvclwiLHR5cGU6XCJodHRwXCJ9LHtkYXRhOnQuZXJyb3IsaW5wdXQ6dC5hcmdzLHN0YXJ0VGltZXN0YW1wOm4sZW5kVGltZXN0YW1wOnJ9KX1lbHNle2NvbnN0IGU9dC5yZXNwb25zZSxpPXsuLi50LmZldGNoRGF0YSxzdGF0dXNfY29kZTplJiZlLnN0YXR1c30sbz17aW5wdXQ6dC5hcmdzLHJlc3BvbnNlOmUsc3RhcnRUaW1lc3RhbXA6bixlbmRUaW1lc3RhbXA6cn07V24oe2NhdGVnb3J5OlwiZmV0Y2hcIixkYXRhOmksdHlwZTpcImh0dHBcIixsZXZlbDp3ZShpLnN0YXR1c19jb2RlKX0sbyl9fX0oZSkpLHQuaGlzdG9yeSYmZnVuY3Rpb24oZSl7Y29uc3QgdD1cImhpc3RvcnlcIjtudCh0LGUpLHJ0KHQsRXIpfShmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7aWYoZm4oKSE9PWUpcmV0dXJuO2xldCBuPXQuZnJvbSxyPXQudG87Y29uc3QgaT1MdChyci5sb2NhdGlvbi5ocmVmKTtsZXQgbz1uP0x0KG4pOnZvaWQgMDtjb25zdCBhPUx0KHIpO28mJm8ucGF0aHx8KG89aSksaS5wcm90b2NvbD09PWEucHJvdG9jb2wmJmkuaG9zdD09PWEuaG9zdCYmKHI9YS5yZWxhdGl2ZSksaS5wcm90b2NvbD09PW8ucHJvdG9jb2wmJmkuaG9zdD09PW8uaG9zdCYmKG49by5yZWxhdGl2ZSksV24oe2NhdGVnb3J5OlwibmF2aWdhdGlvblwiLGRhdGE6e2Zyb206bix0bzpyfX0pfX0oZSkpLHQuc2VudHJ5JiZlLm9uKFwiYmVmb3JlU2VuZEV2ZW50XCIsZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQpe2ZuKCk9PT1lJiZXbih7Y2F0ZWdvcnk6XCJzZW50cnkuXCIrKFwidHJhbnNhY3Rpb25cIj09PXQudHlwZT9cInRyYW5zYWN0aW9uXCI6XCJldmVudFwiKSxldmVudF9pZDp0LmV2ZW50X2lkLGxldmVsOnQubGV2ZWwsbWVzc2FnZTpidCh0KX0se2V2ZW50OnR9KX19KGUpKX19fTtjb25zdCBKcj1bXCJFdmVudFRhcmdldFwiLFwiV2luZG93XCIsXCJOb2RlXCIsXCJBcHBsaWNhdGlvbkNhY2hlXCIsXCJBdWRpb1RyYWNrTGlzdFwiLFwiQnJvYWRjYXN0Q2hhbm5lbFwiLFwiQ2hhbm5lbE1lcmdlck5vZGVcIixcIkNyeXB0b09wZXJhdGlvblwiLFwiRXZlbnRTb3VyY2VcIixcIkZpbGVSZWFkZXJcIixcIkhUTUxVbmtub3duRWxlbWVudFwiLFwiSURCRGF0YWJhc2VcIixcIklEQlJlcXVlc3RcIixcIklEQlRyYW5zYWN0aW9uXCIsXCJLZXlPcGVyYXRpb25cIixcIk1lZGlhQ29udHJvbGxlclwiLFwiTWVzc2FnZVBvcnRcIixcIk1vZGFsV2luZG93XCIsXCJOb3RpZmljYXRpb25cIixcIlNWR0VsZW1lbnRJbnN0YW5jZVwiLFwiU2NyZWVuXCIsXCJTaGFyZWRXb3JrZXJcIixcIlRleHRUcmFja1wiLFwiVGV4dFRyYWNrQ3VlXCIsXCJUZXh0VHJhY2tMaXN0XCIsXCJXZWJTb2NrZXRcIixcIldlYlNvY2tldFdvcmtlclwiLFwiV29ya2VyXCIsXCJYTUxIdHRwUmVxdWVzdFwiLFwiWE1MSHR0cFJlcXVlc3RFdmVudFRhcmdldFwiLFwiWE1MSHR0cFJlcXVlc3RVcGxvYWRcIl0sJHI9KGU9e30pPT57Y29uc3QgdD17WE1MSHR0cFJlcXVlc3Q6ITAsZXZlbnRUYXJnZXQ6ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lOiEwLHNldEludGVydmFsOiEwLHNldFRpbWVvdXQ6ITAsLi4uZX07cmV0dXJue25hbWU6XCJCcm93c2VyQXBpRXJyb3JzXCIsc2V0dXBPbmNlKCl7dC5zZXRUaW1lb3V0JiZSZShycixcInNldFRpbWVvdXRcIixxciksdC5zZXRJbnRlcnZhbCYmUmUocnIsXCJzZXRJbnRlcnZhbFwiLHFyKSx0LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmUmUocnIsXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIix6ciksdC5YTUxIdHRwUmVxdWVzdCYmXCJYTUxIdHRwUmVxdWVzdFwiaW4gcnImJlJlKFhNTEh0dHBSZXF1ZXN0LnByb3RvdHlwZSxcInNlbmRcIixXcik7Y29uc3QgZT10LmV2ZW50VGFyZ2V0O2lmKGUpeyhBcnJheS5pc0FycmF5KGUpP2U6SnIpLmZvckVhY2goSHIpfX19fTtmdW5jdGlvbiBxcihlKXtyZXR1cm4gZnVuY3Rpb24oLi4udCl7Y29uc3Qgbj10WzBdO3JldHVybiB0WzBdPWFyKG4se21lY2hhbmlzbTp7ZGF0YTp7ZnVuY3Rpb246WGUoZSl9LGhhbmRsZWQ6ITEsdHlwZTpcImluc3RydW1lbnRcIn19KSxlLmFwcGx5KHRoaXMsdCl9fWZ1bmN0aW9uIHpyKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZS5hcHBseSh0aGlzLFthcih0LHttZWNoYW5pc206e2RhdGE6e2Z1bmN0aW9uOlwicmVxdWVzdEFuaW1hdGlvbkZyYW1lXCIsaGFuZGxlcjpYZShlKX0saGFuZGxlZDohMSx0eXBlOlwiaW5zdHJ1bWVudFwifX0pXSl9fWZ1bmN0aW9uIFdyKGUpe3JldHVybiBmdW5jdGlvbiguLi50KXtjb25zdCBuPXRoaXM7cmV0dXJuW1wib25sb2FkXCIsXCJvbmVycm9yXCIsXCJvbnByb2dyZXNzXCIsXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIl0uZm9yRWFjaCgoZT0+e2UgaW4gbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgbltlXSYmUmUobixlLChmdW5jdGlvbih0KXtjb25zdCBuPXttZWNoYW5pc206e2RhdGE6e2Z1bmN0aW9uOmUsaGFuZGxlcjpYZSh0KX0saGFuZGxlZDohMSx0eXBlOlwiaW5zdHJ1bWVudFwifX0scj1WZSh0KTtyZXR1cm4gciYmKG4ubWVjaGFuaXNtLmRhdGEuaGFuZGxlcj1YZShyKSksYXIodCxuKX0pKX0pKSxlLmFwcGx5KHRoaXMsdCl9fWZ1bmN0aW9uIEhyKGUpe2NvbnN0IHQ9cnIsbj10W2VdJiZ0W2VdLnByb3RvdHlwZTtuJiZuLmhhc093blByb3BlcnR5JiZuLmhhc093blByb3BlcnR5KFwiYWRkRXZlbnRMaXN0ZW5lclwiKSYmKFJlKG4sXCJhZGRFdmVudExpc3RlbmVyXCIsKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihuLHIsaSl7dHJ5e1wiZnVuY3Rpb25cIj09dHlwZW9mIHIuaGFuZGxlRXZlbnQmJihyLmhhbmRsZUV2ZW50PWFyKHIuaGFuZGxlRXZlbnQse21lY2hhbmlzbTp7ZGF0YTp7ZnVuY3Rpb246XCJoYW5kbGVFdmVudFwiLGhhbmRsZXI6WGUociksdGFyZ2V0OmV9LGhhbmRsZWQ6ITEsdHlwZTpcImluc3RydW1lbnRcIn19KSl9Y2F0Y2goZSl7fXJldHVybiB0LmFwcGx5KHRoaXMsW24sYXIocix7bWVjaGFuaXNtOntkYXRhOntmdW5jdGlvbjpcImFkZEV2ZW50TGlzdGVuZXJcIixoYW5kbGVyOlhlKHIpLHRhcmdldDplfSxoYW5kbGVkOiExLHR5cGU6XCJpbnN0cnVtZW50XCJ9fSksaV0pfX0pKSxSZShuLFwicmVtb3ZlRXZlbnRMaXN0ZW5lclwiLChmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxuLHIpe2NvbnN0IGk9bjt0cnl7Y29uc3Qgbj1pJiZpLl9fc2VudHJ5X3dyYXBwZWRfXztuJiZlLmNhbGwodGhpcyx0LG4scil9Y2F0Y2goZSl7fXJldHVybiBlLmNhbGwodGhpcyx0LGkscil9fSkpKX1jb25zdCBHcj0oZT17fSk9Pntjb25zdCB0PXtvbmVycm9yOiEwLG9udW5oYW5kbGVkcmVqZWN0aW9uOiEwLC4uLmV9O3JldHVybntuYW1lOlwiR2xvYmFsSGFuZGxlcnNcIixzZXR1cE9uY2UoKXtFcnJvci5zdGFja1RyYWNlTGltaXQ9NTB9LHNldHVwKGUpe3Qub25lcnJvciYmKCFmdW5jdGlvbihlKXshZnVuY3Rpb24oZSl7Y29uc3QgdD1cImVycm9yXCI7bnQodCxlKSxydCh0LHZ0KX0oKHQ9Pntjb25zdHtzdGFja1BhcnNlcjpuLGF0dGFjaFN0YWNrdHJhY2U6cn09WXIoKTtpZihmbigpIT09ZXx8b3IoKSlyZXR1cm47Y29uc3R7bXNnOmksdXJsOm8sbGluZTphLGNvbHVtbjpzLGVycm9yOmN9PXQsbD1mdW5jdGlvbihlLHQsbixyKXtjb25zdCBpPWUuZXhjZXB0aW9uPWUuZXhjZXB0aW9ufHx7fSxvPWkudmFsdWVzPWkudmFsdWVzfHxbXSxhPW9bMF09b1swXXx8e30scz1hLnN0YWNrdHJhY2U9YS5zdGFja3RyYWNlfHx7fSxjPXMuZnJhbWVzPXMuZnJhbWVzfHxbXSxsPWlzTmFOKHBhcnNlSW50KHIsMTApKT92b2lkIDA6cix1PWlzTmFOKHBhcnNlSW50KG4sMTApKT92b2lkIDA6bixkPW9lKHQpJiZ0Lmxlbmd0aD4wP3Q6ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIENlLmRvY3VtZW50LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZSl7cmV0dXJuXCJcIn19KCk7MD09PWMubGVuZ3RoJiZjLnB1c2goe2NvbG5vOmwsZmlsZW5hbWU6ZCxmdW5jdGlvbjpIZSxpbl9hcHA6ITAsbGluZW5vOnV9KTtyZXR1cm4gZX0oZnIobixjfHxpLHZvaWQgMCxyLCExKSxvLGEscyk7bC5sZXZlbD1cImVycm9yXCIsSW4obCx7b3JpZ2luYWxFeGNlcHRpb246YyxtZWNoYW5pc206e2hhbmRsZWQ6ITEsdHlwZTpcIm9uZXJyb3JcIn19KX0pKX0oZSksUXIoXCJvbmVycm9yXCIpKSx0Lm9udW5oYW5kbGVkcmVqZWN0aW9uJiYoIWZ1bmN0aW9uKGUpeyFmdW5jdGlvbihlKXtjb25zdCB0PVwidW5oYW5kbGVkcmVqZWN0aW9uXCI7bnQodCxlKSxydCh0LG10KX0oKHQ9Pntjb25zdHtzdGFja1BhcnNlcjpuLGF0dGFjaFN0YWNrdHJhY2U6cn09WXIoKTtpZihmbigpIT09ZXx8b3IoKSlyZXR1cm47Y29uc3QgaT1mdW5jdGlvbihlKXtpZihzZShlKSlyZXR1cm4gZTt0cnl7aWYoXCJyZWFzb25cImluIGUpcmV0dXJuIGUucmVhc29uO2lmKFwiZGV0YWlsXCJpbiBlJiZcInJlYXNvblwiaW4gZS5kZXRhaWwpcmV0dXJuIGUuZGV0YWlsLnJlYXNvbn1jYXRjaChlKXt9cmV0dXJuIGV9KHQpLG89c2UoaSk/e2V4Y2VwdGlvbjp7dmFsdWVzOlt7dHlwZTpcIlVuaGFuZGxlZFJlamVjdGlvblwiLHZhbHVlOmBOb24tRXJyb3IgcHJvbWlzZSByZWplY3Rpb24gY2FwdHVyZWQgd2l0aCB2YWx1ZTogJHtTdHJpbmcoaSl9YH1dfX06ZnIobixpLHZvaWQgMCxyLCEwKTtvLmxldmVsPVwiZXJyb3JcIixJbihvLHtvcmlnaW5hbEV4Y2VwdGlvbjppLG1lY2hhbmlzbTp7aGFuZGxlZDohMSx0eXBlOlwib251bmhhbmRsZWRyZWplY3Rpb25cIn19KX0pKX0oZSksUXIoXCJvbnVuaGFuZGxlZHJlamVjdGlvblwiKSl9fX07ZnVuY3Rpb24gUXIoZSl7c3ImJkxlLmxvZyhgR2xvYmFsIEhhbmRsZXIgYXR0YWNoZWQ6ICR7ZX1gKX1mdW5jdGlvbiBZcigpe2NvbnN0IGU9Zm4oKTtyZXR1cm4gZSYmZS5nZXRPcHRpb25zKCl8fHtzdGFja1BhcnNlcjooKT0+W10sYXR0YWNoU3RhY2t0cmFjZTohMX19Y29uc3QgS3I9KCk9Pih7bmFtZTpcIkh0dHBDb250ZXh0XCIscHJlcHJvY2Vzc0V2ZW50KGUpe2lmKCFyci5uYXZpZ2F0b3ImJiFyci5sb2NhdGlvbiYmIXJyLmRvY3VtZW50KXJldHVybjtjb25zdCB0PWUucmVxdWVzdCYmZS5yZXF1ZXN0LnVybHx8cnIubG9jYXRpb24mJnJyLmxvY2F0aW9uLmhyZWYse3JlZmVycmVyOm59PXJyLmRvY3VtZW50fHx7fSx7dXNlckFnZW50OnJ9PXJyLm5hdmlnYXRvcnx8e30saT17Li4uZS5yZXF1ZXN0JiZlLnJlcXVlc3QuaGVhZGVycywuLi5uJiZ7UmVmZXJlcjpufSwuLi5yJiZ7XCJVc2VyLUFnZW50XCI6cn19LG89ey4uLmUucmVxdWVzdCwuLi50JiZ7dXJsOnR9LGhlYWRlcnM6aX07ZS5yZXF1ZXN0PW99fSksWHI9KGU9e30pPT57Y29uc3QgdD1lLmxpbWl0fHw1LG49ZS5rZXl8fFwiY2F1c2VcIjtyZXR1cm57bmFtZTpcIkxpbmtlZEVycm9yc1wiLHByZXByb2Nlc3NFdmVudChlLHIsaSl7Y29uc3Qgbz1pLmdldE9wdGlvbnMoKTttZShjcixvLnN0YWNrUGFyc2VyLG8ubWF4VmFsdWVMZW5ndGgsbix0LGUscil9fX07dmFyIFpyPVwibmV3XCIsZWk9XCJsb2FkaW5nXCIsdGk9XCJsb2FkZWRcIixuaT1cImpvaW5pbmctbWVldGluZ1wiLHJpPVwiam9pbmVkLW1lZXRpbmdcIixpaT1cImxlZnQtbWVldGluZ1wiLG9pPVwiZXJyb3JcIixhaT1cImJsb2NrZWRcIixzaT1cIm9mZlwiLGNpPVwic2VuZGFibGVcIixsaT1cImxvYWRpbmdcIix1aT1cImludGVycnVwdGVkXCIsZGk9XCJwbGF5YWJsZVwiLHBpPVwidW5rbm93blwiLGhpPVwiZnVsbFwiLGZpPVwibG9iYnlcIix2aT1cIm5vbmVcIixnaT1cImJhc2VcIixtaT1cIipcIix5aT1cImVqZWN0ZWRcIixfaT1cIm5iZi1yb29tXCIsYmk9XCJuYmYtdG9rZW5cIix3aT1cImV4cC1yb29tXCIsa2k9XCJleHAtdG9rZW5cIixTaT1cIm5vLXJvb21cIixNaT1cIm1lZXRpbmctZnVsbFwiLENpPVwiZW5kLW9mLWxpZmVcIixFaT1cIm5vdC1hbGxvd2VkXCIsVGk9XCJjb25uZWN0aW9uLWVycm9yXCIsUGk9XCJjYW0taW4tdXNlXCIsT2k9XCJtaWMtaW4tdXNlXCIsQWk9XCJjYW0tbWljLWluLXVzZVwiLGppPVwicGVybWlzc2lvbnNcIixMaT1cInVuZGVmaW5lZC1tZWRpYWRldmljZXNcIix4aT1cIm5vdC1mb3VuZFwiLElpPVwiY29uc3RyYWludHNcIixEaT1cInVua25vd25cIixOaT1cImlmcmFtZS1yZWFkeS1mb3ItbGF1bmNoLWNvbmZpZ1wiLEZpPVwiaWZyYW1lLWxhdW5jaC1jb25maWdcIixSaT1cInRoZW1lLXVwZGF0ZWRcIixCaT1cImxvYWRpbmdcIixVaT1cImxvYWQtYXR0ZW1wdC1mYWlsZWRcIixWaT1cImxvYWRlZFwiLEppPVwic3RhcnRlZC1jYW1lcmFcIiwkaT1cImNhbWVyYS1lcnJvclwiLHFpPVwiam9pbmluZy1tZWV0aW5nXCIsemk9XCJqb2luZWQtbWVldGluZ1wiLFdpPVwibGVmdC1tZWV0aW5nXCIsSGk9XCJwYXJ0aWNpcGFudC1qb2luZWRcIixHaT1cInBhcnRpY2lwYW50LXVwZGF0ZWRcIixRaT1cInBhcnRpY2lwYW50LWxlZnRcIixZaT1cInBhcnRpY2lwYW50LWNvdW50cy11cGRhdGVkXCIsS2k9XCJhY2Nlc3Mtc3RhdGUtdXBkYXRlZFwiLFhpPVwibWVldGluZy1zZXNzaW9uLXN1bW1hcnktdXBkYXRlZFwiLFppPVwibWVldGluZy1zZXNzaW9uLXN0YXRlLXVwZGF0ZWRcIixlbz1cIm1lZXRpbmctc2Vzc2lvbi1kYXRhLWVycm9yXCIsdG89XCJ3YWl0aW5nLXBhcnRpY2lwYW50LWFkZGVkXCIsbm89XCJ3YWl0aW5nLXBhcnRpY2lwYW50LXVwZGF0ZWRcIixybz1cIndhaXRpbmctcGFydGljaXBhbnQtcmVtb3ZlZFwiLGlvPVwidHJhY2stc3RhcnRlZFwiLG9vPVwidHJhY2stc3RvcHBlZFwiLGFvPVwidHJhbnNjcmlwdGlvbi1zdGFydGVkXCIsc289XCJ0cmFuc2NyaXB0aW9uLXN0b3BwZWRcIixjbz1cInRyYW5zY3JpcHRpb24tZXJyb3JcIixsbz1cInJlY29yZGluZy1zdGFydGVkXCIsdW89XCJyZWNvcmRpbmctc3RvcHBlZFwiLHBvPVwicmVjb3JkaW5nLXN0YXRzXCIsaG89XCJyZWNvcmRpbmctZXJyb3JcIixmbz1cInJlY29yZGluZy11cGxvYWQtY29tcGxldGVkXCIsdm89XCJyZWNvcmRpbmctZGF0YVwiLGdvPVwiYXBwLW1lc3NhZ2VcIixtbz1cInRyYW5zY3JpcHRpb24tbWVzc2FnZVwiLHlvPVwicmVtb3RlLW1lZGlhLXBsYXllci1zdGFydGVkXCIsX289XCJyZW1vdGUtbWVkaWEtcGxheWVyLXVwZGF0ZWRcIixibz1cInJlbW90ZS1tZWRpYS1wbGF5ZXItc3RvcHBlZFwiLHdvPVwibG9jYWwtc2NyZWVuLXNoYXJlLXN0YXJ0ZWRcIixrbz1cImxvY2FsLXNjcmVlbi1zaGFyZS1zdG9wcGVkXCIsU289XCJsb2NhbC1zY3JlZW4tc2hhcmUtY2FuY2VsZWRcIixNbz1cImFjdGl2ZS1zcGVha2VyLWNoYW5nZVwiLENvPVwiYWN0aXZlLXNwZWFrZXItbW9kZS1jaGFuZ2VcIixFbz1cIm5ldHdvcmstcXVhbGl0eS1jaGFuZ2VcIixUbz1cIm5ldHdvcmstY29ubmVjdGlvblwiLFBvPVwiY3B1LWxvYWQtY2hhbmdlXCIsT289XCJmYWNlLWNvdW50cy11cGRhdGVkXCIsQW89XCJmdWxsc2NyZWVuXCIsam89XCJleGl0ZWQtZnVsbHNjcmVlblwiLExvPVwibGl2ZS1zdHJlYW1pbmctc3RhcnRlZFwiLHhvPVwibGl2ZS1zdHJlYW1pbmctdXBkYXRlZFwiLElvPVwibGl2ZS1zdHJlYW1pbmctc3RvcHBlZFwiLERvPVwibGl2ZS1zdHJlYW1pbmctZXJyb3JcIixObz1cImxhbmctdXBkYXRlZFwiLEZvPVwicmVjZWl2ZS1zZXR0aW5ncy11cGRhdGVkXCIsUm89XCJpbnB1dC1zZXR0aW5ncy11cGRhdGVkXCIsQm89XCJub25mYXRhbC1lcnJvclwiLFVvPVwiZXJyb3JcIixWbz00MDk2LEpvPTEwMjQwMCwkbz1cImlmcmFtZS1jYWxsLW1lc3NhZ2VcIixxbz1cImxvY2FsLXNjcmVlbi1zdGFydFwiLHpvPVwiZGFpbHktbWV0aG9kLXVwZGF0ZS1saXZlLXN0cmVhbWluZy1lbmRwb2ludHNcIixXbz1cInRyYW5zbWl0LWxvZ1wiLEhvPVwiZGFpbHktY3VzdG9tLXRyYWNrXCIsR289e05PTkU6XCJub25lXCIsQkdCTFVSOlwiYmFja2dyb3VuZC1ibHVyXCIsQkdJTUFHRTpcImJhY2tncm91bmQtaW1hZ2VcIixGQUNFX0RFVEVDVElPTjpcImZhY2UtZGV0ZWN0aW9uXCJ9LFFvPXtOT05FOlwibm9uZVwiLE5PSVNFX0NBTkNFTExBVElPTjpcIm5vaXNlLWNhbmNlbGxhdGlvblwifSxZbz17UExBWTpcInBsYXlcIixQQVVTRTpcInBhdXNlXCJ9LEtvPVtcImpwZ1wiLFwicG5nXCIsXCJqcGVnXCJdLFhvPVwiYWRkLWVuZHBvaW50c1wiLFpvPVwicmVtb3ZlLWVuZHBvaW50c1wiLGVhPVwic2lwLWNhbGwtdHJhbnNmZXJcIjtmdW5jdGlvbiB0YSgpe3JldHVybiFuYSgpJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cubmF2aWdhdG9yJiZ3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudD93aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDpcIlwifWZ1bmN0aW9uIG5hKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLnByb2R1Y3QmJlwiUmVhY3ROYXRpdmVcIj09PW5hdmlnYXRvci5wcm9kdWN0fWZ1bmN0aW9uIHJhKCl7cmV0dXJuIG5hdmlnYXRvciYmbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyYmbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWF9ZnVuY3Rpb24gaWEoKXtyZXR1cm4hIShuYXZpZ2F0b3ImJm5hdmlnYXRvci5tZWRpYURldmljZXMmJm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0RGlzcGxheU1lZGlhKSYmKGZ1bmN0aW9uKGUsdCl7aWYoIWV8fCF0KXJldHVybiEwO3N3aXRjaChlKXtjYXNlXCJDaHJvbWVcIjpyZXR1cm4gdC5tYWpvcj49NzU7Y2FzZVwiU2FmYXJpXCI6cmV0dXJuIFJUQ1J0cFRyYW5zY2VpdmVyLnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eShcImN1cnJlbnREaXJlY3Rpb25cIikmJiEoMTM9PT10Lm1ham9yJiYwPT09dC5taW5vciYmMD09PXQucG9pbnQpO2Nhc2VcIkZpcmVmb3hcIjpyZXR1cm4gdC5tYWpvcj49Njd9cmV0dXJuITB9KHBhKCksaGEoKSl8fG5hKCkpfWZ1bmN0aW9uIG9hKCl7aWYobmEoKSlyZXR1cm4hMTtpZighZG9jdW1lbnQpcmV0dXJuITE7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtyZXR1cm4hIWUucmVxdWVzdEZ1bGxzY3JlZW58fCEhZS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbn12YXIgYWE9ZnVuY3Rpb24oKXt0cnl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKSx0PW51bGwhPWUuZ2V0Q29udGV4dChcIndlYmdsMlwiKTtyZXR1cm4gZS5yZW1vdmUoKSx0fWNhdGNoKGUpe3JldHVybiExfX0oKTtmdW5jdGlvbiBzYSgpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdJiZhcmd1bWVudHNbMF07cmV0dXJuIW5hKCkmJighIWFhJiYoZT9mdW5jdGlvbigpe2lmKGRhKCkpcmV0dXJuITE7cmV0dXJuW1wiQ2hyb21lXCIsXCJGaXJlZm94XCJdLmluY2x1ZGVzKHBhKCkpfSgpOmZ1bmN0aW9uKCl7aWYoZGEoKSlyZXR1cm4hMTt2YXIgZT1wYSgpO2lmKFwiU2FmYXJpXCI9PT1lKXt2YXIgdD1tYSgpO2lmKHQubWFqb3I8MTV8fDE1PT09dC5tYWpvciYmdC5taW5vcjw0KXJldHVybiExfWlmKFwiQ2hyb21lXCI9PT1lKXtyZXR1cm4gZmEoKS5tYWpvcj49Nzd9aWYoXCJGaXJlZm94XCI9PT1lKXtyZXR1cm4geWEoKS5tYWpvcj49OTd9cmV0dXJuW1wiQ2hyb21lXCIsXCJGaXJlZm94XCIsXCJTYWZhcmlcIl0uaW5jbHVkZXMoZSl9KCkpKX1mdW5jdGlvbiBjYSgpe2lmKG5hKCkpcmV0dXJuITE7aWYodWEoKSlyZXR1cm4hMTtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgQXVkaW9Xb3JrbGV0Tm9kZSlyZXR1cm4hMTtzd2l0Y2gocGEoKSl7Y2FzZVwiQ2hyb21lXCI6Y2FzZVwiRmlyZWZveFwiOnJldHVybiEwO2Nhc2VcIlNhZmFyaVwiOnZhciBlPWhhKCk7cmV0dXJuIGUubWFqb3I+MTd8fDE3PT09ZS5tYWpvciYmZS5taW5vcj49NH1yZXR1cm4hMX1mdW5jdGlvbiBsYSgpe3JldHVybiByYSgpJiYhZnVuY3Rpb24oKXt2YXIgZSx0PXBhKCk7aWYoIXRhKCkpcmV0dXJuITA7c3dpdGNoKHQpe2Nhc2VcIkNocm9tZVwiOnJldHVybihlPWZhKCkpLm1ham9yJiZlLm1ham9yPjAmJmUubWFqb3I8NzU7Y2FzZVwiRmlyZWZveFwiOnJldHVybihlPXlhKCkpLm1ham9yPDkxO2Nhc2VcIlNhZmFyaVwiOnJldHVybihlPW1hKCkpLm1ham9yPDEzfHwxMz09PWUubWFqb3ImJmUubWlub3I8MTtkZWZhdWx0OnJldHVybiEwfX0oKX1mdW5jdGlvbiB1YSgpe3JldHVybiB0YSgpLm1hdGNoKC9MaW51eDsgQW5kcm9pZC8pfWZ1bmN0aW9uIGRhKCl7dmFyIGUsdCxuPXRhKCkscj1uLm1hdGNoKC9NYWMvKSYmKCFuYSgpJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZudWxsIT09KGU9d2luZG93KSYmdm9pZCAwIT09ZSYmbnVsbCE9PSh0PWUubmF2aWdhdG9yKSYmdm9pZCAwIT09dCYmdC5tYXhUb3VjaFBvaW50cz93aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzOjApPj01O3JldHVybiEhKG4ubWF0Y2goL01vYmkvKXx8bi5tYXRjaCgvQW5kcm9pZC8pfHxyKXx8KCEhdGEoKS5tYXRjaCgvRGFpbHlBbmRcXC8vKXx8dm9pZCAwKX1mdW5jdGlvbiBwYSgpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpe3ZhciBlPXRhKCk7cmV0dXJuIHZhKCk/XCJTYWZhcmlcIjplLmluZGV4T2YoXCJFZGdlXCIpPi0xP1wiRWRnZVwiOmUubWF0Y2goL0Nocm9tZVxcLy8pP1wiQ2hyb21lXCI6ZS5pbmRleE9mKFwiU2FmYXJpXCIpPi0xfHxnYSgpP1wiU2FmYXJpXCI6ZS5pbmRleE9mKFwiRmlyZWZveFwiKT4tMT9cIkZpcmVmb3hcIjplLmluZGV4T2YoXCJNU0lFXCIpPi0xfHxlLmluZGV4T2YoXCIuTkVUXCIpPi0xP1wiSUVcIjpcIlVua25vd24gQnJvd3NlclwifX1mdW5jdGlvbiBoYSgpe3N3aXRjaChwYSgpKXtjYXNlXCJDaHJvbWVcIjpyZXR1cm4gZmEoKTtjYXNlXCJTYWZhcmlcIjpyZXR1cm4gbWEoKTtjYXNlXCJGaXJlZm94XCI6cmV0dXJuIHlhKCk7Y2FzZVwiRWRnZVwiOnJldHVybiBmdW5jdGlvbigpe3ZhciBlPTAsdD0wO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpe3ZhciBuPXRhKCkubWF0Y2goL0VkZ2VcXC8oXFxkKykuKFxcZCspLyk7aWYobil0cnl7ZT1wYXJzZUludChuWzFdKSx0PXBhcnNlSW50KG5bMl0pfWNhdGNoKGUpe319cmV0dXJue21ham9yOmUsbWlub3I6dH19KCl9fWZ1bmN0aW9uIGZhKCl7dmFyIGU9MCx0PTAsbj0wLHI9MCxpPSExO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpe3ZhciBvPXRhKCksYT1vLm1hdGNoKC9DaHJvbWVcXC8oXFxkKykuKFxcZCspLihcXGQrKS4oXFxkKykvKTtpZihhKXRyeXtlPXBhcnNlSW50KGFbMV0pLHQ9cGFyc2VJbnQoYVsyXSksbj1wYXJzZUludChhWzNdKSxyPXBhcnNlSW50KGFbNF0pLGk9by5pbmRleE9mKFwiT1BSL1wiKT4tMX1jYXRjaChlKXt9fXJldHVybnttYWpvcjplLG1pbm9yOnQsYnVpbGQ6bixwYXRjaDpyLG9wZXJhOml9fWZ1bmN0aW9uIHZhKCl7cmV0dXJuISF0YSgpLm1hdGNoKC9pUGFkfGlQaG9uZXxpUG9kL2kpJiZyYSgpfWZ1bmN0aW9uIGdhKCl7cmV0dXJuIHRhKCkuaW5kZXhPZihcIkFwcGxlV2ViS2l0LzYwNS4xLjE1XCIpPi0xfWZ1bmN0aW9uIG1hKCl7dmFyIGU9MCx0PTAsbj0wO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cpe3ZhciByPXRhKCkubWF0Y2goL1ZlcnNpb25cXC8oXFxkKykuKFxcZCspKC4oXFxkKykpPy8pO2lmKHIpdHJ5e2U9cGFyc2VJbnQoclsxXSksdD1wYXJzZUludChyWzJdKSxuPXBhcnNlSW50KHJbNF0pfWNhdGNoKGUpe31lbHNlKHZhKCl8fGdhKCkpJiYoZT0xNCx0PTAsbj0zKX1yZXR1cm57bWFqb3I6ZSxtaW5vcjp0LHBvaW50Om59fWZ1bmN0aW9uIHlhKCl7dmFyIGU9MCx0PTA7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyl7dmFyIG49dGEoKS5tYXRjaCgvRmlyZWZveFxcLyhcXGQrKS4oXFxkKykvKTtpZihuKXRyeXtlPXBhcnNlSW50KG5bMV0pLHQ9cGFyc2VJbnQoblsyXSl9Y2F0Y2goZSl7fX1yZXR1cm57bWFqb3I6ZSxtaW5vcjp0fX12YXIgX2E9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dCh0aGlzLGUpfXJldHVybiBvKGUsW3trZXk6XCJhZGRMaXN0ZW5lckZvck1lc3NhZ2VzRnJvbUNhbGxNYWNoaW5lXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe1koKX19LHtrZXk6XCJhZGRMaXN0ZW5lckZvck1lc3NhZ2VzRnJvbURhaWx5SnNcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7WSgpfX0se2tleTpcInNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuLHIpe1koKX19LHtrZXk6XCJzZW5kTWVzc2FnZVRvRGFpbHlKc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7WSgpfX0se2tleTpcInJlbW92ZUxpc3RlbmVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7WSgpfX1dKSxlfSgpO2Z1bmN0aW9uIGJhKGUsdCl7dmFyIG49T2JqZWN0LmtleXMoZSk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIHI9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTt0JiYocj1yLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KS5lbnVtZXJhYmxlfSkpKSxuLnB1c2guYXBwbHkobixyKX1yZXR1cm4gbn1mdW5jdGlvbiB3YShlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1udWxsIT1hcmd1bWVudHNbdF0/YXJndW1lbnRzW3RdOnt9O3QlMj9iYShPYmplY3QobiksITApLmZvckVhY2goKGZ1bmN0aW9uKHQpe2QoZSx0LG5bdF0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobikpOmJhKE9iamVjdChuKSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sdCkpfSkpfXJldHVybiBlfWZ1bmN0aW9uIGthKGUpe3ZhciB0PWZ1bmN0aW9uKCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIFJlZmxlY3R8fCFSZWZsZWN0LmNvbnN0cnVjdClyZXR1cm4hMTtpZihSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFByb3h5KXJldHVybiEwO3RyeXtyZXR1cm4gQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sW10sKGZ1bmN0aW9uKCl7fSkpKSwhMH1jYXRjaChlKXtyZXR1cm4hMX19KCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIG4scj11KGUpO2lmKHQpe3ZhciBpPXUodGhpcykuY29uc3RydWN0b3I7bj1SZWZsZWN0LmNvbnN0cnVjdChyLGFyZ3VtZW50cyxpKX1lbHNlIG49ci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIGwodGhpcyxuKX19dmFyIFNhPWZ1bmN0aW9uKCl7YyhuLF9hKTt2YXIgZT1rYShuKTtmdW5jdGlvbiBuKCl7dmFyIHI7cmV0dXJuIHQodGhpcyxuKSwocj1lLmNhbGwodGhpcykpLl93cmFwcGVkTGlzdGVuZXJzPXt9LHIuX21lc3NhZ2VDYWxsYmFja3M9e30scn1yZXR1cm4gbyhuLFt7a2V5OlwiYWRkTGlzdGVuZXJGb3JNZXNzYWdlc0Zyb21DYWxsTWFjaGluZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10aGlzLGk9ZnVuY3Rpb24oaSl7aWYoaS5kYXRhJiZcImlmcmFtZS1jYWxsLW1lc3NhZ2VcIj09PWkuZGF0YS53aGF0JiYoIWkuZGF0YS5jYWxsQ2xpZW50SWR8fGkuZGF0YS5jYWxsQ2xpZW50SWQ9PT10KSYmKCFpLmRhdGEuZnJvbXx8XCJtb2R1bGVcIiE9PWkuZGF0YS5mcm9tKSl7dmFyIG89d2Eoe30saS5kYXRhKTtpZihkZWxldGUgby5mcm9tLG8uY2FsbGJhY2tTdGFtcCYmci5fbWVzc2FnZUNhbGxiYWNrc1tvLmNhbGxiYWNrU3RhbXBdKXt2YXIgYT1vLmNhbGxiYWNrU3RhbXA7ci5fbWVzc2FnZUNhbGxiYWNrc1thXS5jYWxsKG4sbyksZGVsZXRlIHIuX21lc3NhZ2VDYWxsYmFja3NbYV19ZGVsZXRlIG8ud2hhdCxkZWxldGUgby5jYWxsYmFja1N0YW1wLGUuY2FsbChuLG8pfX07dGhpcy5fd3JhcHBlZExpc3RlbmVyc1tlXT1pLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGkpfX0se2tleTpcImFkZExpc3RlbmVyRm9yTWVzc2FnZXNGcm9tRGFpbHlKc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1mdW5jdGlvbihyKXt2YXIgaTtpZighKCFyLmRhdGF8fHIuZGF0YS53aGF0IT09JG98fCFyLmRhdGEuYWN0aW9ufHxyLmRhdGEuZnJvbSYmXCJtb2R1bGVcIiE9PXIuZGF0YS5mcm9tfHxyLmRhdGEuY2FsbENsaWVudElkJiZ0JiZyLmRhdGEuY2FsbENsaWVudElkIT09dHx8bnVsbCE9ciYmbnVsbCE9PShpPXIuZGF0YSkmJnZvaWQgMCE9PWkmJmkuY2FsbEZyYW1lSWQpKXt2YXIgbz1yLmRhdGE7ZS5jYWxsKG4sbyl9fTt0aGlzLl93cmFwcGVkTGlzdGVuZXJzW2VdPXIsd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIscil9fSx7a2V5Olwic2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4scil7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwidW5kZWZpbmVkIGNhbGxDbGllbnRJZC4gQXJlIHlvdSB0cnlpbmcgdG8gdXNlIGEgRGFpbHlDYWxsIGluc3RhbmNlIHByZXZpb3VzbHkgZGVzdHJveWVkP1wiKTt2YXIgaT13YSh7fSxlKTtpZihpLndoYXQ9JG8saS5mcm9tPVwibW9kdWxlXCIsaS5jYWxsQ2xpZW50SWQ9bix0KXt2YXIgbz1RKCk7dGhpcy5fbWVzc2FnZUNhbGxiYWNrc1tvXT10LGkuY2FsbGJhY2tTdGFtcD1vfXZhciBhPXI/ci5jb250ZW50V2luZG93OndpbmRvdyxzPXRoaXMuX2NhbGxNYWNoaW5lVGFyZ2V0T3JpZ2luKHIpO3MmJmEucG9zdE1lc3NhZ2UoaSxzKX19LHtrZXk6XCJzZW5kTWVzc2FnZVRvRGFpbHlKc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7ZS53aGF0PSRvLGUuY2FsbENsaWVudElkPXQsZS5mcm9tPVwiZW1iZWRkZWRcIix3aW5kb3cucG9zdE1lc3NhZ2UoZSx0aGlzLl90YXJnZXRPcmlnaW5Gcm9tV2luZG93TG9jYXRpb24oKSl9fSx7a2V5OlwicmVtb3ZlTGlzdGVuZXJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl93cmFwcGVkTGlzdGVuZXJzW2VdO3QmJih3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIix0KSxkZWxldGUgdGhpcy5fd3JhcHBlZExpc3RlbmVyc1tlXSl9fSx7a2V5OlwiZm9yd2FyZFBhY2thZ2VkTWVzc2FnZVRvQ2FsbE1hY2hpbmVcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIHI9d2Eoe30sZSk7ci5jYWxsQ2xpZW50SWQ9bjt2YXIgaT10P3QuY29udGVudFdpbmRvdzp3aW5kb3csbz10aGlzLl9jYWxsTWFjaGluZVRhcmdldE9yaWdpbih0KTtvJiZpLnBvc3RNZXNzYWdlKHIsbyl9fSx7a2V5OlwiYWRkTGlzdGVuZXJGb3JQYWNrYWdlZE1lc3NhZ2VzRnJvbUNhbGxNYWNoaW5lXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1mdW5jdGlvbihuKXtpZihuLmRhdGEmJlwiaWZyYW1lLWNhbGwtbWVzc2FnZVwiPT09bi5kYXRhLndoYXQmJighbi5kYXRhLmNhbGxDbGllbnRJZHx8bi5kYXRhLmNhbGxDbGllbnRJZD09PXQpJiYoIW4uZGF0YS5mcm9tfHxcIm1vZHVsZVwiIT09bi5kYXRhLmZyb20pKXt2YXIgcj1uLmRhdGE7ZShyKX19O3JldHVybiB0aGlzLl93cmFwcGVkTGlzdGVuZXJzW2VdPW4sd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsbiksZX19LHtrZXk6XCJyZW1vdmVMaXN0ZW5lckZvclBhY2thZ2VkTWVzc2FnZXNGcm9tQ2FsbE1hY2hpbmVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl93cmFwcGVkTGlzdGVuZXJzW2VdO3QmJih3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIix0KSxkZWxldGUgdGhpcy5fd3JhcHBlZExpc3RlbmVyc1tlXSl9fSx7a2V5OlwiX2NhbGxNYWNoaW5lVGFyZ2V0T3JpZ2luXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/ZS5zcmM/bmV3IFVSTChlLnNyYykub3JpZ2luOnZvaWQgMDp0aGlzLl90YXJnZXRPcmlnaW5Gcm9tV2luZG93TG9jYXRpb24oKX19LHtrZXk6XCJfdGFyZ2V0T3JpZ2luRnJvbVdpbmRvd0xvY2F0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm5cImZpbGU6XCI9PT13aW5kb3cubG9jYXRpb24ucHJvdG9jb2w/XCIqXCI6d2luZG93LmxvY2F0aW9uLm9yaWdpbn19XSksbn0oKTtmdW5jdGlvbiBNYShlLHQpe3ZhciBuPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKHI9ci5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSksbi5wdXNoLmFwcGx5KG4scil9cmV0dXJuIG59ZnVuY3Rpb24gQ2EoZSl7dmFyIHQ9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbixyPXUoZSk7aWYodCl7dmFyIGk9dSh0aGlzKS5jb25zdHJ1Y3RvcjtuPVJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGkpfWVsc2Ugbj1yLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gbCh0aGlzLG4pfX12YXIgRWE9ZnVuY3Rpb24oKXtjKG4sX2EpO3ZhciBlPUNhKG4pO2Z1bmN0aW9uIG4oKXt2YXIgcjtyZXR1cm4gdCh0aGlzLG4pLHI9ZS5jYWxsKHRoaXMpLGdsb2JhbC5jYWxsTWFjaGluZVRvRGFpbHlKc0VtaXR0ZXI9Z2xvYmFsLmNhbGxNYWNoaW5lVG9EYWlseUpzRW1pdHRlcnx8bmV3IG0uRXZlbnRFbWl0dGVyLGdsb2JhbC5kYWlseUpzVG9DYWxsTWFjaGluZUVtaXR0ZXI9Z2xvYmFsLmRhaWx5SnNUb0NhbGxNYWNoaW5lRW1pdHRlcnx8bmV3IG0uRXZlbnRFbWl0dGVyLHIuX3dyYXBwZWRMaXN0ZW5lcnM9e30sci5fbWVzc2FnZUNhbGxiYWNrcz17fSxyfXJldHVybiBvKG4sW3trZXk6XCJhZGRMaXN0ZW5lckZvck1lc3NhZ2VzRnJvbUNhbGxNYWNoaW5lXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3RoaXMuX2FkZExpc3RlbmVyKGUsZ2xvYmFsLmNhbGxNYWNoaW5lVG9EYWlseUpzRW1pdHRlcix0LG4sXCJyZWNlaXZlZCBjYWxsIG1hY2hpbmUgbWVzc2FnZVwiKX19LHtrZXk6XCJhZGRMaXN0ZW5lckZvck1lc3NhZ2VzRnJvbURhaWx5SnNcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dGhpcy5fYWRkTGlzdGVuZXIoZSxnbG9iYWwuZGFpbHlKc1RvQ2FsbE1hY2hpbmVFbWl0dGVyLHQsbixcInJlY2VpdmVkIGRhaWx5LWpzIG1lc3NhZ2VcIil9fSx7a2V5Olwic2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3RoaXMuX3NlbmRNZXNzYWdlKGUsZ2xvYmFsLmRhaWx5SnNUb0NhbGxNYWNoaW5lRW1pdHRlcixuLHQsXCJzZW5kaW5nIG1lc3NhZ2UgdG8gY2FsbCBtYWNoaW5lXCIpfX0se2tleTpcInNlbmRNZXNzYWdlVG9EYWlseUpzXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLl9zZW5kTWVzc2FnZShlLGdsb2JhbC5jYWxsTWFjaGluZVRvRGFpbHlKc0VtaXR0ZXIsdCxudWxsLFwic2VuZGluZyBtZXNzYWdlIHRvIGRhaWx5LWpzXCIpfX0se2tleTpcInJlbW92ZUxpc3RlbmVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5fd3JhcHBlZExpc3RlbmVyc1tlXTt0JiYoZ2xvYmFsLmNhbGxNYWNoaW5lVG9EYWlseUpzRW1pdHRlci5yZW1vdmVMaXN0ZW5lcihcIm1lc3NhZ2VcIix0KSxnbG9iYWwuZGFpbHlKc1RvQ2FsbE1hY2hpbmVFbWl0dGVyLnJlbW92ZUxpc3RlbmVyKFwibWVzc2FnZVwiLHQpLGRlbGV0ZSB0aGlzLl93cmFwcGVkTGlzdGVuZXJzW2VdKX19LHtrZXk6XCJfYWRkTGlzdGVuZXJcIix2YWx1ZTpmdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvPXRoaXMsYT1mdW5jdGlvbih0KXtpZih0LmNhbGxDbGllbnRJZD09PW4pe2lmKHQuY2FsbGJhY2tTdGFtcCYmby5fbWVzc2FnZUNhbGxiYWNrc1t0LmNhbGxiYWNrU3RhbXBdKXt2YXIgaT10LmNhbGxiYWNrU3RhbXA7by5fbWVzc2FnZUNhbGxiYWNrc1tpXS5jYWxsKHIsdCksZGVsZXRlIG8uX21lc3NhZ2VDYWxsYmFja3NbaV19ZS5jYWxsKHIsdCl9fTt0aGlzLl93cmFwcGVkTGlzdGVuZXJzW2VdPWEsdC5hZGRMaXN0ZW5lcihcIm1lc3NhZ2VcIixhKX19LHtrZXk6XCJfc2VuZE1lc3NhZ2VcIix2YWx1ZTpmdW5jdGlvbihlLHQsbixyLGkpe3ZhciBvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0Kyspe3ZhciBuPW51bGwhPWFyZ3VtZW50c1t0XT9hcmd1bWVudHNbdF06e307dCUyP01hKE9iamVjdChuKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZChlLHQsblt0XSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhuKSk6TWEoT2JqZWN0KG4pKS5mb3JFYWNoKChmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iobix0KSl9KSl9cmV0dXJuIGV9KHt9LGUpO2lmKG8uY2FsbENsaWVudElkPW4scil7dmFyIGE9USgpO3RoaXMuX21lc3NhZ2VDYWxsYmFja3NbYV09cixvLmNhbGxiYWNrU3RhbXA9YX10LmVtaXQoXCJtZXNzYWdlXCIsbyl9fV0pLG59KCksVGE9XCJyZXBsYWNlXCIsUGE9XCJzaGFsbG93LW1lcmdlXCIsT2E9W1RhLFBhXTt2YXIgQWE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9LHI9bi5kYXRhLGk9bi5tZXJnZVN0cmF0ZWd5LG89dm9pZCAwPT09aT9UYTppO3QodGhpcyxlKSxlLl92YWxpZGF0ZU1lcmdlU3RyYXRlZ3kobyksZS5fdmFsaWRhdGVEYXRhKHIsbyksdGhpcy5tZXJnZVN0cmF0ZWd5PW8sdGhpcy5kYXRhPXJ9cmV0dXJuIG8oZSxbe2tleTpcImlzTm9PcFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGUuaXNOb09wVXBkYXRlKHRoaXMuZGF0YSx0aGlzLm1lcmdlU3RyYXRlZ3kpfX1dLFt7a2V5OlwiaXNOb09wVXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gMD09PU9iamVjdC5rZXlzKGUpLmxlbmd0aCYmdD09PVBhfX0se2tleTpcIl92YWxpZGF0ZU1lcmdlU3RyYXRlZ3lcIix2YWx1ZTpmdW5jdGlvbihlKXtpZighT2EuaW5jbHVkZXMoZSkpdGhyb3cgRXJyb3IoXCJVbnJlY29nbml6ZWQgbWVyZ2VTdHJhdGVneSBwcm92aWRlZC4gT3B0aW9ucyBhcmU6IFtcIi5jb25jYXQoT2EsXCJdXCIpKX19LHtrZXk6XCJfdmFsaWRhdGVEYXRhXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtpZighZnVuY3Rpb24oZSl7aWYobnVsbD09ZXx8XCJvYmplY3RcIiE9PW4oZSkpcmV0dXJuITE7dmFyIHQ9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO3JldHVybiBudWxsPT10fHx0PT09T2JqZWN0LnByb3RvdHlwZX0oZSkpdGhyb3cgRXJyb3IoXCJNZWV0aW5nIHNlc3Npb24gZGF0YSBtdXN0IGJlIGEgcGxhaW4gKG1hcC1saWtlKSBvYmplY3RcIik7dmFyIHI7dHJ5e2lmKHI9SlNPTi5zdHJpbmdpZnkoZSksdD09PVRhKXt2YXIgaT1KU09OLnBhcnNlKHIpO0QoaSxlKXx8Y29uc29sZS53YXJuKFwiVGhlIG1lZXRpbmcgc2Vzc2lvbiBkYXRhIHByb3ZpZGVkIHdpbGwgYmUgbW9kaWZpZWQgd2hlbiBzZXJpYWxpemVkLlwiLGksZSl9ZWxzZSBpZih0PT09UGEpZm9yKHZhciBvIGluIGUpaWYoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwoZSxvKSYmdm9pZCAwIT09ZVtvXSl7dmFyIGE9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlW29dKSk7RChlW29dLGEpfHxjb25zb2xlLndhcm4oXCJBdCBsZWFzdCBvbmUga2V5IGluIHRoZSBtZWV0aW5nIHNlc3Npb24gZGF0YSBwcm92aWRlZCB3aWxsIGJlIG1vZGlmaWVkIHdoZW4gc2VyaWFsaXplZC5cIixhLGVbb10pfX1jYXRjaChlKXt0aHJvdyBFcnJvcihcIk1lZXRpbmcgc2Vzc2lvbiBkYXRhIG11c3QgYmUgc2VyaWFsaXphYmxlIHRvIEpTT046IFwiLmNvbmNhdChlKSl9aWYoci5sZW5ndGg+Sm8pdGhyb3cgRXJyb3IoXCJNZWV0aW5nIHNlc3Npb24gZGF0YSBpcyB0b28gbGFyZ2UgKFwiLmNvbmNhdChyLmxlbmd0aCxcIiBjaGFyYWN0ZXJzKS4gTWF4aW11bSBzaXplIHN1cHBwb3J0ZWQgaXMgXCIpLmNvbmNhdChKbyxcIi5cIikpfX1dKSxlfSgpO2Z1bmN0aW9uIGphKGUsdCxuKXtyZXR1cm4gamE9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKT9SZWZsZWN0LmNvbnN0cnVjdC5iaW5kKCk6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPVtudWxsXTtyLnB1c2guYXBwbHkocix0KTt2YXIgaT1uZXcoRnVuY3Rpb24uYmluZC5hcHBseShlLHIpKTtyZXR1cm4gbiYmcyhpLG4ucHJvdG90eXBlKSxpfSxqYS5hcHBseShudWxsLGFyZ3VtZW50cyl9ZnVuY3Rpb24gTGEoZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgTWFwP25ldyBNYXA6dm9pZCAwO3JldHVybiBMYT1mdW5jdGlvbihlKXtpZihudWxsPT09ZXx8KG49ZSwtMT09PUZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwobikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikpKXJldHVybiBlO3ZhciBuO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpO2lmKHZvaWQgMCE9PXQpe2lmKHQuaGFzKGUpKXJldHVybiB0LmdldChlKTt0LnNldChlLHIpfWZ1bmN0aW9uIHIoKXtyZXR1cm4gamEoZSxhcmd1bWVudHMsdSh0aGlzKS5jb25zdHJ1Y3Rvcil9cmV0dXJuIHIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTpyLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHMocixlKX0sTGEoZSl9ZnVuY3Rpb24geGEoZSl7dmFyIHQ9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUmVmbGVjdHx8IVJlZmxlY3QuY29uc3RydWN0KXJldHVybiExO2lmKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pcmV0dXJuITE7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgUHJveHkpcmV0dXJuITA7dHJ5e3JldHVybiBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbixbXSwoZnVuY3Rpb24oKXt9KSkpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbixyPXUoZSk7aWYodCl7dmFyIGk9dSh0aGlzKS5jb25zdHJ1Y3RvcjtuPVJlZmxlY3QuY29uc3RydWN0KHIsYXJndW1lbnRzLGkpfWVsc2Ugbj1yLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gbCh0aGlzLG4pfX1mdW5jdGlvbiBJYShlKXt2YXIgdCxuPW51bGw9PT0odD13aW5kb3cuX2RhaWx5KXx8dm9pZCAwPT09dD92b2lkIDA6dC5wZW5kaW5ncztpZihuKXt2YXIgcj1uLmluZGV4T2YoZSk7LTEhPT1yJiZuLnNwbGljZShyLDEpfX12YXIgRGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4pe3QodGhpcyxlKSx0aGlzLl9jdXJyZW50TG9hZD1udWxsLHRoaXMuX2NhbGxDbGllbnRJZD1ufXJldHVybiBvKGUsW3trZXk6XCJsb2FkXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30scj1hcmd1bWVudHMubGVuZ3RoPjE/YXJndW1lbnRzWzFdOnZvaWQgMCxpPWFyZ3VtZW50cy5sZW5ndGg+Mj9hcmd1bWVudHNbMl06dm9pZCAwO2lmKHRoaXMubG9hZGVkKXJldHVybiB3aW5kb3cuX2RhaWx5Lmluc3RhbmNlc1t0aGlzLl9jYWxsQ2xpZW50SWRdLmNhbGxNYWNoaW5lLnJlc2V0KCksdm9pZCByKCEwKTtlPXRoaXMuX2NhbGxDbGllbnRJZCx3aW5kb3cuX2RhaWx5LnBlbmRpbmdzLnB1c2goZSksdGhpcy5fY3VycmVudExvYWQmJnRoaXMuX2N1cnJlbnRMb2FkLmNhbmNlbCgpLHRoaXMuX2N1cnJlbnRMb2FkPW5ldyBOYShuLChmdW5jdGlvbigpe3IoITEpfSksKGZ1bmN0aW9uKGUsbil7bnx8SWEodC5fY2FsbENsaWVudElkKSxpKGUsbil9KSksdGhpcy5fY3VycmVudExvYWQuc3RhcnQoKX19LHtrZXk6XCJjYW5jZWxcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2N1cnJlbnRMb2FkJiZ0aGlzLl9jdXJyZW50TG9hZC5jYW5jZWwoKSxJYSh0aGlzLl9jYWxsQ2xpZW50SWQpfX0se2tleTpcImxvYWRlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jdXJyZW50TG9hZCYmdGhpcy5fY3VycmVudExvYWQuc3VjY2VlZGVkfX1dKSxlfSgpLE5hPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciBuPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxyPWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHNbMV06dm9pZCAwLGk9YXJndW1lbnRzLmxlbmd0aD4yP2FyZ3VtZW50c1syXTp2b2lkIDA7dCh0aGlzLGUpLHRoaXMuX2F0dGVtcHRzUmVtYWluaW5nPTMsdGhpcy5fY3VycmVudEF0dGVtcHQ9bnVsbCx0aGlzLl9kYWlseUNvbmZpZz1uLHRoaXMuX3N1Y2Nlc3NDYWxsYmFjaz1yLHRoaXMuX2ZhaWx1cmVDYWxsYmFjaz1pfXJldHVybiBvKGUsW3trZXk6XCJzdGFydFwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighdGhpcy5fY3VycmVudEF0dGVtcHQpe3RoaXMuX2N1cnJlbnRBdHRlbXB0PW5ldyBCYSh0aGlzLl9kYWlseUNvbmZpZyx0aGlzLl9zdWNjZXNzQ2FsbGJhY2ssKGZ1bmN0aW9uIHQobil7ZS5fY3VycmVudEF0dGVtcHQuY2FuY2VsbGVkfHwoZS5fYXR0ZW1wdHNSZW1haW5pbmctLSxlLl9mYWlsdXJlQ2FsbGJhY2sobixlLl9hdHRlbXB0c1JlbWFpbmluZz4wKSxlLl9hdHRlbXB0c1JlbWFpbmluZzw9MHx8c2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLl9jdXJyZW50QXR0ZW1wdC5jYW5jZWxsZWR8fChlLl9jdXJyZW50QXR0ZW1wdD1uZXcgQmEoZS5fZGFpbHlDb25maWcsZS5fc3VjY2Vzc0NhbGxiYWNrLHQpLGUuX2N1cnJlbnRBdHRlbXB0LnN0YXJ0KCkpfSksM2UzKSl9KSksdGhpcy5fY3VycmVudEF0dGVtcHQuc3RhcnQoKX19fSx7a2V5OlwiY2FuY2VsXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9jdXJyZW50QXR0ZW1wdCYmdGhpcy5fY3VycmVudEF0dGVtcHQuY2FuY2VsKCl9fSx7a2V5OlwiY2FuY2VsbGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2N1cnJlbnRBdHRlbXB0JiZ0aGlzLl9jdXJyZW50QXR0ZW1wdC5jYW5jZWxsZWR9fSx7a2V5Olwic3VjY2VlZGVkXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2N1cnJlbnRBdHRlbXB0JiZ0aGlzLl9jdXJyZW50QXR0ZW1wdC5zdWNjZWVkZWR9fV0pLGV9KCksRmE9ZnVuY3Rpb24oKXtjKG4sTGEoRXJyb3IpKTt2YXIgZT14YShuKTtmdW5jdGlvbiBuKCl7cmV0dXJuIHQodGhpcyxuKSxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gbyhuKX0oKSxSYT0yZTQsQmE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4scixpKXt0KHRoaXMsZSksdGhpcy5fbG9hZEF0dGVtcHRJbXBsPW5hKCl8fCFuLmF2b2lkRXZhbD9uZXcgVWEobixyLGkpOm5ldyBWYShuLHIsaSl9dmFyIG47cmV0dXJuIG8oZSxbe2tleTpcInN0YXJ0XCIsdmFsdWU6KG49aCgoZnVuY3Rpb24qKCl7cmV0dXJuIHRoaXMuX2xvYWRBdHRlbXB0SW1wbC5zdGFydCgpfSkpLGZ1bmN0aW9uKCl7cmV0dXJuIG4uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJjYW5jZWxcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2xvYWRBdHRlbXB0SW1wbC5jYW5jZWwoKX19LHtrZXk6XCJjYW5jZWxsZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbG9hZEF0dGVtcHRJbXBsLmNhbmNlbGxlZH19LHtrZXk6XCJzdWNjZWVkZWRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbG9hZEF0dGVtcHRJbXBsLnN1Y2NlZWRlZH19XSksZX0oKSxVYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUobixyLGkpe3QodGhpcyxlKSx0aGlzLmNhbmNlbGxlZD0hMSx0aGlzLnN1Y2NlZWRlZD0hMSx0aGlzLl9uZXR3b3JrVGltZWRPdXQ9ITEsdGhpcy5fbmV0d29ya1RpbWVvdXQ9bnVsbCx0aGlzLl9pb3NDYWNoZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgaU9TQ2FsbE9iamVjdEJ1bmRsZUNhY2hlJiZpT1NDYWxsT2JqZWN0QnVuZGxlQ2FjaGUsdGhpcy5fcmVmZXRjaEhlYWRlcnM9bnVsbCx0aGlzLl9kYWlseUNvbmZpZz1uLHRoaXMuX3N1Y2Nlc3NDYWxsYmFjaz1yLHRoaXMuX2ZhaWx1cmVDYWxsYmFjaz1pfXZhciBuLHIsaSxhO3JldHVybiBvKGUsW3trZXk6XCJzdGFydFwiLHZhbHVlOihhPWgoKGZ1bmN0aW9uKigpe3ZhciBlPVgodGhpcy5fZGFpbHlDb25maWcpOyEoeWllbGQgdGhpcy5fdHJ5TG9hZEZyb21JT1NDYWNoZShlKSkmJnRoaXMuX2xvYWRGcm9tTmV0d29yayhlKX0pKSxmdW5jdGlvbigpe3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiY2FuY2VsXCIsdmFsdWU6ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodGhpcy5fbmV0d29ya1RpbWVvdXQpLHRoaXMuY2FuY2VsbGVkPSEwfX0se2tleTpcIl90cnlMb2FkRnJvbUlPU0NhY2hlXCIsdmFsdWU6KGk9aCgoZnVuY3Rpb24qKGUpe2lmKCF0aGlzLl9pb3NDYWNoZSlyZXR1cm4hMTt0cnl7dmFyIHQ9eWllbGQgdGhpcy5faW9zQ2FjaGUuZ2V0KGUpO3JldHVybiEhdGhpcy5jYW5jZWxsZWR8fCEhdCYmKHQuY29kZT8oRnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOycrdC5jb2RlKSgpLHRoaXMuc3VjY2VlZGVkPSEwLHRoaXMuX3N1Y2Nlc3NDYWxsYmFjaygpLCEwKToodGhpcy5fcmVmZXRjaEhlYWRlcnM9dC5yZWZldGNoSGVhZGVycywhMSkpfWNhdGNoKGUpe3JldHVybiExfX0pKSxmdW5jdGlvbihlKXtyZXR1cm4gaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcIl9sb2FkRnJvbU5ldHdvcmtcIix2YWx1ZToocj1oKChmdW5jdGlvbiooZSl7dmFyIHQ9dGhpczt0aGlzLl9uZXR3b3JrVGltZW91dD1zZXRUaW1lb3V0KChmdW5jdGlvbigpe3QuX25ldHdvcmtUaW1lZE91dD0hMCx0Ll9mYWlsdXJlQ2FsbGJhY2soe21zZzpcIlRpbWVkIG91dCAoPlwiLmNvbmNhdChSYSxcIiBtcykgd2hlbiBsb2FkaW5nIGNhbGwgb2JqZWN0IGJ1bmRsZSBcIikuY29uY2F0KGUpLHR5cGU6XCJ0aW1lb3V0XCJ9KX0pLFJhKTt0cnl7dmFyIG49dGhpcy5fcmVmZXRjaEhlYWRlcnM/e2hlYWRlcnM6dGhpcy5fcmVmZXRjaEhlYWRlcnN9Ont9LHI9eWllbGQgZmV0Y2goZSxuKTtpZihjbGVhclRpbWVvdXQodGhpcy5fbmV0d29ya1RpbWVvdXQpLHRoaXMuY2FuY2VsbGVkfHx0aGlzLl9uZXR3b3JrVGltZWRPdXQpdGhyb3cgbmV3IEZhO3ZhciBpPXlpZWxkIHRoaXMuX2dldEJ1bmRsZUNvZGVGcm9tUmVzcG9uc2UoZSxyKTtpZih0aGlzLmNhbmNlbGxlZCl0aHJvdyBuZXcgRmE7RnVuY3Rpb24oJ1widXNlIHN0cmljdFwiOycraSkoKSx0aGlzLl9pb3NDYWNoZSYmdGhpcy5faW9zQ2FjaGUuc2V0KGUsaSxyLmhlYWRlcnMpLHRoaXMuc3VjY2VlZGVkPSEwLHRoaXMuX3N1Y2Nlc3NDYWxsYmFjaygpfWNhdGNoKHQpe2lmKGNsZWFyVGltZW91dCh0aGlzLl9uZXR3b3JrVGltZW91dCksdCBpbnN0YW5jZW9mIEZhfHx0aGlzLmNhbmNlbGxlZHx8dGhpcy5fbmV0d29ya1RpbWVkT3V0KXJldHVybjt0aGlzLl9mYWlsdXJlQ2FsbGJhY2soe21zZzpcIkZhaWxlZCB0byBsb2FkIGNhbGwgb2JqZWN0IGJ1bmRsZSBcIi5jb25jYXQoZSxcIjogXCIpLmNvbmNhdCh0KSx0eXBlOnQubWVzc2FnZX0pfX0pKSxmdW5jdGlvbihlKXtyZXR1cm4gci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcIl9nZXRCdW5kbGVDb2RlRnJvbVJlc3BvbnNlXCIsdmFsdWU6KG49aCgoZnVuY3Rpb24qKGUsdCl7aWYodC5vaylyZXR1cm4geWllbGQgdC50ZXh0KCk7aWYodGhpcy5faW9zQ2FjaGUmJjMwND09PXQuc3RhdHVzKXJldHVybih5aWVsZCB0aGlzLl9pb3NDYWNoZS5yZW5ldyhlLHQuaGVhZGVycykpLmNvZGU7dGhyb3cgbmV3IEVycm9yKFwiUmVjZWl2ZWQgXCIuY29uY2F0KHQuc3RhdHVzLFwiIHJlc3BvbnNlXCIpKX0pKSxmdW5jdGlvbihlLHQpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfV0pLGV9KCksVmE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4scixpKXt0KHRoaXMsZSksdGhpcy5jYW5jZWxsZWQ9ITEsdGhpcy5zdWNjZWVkZWQ9ITEsdGhpcy5fZGFpbHlDb25maWc9bix0aGlzLl9zdWNjZXNzQ2FsbGJhY2s9cix0aGlzLl9mYWlsdXJlQ2FsbGJhY2s9aSx0aGlzLl9hdHRlbXB0SWQ9USgpLHRoaXMuX25ldHdvcmtUaW1lb3V0PW51bGwsdGhpcy5fc2NyaXB0RWxlbWVudD1udWxsfXJldHVybiBvKGUsW3trZXk6XCJzdGFydFwiLHZhbHVlOmZ1bmN0aW9uKCl7d2luZG93Ll9kYWlseUNhbGxNYWNoaW5lTG9hZFdhaXRsaXN0fHwod2luZG93Ll9kYWlseUNhbGxNYWNoaW5lTG9hZFdhaXRsaXN0PW5ldyBTZXQpO3ZhciBlPVgodGhpcy5fZGFpbHlDb25maWcpO1wib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50P1widW5kZWZpbmVkXCI6bihkb2N1bWVudCkpP3RoaXMuX3N0YXJ0TG9hZGluZyhlKTp0aGlzLl9mYWlsdXJlQ2FsbGJhY2soe21zZzpcIkNhbGwgb2JqZWN0IGJ1bmRsZSBtdXN0IGJlIGxvYWRlZCBpbiBhIERPTS93ZWIgY29udGV4dFwiLHR5cGU6XCJtaXNzaW5nIGNvbnRleHRcIn0pfX0se2tleTpcImNhbmNlbFwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fc3RvcExvYWRpbmcoKSx0aGlzLmNhbmNlbGxlZD0hMH19LHtrZXk6XCJfc3RhcnRMb2FkaW5nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLl9zaWduVXBGb3JDYWxsTWFjaGluZUxvYWRXYWl0bGlzdCgpLHRoaXMuX25ldHdvcmtUaW1lb3V0PXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5fc3RvcExvYWRpbmcoKSx0Ll9mYWlsdXJlQ2FsbGJhY2soe21zZzpcIlRpbWVkIG91dCAoPlwiLmNvbmNhdChSYSxcIiBtcykgd2hlbiBsb2FkaW5nIGNhbGwgb2JqZWN0IGJ1bmRsZSBcIikuY29uY2F0KGUpLHR5cGU6XCJ0aW1lb3V0XCJ9KX0pLFJhKTt2YXIgbj1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0scj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO3RoaXMuX3NjcmlwdEVsZW1lbnQ9cixyLm9ubG9hZD1mdW5jdGlvbigpe3QuX3N0b3BMb2FkaW5nKCksdC5zdWNjZWVkZWQ9ITAsdC5fc3VjY2Vzc0NhbGxiYWNrKCl9LHIub25lcnJvcj1mdW5jdGlvbihlKXt0Ll9zdG9wTG9hZGluZygpLHQuX2ZhaWx1cmVDYWxsYmFjayh7bXNnOlwiRmFpbGVkIHRvIGxvYWQgY2FsbCBvYmplY3QgYnVuZGxlIFwiLmNvbmNhdChlLnRhcmdldC5zcmMpLHR5cGU6ZS5tZXNzYWdlfSl9LHIuc3JjPWUsbi5hcHBlbmRDaGlsZChyKX19LHtrZXk6XCJfc3RvcExvYWRpbmdcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX3dpdGhkcmF3RnJvbUNhbGxNYWNoaW5lTG9hZFdhaXRsaXN0KCksY2xlYXJUaW1lb3V0KHRoaXMuX25ldHdvcmtUaW1lb3V0KSx0aGlzLl9zY3JpcHRFbGVtZW50JiYodGhpcy5fc2NyaXB0RWxlbWVudC5vbmxvYWQ9bnVsbCx0aGlzLl9zY3JpcHRFbGVtZW50Lm9uZXJyb3I9bnVsbCl9fSx7a2V5OlwiX3NpZ25VcEZvckNhbGxNYWNoaW5lTG9hZFdhaXRsaXN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt3aW5kb3cuX2RhaWx5Q2FsbE1hY2hpbmVMb2FkV2FpdGxpc3QuYWRkKHRoaXMuX2F0dGVtcHRJZCl9fSx7a2V5OlwiX3dpdGhkcmF3RnJvbUNhbGxNYWNoaW5lTG9hZFdhaXRsaXN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt3aW5kb3cuX2RhaWx5Q2FsbE1hY2hpbmVMb2FkV2FpdGxpc3QuZGVsZXRlKHRoaXMuX2F0dGVtcHRJZCl9fV0pLGV9KCksSmE9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiEwPT09emEoZS5sb2NhbCx0LG4pfSwkYT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGUubG9jYWwuc3RyZWFtcyYmZS5sb2NhbC5zdHJlYW1zW3RdJiZlLmxvY2FsLnN0cmVhbXNbdF0uc3RyZWFtJiZlLmxvY2FsLnN0cmVhbXNbdF0uc3RyZWFtW1wiZ2V0XCIuY29uY2F0KFwidmlkZW9cIj09PW4/XCJWaWRlb1wiOlwiQXVkaW9cIixcIlRyYWNrc1wiKV0oKVswXX0scWE9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9V2EoZSx0LG4scik7cmV0dXJuIGkmJmkucGVuZGluZ1RyYWNrfSx6YT1mdW5jdGlvbihlLHQsbil7aWYoIWUpcmV0dXJuITE7dmFyIHI9ZnVuY3Rpb24oZSl7c3dpdGNoKGUpe2Nhc2VcImF2YXRhclwiOnJldHVybiEwO2Nhc2VcInN0YWdlZFwiOnJldHVybiBlO2RlZmF1bHQ6cmV0dXJuISFlfX0saT1lLnB1YmxpYy5zdWJzY3JpYmVkVHJhY2tzO3JldHVybiBpJiZpW3RdPy0xPT09W1wiY2FtLWF1ZGlvXCIsXCJjYW0tdmlkZW9cIixcInNjcmVlbi12aWRlb1wiLFwic2NyZWVuLWF1ZGlvXCIsXCJybXBBdWRpb1wiLFwicm1wVmlkZW9cIl0uaW5kZXhPZihuKSYmaVt0XS5jdXN0b20/WyEwLFwic3RhZ2VkXCJdLmluY2x1ZGVzKGlbdF0uY3VzdG9tKT9yKGlbdF0uY3VzdG9tKTpyKGlbdF0uY3VzdG9tW25dKTpyKGlbdF1bbl0pOiFpfHxyKGkuQUxMKX0sV2E9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9T2JqZWN0LnZhbHVlcyhlLnN0cmVhbXN8fHt9KS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiBlLnBhcnRpY2lwYW50SWQ9PT10JiZlLnR5cGU9PT1uJiZlLnBlbmRpbmdUcmFjayYmZS5wZW5kaW5nVHJhY2sua2luZD09PXJ9KSkuc29ydCgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IERhdGUodC5zdGFydHRpbWUpLW5ldyBEYXRlKGUuc3RhcnR0aW1lKX0pKTtyZXR1cm4gaSYmaVswXX0sSGE9ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmxvY2FsLnB1YmxpYy5jdXN0b21UcmFja3M7aWYobiYmblt0XSlyZXR1cm4gblt0XS50cmFja307ZnVuY3Rpb24gR2EoZSx0KXtmb3IodmFyIG49dC5nZXRTdGF0ZSgpLHI9MCxpPVtcImNhbVwiLFwic2NyZWVuXCJdO3I8aS5sZW5ndGg7cisrKWZvcih2YXIgbz1pW3JdLGE9MCxzPVtcInZpZGVvXCIsXCJhdWRpb1wiXTthPHMubGVuZ3RoO2ErKyl7dmFyIGM9c1thXSxsPVwiY2FtXCI9PT1vP2M6XCJzY3JlZW5cIi5jb25jYXQoYy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStjLnNsaWNlKDEpKSx1PWUudHJhY2tzW2xdO2lmKHUpe3ZhciBkPWUubG9jYWw/JGEobixvLGMpOnFhKG4sZS5zZXNzaW9uX2lkLG8sYyk7XCJwbGF5YWJsZVwiPT09dS5zdGF0ZSYmKHUudHJhY2s9ZCksdS5wZXJzaXN0ZW50VHJhY2s9ZH19fWZ1bmN0aW9uIFFhKGUsdCl7dHJ5e3ZhciBuPXQuZ2V0U3RhdGUoKTtmb3IodmFyIHIgaW4gZS50cmFja3MpaWYoIVlhKHIpKXt2YXIgaT1lLnRyYWNrc1tyXS5raW5kO2lmKGkpe3ZhciBvPWUudHJhY2tzW3JdO2lmKG8pe3ZhciBhPWUubG9jYWw/SGEobixyKTpxYShuLGUuc2Vzc2lvbl9pZCxyLGkpO1wicGxheWFibGVcIj09PW8uc3RhdGUmJihlLnRyYWNrc1tyXS50cmFjaz1hKSxvLnBlcnNpc3RlbnRUcmFjaz1hfX1lbHNlIGNvbnNvbGUuZXJyb3IoXCJ1bmtub3duIHR5cGUgZm9yIGN1c3RvbSB0cmFja1wiKX19Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihlKX19ZnVuY3Rpb24gWWEoZSl7cmV0dXJuW1widmlkZW9cIixcImF1ZGlvXCIsXCJzY3JlZW5WaWRlb1wiLFwic2NyZWVuQXVkaW9cIl0uaW5jbHVkZXMoZSl9ZnVuY3Rpb24gS2EoZSx0LG4pe3ZhciByPW4uZ2V0U3RhdGUoKTtpZihlLmxvY2FsKXtpZihlLmF1ZGlvKXRyeXtlLmF1ZGlvVHJhY2s9ci5sb2NhbC5zdHJlYW1zLmNhbS5zdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXSxlLmF1ZGlvVHJhY2t8fChlLmF1ZGlvPSExKX1jYXRjaChlKXt9aWYoZS52aWRlbyl0cnl7ZS52aWRlb1RyYWNrPXIubG9jYWwuc3RyZWFtcy5jYW0uc3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF0sZS52aWRlb1RyYWNrfHwoZS52aWRlbz0hMSl9Y2F0Y2goZSl7fWlmKGUuc2NyZWVuKXRyeXtlLnNjcmVlblZpZGVvVHJhY2s9ci5sb2NhbC5zdHJlYW1zLnNjcmVlbi5zdHJlYW0uZ2V0VmlkZW9UcmFja3MoKVswXSxlLnNjcmVlbkF1ZGlvVHJhY2s9ci5sb2NhbC5zdHJlYW1zLnNjcmVlbi5zdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXSxlLnNjcmVlblZpZGVvVHJhY2t8fGUuc2NyZWVuQXVkaW9UcmFja3x8KGUuc2NyZWVuPSExKX1jYXRjaChlKXt9fWVsc2V7dmFyIGk9ITA7dHJ5e3ZhciBvPXIucGFydGljaXBhbnRzW2Uuc2Vzc2lvbl9pZF07byYmby5wdWJsaWMmJm8ucHVibGljLnJ0Y1R5cGUmJlwicGVlci10by1wZWVyXCI9PT1vLnB1YmxpYy5ydGNUeXBlLmltcGwmJm8ucHJpdmF0ZSYmIVtcImNvbm5lY3RlZFwiLFwiY29tcGxldGVkXCJdLmluY2x1ZGVzKG8ucHJpdmF0ZS5wZWVyaW5nU3RhdGUpJiYoaT0hMSl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihlKX1pZighaSlyZXR1cm4gZS5hdWRpbz0hMSxlLmF1ZGlvVHJhY2s9ITEsZS52aWRlbz0hMSxlLnZpZGVvVHJhY2s9ITEsZS5zY3JlZW49ITEsdm9pZChlLnNjcmVlblRyYWNrPSExKTt0cnl7ci5zdHJlYW1zO2lmKGUuYXVkaW8mJkphKHIsZS5zZXNzaW9uX2lkLFwiY2FtLWF1ZGlvXCIpKXt2YXIgYT1xYShyLGUuc2Vzc2lvbl9pZCxcImNhbVwiLFwiYXVkaW9cIik7YSYmKHQmJnQuYXVkaW9UcmFjayYmdC5hdWRpb1RyYWNrLmlkPT09YS5pZD9lLmF1ZGlvVHJhY2s9YTphLm11dGVkfHwoZS5hdWRpb1RyYWNrPWEpKSxlLmF1ZGlvVHJhY2t8fChlLmF1ZGlvPSExKX1pZihlLnZpZGVvJiZKYShyLGUuc2Vzc2lvbl9pZCxcImNhbS12aWRlb1wiKSl7dmFyIHM9cWEocixlLnNlc3Npb25faWQsXCJjYW1cIixcInZpZGVvXCIpO3MmJih0JiZ0LnZpZGVvVHJhY2smJnQudmlkZW9UcmFjay5pZD09PXMuaWQ/ZS52aWRlb1RyYWNrPXM6cy5tdXRlZHx8KGUudmlkZW9UcmFjaz1zKSksZS52aWRlb1RyYWNrfHwoZS52aWRlbz0hMSl9aWYoZS5zY3JlZW4mJkphKHIsZS5zZXNzaW9uX2lkLFwic2NyZWVuLWF1ZGlvXCIpKXt2YXIgYz1xYShyLGUuc2Vzc2lvbl9pZCxcInNjcmVlblwiLFwiYXVkaW9cIik7YyYmKHQmJnQuc2NyZWVuQXVkaW9UcmFjayYmdC5zY3JlZW5BdWRpb1RyYWNrLmlkPT09Yy5pZD9lLnNjcmVlbkF1ZGlvVHJhY2s9YzpjLm11dGVkfHwoZS5zY3JlZW5BdWRpb1RyYWNrPWMpKX1pZihlLnNjcmVlbiYmSmEocixlLnNlc3Npb25faWQsXCJzY3JlZW4tdmlkZW9cIikpe3ZhciBsPXFhKHIsZS5zZXNzaW9uX2lkLFwic2NyZWVuXCIsXCJ2aWRlb1wiKTtsJiYodCYmdC5zY3JlZW5WaWRlb1RyYWNrJiZ0LnNjcmVlblZpZGVvVHJhY2suaWQ9PT1sLmlkP2Uuc2NyZWVuVmlkZW9UcmFjaz1sOmwubXV0ZWR8fChlLnNjcmVlblZpZGVvVHJhY2s9bCkpfWUuc2NyZWVuVmlkZW9UcmFja3x8ZS5zY3JlZW5BdWRpb1RyYWNrfHwoZS5zY3JlZW49ITEpfWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoXCJ1bmV4cGVjdGVkIGVycm9yIG1hdGNoaW5nIHVwIHRyYWNrc1wiLGUpfX19ZnVuY3Rpb24gWGEoZSx0KXt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgU3ltYm9sJiZlW1N5bWJvbC5pdGVyYXRvcl18fGVbXCJAQGl0ZXJhdG9yXCJdO2lmKCFuKXtpZihBcnJheS5pc0FycmF5KGUpfHwobj1mdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybjtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gWmEoZSx0KTt2YXIgbj1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkuc2xpY2UoOCwtMSk7XCJPYmplY3RcIj09PW4mJmUuY29uc3RydWN0b3ImJihuPWUuY29uc3RydWN0b3IubmFtZSk7aWYoXCJNYXBcIj09PW58fFwiU2V0XCI9PT1uKXJldHVybiBBcnJheS5mcm9tKGUpO2lmKFwiQXJndW1lbnRzXCI9PT1ufHwvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSlyZXR1cm4gWmEoZSx0KX0oZSkpfHx0JiZlJiZcIm51bWJlclwiPT10eXBlb2YgZS5sZW5ndGgpe24mJihlPW4pO3ZhciByPTAsaT1mdW5jdGlvbigpe307cmV0dXJue3M6aSxuOmZ1bmN0aW9uKCl7cmV0dXJuIHI+PWUubGVuZ3RoP3tkb25lOiEwfTp7ZG9uZTohMSx2YWx1ZTplW3IrK119fSxlOmZ1bmN0aW9uKGUpe3Rocm93IGV9LGY6aX19dGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpfXZhciBvLGE9ITAscz0hMTtyZXR1cm57czpmdW5jdGlvbigpe249bi5jYWxsKGUpfSxuOmZ1bmN0aW9uKCl7dmFyIGU9bi5uZXh0KCk7cmV0dXJuIGE9ZS5kb25lLGV9LGU6ZnVuY3Rpb24oZSl7cz0hMCxvPWV9LGY6ZnVuY3Rpb24oKXt0cnl7YXx8bnVsbD09bi5yZXR1cm58fG4ucmV0dXJuKCl9ZmluYWxseXtpZihzKXRocm93IG99fX19ZnVuY3Rpb24gWmEoZSx0KXsobnVsbD09dHx8dD5lLmxlbmd0aCkmJih0PWUubGVuZ3RoKTtmb3IodmFyIG49MCxyPW5ldyBBcnJheSh0KTtuPHQ7bisrKXJbbl09ZVtuXTtyZXR1cm4gcn12YXIgZXM9bmV3IE1hcCx0cz1udWxsO2Z1bmN0aW9uIG5zKGUsdCl7dmFyIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighbil7aWYoQXJyYXkuaXNBcnJheShlKXx8KG49ZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm47aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIHJzKGUsdCk7dmFyIG49T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO1wiT2JqZWN0XCI9PT1uJiZlLmNvbnN0cnVjdG9yJiYobj1lLmNvbnN0cnVjdG9yLm5hbWUpO2lmKFwiTWFwXCI9PT1ufHxcIlNldFwiPT09bilyZXR1cm4gQXJyYXkuZnJvbShlKTtpZihcIkFyZ3VtZW50c1wiPT09bnx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpcmV0dXJuIHJzKGUsdCl9KGUpKXx8dCYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXtuJiYoZT1uKTt2YXIgcj0wLGk9ZnVuY3Rpb24oKXt9O3JldHVybntzOmksbjpmdW5jdGlvbigpe3JldHVybiByPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtyKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOml9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgbyxhPSEwLHM9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXtuPW4uY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPW4ubmV4dCgpO3JldHVybiBhPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3M9ITAsbz1lfSxmOmZ1bmN0aW9uKCl7dHJ5e2F8fG51bGw9PW4ucmV0dXJufHxuLnJldHVybigpfWZpbmFsbHl7aWYocyl0aHJvdyBvfX19fWZ1bmN0aW9uIHJzKGUsdCl7KG51bGw9PXR8fHQ+ZS5sZW5ndGgpJiYodD1lLmxlbmd0aCk7Zm9yKHZhciBuPTAscj1uZXcgQXJyYXkodCk7bjx0O24rKylyW25dPWVbbl07cmV0dXJuIHJ9dmFyIGlzPW5ldyBNYXAsb3M9bnVsbDtmdW5jdGlvbiBhcyhlKXtjcygpP2Z1bmN0aW9uKGUpe2VzLmhhcyhlKXx8KGVzLnNldChlLHt9KSxuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKS50aGVuKChmdW5jdGlvbih0KXtlcy5oYXMoZSkmJihlcy5nZXQoZSkubGFzdERldmljZXNTdHJpbmc9SlNPTi5zdHJpbmdpZnkodCksdHN8fCh0cz1mdW5jdGlvbigpe3ZhciBlPWgoKGZ1bmN0aW9uKigpe3ZhciBlLHQ9eWllbGQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCksbj1YYShlcy5rZXlzKCkpO3RyeXtmb3Iobi5zKCk7IShlPW4ubigpKS5kb25lOyl7dmFyIHI9ZS52YWx1ZSxpPUpTT04uc3RyaW5naWZ5KHQpO2khPT1lcy5nZXQocikubGFzdERldmljZXNTdHJpbmcmJihlcy5nZXQocikubGFzdERldmljZXNTdHJpbmc9aSxyKHQpKX19Y2F0Y2goZSl7bi5lKGUpfWZpbmFsbHl7bi5mKCl9fSkpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KCksbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5hZGRFdmVudExpc3RlbmVyKFwiZGV2aWNlY2hhbmdlXCIsdHMpKSl9KSkuY2F0Y2goKGZ1bmN0aW9uKCl7fSkpKX0oZSk6ZnVuY3Rpb24oZSl7aXMuaGFzKGUpfHwoaXMuc2V0KGUse30pLG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpLnRoZW4oKGZ1bmN0aW9uKHQpe2lzLmhhcyhlKSYmKGlzLmdldChlKS5sYXN0RGV2aWNlc1N0cmluZz1KU09OLnN0cmluZ2lmeSh0KSxvc3x8KG9zPXNldEludGVydmFsKGgoKGZ1bmN0aW9uKigpe3ZhciBlLHQ9eWllbGQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCksbj1ucyhpcy5rZXlzKCkpO3RyeXtmb3Iobi5zKCk7IShlPW4ubigpKS5kb25lOyl7dmFyIHI9ZS52YWx1ZSxpPUpTT04uc3RyaW5naWZ5KHQpO2khPT1pcy5nZXQocikubGFzdERldmljZXNTdHJpbmcmJihpcy5nZXQocikubGFzdERldmljZXNTdHJpbmc9aSxyKHQpKX19Y2F0Y2goZSl7bi5lKGUpfWZpbmFsbHl7bi5mKCl9fSkpLDNlMykpKX0pKSl9KGUpfWZ1bmN0aW9uIHNzKGUpe2NzKCk/ZnVuY3Rpb24oZSl7ZXMuaGFzKGUpJiYoZXMuZGVsZXRlKGUpLDA9PT1lcy5zaXplJiZ0cyYmKG5hdmlnYXRvci5tZWRpYURldmljZXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRldmljZWNoYW5nZVwiLHRzKSx0cz1udWxsKSl9KGUpOmZ1bmN0aW9uKGUpe2lzLmhhcyhlKSYmKGlzLmRlbGV0ZShlKSwwPT09aXMuc2l6ZSYmb3MmJihjbGVhckludGVydmFsKG9zKSxvcz1udWxsKSl9KGUpfWZ1bmN0aW9uIGNzKCl7dmFyIGU7cmV0dXJuIG5hKCl8fHZvaWQgMCE9PShudWxsPT09KGU9bmF2aWdhdG9yLm1lZGlhRGV2aWNlcyl8fHZvaWQgMD09PWU/dm9pZCAwOmUub25kZXZpY2VjaGFuZ2UpfXZhciBscz1uZXcgU2V0O2Z1bmN0aW9uIHVzKGUsdCl7dmFyIG49dC5pc0xvY2FsU2NyZWVuVmlkZW87cmV0dXJuIGUmJlwibGl2ZVwiPT09ZS5yZWFkeVN0YXRlJiYhZnVuY3Rpb24oZSx0KXtyZXR1cm4oIXQuaXNMb2NhbFNjcmVlblZpZGVvfHxcIkNocm9tZVwiIT09cGEoKSkmJmUubXV0ZWQmJiFscy5oYXMoZS5pZCl9KGUse2lzTG9jYWxTY3JlZW5WaWRlbzpufSl9dmFyIGRzPVtcInJlc3VsdFwiXSxwcz1bXCJwcmVzZXJ2ZUlmcmFtZVwiXTtmdW5jdGlvbiBocyhlLHQpe3ZhciBuPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciByPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKHI9ci5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSksbi5wdXNoLmFwcGx5KG4scil9cmV0dXJuIG59ZnVuY3Rpb24gZnMoZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49bnVsbCE9YXJndW1lbnRzW3RdP2FyZ3VtZW50c1t0XTp7fTt0JTI/aHMoT2JqZWN0KG4pLCEwKS5mb3JFYWNoKChmdW5jdGlvbih0KXtkKGUsdCxuW3RdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG4pKTpocyhPYmplY3QobikpLmZvckVhY2goKGZ1bmN0aW9uKHQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuLHQpKX0pKX1yZXR1cm4gZX1mdW5jdGlvbiB2cyhlKXt2YXIgdD1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBSZWZsZWN0fHwhUmVmbGVjdC5jb25zdHJ1Y3QpcmV0dXJuITE7aWYoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSlyZXR1cm4hMTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBQcm94eSlyZXR1cm4hMDt0cnl7cmV0dXJuIEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLFtdLChmdW5jdGlvbigpe30pKSksITB9Y2F0Y2goZSl7cmV0dXJuITF9fSgpO3JldHVybiBmdW5jdGlvbigpe3ZhciBuLHI9dShlKTtpZih0KXt2YXIgaT11KHRoaXMpLmNvbnN0cnVjdG9yO249UmVmbGVjdC5jb25zdHJ1Y3Qocixhcmd1bWVudHMsaSl9ZWxzZSBuPXIuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBsKHRoaXMsbil9fWZ1bmN0aW9uIGdzKGUsdCl7dmFyIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmZVtTeW1ib2wuaXRlcmF0b3JdfHxlW1wiQEBpdGVyYXRvclwiXTtpZighbil7aWYoQXJyYXkuaXNBcnJheShlKXx8KG49ZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm47aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIG1zKGUsdCk7dmFyIG49T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpO1wiT2JqZWN0XCI9PT1uJiZlLmNvbnN0cnVjdG9yJiYobj1lLmNvbnN0cnVjdG9yLm5hbWUpO2lmKFwiTWFwXCI9PT1ufHxcIlNldFwiPT09bilyZXR1cm4gQXJyYXkuZnJvbShlKTtpZihcIkFyZ3VtZW50c1wiPT09bnx8L14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpcmV0dXJuIG1zKGUsdCl9KGUpKXx8dCYmZSYmXCJudW1iZXJcIj09dHlwZW9mIGUubGVuZ3RoKXtuJiYoZT1uKTt2YXIgcj0wLGk9ZnVuY3Rpb24oKXt9O3JldHVybntzOmksbjpmdW5jdGlvbigpe3JldHVybiByPj1lLmxlbmd0aD97ZG9uZTohMH06e2RvbmU6ITEsdmFsdWU6ZVtyKytdfX0sZTpmdW5jdGlvbihlKXt0aHJvdyBlfSxmOml9fXRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKX12YXIgbyxhPSEwLHM9ITE7cmV0dXJue3M6ZnVuY3Rpb24oKXtuPW4uY2FsbChlKX0sbjpmdW5jdGlvbigpe3ZhciBlPW4ubmV4dCgpO3JldHVybiBhPWUuZG9uZSxlfSxlOmZ1bmN0aW9uKGUpe3M9ITAsbz1lfSxmOmZ1bmN0aW9uKCl7dHJ5e2F8fG51bGw9PW4ucmV0dXJufHxuLnJldHVybigpfWZpbmFsbHl7aWYocyl0aHJvdyBvfX19fWZ1bmN0aW9uIG1zKGUsdCl7KG51bGw9PXR8fHQ+ZS5sZW5ndGgpJiYodD1lLmxlbmd0aCk7Zm9yKHZhciBuPTAscj1uZXcgQXJyYXkodCk7bjx0O24rKylyW25dPWVbbl07cmV0dXJuIHJ9dmFyIHlzPXt9O3ZhciBfcz1cInZpZGVvXCIsYnM9XCJ2b2ljZVwiLHdzPW5hKCk/e2RhdGE6e319OntkYXRhOnt9LHRvcG9sb2d5Olwibm9uZVwifSxrcz17cHJlc2VudDowLGhpZGRlbjowfSxTcz17bWF4Qml0cmF0ZTp7bWluOjFlNSxtYXg6MjVlNX0sbWF4RnJhbWVyYXRlOnttaW46MSxtYXg6MzB9LHNjYWxlUmVzb2x1dGlvbkRvd25CeTp7bWluOjEsbWF4Ojh9fSxNcz1PYmplY3Qua2V5cyhTcyksQ3M9W1wic3RhdGVcIixcInZvbHVtZVwiLFwic2ltdWxjYXN0RW5jb2RpbmdzXCJdLEVzPXthbmRyb2lkSW5DYWxsTm90aWZpY2F0aW9uOnt0aXRsZTpcInN0cmluZ1wiLHN1YnRpdGxlOlwic3RyaW5nXCIsaWNvbk5hbWU6XCJzdHJpbmdcIixkaXNhYmxlRm9yQ3VzdG9tT3ZlcnJpZGU6XCJib29sZWFuXCJ9LGRpc2FibGVBdXRvRGV2aWNlTWFuYWdlbWVudDp7YXVkaW86XCJib29sZWFuXCIsdmlkZW86XCJib29sZWFuXCJ9fSxUcz17aWQ6e2ljb25QYXRoOlwic3RyaW5nXCIsaWNvblBhdGhEYXJrTW9kZTpcInN0cmluZ1wiLGxhYmVsOlwic3RyaW5nXCIsdG9vbHRpcDpcInN0cmluZ1wiLHZpc3VhbFN0YXRlOlwiJ2RlZmF1bHQnIHwgJ3NpZGViYXItb3BlbicgfCAnYWN0aXZlJ1wifX0sUHM9e2lkOnthbGxvdzpcInN0cmluZ1wiLGNvbnRyb2xsZWRCeTpcIicqJyB8ICdvd25lcnMnIHwgc3RyaW5nW11cIixjc3A6XCJzdHJpbmdcIixpY29uVVJMOlwic3RyaW5nXCIsbGFiZWw6XCJzdHJpbmdcIixsb2FkaW5nOlwiJ2VhZ2VyJyB8ICdsYXp5J1wiLGxvY2F0aW9uOlwiJ21haW4nIHwgJ3NpZGViYXInXCIsbmFtZTpcInN0cmluZ1wiLHJlZmVycmVyUG9saWN5Olwic3RyaW5nXCIsc2FuZGJveDpcInN0cmluZ1wiLHNyYzpcInN0cmluZ1wiLHNyY2RvYzpcInN0cmluZ1wiLHNoYXJlZDpcInN0cmluZ1tdIHwgJ293bmVycycgfCBib29sZWFuXCJ9fSxPcz17Y3VzdG9tSW50ZWdyYXRpb25zOnt2YWxpZGF0ZTpacyxoZWxwOktzKCl9LGN1c3RvbVRyYXlCdXR0b25zOnt2YWxpZGF0ZTpYcyxoZWxwOlwiY3VzdG9tVHJheUJ1dHRvbnMgc2hvdWxkIGJlIGEgZGljdGlvbmFyeSBvZiB0aGUgdHlwZSBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoVHMpKX0sdXJsOnt2YWxpZGF0ZTpmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZX0saGVscDpcInVybCBzaG91bGQgYmUgYSBzdHJpbmdcIn0sYmFzZVVybDp7dmFsaWRhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9LGhlbHA6XCJiYXNlVXJsIHNob3VsZCBiZSBhIHN0cmluZ1wifSx0b2tlbjp7dmFsaWRhdGU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGV9LGhlbHA6XCJ0b2tlbiBzaG91bGQgYmUgYSBzdHJpbmdcIixxdWVyeVN0cmluZzpcInRcIn0sZGFpbHlDb25maWc6e3ZhbGlkYXRlOmZ1bmN0aW9uKGUsdCl7dHJ5e3JldHVybiB0LnZhbGlkYXRlRGFpbHlDb25maWcoZSksITB9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihcIkZhaWxlZCB0byB2YWxpZGF0ZSBkYWlseUNvbmZpZ1wiLGUpfXJldHVybiExfSxoZWxwOlwiVW5zdXBwb3J0ZWQgZGFpbHlDb25maWcuIENoZWNrIGVycm9yIGxvZ3MgZm9yIGRldGFpbGVkIGluZm8uXCJ9LHJlYWN0TmF0aXZlQ29uZmlnOnt2YWxpZGF0ZTpmdW5jdGlvbihlKXtyZXR1cm4gZWMoZSxFcyl9LGhlbHA6XCJyZWFjdE5hdGl2ZUNvbmZpZyBzaG91bGQgbG9vayBsaWtlIFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShFcyksXCIsIGFsbCBmaWVsZHMgb3B0aW9uYWxcIil9LGxhbmc6e3ZhbGlkYXRlOmZ1bmN0aW9uKGUpe3JldHVybltcImRhXCIsXCJkZVwiLFwiZW4tdXNcIixcImVuXCIsXCJlc1wiLFwiZmlcIixcImZyXCIsXCJpdFwiLFwianBcIixcImthXCIsXCJubFwiLFwibm9cIixcInBsXCIsXCJwdFwiLFwicHQtQlJcIixcInJ1XCIsXCJzdlwiLFwidHJcIixcInVzZXJcIl0uaW5jbHVkZXMoZSl9LGhlbHA6XCJsYW5ndWFnZSBub3Qgc3VwcG9ydGVkLiBPcHRpb25zIGFyZTogZGEsIGRlLCBlbi11cywgZW4sIGVzLCBmaSwgZnIsIGl0LCBqcCwga2EsIG5sLCBubywgcGwsIHB0LCBwdC1CUiwgcnUsIHN2LCB0ciwgdXNlclwifSx1c2VyTmFtZTohMCx1c2VyRGF0YTp7dmFsaWRhdGU6ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBKcyhlKSwhMH1jYXRjaChlKXtyZXR1cm4gY29uc29sZS5lcnJvcihlKSwhMX19LGhlbHA6XCJpbnZhbGlkIHVzZXJEYXRhIHR5cGUgcHJvdmlkZWRcIn0sc3RhcnRWaWRlb09mZjohMCxzdGFydEF1ZGlvT2ZmOiEwLGFsbG93TG9jYWxWaWRlbzohMCxhbGxvd0xvY2FsQXVkaW86ITAsYWN0aXZlU3BlYWtlck1vZGU6ITAsc2hvd0xlYXZlQnV0dG9uOiEwLHNob3dMb2NhbFZpZGVvOiEwLHNob3dQYXJ0aWNpcGFudHNCYXI6ITAsc2hvd0Z1bGxzY3JlZW5CdXR0b246ITAsc2hvd1VzZXJOYW1lQ2hhbmdlVUk6ITAsaWZyYW1lU3R5bGU6ITAsY3VzdG9tTGF5b3V0OiEwLGNzc0ZpbGU6ITAsY3NzVGV4dDohMCxib2R5Q2xhc3M6ITAsdmlkZW9Tb3VyY2U6e3ZhbGlkYXRlOmZ1bmN0aW9uKGUsdCl7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBlKXJldHVybiB0Ll9wcmVsb2FkQ2FjaGUuYWxsb3dMb2NhbFZpZGVvPWUsITA7dmFyIG47aWYoZSBpbnN0YW5jZW9mIE1lZGlhU3RyZWFtVHJhY2spdC5fc2hhcmVkVHJhY2tzLnZpZGVvVHJhY2s9ZSxuPXtjdXN0b21UcmFjazpIb307ZWxzZXtpZihkZWxldGUgdC5fc2hhcmVkVHJhY2tzLnZpZGVvVHJhY2ssXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJ2aWRlb1NvdXJjZSBtdXN0IGJlIGEgTWVkaWFTdHJlYW1UcmFjaywgYm9vbGVhbiwgb3IgYSBzdHJpbmdcIiksITE7bj17ZGV2aWNlSWQ6ZX19cmV0dXJuIHQuX3VwZGF0ZVByZWxvYWRDYWNoZUlucHV0U2V0dGluZ3Moe3ZpZGVvOntzZXR0aW5nczpufX0sITEpLCEwfX0sYXVkaW9Tb3VyY2U6e3ZhbGlkYXRlOmZ1bmN0aW9uKGUsdCl7aWYoXCJib29sZWFuXCI9PXR5cGVvZiBlKXJldHVybiB0Ll9wcmVsb2FkQ2FjaGUuYWxsb3dMb2NhbEF1ZGlvPWUsITA7dmFyIG47aWYoZSBpbnN0YW5jZW9mIE1lZGlhU3RyZWFtVHJhY2spdC5fc2hhcmVkVHJhY2tzLmF1ZGlvVHJhY2s9ZSxuPXtjdXN0b21UcmFjazpIb307ZWxzZXtpZihkZWxldGUgdC5fc2hhcmVkVHJhY2tzLmF1ZGlvVHJhY2ssXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJhdWRpb1NvdXJjZSBtdXN0IGJlIGEgTWVkaWFTdHJlYW1UcmFjaywgYm9vbGVhbiwgb3IgYSBzdHJpbmdcIiksITE7bj17ZGV2aWNlSWQ6ZX19cmV0dXJuIHQuX3VwZGF0ZVByZWxvYWRDYWNoZUlucHV0U2V0dGluZ3Moe2F1ZGlvOntzZXR0aW5nczpufX0sITEpLCEwfX0sc3Vic2NyaWJlVG9UcmFja3NBdXRvbWF0aWNhbGx5Ont2YWxpZGF0ZTpmdW5jdGlvbihlLHQpe3JldHVybiB0Ll9wcmVsb2FkQ2FjaGUuc3Vic2NyaWJlVG9UcmFja3NBdXRvbWF0aWNhbGx5PWUsITB9fSx0aGVtZTp7dmFsaWRhdGU6ZnVuY3Rpb24oZSl7dmFyIHQ9W1wiYWNjZW50XCIsXCJhY2NlbnRUZXh0XCIsXCJiYWNrZ3JvdW5kXCIsXCJiYWNrZ3JvdW5kQWNjZW50XCIsXCJiYXNlVGV4dFwiLFwiYm9yZGVyXCIsXCJtYWluQXJlYUJnXCIsXCJtYWluQXJlYUJnQWNjZW50XCIsXCJtYWluQXJlYVRleHRcIixcInN1cHBvcnRpdmVUZXh0XCJdLHI9ZnVuY3Rpb24oZSl7Zm9yKHZhciBuPTAscj1PYmplY3Qua2V5cyhlKTtuPHIubGVuZ3RoO24rKyl7dmFyIGk9cltuXTtpZighdC5pbmNsdWRlcyhpKSlyZXR1cm4gY29uc29sZS5lcnJvcigndW5zdXBwb3J0ZWQgY29sb3IgXCInLmNvbmNhdChpLCdcIi4gVmFsaWQgY29sb3JzOiAnKS5jb25jYXQodC5qb2luKFwiLCBcIikpKSwhMTtpZighZVtpXS5tYXRjaCgvXiNbMC05YS1mXXs2fXwjWzAtOWEtZl17M30kL2kpKXJldHVybiBjb25zb2xlLmVycm9yKFwiXCIuY29uY2F0KGksJyB0aGVtZSBjb2xvciBzaG91bGQgYmUgcHJvdmlkZWQgaW4gdmFsaWQgaGV4IGNvbG9yIGZvcm1hdC4gUmVjZWl2ZWQ6IFwiJykuY29uY2F0KGVbaV0sJ1wiJykpLCExfXJldHVybiEwfTtyZXR1cm5cIm9iamVjdFwiPT09bihlKSYmKFwibGlnaHRcImluIGUmJlwiZGFya1wiaW4gZXx8XCJjb2xvcnNcImluIGUpP1wibGlnaHRcImluIGUmJlwiZGFya1wiaW4gZT9cImNvbG9yc1wiaW4gZS5saWdodD9cImNvbG9yc1wiaW4gZS5kYXJrP3IoZS5saWdodC5jb2xvcnMpJiZyKGUuZGFyay5jb2xvcnMpOihjb25zb2xlLmVycm9yKCdEYXJrIHRoZW1lIGlzIG1pc3NpbmcgXCJjb2xvcnNcIiBwcm9wZXJ0eS4nLGUpLCExKTooY29uc29sZS5lcnJvcignTGlnaHQgdGhlbWUgaXMgbWlzc2luZyBcImNvbG9yc1wiIHByb3BlcnR5LicsZSksITEpOnIoZS5jb2xvcnMpOihjb25zb2xlLmVycm9yKCdUaGVtZSBtdXN0IGNvbnRhaW4gZWl0aGVyIGJvdGggXCJsaWdodFwiIGFuZCBcImRhcmtcIiBwcm9wZXJ0aWVzLCBvciBcImNvbG9yc1wiLicsZSksITEpfSxoZWxwOlwidW5zdXBwb3J0ZWQgdGhlbWUgY29uZmlndXJhdGlvbi4gQ2hlY2sgZXJyb3IgbG9ncyBmb3IgZGV0YWlsZWQgaW5mby5cIn0sbGF5b3V0Q29uZmlnOnt2YWxpZGF0ZTpmdW5jdGlvbihlKXtpZihcImdyaWRcImluIGUpe3ZhciB0PWUuZ3JpZDtpZihcIm1heFRpbGVzUGVyUGFnZVwiaW4gdCl7aWYoIU51bWJlci5pc0ludGVnZXIodC5tYXhUaWxlc1BlclBhZ2UpKXJldHVybiBjb25zb2xlLmVycm9yKFwiZ3JpZC5tYXhUaWxlc1BlclBhZ2Ugc2hvdWxkIGJlIGFuIGludGVnZXIuIFlvdSBwYXNzZWQgXCIuY29uY2F0KHQubWF4VGlsZXNQZXJQYWdlLFwiLlwiKSksITE7aWYodC5tYXhUaWxlc1BlclBhZ2U+NDkpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJncmlkLm1heFRpbGVzUGVyUGFnZSBjYW4ndCBiZSBsYXJnZXIgdGhhbiA0OSB3aXRob3V0IHNhY3JpZmljaW5nIGJyb3dzZXIgcGVyZm9ybWFuY2UuIFBsZWFzZSBjb250YWN0IHVzIGF0IGh0dHBzOi8vd3d3LmRhaWx5LmNvL2NvbnRhY3QgdG8gdGFsayBhYm91dCB5b3VyIHVzZSBjYXNlLlwiKSwhMX1pZihcIm1pblRpbGVzUGVyUGFnZVwiaW4gdCl7aWYoIU51bWJlci5pc0ludGVnZXIodC5taW5UaWxlc1BlclBhZ2UpKXJldHVybiBjb25zb2xlLmVycm9yKFwiZ3JpZC5taW5UaWxlc1BlclBhZ2Ugc2hvdWxkIGJlIGFuIGludGVnZXIuIFlvdSBwYXNzZWQgXCIuY29uY2F0KHQubWluVGlsZXNQZXJQYWdlLFwiLlwiKSksITE7aWYodC5taW5UaWxlc1BlclBhZ2U8MSlyZXR1cm4gY29uc29sZS5lcnJvcihcImdyaWQubWluVGlsZXNQZXJQYWdlIGNhbid0IGJlIGxvd2VyIHRoYW4gMS5cIiksITE7aWYoXCJtYXhUaWxlc1BlclBhZ2VcImluIHQmJnQubWluVGlsZXNQZXJQYWdlPnQubWF4VGlsZXNQZXJQYWdlKXJldHVybiBjb25zb2xlLmVycm9yKFwiZ3JpZC5taW5UaWxlc1BlclBhZ2UgY2FuJ3QgYmUgaGlnaGVyIHRoYW4gZ3JpZC5tYXhUaWxlc1BlclBhZ2UuXCIpLCExfX1yZXR1cm4hMH0saGVscDpcInVuc3VwcG9ydGVkIGxheW91dENvbmZpZy4gQ2hlY2sgZXJyb3IgbG9ncyBmb3IgZGV0YWlsZWQgaW5mby5cIn0scmVjZWl2ZVNldHRpbmdzOnt2YWxpZGF0ZTpmdW5jdGlvbihlKXtyZXR1cm4gJHMoZSx7YWxsb3dBbGxQYXJ0aWNpcGFudHNLZXk6ITF9KX0saGVscDpZcyh7YWxsb3dBbGxQYXJ0aWNpcGFudHNLZXk6ITF9KX0sc2VuZFNldHRpbmdzOnt2YWxpZGF0ZTpmdW5jdGlvbihlLHQpe3JldHVybiEhZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIHQudmFsaWRhdGVVcGRhdGVTZW5kU2V0dGluZ3MoZSksITB9Y2F0Y2goZSl7cmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gdmFsaWRhdGUgc2VuZCBzZXR0aW5nc1wiLGUpLCExfX0oZSx0KSYmKHQuX3ByZWxvYWRDYWNoZS5zZW5kU2V0dGluZ3M9ZSwhMCl9LGhlbHA6XCJJbnZhbGlkIHNlbmRTZXR0aW5ncyBwcm92aWRlZC4gQ2hlY2sgZXJyb3IgbG9ncyBmb3IgZGV0YWlsZWQgaW5mby5cIn0saW5wdXRTZXR0aW5nczp7dmFsaWRhdGU6ZnVuY3Rpb24oZSx0KXt2YXIgbjtyZXR1cm4hIXFzKGUpJiYodC5faW5wdXRTZXR0aW5nc3x8KHQuX2lucHV0U2V0dGluZ3M9e30pLHpzKGUsbnVsbD09PShuPXQucHJvcGVydGllcyl8fHZvaWQgMD09PW4/dm9pZCAwOm4uZGFpbHlDb25maWcsdC5fc2hhcmVkVHJhY2tzKSx0Ll91cGRhdGVQcmVsb2FkQ2FjaGVJbnB1dFNldHRpbmdzKGUsITApLCEwKX0saGVscDpRcygpfSxsYXlvdXQ6e3ZhbGlkYXRlOmZ1bmN0aW9uKGUpe3JldHVyblwiY3VzdG9tLXYxXCI9PT1lfHxcImJyb3dzZXJcIj09PWV8fFwibm9uZVwiPT09ZX0saGVscDonbGF5b3V0IG1heSBvbmx5IGJlIHNldCB0byBcImN1c3RvbS12MVwiJyxxdWVyeVN0cmluZzpcImxheW91dFwifSxlbWI6e3F1ZXJ5U3RyaW5nOlwiZW1iXCJ9LGVtYkhyZWY6e3F1ZXJ5U3RyaW5nOlwiZW1iSHJlZlwifSxkYWlseUpzVmVyc2lvbjp7cXVlcnlTdHJpbmc6XCJkYWlseUpzVmVyc2lvblwifSxwcm94eTp7cXVlcnlTdHJpbmc6XCJwcm94eVwifSxzdHJpY3RNb2RlOiEwLGFsbG93TXVsdGlwbGVDYWxsSW5zdGFuY2VzOiEwfSxBcz17c3R5bGVzOnt2YWxpZGF0ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQgaW4gZSlpZihcImNhbVwiIT09dCYmXCJzY3JlZW5cIiE9PXQpcmV0dXJuITE7aWYoZS5jYW0pZm9yKHZhciBuIGluIGUuY2FtKWlmKFwiZGl2XCIhPT1uJiZcInZpZGVvXCIhPT1uKXJldHVybiExO2lmKGUuc2NyZWVuKWZvcih2YXIgciBpbiBlLnNjcmVlbilpZihcImRpdlwiIT09ciYmXCJ2aWRlb1wiIT09cilyZXR1cm4hMTtyZXR1cm4hMH0saGVscDpcInN0eWxlcyBmb3JtYXQgc2hvdWxkIGJlIGEgc3Vic2V0IG9mOiB7IGNhbToge2Rpdjoge30sIHZpZGVvOiB7fX0sIHNjcmVlbjoge2Rpdjoge30sIHZpZGVvOiB7fX0gfVwifSxzZXRTdWJzY3JpYmVkVHJhY2tzOnt2YWxpZGF0ZTpmdW5jdGlvbihlLHQpe2lmKHQuX3ByZWxvYWRDYWNoZS5zdWJzY3JpYmVUb1RyYWNrc0F1dG9tYXRpY2FsbHkpcmV0dXJuITE7dmFyIG49WyEwLCExLFwic3RhZ2VkXCJdO2lmKG4uaW5jbHVkZXMoZSl8fCFuYSgpJiZcImF2YXRhclwiPT09ZSlyZXR1cm4hMDt2YXIgcj1bXCJhdWRpb1wiLFwidmlkZW9cIixcInNjcmVlbkF1ZGlvXCIsXCJzY3JlZW5WaWRlb1wiLFwicm1wQXVkaW9cIixcInJtcFZpZGVvXCJdO3JldHVybiBmdW5jdGlvbiBlKHQpe3ZhciBpPWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07Zm9yKHZhciBvIGluIHQpaWYoXCJjdXN0b21cIj09PW8pe2lmKCFuLmluY2x1ZGVzKHRbb10pJiYhZSh0W29dLCEwKSlyZXR1cm4hMX1lbHNle3ZhciBhPSFpJiYhci5pbmNsdWRlcyhvKSxzPSFuLmluY2x1ZGVzKHRbb10pO2lmKGF8fHMpcmV0dXJuITF9cmV0dXJuITB9KGUpfSxoZWxwOlwic2V0U3Vic2NyaWJlZFRyYWNrcyBjYW5ub3QgYmUgdXNlZCB3aGVuIHNldFN1YnNjcmliZVRvVHJhY2tzQXV0b21hdGljYWxseSBpcyBlbmFibGVkLCBhbmQgc2hvdWxkIGJlIG9mIHRoZSBmb3JtOiBcIitcInRydWVcIi5jb25jYXQobmEoKT9cIlwiOlwiIHwgJ2F2YXRhcidcIixcIiB8IGZhbHNlIHwgJ3N0YWdlZCcgfCB7IFthdWRpbzogdHJ1ZXxmYWxzZXwnc3RhZ2VkJ10sIFt2aWRlbzogdHJ1ZXxmYWxzZXwnc3RhZ2VkJ10sIFtzY3JlZW5BdWRpbzogdHJ1ZXxmYWxzZXwnc3RhZ2VkJ10sIFtzY3JlZW5WaWRlbzogdHJ1ZXxmYWxzZXwnc3RhZ2VkJ10gfVwiKX0sc2V0QXVkaW86ITAsc2V0VmlkZW86ITAsc2V0U2NyZWVuU2hhcmU6e3ZhbGlkYXRlOmZ1bmN0aW9uKGUpe3JldHVybiExPT09ZX0saGVscDpcInNldFNjcmVlblNoYXJlIG11c3QgYmUgZmFsc2UsIGFzIGl0J3Mgb25seSBtZWFudCBmb3Igc3RvcHBpbmcgcmVtb3RlIHBhcnRpY2lwYW50cycgc2NyZWVuIHNoYXJlc1wifSxlamVjdDohMCx1cGRhdGVQZXJtaXNzaW9uczp7dmFsaWRhdGU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj1PYmplY3QuZW50cmllcyhlKTt0PG4ubGVuZ3RoO3QrKyl7dmFyIHI9dihuW3RdLDIpLGk9clswXSxvPXJbMV07c3dpdGNoKGkpe2Nhc2VcImhhc1ByZXNlbmNlXCI6aWYoXCJib29sZWFuXCIhPXR5cGVvZiBvKXJldHVybiExO2JyZWFrO2Nhc2VcImNhblNlbmRcIjppZihvIGluc3RhbmNlb2YgU2V0fHxvIGluc3RhbmNlb2YgQXJyYXl8fEFycmF5LmlzQXJyYXkobykpe3ZhciBhLHM9W1widmlkZW9cIixcImF1ZGlvXCIsXCJzY3JlZW5WaWRlb1wiLFwic2NyZWVuQXVkaW9cIixcImN1c3RvbVZpZGVvXCIsXCJjdXN0b21BdWRpb1wiXSxjPWdzKG8pO3RyeXtmb3IoYy5zKCk7IShhPWMubigpKS5kb25lOyl7dmFyIGw9YS52YWx1ZTtpZighcy5pbmNsdWRlcyhsKSlyZXR1cm4hMX19Y2F0Y2goZSl7Yy5lKGUpfWZpbmFsbHl7Yy5mKCl9fWVsc2UgaWYoXCJib29sZWFuXCIhPXR5cGVvZiBvKXJldHVybiExOyhvIGluc3RhbmNlb2YgQXJyYXl8fEFycmF5LmlzQXJyYXkobykpJiYoZS5jYW5TZW5kPW5ldyBTZXQobykpO2JyZWFrO2Nhc2VcImNhbkFkbWluXCI6aWYobyBpbnN0YW5jZW9mIFNldHx8byBpbnN0YW5jZW9mIEFycmF5fHxBcnJheS5pc0FycmF5KG8pKXt2YXIgdSxkPVtcInBhcnRpY2lwYW50c1wiLFwic3RyZWFtaW5nXCIsXCJ0cmFuc2NyaXB0aW9uXCJdLHA9Z3Mobyk7dHJ5e2ZvcihwLnMoKTshKHU9cC5uKCkpLmRvbmU7KXt2YXIgaD11LnZhbHVlO2lmKCFkLmluY2x1ZGVzKGgpKXJldHVybiExfX1jYXRjaChlKXtwLmUoZSl9ZmluYWxseXtwLmYoKX19ZWxzZSBpZihcImJvb2xlYW5cIiE9dHlwZW9mIG8pcmV0dXJuITE7KG8gaW5zdGFuY2VvZiBBcnJheXx8QXJyYXkuaXNBcnJheShvKSkmJihlLmNhbkFkbWluPW5ldyBTZXQobykpO2JyZWFrO2RlZmF1bHQ6cmV0dXJuITF9fXJldHVybiEwfSxoZWxwOlwidXBkYXRlUGVybWlzc2lvbnMgY2FuIHRha2UgaGFzUHJlc2VuY2UsIGNhblNlbmQsIGFuZCBjYW5BZG1pbiBwZXJtaXNzaW9ucy4gaGFzUHJlc2VuY2UgbXVzdCBiZSBhIGJvb2xlYW4uIGNhblNlbmQgY2FuIGJlIGEgYm9vbGVhbiBvciBhbiBBcnJheSBvciBTZXQgb2YgbWVkaWEgdHlwZXMgKHZpZGVvLCBhdWRpbywgc2NyZWVuVmlkZW8sIHNjcmVlbkF1ZGlvLCBjdXN0b21WaWRlbywgY3VzdG9tQXVkaW8pLiBjYW5BZG1pbiBjYW4gYmUgYSBib29sZWFuIG9yIGFuIEFycmF5IG9yIFNldCBvZiBhZG1pbiB0eXBlcyAocGFydGljaXBhbnRzLCBzdHJlYW1pbmcsIHRyYW5zY3JpcHRpb24pLlwifX07UHJvbWlzZS5hbnl8fChQcm9taXNlLmFueT1mdW5jdGlvbigpe3ZhciBlPWgoKGZ1bmN0aW9uKihlKXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQsbil7dmFyIHI9W107ZS5mb3JFYWNoKChmdW5jdGlvbihpKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGkpLnRoZW4oKGZ1bmN0aW9uKGUpe3QoZSl9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpe3IucHVzaCh0KSxyLmxlbmd0aD09PWUubGVuZ3RoJiZuKHIpfSkpfSkpfSkpfSkpO3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpKTt2YXIganM9ZnVuY3Rpb24oKXtjKGVlLG0pO3ZhciByLGkscyxsLHUscCxmLGcseSxfLGIsdyxrLFMsTSxDLEUsVCxQLE8sQSxqLEwseCxJLE4sRixSLEIsVSxWLEosJCxxLHosVyxILFksWj12cyhlZSk7ZnVuY3Rpb24gZWUoZSl7dmFyIG4scixpLG89YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O2lmKHQodGhpcyxlZSksZChhKHI9Wi5jYWxsKHRoaXMpKSxcInN0YXJ0TGlzdGVuaW5nRm9yRGV2aWNlQ2hhbmdlc1wiLChmdW5jdGlvbigpe2FzKHIuaGFuZGxlRGV2aWNlQ2hhbmdlKX0pKSxkKGEociksXCJzdG9wTGlzdGVuaW5nRm9yRGV2aWNlQ2hhbmdlc1wiLChmdW5jdGlvbigpe3NzKHIuaGFuZGxlRGV2aWNlQ2hhbmdlKX0pKSxkKGEociksXCJoYW5kbGVEZXZpY2VDaGFuZ2VcIiwoZnVuY3Rpb24oZSl7ZT1lLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpfSkpLHIuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOlwiYXZhaWxhYmxlLWRldmljZXMtdXBkYXRlZFwiLGF2YWlsYWJsZURldmljZXM6ZX0pfSkpLGQoYShyKSxcImhhbmRsZU5hdGl2ZUFwcFN0YXRlQ2hhbmdlXCIsZnVuY3Rpb24oKXt2YXIgZT1oKChmdW5jdGlvbiooZSl7aWYoXCJkZXN0cm95ZWRcIj09PWUpcmV0dXJuIGNvbnNvbGUud2FybihcIkFwcCBoYXMgYmVlbiBkZXN0cm95ZWQgYmVmb3JlIGxlYXZpbmcgdGhlIG1lZXRpbmcuIENsZWFuaW5nIHVwIGFsbCB0aGUgcmVzb3VyY2VzIVwiKSx2b2lkKHlpZWxkIHIuZGVzdHJveSgpKTt2YXIgdD1cImFjdGl2ZVwiPT09ZTtyLmRpc2FibGVSZWFjdE5hdGl2ZUF1dG9EZXZpY2VNYW5hZ2VtZW50KFwidmlkZW9cIil8fCh0P3IuY2FtVW5tdXRlZEJlZm9yZUxvc2luZ05hdGl2ZUFjdGl2ZVN0YXRlJiZyLnNldExvY2FsVmlkZW8oITApOihyLmNhbVVubXV0ZWRCZWZvcmVMb3NpbmdOYXRpdmVBY3RpdmVTdGF0ZT1yLmxvY2FsVmlkZW8oKSxyLmNhbVVubXV0ZWRCZWZvcmVMb3NpbmdOYXRpdmVBY3RpdmVTdGF0ZSYmci5zZXRMb2NhbFZpZGVvKCExKSkpfSkpO3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSgpKSxkKGEociksXCJoYW5kbGVOYXRpdmVBdWRpb0ZvY3VzQ2hhbmdlXCIsKGZ1bmN0aW9uKGUpe3IuZGlzYWJsZVJlYWN0TmF0aXZlQXV0b0RldmljZU1hbmFnZW1lbnQoXCJhdWRpb1wiKXx8KHIuX2hhc05hdGl2ZUF1ZGlvRm9jdXM9ZSxyLnRvZ2dsZVBhcnRpY2lwYW50QXVkaW9CYXNlZE9uTmF0aXZlQXVkaW9Gb2N1cygpLHIuX2hhc05hdGl2ZUF1ZGlvRm9jdXM/ci5taWNVbm11dGVkQmVmb3JlTG9zaW5nTmF0aXZlQXVkaW9Gb2N1cyYmci5zZXRMb2NhbEF1ZGlvKCEwKTooci5taWNVbm11dGVkQmVmb3JlTG9zaW5nTmF0aXZlQXVkaW9Gb2N1cz1yLmxvY2FsQXVkaW8oKSxyLnNldExvY2FsQXVkaW8oITEpKSl9KSksZChhKHIpLFwiaGFuZGxlTmF0aXZlU3lzdGVtU2NyZWVuQ2FwdHVyZVN0b3BcIiwoZnVuY3Rpb24oKXtyLnN0b3BTY3JlZW5TaGFyZSgpfSkpLHIuc3RyaWN0TW9kZT12b2lkIDA9PT1vLnN0cmljdE1vZGV8fG8uc3RyaWN0TW9kZSxyLmFsbG93TXVsdGlwbGVDYWxsSW5zdGFuY2VzPW51bGwhPT0obj1vLmFsbG93TXVsdGlwbGVDYWxsSW5zdGFuY2VzKSYmdm9pZCAwIT09biYmbixPYmplY3Qua2V5cyh5cykubGVuZ3RoJiYoci5fbG9nRHVwbGljYXRlSW5zdGFuY2VBdHRlbXB0KCksIXIuYWxsb3dNdWx0aXBsZUNhbGxJbnN0YW5jZXMpKXtpZihyLnN0cmljdE1vZGUpdGhyb3cgbmV3IEVycm9yKFwiRHVwbGljYXRlIERhaWx5SWZyYW1lIGluc3RhbmNlcyBhcmUgbm90IGFsbG93ZWRcIik7Y29uc29sZS53YXJuKFwiVXNpbmcgc3RyaWN0TW9kZTogZmFsc2UgdG8gYWxsb3cgbXVsdGlwbGUgY2FsbCBpbnN0YW5jZXMgaXMgbm93IGRlcHJlY2F0ZWQuIFNldCBgYWxsb3dNdWx0aXBsZUNhbGxJbnN0YW5jZXM6IHRydWVgXCIpfWlmKHdpbmRvdy5fZGFpbHl8fCh3aW5kb3cuX2RhaWx5PXtwZW5kaW5nczpbXSxpbnN0YW5jZXM6e319KSxyLmNhbGxDbGllbnRJZD1RKCksaT1hKHIpLHlzW2kuY2FsbENsaWVudElkXT1pLHdpbmRvdy5fZGFpbHkuaW5zdGFuY2VzW3IuY2FsbENsaWVudElkXT17fSxyLl9zaGFyZWRUcmFja3M9e30sd2luZG93Ll9kYWlseS5pbnN0YW5jZXNbci5jYWxsQ2xpZW50SWRdLnRyYWNrcz1yLl9zaGFyZWRUcmFja3Msby5kYWlseUpzVmVyc2lvbj1lZS52ZXJzaW9uKCksci5faWZyYW1lPWUsci5fY2FsbE9iamVjdE1vZGU9XCJub25lXCI9PT1vLmxheW91dCYmIXIuX2lmcmFtZSxyLl9wcmVsb2FkQ2FjaGU9e3N1YnNjcmliZVRvVHJhY2tzQXV0b21hdGljYWxseTohMCxvdXRwdXREZXZpY2VJZDpudWxsLGlucHV0U2V0dGluZ3M6bnVsbCxzZW5kU2V0dGluZ3M6bnVsbCx2aWRlb1RyYWNrRm9yTmV0d29ya0Nvbm5lY3Rpdml0eVRlc3Q6bnVsbCx2aWRlb1RyYWNrRm9yQ29ubmVjdGlvblF1YWxpdHlUZXN0Om51bGx9LHZvaWQgMCE9PW8uc2hvd0xvY2FsVmlkZW8/ci5fY2FsbE9iamVjdE1vZGU/Y29uc29sZS5lcnJvcihcInNob3dMb2NhbFZpZGVvIGlzIG5vdCBhdmFpbGFibGUgaW4gY2FsbCBvYmplY3QgbW9kZVwiKTpyLl9zaG93TG9jYWxWaWRlbz0hIW8uc2hvd0xvY2FsVmlkZW86ci5fc2hvd0xvY2FsVmlkZW89ITAsdm9pZCAwIT09by5zaG93UGFydGljaXBhbnRzQmFyP3IuX2NhbGxPYmplY3RNb2RlP2NvbnNvbGUuZXJyb3IoXCJzaG93UGFydGljaXBhbnRzQmFyIGlzIG5vdCBhdmFpbGFibGUgaW4gY2FsbCBvYmplY3QgbW9kZVwiKTpyLl9zaG93UGFydGljaXBhbnRzQmFyPSEhby5zaG93UGFydGljaXBhbnRzQmFyOnIuX3Nob3dQYXJ0aWNpcGFudHNCYXI9ITAsdm9pZCAwIT09by5jdXN0b21JbnRlZ3JhdGlvbnM/ci5fY2FsbE9iamVjdE1vZGU/Y29uc29sZS5lcnJvcihcImN1c3RvbUludGVncmF0aW9ucyBpcyBub3QgYXZhaWxhYmxlIGluIGNhbGwgb2JqZWN0IG1vZGVcIik6ci5fY3VzdG9tSW50ZWdyYXRpb25zPW8uY3VzdG9tSW50ZWdyYXRpb25zOnIuX2N1c3RvbUludGVncmF0aW9ucz17fSx2b2lkIDAhPT1vLmN1c3RvbVRyYXlCdXR0b25zP3IuX2NhbGxPYmplY3RNb2RlP2NvbnNvbGUuZXJyb3IoXCJjdXN0b21UcmF5QnV0dG9ucyBpcyBub3QgYXZhaWxhYmxlIGluIGNhbGwgb2JqZWN0IG1vZGVcIik6ci5fY3VzdG9tVHJheUJ1dHRvbnM9by5jdXN0b21UcmF5QnV0dG9uczpyLl9jdXN0b21UcmF5QnV0dG9ucz17fSx2b2lkIDAhPT1vLmFjdGl2ZVNwZWFrZXJNb2RlP3IuX2NhbGxPYmplY3RNb2RlP2NvbnNvbGUuZXJyb3IoXCJhY3RpdmVTcGVha2VyTW9kZSBpcyBub3QgYXZhaWxhYmxlIGluIGNhbGwgb2JqZWN0IG1vZGVcIik6ci5fYWN0aXZlU3BlYWtlck1vZGU9ISFvLmFjdGl2ZVNwZWFrZXJNb2RlOnIuX2FjdGl2ZVNwZWFrZXJNb2RlPSExLG8ucmVjZWl2ZVNldHRpbmdzP3IuX2NhbGxPYmplY3RNb2RlP3IuX3JlY2VpdmVTZXR0aW5ncz1vLnJlY2VpdmVTZXR0aW5nczpjb25zb2xlLmVycm9yKFwicmVjZWl2ZVNldHRpbmdzIGlzIG9ubHkgYXZhaWxhYmxlIGluIGNhbGwgb2JqZWN0IG1vZGVcIik6ci5fcmVjZWl2ZVNldHRpbmdzPXt9LHIudmFsaWRhdGVQcm9wZXJ0aWVzKG8pLHIucHJvcGVydGllcz1mcyh7fSxvKSxyLl9pbnB1dFNldHRpbmdzfHwoci5faW5wdXRTZXR0aW5ncz17fSksci5fY2FsbE9iamVjdExvYWRlcj1yLl9jYWxsT2JqZWN0TW9kZT9uZXcgRGEoci5jYWxsQ2xpZW50SWQpOm51bGwsci5fY2FsbFN0YXRlPVpyLHIuX2lzUHJlcGFyaW5nVG9Kb2luPSExLHIuX2FjY2Vzc1N0YXRlPXthY2Nlc3M6cGl9LHIuX21lZXRpbmdTZXNzaW9uU3VtbWFyeT17fSxyLl9maW5hbFN1bW1hcnlPZlByZXZTZXNzaW9uPXt9LHIuX21lZXRpbmdTZXNzaW9uU3RhdGU9aWMod3Msci5fY2FsbE9iamVjdE1vZGUpLHIuX25hdGl2ZUluQ2FsbEF1ZGlvTW9kZT1fcyxyLl9wYXJ0aWNpcGFudHM9e30sci5faXNTY3JlZW5TaGFyaW5nPSExLHIuX3BhcnRpY2lwYW50Q291bnRzPWtzLHIuX3JtcFBsYXllclN0YXRlPXt9LHIuX3dhaXRpbmdQYXJ0aWNpcGFudHM9e30sci5fbmV0d29yaz17dGhyZXNob2xkOlwiZ29vZFwiLHF1YWxpdHk6MTAwfSxyLl9hY3RpdmVTcGVha2VyPXt9LHIuX2xvY2FsQXVkaW9MZXZlbD0wLHIuX2lzTG9jYWxBdWRpb0xldmVsT2JzZXJ2ZXJSdW5uaW5nPSExLHIuX3JlbW90ZVBhcnRpY2lwYW50c0F1ZGlvTGV2ZWw9e30sci5faXNSZW1vdGVQYXJ0aWNpcGFudHNBdWRpb0xldmVsT2JzZXJ2ZXJSdW5uaW5nPSExLHIuX21heEFwcE1lc3NhZ2VTaXplPVZvLHIuX21lc3NhZ2VDaGFubmVsPW5hKCk/bmV3IEVhOm5ldyBTYSxyLl9pZnJhbWUmJihyLl9pZnJhbWUucmVxdWVzdEZ1bGxzY3JlZW4/ci5faWZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJmdWxsc2NyZWVuY2hhbmdlXCIsKGZ1bmN0aW9uKCl7ZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQ9PT1yLl9pZnJhbWU/KHIuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOkFvfSksci5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpBb30pKTooci5lbWl0RGFpbHlKU0V2ZW50KHthY3Rpb246am99KSxyLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOmpvfSkpfSkpOnIuX2lmcmFtZS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbiYmci5faWZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJraXRmdWxsc2NyZWVuY2hhbmdlXCIsKGZ1bmN0aW9uKCl7ZG9jdW1lbnQud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQ9PT1yLl9pZnJhbWU/KHIuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOkFvfSksci5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpBb30pKTooci5lbWl0RGFpbHlKU0V2ZW50KHthY3Rpb246am99KSxyLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOmpvfSkpfSkpKSxuYSgpKXt2YXIgcz1yLm5hdGl2ZVV0aWxzKCk7cy5hZGRBdWRpb0ZvY3VzQ2hhbmdlTGlzdGVuZXImJnMucmVtb3ZlQXVkaW9Gb2N1c0NoYW5nZUxpc3RlbmVyJiZzLmFkZEFwcFN0YXRlQ2hhbmdlTGlzdGVuZXImJnMucmVtb3ZlQXBwU3RhdGVDaGFuZ2VMaXN0ZW5lciYmcy5hZGRTeXN0ZW1TY3JlZW5DYXB0dXJlU3RvcExpc3RlbmVyJiZzLnJlbW92ZVN5c3RlbVNjcmVlbkNhcHR1cmVTdG9wTGlzdGVuZXJ8fGNvbnNvbGUud2FybihcImV4cGVjdGVkIChhZGR8cmVtb3ZlKShBdWRpb0ZvY3VzQ2hhbmdlfEFwcEFjdGl2ZVN0YXRlQ2hhbmdlfFN5c3RlbVNjcmVlbkNhcHR1cmVTdG9wKUxpc3RlbmVyIHRvIGJlIGF2YWlsYWJsZSBpbiBSZWFjdCBOYXRpdmVcIiksci5faGFzTmF0aXZlQXVkaW9Gb2N1cz0hMCxzLmFkZEF1ZGlvRm9jdXNDaGFuZ2VMaXN0ZW5lcihyLmhhbmRsZU5hdGl2ZUF1ZGlvRm9jdXNDaGFuZ2UpLHMuYWRkQXBwU3RhdGVDaGFuZ2VMaXN0ZW5lcihyLmhhbmRsZU5hdGl2ZUFwcFN0YXRlQ2hhbmdlKSxzLmFkZFN5c3RlbVNjcmVlbkNhcHR1cmVTdG9wTGlzdGVuZXIoci5oYW5kbGVOYXRpdmVTeXN0ZW1TY3JlZW5DYXB0dXJlU3RvcCl9cmV0dXJuIHIuX2NhbGxPYmplY3RNb2RlJiZyLnN0YXJ0TGlzdGVuaW5nRm9yRGV2aWNlQ2hhbmdlcygpLHIuX21lc3NhZ2VDaGFubmVsLmFkZExpc3RlbmVyRm9yTWVzc2FnZXNGcm9tQ2FsbE1hY2hpbmUoci5oYW5kbGVNZXNzYWdlRnJvbUNhbGxNYWNoaW5lLHIuY2FsbENsaWVudElkLGEocikpLHJ9cmV0dXJuIG8oZWUsW3trZXk6XCJkZXN0cm95XCIsdmFsdWU6KFk9aCgoZnVuY3Rpb24qKCl7dmFyIGUsdDt0cnl7eWllbGQgdGhpcy5sZWF2ZSgpfWNhdGNoKGUpe312YXIgbj10aGlzLl9pZnJhbWU7aWYobil7dmFyIHI9bi5wYXJlbnRFbGVtZW50O3ImJnIucmVtb3ZlQ2hpbGQobil9aWYodGhpcy5fbWVzc2FnZUNoYW5uZWwucmVtb3ZlTGlzdGVuZXIodGhpcy5oYW5kbGVNZXNzYWdlRnJvbUNhbGxNYWNoaW5lKSxuYSgpKXt2YXIgaT10aGlzLm5hdGl2ZVV0aWxzKCk7aS5yZW1vdmVBdWRpb0ZvY3VzQ2hhbmdlTGlzdGVuZXIodGhpcy5oYW5kbGVOYXRpdmVBdWRpb0ZvY3VzQ2hhbmdlKSxpLnJlbW92ZUFwcFN0YXRlQ2hhbmdlTGlzdGVuZXIodGhpcy5oYW5kbGVOYXRpdmVBcHBTdGF0ZUNoYW5nZSksaS5yZW1vdmVTeXN0ZW1TY3JlZW5DYXB0dXJlU3RvcExpc3RlbmVyKHRoaXMuaGFuZGxlTmF0aXZlU3lzdGVtU2NyZWVuQ2FwdHVyZVN0b3ApfXRoaXMuX2NhbGxPYmplY3RNb2RlJiZ0aGlzLnN0b3BMaXN0ZW5pbmdGb3JEZXZpY2VDaGFuZ2VzKCksdGhpcy5yZXNldE1lZXRpbmdEZXBlbmRlbnRWYXJzKCksdGhpcy5fZGVzdHJveWVkPSEwLHRoaXMuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOlwiY2FsbC1pbnN0YW5jZS1kZXN0cm95ZWRcIn0pLGRlbGV0ZSB5c1t0aGlzLmNhbGxDbGllbnRJZF0sKG51bGw9PT0oZT13aW5kb3cpfHx2b2lkIDA9PT1lfHxudWxsPT09KHQ9ZS5fZGFpbHkpfHx2b2lkIDA9PT10P3ZvaWQgMDp0Lmluc3RhbmNlcykmJmRlbGV0ZSB3aW5kb3cuX2RhaWx5Lmluc3RhbmNlc1t0aGlzLmNhbGxDbGllbnRJZF0sdGhpcy5zdHJpY3RNb2RlJiYodGhpcy5jYWxsQ2xpZW50SWQ9dm9pZCAwKX0pKSxmdW5jdGlvbigpe3JldHVybiBZLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiaXNEZXN0cm95ZWRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiEhdGhpcy5fZGVzdHJveWVkfX0se2tleTpcImxvYWRDc3NcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLmJvZHlDbGFzcyxuPWUuY3NzRmlsZSxyPWUuY3NzVGV4dDtyZXR1cm4gVXMoKSx0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwibG9hZC1jc3NcIixjc3NGaWxlOnRoaXMuYWJzb2x1dGVVcmwobiksYm9keUNsYXNzOnQsY3NzVGV4dDpyfSksdGhpc319LHtrZXk6XCJpZnJhbWVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBVcygpLHRoaXMuX2lmcmFtZX19LHtrZXk6XCJtZWV0aW5nU3RhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jYWxsU3RhdGV9fSx7a2V5OlwiYWNjZXNzU3RhdGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBScyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcImFjY2Vzc1N0YXRlKClcIiksdGhpcy5fYWNjZXNzU3RhdGV9fSx7a2V5OlwicGFydGljaXBhbnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcGFydGljaXBhbnRzfX0se2tleTpcInBhcnRpY2lwYW50Q291bnRzXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcGFydGljaXBhbnRDb3VudHN9fSx7a2V5Olwid2FpdGluZ1BhcnRpY2lwYW50c1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIFJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwid2FpdGluZ1BhcnRpY2lwYW50cygpXCIpLHRoaXMuX3dhaXRpbmdQYXJ0aWNpcGFudHN9fSx7a2V5OlwidmFsaWRhdGVQYXJ0aWNpcGFudFByb3BlcnRpZXNcIix2YWx1ZTpmdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiB0KXtpZighQXNbbl0pdGhyb3cgbmV3IEVycm9yKFwidW5yZWNvZ25pemVkIHVwZGF0ZVBhcnRpY2lwYW50IHByb3BlcnR5IFwiLmNvbmNhdChuKSk7aWYoQXNbbl0udmFsaWRhdGUmJiFBc1tuXS52YWxpZGF0ZSh0W25dLHRoaXMsdGhpcy5fcGFydGljaXBhbnRzW2VdKSl0aHJvdyBuZXcgRXJyb3IoQXNbbl0uaGVscCl9fX0se2tleTpcInVwZGF0ZVBhcnRpY2lwYW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5fcGFydGljaXBhbnRzLmxvY2FsJiZ0aGlzLl9wYXJ0aWNpcGFudHMubG9jYWwuc2Vzc2lvbl9pZD09PWUmJihlPVwibG9jYWxcIiksZSYmdCYmKHRoaXMudmFsaWRhdGVQYXJ0aWNpcGFudFByb3BlcnRpZXMoZSx0KSx0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwidXBkYXRlLXBhcnRpY2lwYW50XCIsaWQ6ZSxwcm9wZXJ0aWVzOnR9KSksdGhpc319LHtrZXk6XCJ1cGRhdGVQYXJ0aWNpcGFudHNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLl9wYXJ0aWNpcGFudHMubG9jYWwmJnRoaXMuX3BhcnRpY2lwYW50cy5sb2NhbC5zZXNzaW9uX2lkO2Zvcih2YXIgbiBpbiBlKW49PT10JiYobj1cImxvY2FsXCIpLG4mJmVbbl0mJnRoaXMudmFsaWRhdGVQYXJ0aWNpcGFudFByb3BlcnRpZXMobixlW25dKTtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcInVwZGF0ZS1wYXJ0aWNpcGFudHNcIixwYXJ0aWNpcGFudHM6ZX0pLHRoaXN9fSx7a2V5OlwidXBkYXRlV2FpdGluZ1BhcnRpY2lwYW50XCIsdmFsdWU6KEg9aCgoZnVuY3Rpb24qKCl7dmFyIGU9dGhpcyx0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcIlwiLHI9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O2lmKFJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwidXBkYXRlV2FpdGluZ1BhcnRpY2lwYW50KClcIikseHModGhpcy5fY2FsbFN0YXRlLFwidXBkYXRlV2FpdGluZ1BhcnRpY2lwYW50KClcIiksXCJzdHJpbmdcIiE9dHlwZW9mIHR8fFwib2JqZWN0XCIhPT1uKHIpKXRocm93IG5ldyBFcnJvcihcInVwZGF0ZVdhaXRpbmdQYXJ0aWNpcGFudCgpIG11c3QgdGFrZSBhbiBpZCBzdHJpbmcgYW5kIGEgdXBkYXRlcyBvYmplY3RcIik7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLGkpe2Uuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJkYWlseS1tZXRob2QtdXBkYXRlLXdhaXRpbmctcGFydGljaXBhbnRcIixpZDp0LHVwZGF0ZXM6cn0sKGZ1bmN0aW9uKGUpe2UuZXJyb3ImJmkoZS5lcnJvciksZS5pZHx8aShuZXcgRXJyb3IoXCJ1bmtub3duIGVycm9yIGluIHVwZGF0ZVdhaXRpbmdQYXJ0aWNpcGFudCgpXCIpKSxuKHtpZDplLmlkfSl9KSl9KSl9KSksZnVuY3Rpb24oKXtyZXR1cm4gSC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInVwZGF0ZVdhaXRpbmdQYXJ0aWNpcGFudHNcIix2YWx1ZTooVz1oKChmdW5jdGlvbiooKXt2YXIgZT10aGlzLHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O2lmKFJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwidXBkYXRlV2FpdGluZ1BhcnRpY2lwYW50cygpXCIpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcInVwZGF0ZVdhaXRpbmdQYXJ0aWNpcGFudHMoKVwiKSxcIm9iamVjdFwiIT09bih0KSl0aHJvdyBuZXcgRXJyb3IoXCJ1cGRhdGVXYWl0aW5nUGFydGljaXBhbnRzKCkgbXVzdCB0YWtlIGEgbWFwcGluZyBiZXR3ZWVuIGlkcyBhbmQgdXBkYXRlIG9iamVjdHNcIik7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe2Uuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJkYWlseS1tZXRob2QtdXBkYXRlLXdhaXRpbmctcGFydGljaXBhbnRzXCIsdXBkYXRlc0J5SWQ6dH0sKGZ1bmN0aW9uKGUpe2UuZXJyb3ImJnIoZS5lcnJvciksZS5pZHN8fHIobmV3IEVycm9yKFwidW5rbm93biBlcnJvciBpbiB1cGRhdGVXYWl0aW5nUGFydGljaXBhbnRzKClcIikpLG4oe2lkczplLmlkc30pfSkpfSkpfSkpLGZ1bmN0aW9uKCl7cmV0dXJuIFcuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJyZXF1ZXN0QWNjZXNzXCIsdmFsdWU6KHo9aCgoZnVuY3Rpb24qKCl7dmFyIGU9dGhpcyx0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fSxuPXQuYWNjZXNzLHI9dm9pZCAwPT09bj97bGV2ZWw6aGl9Om4saT10Lm5hbWUsbz12b2lkIDA9PT1pP1wiXCI6aTtyZXR1cm4gUnModGhpcy5fY2FsbE9iamVjdE1vZGUsXCJyZXF1ZXN0QWNjZXNzKClcIikseHModGhpcy5fY2FsbFN0YXRlLFwicmVxdWVzdEFjY2VzcygpXCIpLG5ldyBQcm9taXNlKChmdW5jdGlvbih0LG4pe2Uuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJkYWlseS1tZXRob2QtcmVxdWVzdC1hY2Nlc3NcIixhY2Nlc3M6cixuYW1lOm99LChmdW5jdGlvbihlKXtlLmVycm9yJiZuKGUuZXJyb3IpLGUuYWNjZXNzfHxuKG5ldyBFcnJvcihcInVua25vd24gZXJyb3IgaW4gcmVxdWVzdEFjY2VzcygpXCIpKSx0KHthY2Nlc3M6ZS5hY2Nlc3MsZ3JhbnRlZDplLmdyYW50ZWR9KX0pKX0pKX0pKSxmdW5jdGlvbigpe3JldHVybiB6LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwibG9jYWxBdWRpb1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3BhcnRpY2lwYW50cy5sb2NhbD8hW1wiYmxvY2tlZFwiLFwib2ZmXCJdLmluY2x1ZGVzKHRoaXMuX3BhcnRpY2lwYW50cy5sb2NhbC50cmFja3MuYXVkaW8uc3RhdGUpOm51bGx9fSx7a2V5OlwibG9jYWxWaWRlb1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3BhcnRpY2lwYW50cy5sb2NhbD8hW1wiYmxvY2tlZFwiLFwib2ZmXCJdLmluY2x1ZGVzKHRoaXMuX3BhcnRpY2lwYW50cy5sb2NhbC50cmFja3MudmlkZW8uc3RhdGUpOm51bGx9fSx7a2V5Olwic2V0TG9jYWxBdWRpb1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTp7fTtyZXR1cm5cImZvcmNlRGlzY2FyZFRyYWNrXCJpbiB0JiYobmEoKT8oY29uc29sZS53YXJuKFwiZm9yY2VEaXNjYXJkVHJhY2sgb3B0aW9uIG5vdCBzdXBwb3J0ZWQgaW4gUmVhY3QgTmF0aXZlOyBpZ25vcmluZ1wiKSx0PXt9KTplJiYoY29uc29sZS53YXJuKFwiZm9yY2VEaXNjYXJkVHJhY2sgb3B0aW9uIG9ubHkgc3VwcG9ydGVkIHdoZW4gY2FsbGluZyBzZXRMb2NhbEF1ZGlvKGZhbHNlKTsgaWdub3JpbmdcIiksdD17fSkpLHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJsb2NhbC1hdWRpb1wiLHN0YXRlOmUsb3B0aW9uczp0fSksdGhpc319LHtrZXk6XCJsb2NhbFNjcmVlbkF1ZGlvXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcGFydGljaXBhbnRzLmxvY2FsPyFbXCJibG9ja2VkXCIsXCJvZmZcIl0uaW5jbHVkZXModGhpcy5fcGFydGljaXBhbnRzLmxvY2FsLnRyYWNrcy5zY3JlZW5BdWRpby5zdGF0ZSk6bnVsbH19LHtrZXk6XCJsb2NhbFNjcmVlblZpZGVvXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcGFydGljaXBhbnRzLmxvY2FsPyFbXCJibG9ja2VkXCIsXCJvZmZcIl0uaW5jbHVkZXModGhpcy5fcGFydGljaXBhbnRzLmxvY2FsLnRyYWNrcy5zY3JlZW5WaWRlby5zdGF0ZSk6bnVsbH19LHtrZXk6XCJ1cGRhdGVTY3JlZW5TaGFyZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKHRoaXMuX2lzU2NyZWVuU2hhcmluZylyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImxvY2FsLXNjcmVlbi11cGRhdGVcIixvcHRpb25zOmV9KSx0aGlzO2NvbnNvbGUud2FybihcIlRoZXJlIGlzIG5vIHNjcmVlbiBzaGFyZSBpbiBwcm9ncmVzcy4gVHJ5IGNhbGxpbmcgc3RhcnRTY3JlZW5TaGFyZSBmaXJzdC5cIil9fSx7a2V5Olwic2V0TG9jYWxWaWRlb1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwibG9jYWwtdmlkZW9cIixzdGF0ZTplfSksdGhpc319LHtrZXk6XCJfc2V0QWxsb3dMb2NhbEF1ZGlvXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYodGhpcy5fcHJlbG9hZENhY2hlLmFsbG93TG9jYWxBdWRpbz1lLHRoaXMuX2NhbGxNYWNoaW5lSW5pdGlhbGl6ZWQpcmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtYWxsb3ctbG9jYWwtYXVkaW9cIixzdGF0ZTplfSksdGhpc319LHtrZXk6XCJfc2V0QWxsb3dMb2NhbFZpZGVvXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYodGhpcy5fcHJlbG9hZENhY2hlLmFsbG93TG9jYWxWaWRlbz1lLHRoaXMuX2NhbGxNYWNoaW5lSW5pdGlhbGl6ZWQpcmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtYWxsb3ctbG9jYWwtdmlkZW9cIixzdGF0ZTplfSksdGhpc319LHtrZXk6XCJnZXRSZWNlaXZlU2V0dGluZ3NcIix2YWx1ZToocT1oKChmdW5jdGlvbiooZSl7dmFyIHQ9dGhpcyxyPShhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e30pLnNob3dJbmhlcml0ZWRWYWx1ZXMsaT12b2lkIDAhPT1yJiZyO2lmKFJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwiZ2V0UmVjZWl2ZVNldHRpbmdzKClcIiksIXRoaXMuX2NhbGxNYWNoaW5lSW5pdGlhbGl6ZWQpcmV0dXJuIHRoaXMuX3JlY2VpdmVTZXR0aW5ncztzd2l0Y2gobihlKSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXt0LnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwiZ2V0LXNpbmdsZS1wYXJ0aWNpcGFudC1yZWNlaXZlLXNldHRpbmdzXCIsaWQ6ZSxzaG93SW5oZXJpdGVkVmFsdWVzOml9LChmdW5jdGlvbihlKXtuKGUucmVjZWl2ZVNldHRpbmdzKX0pKX0pKTtjYXNlXCJ1bmRlZmluZWRcIjpyZXR1cm4gdGhpcy5fcmVjZWl2ZVNldHRpbmdzO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCB0byBnZXRSZWNlaXZlU2V0dGluZ3MoKSBtdXN0IGJlIGEgcGFydGljaXBhbnQgaWQgKG9yIFwiYmFzZVwiKSwgb3IgdGhlcmUgc2hvdWxkIGJlIG5vIGFyZ3VtZW50cycpfX0pKSxmdW5jdGlvbihlKXtyZXR1cm4gcS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInVwZGF0ZVJlY2VpdmVTZXR0aW5nc1wiLHZhbHVlOigkPWgoKGZ1bmN0aW9uKihlKXt2YXIgdD10aGlzO2lmKFJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwidXBkYXRlUmVjZWl2ZVNldHRpbmdzKClcIiksISRzKGUse2FsbG93QWxsUGFydGljaXBhbnRzS2V5OiEwfSkpdGhyb3cgbmV3IEVycm9yKFlzKHthbGxvd0FsbFBhcnRpY2lwYW50c0tleTohMH0pKTtyZXR1cm4geHModGhpcy5fY2FsbFN0YXRlLFwidXBkYXRlUmVjZWl2ZVNldHRpbmdzKClcIixcIlRvIHNwZWNpZnkgcmVjZWl2ZSBzZXR0aW5ncyBlYXJsaWVyLCB1c2UgdGhlIHJlY2VpdmVTZXR0aW5ncyBjb25maWcgcHJvcGVydHkuXCIpLG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXt0LnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwidXBkYXRlLXJlY2VpdmUtc2V0dGluZ3NcIixyZWNlaXZlU2V0dGluZ3M6ZX0sKGZ1bmN0aW9uKGUpe24oe3JlY2VpdmVTZXR0aW5nczplLnJlY2VpdmVTZXR0aW5nc30pfSkpfSkpfSkpLGZ1bmN0aW9uKGUpe3JldHVybiAkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiX3ByZXBJbnB1dFNldHRpbmdzRm9yU2hhcmluZ1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoZSl7dmFyIG49e307aWYoZS5hdWRpbyl7dmFyIHIsaSxvLGE7ZS5hdWRpby5zZXR0aW5ncyYmKCFPYmplY3Qua2V5cyhlLmF1ZGlvLnNldHRpbmdzKS5sZW5ndGgmJnR8fChuLmF1ZGlvPXtzZXR0aW5nczpmcyh7fSxlLmF1ZGlvLnNldHRpbmdzKX0pKSx0JiZudWxsIT09KHI9bi5hdWRpbykmJnZvaWQgMCE9PXImJm51bGwhPT0oaT1yLnNldHRpbmdzKSYmdm9pZCAwIT09aSYmaS5jdXN0b21UcmFjayYmKG4uYXVkaW8uc2V0dGluZ3M9e2N1c3RvbVRyYWNrOnRoaXMuX3NoYXJlZFRyYWNrcy5hdWRpb1RyYWNrfSk7dmFyIHM9XCJub25lXCI9PT0obnVsbD09PShvPWUuYXVkaW8ucHJvY2Vzc29yKXx8dm9pZCAwPT09bz92b2lkIDA6by50eXBlKSYmKG51bGw9PT0oYT1lLmF1ZGlvLnByb2Nlc3Nvcil8fHZvaWQgMD09PWE/dm9pZCAwOmEuX2lzRGVmYXVsdFdoZW5Ob25lKTtpZihlLmF1ZGlvLnByb2Nlc3NvciYmIXMpe3ZhciBjPWZzKHt9LGUuYXVkaW8ucHJvY2Vzc29yKTtkZWxldGUgYy5faXNEZWZhdWx0V2hlbk5vbmUsbi5hdWRpbz1mcyhmcyh7fSxuLmF1ZGlvKSx7fSx7cHJvY2Vzc29yOmN9KX19aWYoZS52aWRlbyl7dmFyIGwsdSxkLHA7ZS52aWRlby5zZXR0aW5ncyYmKCFPYmplY3Qua2V5cyhlLnZpZGVvLnNldHRpbmdzKS5sZW5ndGgmJnR8fChuLnZpZGVvPXtzZXR0aW5nczpmcyh7fSxlLnZpZGVvLnNldHRpbmdzKX0pKSx0JiZudWxsIT09KGw9bi52aWRlbykmJnZvaWQgMCE9PWwmJm51bGwhPT0odT1sLnNldHRpbmdzKSYmdm9pZCAwIT09dSYmdS5jdXN0b21UcmFjayYmKG4udmlkZW8uc2V0dGluZ3M9e2N1c3RvbVRyYWNrOnRoaXMuX3NoYXJlZFRyYWNrcy52aWRlb1RyYWNrfSk7dmFyIGg9XCJub25lXCI9PT0obnVsbD09PShkPWUudmlkZW8ucHJvY2Vzc29yKXx8dm9pZCAwPT09ZD92b2lkIDA6ZC50eXBlKSYmKG51bGw9PT0ocD1lLnZpZGVvLnByb2Nlc3Nvcil8fHZvaWQgMD09PXA/dm9pZCAwOnAuX2lzRGVmYXVsdFdoZW5Ob25lKTtpZihlLnZpZGVvLnByb2Nlc3NvciYmIWgpe3ZhciBmPWZzKHt9LGUudmlkZW8ucHJvY2Vzc29yKTtkZWxldGUgZi5faXNEZWZhdWx0V2hlbk5vbmUsbi52aWRlbz1mcyhmcyh7fSxuLnZpZGVvKSx7fSx7cHJvY2Vzc29yOmZ9KX19cmV0dXJuIG59fX0se2tleTpcImdldElucHV0U2V0dGluZ3NcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIFVzKCksbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe3QoZS5fZ2V0SW5wdXRTZXR0aW5ncygpKX0pKX19LHtrZXk6XCJfZ2V0SW5wdXRTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGUsdCxuLHIsaSxvLGEscyxjPXtwcm9jZXNzb3I6e3R5cGU6XCJub25lXCIsX2lzRGVmYXVsdFdoZW5Ob25lOiEwfX07dGhpcy5faW5wdXRTZXR0aW5ncz8oZT0obnVsbD09PShuPXRoaXMuX2lucHV0U2V0dGluZ3MpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnZpZGVvKXx8Yyx0PShudWxsPT09KHI9dGhpcy5faW5wdXRTZXR0aW5ncyl8fHZvaWQgMD09PXI/dm9pZCAwOnIuYXVkaW8pfHxjKTooZT0obnVsbD09PShpPXRoaXMuX3ByZWxvYWRDYWNoZSl8fHZvaWQgMD09PWl8fG51bGw9PT0obz1pLmlucHV0U2V0dGluZ3MpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnZpZGVvKXx8Yyx0PShudWxsPT09KGE9dGhpcy5fcHJlbG9hZENhY2hlKXx8dm9pZCAwPT09YXx8bnVsbD09PShzPWEuaW5wdXRTZXR0aW5ncyl8fHZvaWQgMD09PXM/dm9pZCAwOnMuYXVkaW8pfHxjKTt2YXIgbD17YXVkaW86dCx2aWRlbzplfTtyZXR1cm4gdGhpcy5fcHJlcElucHV0U2V0dGluZ3NGb3JTaGFyaW5nKGwsITApfX0se2tleTpcIl91cGRhdGVQcmVsb2FkQ2FjaGVJbnB1dFNldHRpbmdzXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLl9pbnB1dFNldHRpbmdzfHx7fSxyPXt9O2lmKGUudmlkZW8pe3ZhciBpLG8sYTtpZihyLnZpZGVvPXt9LGUudmlkZW8uc2V0dGluZ3Mpci52aWRlby5zZXR0aW5ncz17fSx0fHxlLnZpZGVvLnNldHRpbmdzLmN1c3RvbVRyYWNrfHxudWxsPT09KGE9bi52aWRlbyl8fHZvaWQgMD09PWF8fCFhLnNldHRpbmdzP3IudmlkZW8uc2V0dGluZ3M9ZS52aWRlby5zZXR0aW5nczpyLnZpZGVvLnNldHRpbmdzPWZzKGZzKHt9LG4udmlkZW8uc2V0dGluZ3MpLGUudmlkZW8uc2V0dGluZ3MpLE9iamVjdC5rZXlzKHIudmlkZW8uc2V0dGluZ3MpLmxlbmd0aHx8ZGVsZXRlIHIudmlkZW8uc2V0dGluZ3M7ZWxzZSBudWxsIT09KGk9bi52aWRlbykmJnZvaWQgMCE9PWkmJmkuc2V0dGluZ3MmJihyLnZpZGVvLnNldHRpbmdzPW4udmlkZW8uc2V0dGluZ3MpO2UudmlkZW8ucHJvY2Vzc29yP3IudmlkZW8ucHJvY2Vzc29yPWUudmlkZW8ucHJvY2Vzc29yOm51bGwhPT0obz1uLnZpZGVvKSYmdm9pZCAwIT09byYmby5wcm9jZXNzb3ImJihyLnZpZGVvLnByb2Nlc3Nvcj1uLnZpZGVvLnByb2Nlc3Nvcil9ZWxzZSBuLnZpZGVvJiYoci52aWRlbz1uLnZpZGVvKTtpZihlLmF1ZGlvKXt2YXIgcyxjLGw7aWYoci5hdWRpbz17fSxlLmF1ZGlvLnNldHRpbmdzKXIuYXVkaW8uc2V0dGluZ3M9e30sdHx8ZS5hdWRpby5zZXR0aW5ncy5jdXN0b21UcmFja3x8bnVsbD09PShsPW4uYXVkaW8pfHx2b2lkIDA9PT1sfHwhbC5zZXR0aW5ncz9yLmF1ZGlvLnNldHRpbmdzPWUuYXVkaW8uc2V0dGluZ3M6ci5hdWRpby5zZXR0aW5ncz1mcyhmcyh7fSxuLmF1ZGlvLnNldHRpbmdzKSxlLmF1ZGlvLnNldHRpbmdzKSxPYmplY3Qua2V5cyhyLmF1ZGlvLnNldHRpbmdzKS5sZW5ndGh8fGRlbGV0ZSByLmF1ZGlvLnNldHRpbmdzO2Vsc2UgbnVsbCE9PShzPW4uYXVkaW8pJiZ2b2lkIDAhPT1zJiZzLnNldHRpbmdzJiYoci5hdWRpby5zZXR0aW5ncz1uLmF1ZGlvLnNldHRpbmdzKTtlLmF1ZGlvLnByb2Nlc3Nvcj9yLmF1ZGlvLnByb2Nlc3Nvcj1lLmF1ZGlvLnByb2Nlc3NvcjpudWxsIT09KGM9bi5hdWRpbykmJnZvaWQgMCE9PWMmJmMucHJvY2Vzc29yJiYoci5hdWRpby5wcm9jZXNzb3I9bi5hdWRpby5wcm9jZXNzb3IpfWVsc2Ugbi5hdWRpbyYmKHIuYXVkaW89bi5hdWRpbyk7dGhpcy5fbWF5YmVVcGRhdGVJbnB1dFNldHRpbmdzKHIpfX0se2tleTpcIl9kZXZpY2VzRnJvbUlucHV0U2V0dGluZ3NcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvPShudWxsPT1lfHxudWxsPT09KHQ9ZS52aWRlbyl8fHZvaWQgMD09PXR8fG51bGw9PT0obj10LnNldHRpbmdzKXx8dm9pZCAwPT09bj92b2lkIDA6bi5kZXZpY2VJZCl8fG51bGwsYT0obnVsbD09ZXx8bnVsbD09PShyPWUuYXVkaW8pfHx2b2lkIDA9PT1yfHxudWxsPT09KGk9ci5zZXR0aW5ncyl8fHZvaWQgMD09PWk/dm9pZCAwOmkuZGV2aWNlSWQpfHxudWxsLHM9dGhpcy5fcHJlbG9hZENhY2hlLm91dHB1dERldmljZUlkfHxudWxsO3JldHVybntjYW1lcmE6bz97ZGV2aWNlSWQ6b306e30sbWljOmE/e2RldmljZUlkOmF9Ont9LHNwZWFrZXI6cz97ZGV2aWNlSWQ6c306e319fX0se2tleTpcInVwZGF0ZUlucHV0U2V0dGluZ3NcIix2YWx1ZTooSj1oKChmdW5jdGlvbiooZSl7dmFyIHQ9dGhpcztyZXR1cm4gVXMoKSxxcyhlKT9lLnZpZGVvfHxlLmF1ZGlvPyh6cyhlLHRoaXMucHJvcGVydGllcy5kYWlseUNvbmZpZyx0aGlzLl9zaGFyZWRUcmFja3MpLHRoaXMuX2NhbGxPYmplY3RNb2RlJiYhdGhpcy5fY2FsbE1hY2hpbmVJbml0aWFsaXplZD8odGhpcy5fdXBkYXRlUHJlbG9hZENhY2hlSW5wdXRTZXR0aW5ncyhlLCEwKSx0aGlzLl9nZXRJbnB1dFNldHRpbmdzKCkpOm5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe3Quc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJ1cGRhdGUtaW5wdXQtc2V0dGluZ3NcIixpbnB1dFNldHRpbmdzOmV9LChmdW5jdGlvbihpKXtpZihpLmVycm9yKXIoaS5lcnJvcik7ZWxzZXtpZihpLnJldHVyblByZWxvYWRDYWNoZSlyZXR1cm4gdC5fdXBkYXRlUHJlbG9hZENhY2hlSW5wdXRTZXR0aW5ncyhlLCEwKSx2b2lkIG4odC5fZ2V0SW5wdXRTZXR0aW5ncygpKTt0Ll9tYXliZVVwZGF0ZUlucHV0U2V0dGluZ3MoaS5pbnB1dFNldHRpbmdzKSxuKHQuX3ByZXBJbnB1dFNldHRpbmdzRm9yU2hhcmluZyhpLmlucHV0U2V0dGluZ3MsITApKX19KSl9KSkpOnRoaXMuX2dldElucHV0U2V0dGluZ3MoKTooY29uc29sZS5lcnJvcihRcygpKSxQcm9taXNlLnJlamVjdChRcygpKSl9KSksZnVuY3Rpb24oZSl7cmV0dXJuIEouYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJzZXRCYW5kd2lkdGhcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLmticyxuPWUudHJhY2tDb25zdHJhaW50cztpZihVcygpLHRoaXMuX2NhbGxNYWNoaW5lSW5pdGlhbGl6ZWQpcmV0dXJuIHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtYmFuZHdpZHRoXCIsa2JzOnQsdHJhY2tDb25zdHJhaW50czpufSksdGhpc319LHtrZXk6XCJnZXREYWlseUxhbmdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoVXMoKSx0aGlzLl9jYWxsTWFjaGluZUluaXRpYWxpemVkKXJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7ZS5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImdldC1kYWlseS1sYW5nXCJ9LChmdW5jdGlvbihlKXtkZWxldGUgZS5hY3Rpb24sZGVsZXRlIGUuY2FsbGJhY2tTdGFtcCx0KGUpfSkpfSkpfX0se2tleTpcInNldERhaWx5TGFuZ1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBVcygpLHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtZGFpbHktbGFuZ1wiLGxhbmc6ZX0pLHRoaXN9fSx7a2V5Olwic2V0UHJveHlVcmxcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcInNldC1wcm94eS11cmxcIixwcm94eVVybDplfSksdGhpc319LHtrZXk6XCJzZXRJY2VDb25maWdcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcInNldC1pY2UtY29uZmlnXCIsaWNlQ29uZmlnOmV9KSx0aGlzfX0se2tleTpcIm1lZXRpbmdTZXNzaW9uU3VtbWFyeVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuW2lpLG9pXS5pbmNsdWRlcyh0aGlzLl9jYWxsU3RhdGUpP3RoaXMuX2ZpbmFsU3VtbWFyeU9mUHJldlNlc3Npb246dGhpcy5fbWVldGluZ1Nlc3Npb25TdW1tYXJ5fX0se2tleTpcImdldE1lZXRpbmdTZXNzaW9uXCIsdmFsdWU6KFY9aCgoZnVuY3Rpb24qKCl7dmFyIGU9dGhpcztyZXR1cm4gY29uc29sZS53YXJuKFwiZ2V0TWVldGluZ1Nlc3Npb24oKSBpcyBkZXByZWNhdGVkOiB1c2UgbWVldGluZ1Nlc3Npb25TdW1tYXJ5KCksIHdoaWNoIHdpbGwgcmV0dXJuIGltbWVkaWF0ZWx5XCIpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcImdldE1lZXRpbmdTZXNzaW9uKClcIiksbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe2Uuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJnZXQtbWVldGluZy1zZXNzaW9uXCJ9LChmdW5jdGlvbihlKXtkZWxldGUgZS5hY3Rpb24sZGVsZXRlIGUuY2FsbGJhY2tTdGFtcCx0KGUpfSkpfSkpfSkpLGZ1bmN0aW9uKCl7cmV0dXJuIFYuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJtZWV0aW5nU2Vzc2lvblN0YXRlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4geHModGhpcy5fY2FsbFN0YXRlLFwibWVldGluZ1Nlc3Npb25TdGF0ZVwiKSx0aGlzLl9tZWV0aW5nU2Vzc2lvblN0YXRlfX0se2tleTpcInNldE1lZXRpbmdTZXNzaW9uRGF0YVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcInJlcGxhY2VcIjtScyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcInNldE1lZXRpbmdTZXNzaW9uRGF0YSgpXCIpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcInNldE1lZXRpbmdTZXNzaW9uRGF0YVwiKTt0cnl7IWZ1bmN0aW9uKGUsdCl7bmV3IEFhKHtkYXRhOmUsbWVyZ2VTdHJhdGVneTp0fSl9KGUsdCl9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS5lcnJvcihlKSxlfXRyeXt0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic2V0LXNlc3Npb24tZGF0YVwiLGRhdGE6ZSxtZXJnZVN0cmF0ZWd5OnR9KX1jYXRjaChlKXt0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBzZXR0aW5nIG1lZXRpbmcgc2Vzc2lvbiBkYXRhOiBcIi5jb25jYXQoZSkpfX19LHtrZXk6XCJzZXRVc2VyTmFtZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztyZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLnVzZXJOYW1lPWUsbmV3IFByb21pc2UoKGZ1bmN0aW9uKHIpe24uc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtdXNlci1uYW1lXCIsbmFtZTpudWxsIT1lP2U6XCJcIix0aGlzTWVldGluZ09ubHk6bmEoKXx8ISF0JiYhIXQudGhpc01lZXRpbmdPbmx5fSwoZnVuY3Rpb24oZSl7ZGVsZXRlIGUuYWN0aW9uLGRlbGV0ZSBlLmNhbGxiYWNrU3RhbXAscihlKX0pKX0pKX19LHtrZXk6XCJzZXRVc2VyRGF0YVwiLHZhbHVlOihVPWgoKGZ1bmN0aW9uKihlKXt2YXIgdD10aGlzO3RyeXtKcyhlKX1jYXRjaChlKXt0aHJvdyBjb25zb2xlLmVycm9yKGUpLGV9aWYodGhpcy5wcm9wZXJ0aWVzLnVzZXJEYXRhPWUsdGhpcy5fY2FsbE1hY2hpbmVJbml0aWFsaXplZClyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4pe3RyeXt0LnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic2V0LXVzZXItZGF0YVwiLHVzZXJEYXRhOmV9LChmdW5jdGlvbihlKXtkZWxldGUgZS5hY3Rpb24sZGVsZXRlIGUuY2FsbGJhY2tTdGFtcCxuKGUpfSkpfWNhdGNoKGUpe3Rocm93IG5ldyBFcnJvcihcIkVycm9yIHNldHRpbmcgdXNlciBkYXRhOiBcIi5jb25jYXQoZSkpfX0pKX0pKSxmdW5jdGlvbihlKXtyZXR1cm4gVS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInZhbGlkYXRlQXVkaW9MZXZlbEludGVydmFsXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoZSYmKGU8MTAwfHxcIm51bWJlclwiIT10eXBlb2YgZSkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGludGVydmFsIG11c3QgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIDEwMCBtaWxsaXNlY29uZHMuXCIpfX0se2tleTpcInN0YXJ0TG9jYWxBdWRpb0xldmVsT2JzZXJ2ZXJcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBBdWRpb1dvcmtsZXROb2RlJiYhbmEoKSl0aHJvdyBuZXcgRXJyb3IoXCJzdGFydExvY2FsQXVkaW9MZXZlbE9ic2VydmVyKCkgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXJcIik7aWYodGhpcy52YWxpZGF0ZUF1ZGlvTGV2ZWxJbnRlcnZhbChlKSx0aGlzLl9jYWxsTWFjaGluZUluaXRpYWxpemVkKXJldHVybiB0aGlzLl9pc0xvY2FsQXVkaW9MZXZlbE9ic2VydmVyUnVubmluZz0hMCxuZXcgUHJvbWlzZSgoZnVuY3Rpb24obixyKXt0LnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic3RhcnQtbG9jYWwtYXVkaW8tbGV2ZWwtb2JzZXJ2ZXJcIixpbnRlcnZhbDplfSwoZnVuY3Rpb24oZSl7dC5faXNMb2NhbEF1ZGlvTGV2ZWxPYnNlcnZlclJ1bm5pbmc9IWUuZXJyb3IsZS5lcnJvcj9yKHtlcnJvcjplLmVycm9yfSk6bigpfSkpfSkpO3RoaXMuX3ByZWxvYWRDYWNoZS5sb2NhbEF1ZGlvTGV2ZWxPYnNlcnZlcj17ZW5hYmxlZDohMCxpbnRlcnZhbDplfX19LHtrZXk6XCJpc0xvY2FsQXVkaW9MZXZlbE9ic2VydmVyUnVubmluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2lzTG9jYWxBdWRpb0xldmVsT2JzZXJ2ZXJSdW5uaW5nfX0se2tleTpcInN0b3BMb2NhbEF1ZGlvTGV2ZWxPYnNlcnZlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fcHJlbG9hZENhY2hlLmxvY2FsQXVkaW9MZXZlbE9ic2VydmVyPW51bGwsdGhpcy5fbG9jYWxBdWRpb0xldmVsPTAsdGhpcy5faXNMb2NhbEF1ZGlvTGV2ZWxPYnNlcnZlclJ1bm5pbmc9ITEsdGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcInN0b3AtbG9jYWwtYXVkaW8tbGV2ZWwtb2JzZXJ2ZXJcIn0pfX0se2tleTpcInN0YXJ0UmVtb3RlUGFydGljaXBhbnRzQXVkaW9MZXZlbE9ic2VydmVyXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0aGlzLnZhbGlkYXRlQXVkaW9MZXZlbEludGVydmFsKGUpLHRoaXMuX2NhbGxNYWNoaW5lSW5pdGlhbGl6ZWQpcmV0dXJuIHRoaXMuX2lzUmVtb3RlUGFydGljaXBhbnRzQXVkaW9MZXZlbE9ic2VydmVyUnVubmluZz0hMCxuZXcgUHJvbWlzZSgoZnVuY3Rpb24obixyKXt0LnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic3RhcnQtcmVtb3RlLXBhcnRpY2lwYW50cy1hdWRpby1sZXZlbC1vYnNlcnZlclwiLGludGVydmFsOmV9LChmdW5jdGlvbihlKXt0Ll9pc1JlbW90ZVBhcnRpY2lwYW50c0F1ZGlvTGV2ZWxPYnNlcnZlclJ1bm5pbmc9IWUuZXJyb3IsZS5lcnJvcj9yKHtlcnJvcjplLmVycm9yfSk6bigpfSkpfSkpO3RoaXMuX3ByZWxvYWRDYWNoZS5yZW1vdGVQYXJ0aWNpcGFudHNBdWRpb0xldmVsT2JzZXJ2ZXI9e2VuYWJsZWQ6ITAsaW50ZXJ2YWw6ZX19fSx7a2V5OlwiaXNSZW1vdGVQYXJ0aWNpcGFudHNBdWRpb0xldmVsT2JzZXJ2ZXJSdW5uaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNSZW1vdGVQYXJ0aWNpcGFudHNBdWRpb0xldmVsT2JzZXJ2ZXJSdW5uaW5nfX0se2tleTpcInN0b3BSZW1vdGVQYXJ0aWNpcGFudHNBdWRpb0xldmVsT2JzZXJ2ZXJcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX3ByZWxvYWRDYWNoZS5yZW1vdGVQYXJ0aWNpcGFudHNBdWRpb0xldmVsT2JzZXJ2ZXI9bnVsbCx0aGlzLl9yZW1vdGVQYXJ0aWNpcGFudHNBdWRpb0xldmVsPXt9LHRoaXMuX2lzUmVtb3RlUGFydGljaXBhbnRzQXVkaW9MZXZlbE9ic2VydmVyUnVubmluZz0hMSx0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic3RvcC1yZW1vdGUtcGFydGljaXBhbnRzLWF1ZGlvLWxldmVsLW9ic2VydmVyXCJ9KX19LHtrZXk6XCJzdGFydENhbWVyYVwiLHZhbHVlOihCPWgoKGZ1bmN0aW9uKigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307aWYoUnModGhpcy5fY2FsbE9iamVjdE1vZGUsXCJzdGFydENhbWVyYSgpXCIpLERzKHRoaXMuX2NhbGxTdGF0ZSx0aGlzLl9pc1ByZXBhcmluZ1RvSm9pbixcInN0YXJ0Q2FtZXJhKClcIixcIkRpZCB5b3UgbWVhbiB0byB1c2Ugc2V0TG9jYWxBdWRpbygpIGFuZC9vciBzZXRMb2NhbFZpZGVvKCkgaW5zdGVhZD9cIiksdGhpcy5uZWVkc0xvYWQoKSl0cnl7eWllbGQgdGhpcy5sb2FkKHQpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX1lbHNle2lmKHRoaXMuX2RpZFByZUF1dGgpe2lmKHQudXJsJiZ0LnVybCE9PXRoaXMucHJvcGVydGllcy51cmwpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJ1cmwgaW4gc3RhcnRDYW1lcmEoKSBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgb25lIHVzZWQgaW4gcHJlQXV0aCgpXCIpLFByb21pc2UucmVqZWN0KCk7aWYodC50b2tlbiYmdC50b2tlbiE9PXRoaXMucHJvcGVydGllcy50b2tlbilyZXR1cm4gY29uc29sZS5lcnJvcihcInRva2VuIGluIHN0YXJ0Q2FtZXJhKCkgaXMgZGlmZmVyZW50IHRoYW4gdGhlIG9uZSB1c2VkIGluIHByZUF1dGgoKVwiKSxQcm9taXNlLnJlamVjdCgpfXRoaXMudmFsaWRhdGVQcm9wZXJ0aWVzKHQpLHRoaXMucHJvcGVydGllcz1mcyhmcyh7fSx0aGlzLnByb3BlcnRpZXMpLHQpfXJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7ZS5fcHJlbG9hZENhY2hlLmlucHV0U2V0dGluZ3M9ZS5fcHJlcElucHV0U2V0dGluZ3NGb3JTaGFyaW5nKGUuX2lucHV0U2V0dGluZ3MsITEpLGUuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzdGFydC1jYW1lcmFcIixwcm9wZXJ0aWVzOkxzKGUucHJvcGVydGllcyxlLmNhbGxDbGllbnRJZCkscHJlbG9hZENhY2hlOkxzKGUuX3ByZWxvYWRDYWNoZSxlLmNhbGxDbGllbnRJZCl9LChmdW5jdGlvbihlKXt0KHtjYW1lcmE6ZS5jYW1lcmEsbWljOmUubWljLHNwZWFrZXI6ZS5zcGVha2VyfSl9KSl9KSl9KSksZnVuY3Rpb24oKXtyZXR1cm4gQi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInZhbGlkYXRlQ3VzdG9tVHJhY2tcIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7aWYobiYmbi5sZW5ndGg+NTApdGhyb3cgbmV3IEVycm9yKFwiQ3VzdG9tIHRyYWNrIGB0cmFja05hbWVgIG11c3Qgbm90IGJlIG1vcmUgdGhhbiA1MCBjaGFyYWN0ZXJzXCIpO2lmKHQmJlwibXVzaWNcIiE9PXQmJlwic3BlZWNoXCIhPT10JiYhKHQgaW5zdGFuY2VvZiBPYmplY3QpKXRocm93IG5ldyBFcnJvcihcIkN1c3RvbSB0cmFjayBgbW9kZWAgbXVzdCBiZSBlaXRoZXIgYG11c2ljYCB8IGBzcGVlY2hgIHwgYERhaWx5TWljQXVkaW9Nb2RlU2V0dGluZ3NgIG9yIGB1bmRlZmluZWRgXCIpO2lmKCEhbiYmW1wiY2FtLWF1ZGlvXCIsXCJjYW0tdmlkZW9cIixcInNjcmVlbi12aWRlb1wiLFwic2NyZWVuLWF1ZGlvXCIsXCJybXBBdWRpb1wiLFwicm1wVmlkZW9cIixcImN1c3RvbVZpZGVvRGVmYXVsdHNcIl0uaW5jbHVkZXMobikpdGhyb3cgbmV3IEVycm9yKFwiQ3VzdG9tIHRyYWNrIGB0cmFja05hbWVgIG11c3Qgbm90IG1hdGNoIGEgdHJhY2sgbmFtZSBhbHJlYWR5IHVzZWQgYnkgZGFpbHk6IGNhbS1hdWRpbywgY2FtLXZpZGVvLCBjdXN0b21WaWRlb0RlZmF1bHRzLCBzY3JlZW4tdmlkZW8sIHNjcmVlbi1hdWRpbywgcm1wQXVkaW8sIHJtcFZpZGVvXCIpO2lmKCEoZSBpbnN0YW5jZW9mIE1lZGlhU3RyZWFtVHJhY2spKXRocm93IG5ldyBFcnJvcihcIkN1c3RvbSB0cmFja3MgcHJvdmlkZWQgbXVzdCBiZSBpbnN0YW5jZXMgb2YgTWVkaWFTdHJlYW1UcmFja1wiKX19LHtrZXk6XCJzdGFydEN1c3RvbVRyYWNrXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt0cmFjazp0cmFjayxtb2RlOm1vZGUsdHJhY2tOYW1lOnRyYWNrTmFtZX07cmV0dXJuIFVzKCkseHModGhpcy5fY2FsbFN0YXRlLFwic3RhcnRDdXN0b21UcmFjaygpXCIpLHRoaXMudmFsaWRhdGVDdXN0b21UcmFjayh0LnRyYWNrLHQubW9kZSx0LnRyYWNrTmFtZSksbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7ZS5fc2hhcmVkVHJhY2tzLmN1c3RvbVRyYWNrPXQudHJhY2ssdC50cmFjaz1IbyxlLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic3RhcnQtY3VzdG9tLXRyYWNrXCIscHJvcGVydGllczp0fSwoZnVuY3Rpb24oZSl7ZS5lcnJvcj9yKHtlcnJvcjplLmVycm9yfSk6bihlLm1lZGlhVGFnKX0pKX0pKX19LHtrZXk6XCJzdG9wQ3VzdG9tVHJhY2tcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBVcygpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcInN0b3BDdXN0b21UcmFjaygpXCIpLG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXt0LnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic3RvcC1jdXN0b20tdHJhY2tcIixtZWRpYVRhZzplfSwoZnVuY3Rpb24oZSl7bihlLm1lZGlhVGFnKX0pKX0pKX19LHtrZXk6XCJzZXRDYW1lcmFcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBWcygpLE5zKHRoaXMuX2NhbGxNYWNoaW5lSW5pdGlhbGl6ZWQsXCJzZXRDYW1lcmEoKVwiKSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24obil7dC5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcInNldC1jYW1lcmFcIixjYW1lcmFEZXZpY2VJZDplfSwoZnVuY3Rpb24oZSl7bih7ZGV2aWNlOmUuZGV2aWNlfSl9KSl9KSl9fSx7a2V5Olwic2V0QXVkaW9EZXZpY2VcIix2YWx1ZTooUj1oKChmdW5jdGlvbiooZSl7cmV0dXJuIFZzKCksdGhpcy5uYXRpdmVVdGlscygpLnNldEF1ZGlvRGV2aWNlKGUpLHtkZXZpY2VJZDp5aWVsZCB0aGlzLm5hdGl2ZVV0aWxzKCkuZ2V0QXVkaW9EZXZpY2UoKX19KSksZnVuY3Rpb24oZSl7cmV0dXJuIFIuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJjeWNsZUNhbWVyYVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4pe2Uuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJjeWNsZS1jYW1lcmFcIixwcm9wZXJ0aWVzOnR9LChmdW5jdGlvbihlKXtuKHtkZXZpY2U6ZS5kZXZpY2V9KX0pKX0pKX19LHtrZXk6XCJjeWNsZU1pY1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gVXMoKSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7ZS5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImN5Y2xlLW1pY1wifSwoZnVuY3Rpb24oZSl7dCh7ZGV2aWNlOmUuZGV2aWNlfSl9KSl9KSl9fSx7a2V5OlwiZ2V0Q2FtZXJhRmFjaW5nTW9kZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gVnMoKSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7ZS5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImdldC1jYW1lcmEtZmFjaW5nLW1vZGVcIn0sKGZ1bmN0aW9uKGUpe3QoZS5mYWNpbmdNb2RlKX0pKX0pKX19LHtrZXk6XCJzZXRJbnB1dERldmljZXNBc3luY1wiLHZhbHVlOihGPWgoKGZ1bmN0aW9uKihlKXt2YXIgdD10aGlzLG49ZS5hdWRpb0RldmljZUlkLHI9ZS52aWRlb0RldmljZUlkLGk9ZS5hdWRpb1NvdXJjZSxvPWUudmlkZW9Tb3VyY2U7aWYoVXMoKSx2b2lkIDAhPT1pJiYobj1pKSx2b2lkIDAhPT1vJiYocj1vKSxcImJvb2xlYW5cIj09dHlwZW9mIG4mJih0aGlzLl9zZXRBbGxvd0xvY2FsQXVkaW8obiksbj12b2lkIDApLFwiYm9vbGVhblwiPT10eXBlb2YgciYmKHRoaXMuX3NldEFsbG93TG9jYWxWaWRlbyhyKSxyPXZvaWQgMCksIW4mJiFyKXJldHVybiB5aWVsZCB0aGlzLmdldElucHV0RGV2aWNlcygpO3ZhciBhPXt9O3JldHVybiBuJiYobiBpbnN0YW5jZW9mIE1lZGlhU3RyZWFtVHJhY2s/KHRoaXMuX3NoYXJlZFRyYWNrcy5hdWRpb1RyYWNrPW4sbj1IbyxhLmF1ZGlvPXtzZXR0aW5nczp7Y3VzdG9tVHJhY2s6bn19KTooZGVsZXRlIHRoaXMuX3NoYXJlZFRyYWNrcy5hdWRpb1RyYWNrLGEuYXVkaW89e3NldHRpbmdzOntkZXZpY2VJZDpufX0pKSxyJiYociBpbnN0YW5jZW9mIE1lZGlhU3RyZWFtVHJhY2s/KHRoaXMuX3NoYXJlZFRyYWNrcy52aWRlb1RyYWNrPXIscj1IbyxhLnZpZGVvPXtzZXR0aW5nczp7Y3VzdG9tVHJhY2s6cn19KTooZGVsZXRlIHRoaXMuX3NoYXJlZFRyYWNrcy52aWRlb1RyYWNrLGEudmlkZW89e3NldHRpbmdzOntkZXZpY2VJZDpyfX0pKSx0aGlzLl9jYWxsT2JqZWN0TW9kZSYmdGhpcy5uZWVkc0xvYWQoKT8odGhpcy5fdXBkYXRlUHJlbG9hZENhY2hlSW5wdXRTZXR0aW5ncyhhLCExKSx0aGlzLl9kZXZpY2VzRnJvbUlucHV0U2V0dGluZ3ModGhpcy5faW5wdXRTZXR0aW5ncykpOm5ldyBQcm9taXNlKChmdW5jdGlvbihlKXt0LnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic2V0LWlucHV0LWRldmljZXNcIixhdWRpb0RldmljZUlkOm4sdmlkZW9EZXZpY2VJZDpyfSwoZnVuY3Rpb24obil7aWYoZGVsZXRlIG4uYWN0aW9uLGRlbGV0ZSBuLmNhbGxiYWNrU3RhbXAsbi5yZXR1cm5QcmVsb2FkQ2FjaGUpcmV0dXJuIHQuX3VwZGF0ZVByZWxvYWRDYWNoZUlucHV0U2V0dGluZ3MoYSwhMSksdm9pZCBlKHQuX2RldmljZXNGcm9tSW5wdXRTZXR0aW5ncyh0Ll9pbnB1dFNldHRpbmdzKSk7ZShuKX0pKX0pKX0pKSxmdW5jdGlvbihlKXtyZXR1cm4gRi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInNldE91dHB1dERldmljZUFzeW5jXCIsdmFsdWU6KE49aCgoZnVuY3Rpb24qKGUpe3ZhciB0PXRoaXMsbj1lLm91dHB1dERldmljZUlkO3JldHVybiBVcygpLG4mJih0aGlzLl9wcmVsb2FkQ2FjaGUub3V0cHV0RGV2aWNlSWQ9biksdGhpcy5fY2FsbE9iamVjdE1vZGUmJnRoaXMubmVlZHNMb2FkKCk/dGhpcy5fZGV2aWNlc0Zyb21JbnB1dFNldHRpbmdzKHRoaXMuX2lucHV0U2V0dGluZ3MpOm5ldyBQcm9taXNlKChmdW5jdGlvbihlKXt0LnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic2V0LW91dHB1dC1kZXZpY2VcIixvdXRwdXREZXZpY2VJZDpufSwoZnVuY3Rpb24obil7ZGVsZXRlIG4uYWN0aW9uLGRlbGV0ZSBuLmNhbGxiYWNrU3RhbXAsbi5yZXR1cm5QcmVsb2FkQ2FjaGU/ZSh0Ll9kZXZpY2VzRnJvbUlucHV0U2V0dGluZ3ModC5faW5wdXRTZXR0aW5ncykpOmUobil9KSl9KSl9KSksZnVuY3Rpb24oZSl7cmV0dXJuIE4uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJnZXRJbnB1dERldmljZXNcIix2YWx1ZTooST1oKChmdW5jdGlvbiooKXt2YXIgZT10aGlzO3JldHVybiB0aGlzLl9jYWxsT2JqZWN0TW9kZSYmdGhpcy5uZWVkc0xvYWQoKT90aGlzLl9kZXZpY2VzRnJvbUlucHV0U2V0dGluZ3ModGhpcy5faW5wdXRTZXR0aW5ncyk6bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe2Uuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJnZXQtaW5wdXQtZGV2aWNlc1wifSwoZnVuY3Rpb24obil7bi5yZXR1cm5QcmVsb2FkQ2FjaGU/dChlLl9kZXZpY2VzRnJvbUlucHV0U2V0dGluZ3MoZS5faW5wdXRTZXR0aW5ncykpOnQoe2NhbWVyYTpuLmNhbWVyYSxtaWM6bi5taWMsc3BlYWtlcjpuLnNwZWFrZXJ9KX0pKX0pKX0pKSxmdW5jdGlvbigpe3JldHVybiBJLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwibmF0aXZlSW5DYWxsQXVkaW9Nb2RlXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gVnMoKSx0aGlzLl9uYXRpdmVJbkNhbGxBdWRpb01vZGV9fSx7a2V5Olwic2V0TmF0aXZlSW5DYWxsQXVkaW9Nb2RlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoVnMoKSxbX3MsYnNdLmluY2x1ZGVzKGUpKXtpZihlIT09dGhpcy5fbmF0aXZlSW5DYWxsQXVkaW9Nb2RlKXJldHVybiB0aGlzLl9uYXRpdmVJbkNhbGxBdWRpb01vZGU9ZSwhdGhpcy5kaXNhYmxlUmVhY3ROYXRpdmVBdXRvRGV2aWNlTWFuYWdlbWVudChcImF1ZGlvXCIpJiZJcyh0aGlzLl9jYWxsU3RhdGUsdGhpcy5faXNQcmVwYXJpbmdUb0pvaW4pJiZ0aGlzLm5hdGl2ZVV0aWxzKCkuc2V0QXVkaW9Nb2RlKHRoaXMuX25hdGl2ZUluQ2FsbEF1ZGlvTW9kZSksdGhpc31lbHNlIGNvbnNvbGUuZXJyb3IoXCJpbnZhbGlkIGluLWNhbGwgYXVkaW8gbW9kZSBzcGVjaWZpZWQ6IFwiLGUpfX0se2tleTpcInByZUF1dGhcIix2YWx1ZTooeD1oKChmdW5jdGlvbiooKXt2YXIgZT10aGlzLHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O2lmKFJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwicHJlQXV0aCgpXCIpLERzKHRoaXMuX2NhbGxTdGF0ZSx0aGlzLl9pc1ByZXBhcmluZ1RvSm9pbixcInByZUF1dGgoKVwiKSx0aGlzLm5lZWRzTG9hZCgpJiYoeWllbGQgdGhpcy5sb2FkKHQpKSwhdC51cmwpdGhyb3cgbmV3IEVycm9yKFwicHJlQXV0aCgpIHJlcXVpcmVzIGF0IGxlYXN0IGEgdXJsIHRvIGJlIHByb3ZpZGVkXCIpO3JldHVybiB0aGlzLnZhbGlkYXRlUHJvcGVydGllcyh0KSx0aGlzLnByb3BlcnRpZXM9ZnMoZnMoe30sdGhpcy5wcm9wZXJ0aWVzKSx0KSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxuKXtlLl9wcmVsb2FkQ2FjaGUuaW5wdXRTZXR0aW5ncz1lLl9wcmVwSW5wdXRTZXR0aW5nc0ZvclNoYXJpbmcoZS5faW5wdXRTZXR0aW5ncywhMSksZS5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImRhaWx5LW1ldGhvZC1wcmVhdXRoXCIscHJvcGVydGllczpMcyhlLnByb3BlcnRpZXMsZS5jYWxsQ2xpZW50SWQpLHByZWxvYWRDYWNoZTpMcyhlLl9wcmVsb2FkQ2FjaGUsZS5jYWxsQ2xpZW50SWQpfSwoZnVuY3Rpb24ocil7cmV0dXJuIHIuZXJyb3I/bihyLmVycm9yKTpyLmFjY2Vzcz8oZS5fZGlkUHJlQXV0aD0hMCx2b2lkIHQoe2FjY2VzczpyLmFjY2Vzc30pKTpuKG5ldyBFcnJvcihcInVua25vd24gZXJyb3IgaW4gcHJlQXV0aCgpXCIpKX0pKX0pKX0pKSxmdW5jdGlvbigpe3JldHVybiB4LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwibG9hZFwiLHZhbHVlOihMPWgoKGZ1bmN0aW9uKihlKXt2YXIgdD10aGlzO2lmKHRoaXMubmVlZHNMb2FkKCkpe2lmKHRoaXMuX2Rlc3Ryb3llZCYmKHRoaXMuX2xvZ1VzZUFmdGVyRGVzdHJveSgpLHRoaXMuc3RyaWN0TW9kZSkpdGhyb3cgbmV3IEVycm9yKFwiVXNlIGFmdGVyIGRlc3Ryb3lcIik7aWYoZSYmKHRoaXMudmFsaWRhdGVQcm9wZXJ0aWVzKGUpLHRoaXMucHJvcGVydGllcz1mcyhmcyh7fSx0aGlzLnByb3BlcnRpZXMpLGUpKSwhdGhpcy5fY2FsbE9iamVjdE1vZGUmJiF0aGlzLnByb3BlcnRpZXMudXJsKXRocm93IG5ldyBFcnJvcihcImNhbid0IGxvYWQgaWZyYW1lIG1lZXRpbmcgYmVjYXVzZSB1cmwgcHJvcGVydHkgaXNuJ3Qgc2V0XCIpO3JldHVybiB0aGlzLl91cGRhdGVDYWxsU3RhdGUoZWkpLHRoaXMuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOkJpfSksdGhpcy5fY2FsbE9iamVjdE1vZGU/bmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsbil7dC5fY2FsbE9iamVjdExvYWRlci5jYW5jZWwoKTt2YXIgcj1EYXRlLm5vdygpO3QuX2NhbGxPYmplY3RMb2FkZXIubG9hZCh0LnByb3BlcnRpZXMuZGFpbHlDb25maWcsKGZ1bmN0aW9uKG4pe3QuX2J1bmRsZUxvYWRUaW1lPW4/XCJuby1vcFwiOkRhdGUubm93KCktcix0Ll91cGRhdGVDYWxsU3RhdGUodGkpLG4mJnQuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOlZpfSksZSgpfSksKGZ1bmN0aW9uKGUscil7aWYodC5lbWl0RGFpbHlKU0V2ZW50KHthY3Rpb246VWl9KSwhcil7dC5fdXBkYXRlQ2FsbFN0YXRlKG9pKSx0LnJlc2V0TWVldGluZ0RlcGVuZGVudFZhcnMoKTt2YXIgaT17YWN0aW9uOlVvLGVycm9yTXNnOmUubXNnLGVycm9yOnt0eXBlOlwiY29ubmVjdGlvbi1lcnJvclwiLG1zZzpcIkZhaWxlZCB0byBsb2FkIGNhbGwgb2JqZWN0IGJ1bmRsZS5cIixkZXRhaWxzOntvbjpcImxvYWRcIixzb3VyY2VFcnJvcjplLGJ1bmRsZVVybDpYKHQucHJvcGVydGllcy5kYWlseUNvbmZpZyl9fX07dC5fbWF5YmVTZW5kVG9TZW50cnkoaSksdC5lbWl0RGFpbHlKU0V2ZW50KGkpLG4oZS5tc2cpfX0pKX0pKToodGhpcy5faWZyYW1lLnNyYz1LKHRoaXMuYXNzZW1ibGVNZWV0aW5nVXJsKCksdGhpcy5wcm9wZXJ0aWVzLmRhaWx5Q29uZmlnKSxuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSxuKXt0Ll9sb2FkZWRDYWxsYmFjaz1mdW5jdGlvbihyKXt0Ll9jYWxsU3RhdGUhPT1vaT8odC5fdXBkYXRlQ2FsbFN0YXRlKHRpKSwodC5wcm9wZXJ0aWVzLmNzc0ZpbGV8fHQucHJvcGVydGllcy5jc3NUZXh0KSYmdC5sb2FkQ3NzKHQucHJvcGVydGllcyksZSgpKTpuKHIpfX0pKSl9fSkpLGZ1bmN0aW9uKGUpe3JldHVybiBMLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwiam9pblwiLHZhbHVlOihqPWgoKGZ1bmN0aW9uKigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307dGhpcy5fdGVzdENhbGxJblByb2dyZXNzJiZ0aGlzLnN0b3BUZXN0Q2FsbFF1YWxpdHkoKTt2YXIgbj0hMTtpZih0aGlzLm5lZWRzTG9hZCgpKXt0aGlzLnVwZGF0ZUlzUHJlcGFyaW5nVG9Kb2luKCEwKTt0cnl7eWllbGQgdGhpcy5sb2FkKHQpfWNhdGNoKGUpe3JldHVybiB0aGlzLnVwZGF0ZUlzUHJlcGFyaW5nVG9Kb2luKCExKSxQcm9taXNlLnJlamVjdChlKX19ZWxzZXtpZihuPSEoIXRoaXMucHJvcGVydGllcy5jc3NGaWxlJiYhdGhpcy5wcm9wZXJ0aWVzLmNzc1RleHQpLHRoaXMuX2RpZFByZUF1dGgpe2lmKHQudXJsJiZ0LnVybCE9PXRoaXMucHJvcGVydGllcy51cmwpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJ1cmwgaW4gam9pbigpIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBvbmUgdXNlZCBpbiBwcmVBdXRoKClcIiksdGhpcy51cGRhdGVJc1ByZXBhcmluZ1RvSm9pbighMSksUHJvbWlzZS5yZWplY3QoKTtpZih0LnRva2VuJiZ0LnRva2VuIT09dGhpcy5wcm9wZXJ0aWVzLnRva2VuKXJldHVybiBjb25zb2xlLmVycm9yKFwidG9rZW4gaW4gam9pbigpIGlzIGRpZmZlcmVudCB0aGFuIHRoZSBvbmUgdXNlZCBpbiBwcmVBdXRoKClcIiksdGhpcy51cGRhdGVJc1ByZXBhcmluZ1RvSm9pbighMSksUHJvbWlzZS5yZWplY3QoKX1pZih0LnVybCYmIXRoaXMuX2NhbGxPYmplY3RNb2RlJiZ0LnVybCYmdC51cmwhPT10aGlzLnByb3BlcnRpZXMudXJsKXJldHVybiBjb25zb2xlLmVycm9yKFwidXJsIGluIGpvaW4oKSBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgb25lIHVzZWQgaW4gbG9hZCgpIChcIi5jb25jYXQodGhpcy5wcm9wZXJ0aWVzLnVybCxcIiAtPiBcIikuY29uY2F0KHQudXJsLFwiKVwiKSksdGhpcy51cGRhdGVJc1ByZXBhcmluZ1RvSm9pbighMSksUHJvbWlzZS5yZWplY3QoKTt0aGlzLnZhbGlkYXRlUHJvcGVydGllcyh0KSx0aGlzLnByb3BlcnRpZXM9ZnMoZnMoe30sdGhpcy5wcm9wZXJ0aWVzKSx0KX1yZXR1cm4gdm9pZCAwIT09dC5zaG93TG9jYWxWaWRlbyYmKHRoaXMuX2NhbGxPYmplY3RNb2RlP2NvbnNvbGUuZXJyb3IoXCJzaG93TG9jYWxWaWRlbyBpcyBub3QgYXZhaWxhYmxlIGluIGNhbGxPYmplY3QgbW9kZVwiKTp0aGlzLl9zaG93TG9jYWxWaWRlbz0hIXQuc2hvd0xvY2FsVmlkZW8pLHZvaWQgMCE9PXQuc2hvd1BhcnRpY2lwYW50c0JhciYmKHRoaXMuX2NhbGxPYmplY3RNb2RlP2NvbnNvbGUuZXJyb3IoXCJzaG93UGFydGljaXBhbnRzQmFyIGlzIG5vdCBhdmFpbGFibGUgaW4gY2FsbE9iamVjdCBtb2RlXCIpOnRoaXMuX3Nob3dQYXJ0aWNpcGFudHNCYXI9ISF0LnNob3dQYXJ0aWNpcGFudHNCYXIpLHRoaXMuX2NhbGxTdGF0ZT09PXJpfHx0aGlzLl9jYWxsU3RhdGU9PT1uaT8oY29uc29sZS53YXJuKFwiYWxyZWFkeSBqb2luZWQgbWVldGluZywgY2FsbCBsZWF2ZSgpIGJlZm9yZSBqb2luaW5nIGFnYWluXCIpLHZvaWQgdGhpcy51cGRhdGVJc1ByZXBhcmluZ1RvSm9pbighMSkpOih0aGlzLl91cGRhdGVDYWxsU3RhdGUobmksITEpLHRoaXMuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOnFpfSksdGhpcy5fcHJlbG9hZENhY2hlLmlucHV0U2V0dGluZ3M9dGhpcy5fcHJlcElucHV0U2V0dGluZ3NGb3JTaGFyaW5nKHRoaXMuX2lucHV0U2V0dGluZ3N8fHt9LCExKSx0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwiam9pbi1tZWV0aW5nXCIscHJvcGVydGllczpMcyh0aGlzLnByb3BlcnRpZXMsdGhpcy5jYWxsQ2xpZW50SWQpLHByZWxvYWRDYWNoZTpMcyh0aGlzLl9wcmVsb2FkQ2FjaGUsdGhpcy5jYWxsQ2xpZW50SWQpfSksbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQscil7ZS5fam9pbmVkQ2FsbGJhY2s9ZnVuY3Rpb24oaSxvKXtpZihlLl9jYWxsU3RhdGUhPT1vaSl7aWYoZS5fdXBkYXRlQ2FsbFN0YXRlKHJpKSxpKWZvcih2YXIgYSBpbiBpKXtpZihlLl9jYWxsT2JqZWN0TW9kZSl7dmFyIHM9ZS5fY2FsbE1hY2hpbmUoKS5zdG9yZTtHYShpW2FdLHMpLFFhKGlbYV0scyksS2EoaVthXSxlLl9wYXJ0aWNpcGFudHNbYV0scyl9ZS5fcGFydGljaXBhbnRzW2FdPWZzKHt9LGlbYV0pLGUudG9nZ2xlUGFydGljaXBhbnRBdWRpb0Jhc2VkT25OYXRpdmVBdWRpb0ZvY3VzKCl9biYmZS5sb2FkQ3NzKGUucHJvcGVydGllcyksdChpKX1lbHNlIHIobyl9fSkpKX0pKSxmdW5jdGlvbigpe3JldHVybiBqLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwibGVhdmVcIix2YWx1ZTooQT1oKChmdW5jdGlvbiooKXt2YXIgZT10aGlzO3JldHVybiB0aGlzLl90ZXN0Q2FsbEluUHJvZ3Jlc3MmJnRoaXMuc3RvcFRlc3RDYWxsUXVhbGl0eSgpLG5ldyBQcm9taXNlKChmdW5jdGlvbih0KXtlLl9jYWxsU3RhdGU9PT1paXx8ZS5fY2FsbFN0YXRlPT09b2k/dCgpOmUuX2NhbGxPYmplY3RMb2FkZXImJiFlLl9jYWxsT2JqZWN0TG9hZGVyLmxvYWRlZD8oZS5fY2FsbE9iamVjdExvYWRlci5jYW5jZWwoKSxlLl91cGRhdGVDYWxsU3RhdGUoaWkpLGUucmVzZXRNZWV0aW5nRGVwZW5kZW50VmFycygpLGUuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOmlpfSksdCgpKTooZS5fcmVzb2x2ZUxlYXZlPXQsZS5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImxlYXZlLW1lZXRpbmdcIn0pKX0pKX0pKSxmdW5jdGlvbigpe3JldHVybiBBLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic3RhcnRTY3JlZW5TaGFyZVwiLHZhbHVlOihPPWgoKGZ1bmN0aW9uKigpe3ZhciBlPXRoaXMsdD1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307aWYoTnModGhpcy5fY2FsbE1hY2hpbmVJbml0aWFsaXplZCxcInN0YXJ0U2NyZWVuU2hhcmUoKVwiKSx0LnNjcmVlblZpZGVvU2VuZFNldHRpbmdzJiZ0aGlzLl92YWxpZGF0ZVZpZGVvU2VuZFNldHRpbmdzKFwic2NyZWVuVmlkZW9cIix0LnNjcmVlblZpZGVvU2VuZFNldHRpbmdzKSx0Lm1lZGlhU3RyZWFtJiYodGhpcy5fc2hhcmVkVHJhY2tzLnNjcmVlbk1lZGlhU3RyZWFtPXQubWVkaWFTdHJlYW0sdC5tZWRpYVN0cmVhbT1IbyksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIERhaWx5TmF0aXZlVXRpbHMmJnZvaWQgMCE9PURhaWx5TmF0aXZlVXRpbHMuaXNJT1MmJkRhaWx5TmF0aXZlVXRpbHMuaXNJT1Mpe3ZhciBuPXRoaXMubmF0aXZlVXRpbHMoKTtpZih5aWVsZCBuLmlzU2NyZWVuQmVpbmdDYXB0dXJlZCgpKXJldHVybiB2b2lkIHRoaXMuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOkJvLHR5cGU6XCJzY3JlZW4tc2hhcmUtZXJyb3JcIixlcnJvck1zZzpcIkNvdWxkIG5vdCBzdGFydCB0aGUgc2NyZWVuIHNoYXJpbmcuIFRoZSBzY3JlZW4gaXMgYWxyZWFkeSBiZWVuIGNhcHR1cmVkIVwifSk7bi5zZXRTeXN0ZW1TY3JlZW5DYXB0dXJlU3RhcnRDYWxsYmFjaygoZnVuY3Rpb24oKXtuLnNldFN5c3RlbVNjcmVlbkNhcHR1cmVTdGFydENhbGxiYWNrKG51bGwpLGUuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246cW8sY2FwdHVyZU9wdGlvbnM6dH0pfSkpLG4ucHJlc2VudFN5c3RlbVNjcmVlbkNhcHR1cmVQcm9tcHQoKX1lbHNlIHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246cW8sY2FwdHVyZU9wdGlvbnM6dH0pfSkpLGZ1bmN0aW9uKCl7cmV0dXJuIE8uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJzdG9wU2NyZWVuU2hhcmVcIix2YWx1ZTpmdW5jdGlvbigpe05zKHRoaXMuX2NhbGxNYWNoaW5lSW5pdGlhbGl6ZWQsXCJzdG9wU2NyZWVuU2hhcmUoKVwiKSx0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwibG9jYWwtc2NyZWVuLXN0b3BcIn0pfX0se2tleTpcInN0YXJ0UmVjb3JkaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30sdD1lLnR5cGU7aWYodCYmXCJjbG91ZFwiIT09dCYmXCJyYXctdHJhY2tzXCIhPT10JiZcImxvY2FsXCIhPT10KXRocm93IG5ldyBFcnJvcihcImludmFsaWQgdHlwZTogXCIuY29uY2F0KHQsXCIsIGFsbG93ZWQgdmFsdWVzICdjbG91ZCcsICdyYXctdHJhY2tzJywgb3IgJ2xvY2FsJ1wiKSk7dGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoZnMoe2FjdGlvbjpcImxvY2FsLXJlY29yZGluZy1zdGFydFwifSxlKSl9fSx7a2V5OlwidXBkYXRlUmVjb3JkaW5nXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sYXlvdXQsbj12b2lkIDA9PT10P3twcmVzZXQ6XCJkZWZhdWx0XCJ9OnQscj1lLmluc3RhbmNlSWQ7dGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImRhaWx5LW1ldGhvZC11cGRhdGUtcmVjb3JkaW5nXCIsbGF5b3V0Om4saW5zdGFuY2VJZDpyfSl9fSx7a2V5Olwic3RvcFJlY29yZGluZ1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O3RoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKGZzKHthY3Rpb246XCJsb2NhbC1yZWNvcmRpbmctc3RvcFwifSxlKSl9fSx7a2V5Olwic3RhcnRMaXZlU3RyZWFtaW5nXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307dGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoZnMoe2FjdGlvbjpcImRhaWx5LW1ldGhvZC1zdGFydC1saXZlLXN0cmVhbWluZ1wifSxlKSl9fSx7a2V5OlwidXBkYXRlTGl2ZVN0cmVhbWluZ1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUubGF5b3V0LG49dm9pZCAwPT09dD97cHJlc2V0OlwiZGVmYXVsdFwifTp0LHI9ZS5pbnN0YW5jZUlkO3RoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJkYWlseS1tZXRob2QtdXBkYXRlLWxpdmUtc3RyZWFtaW5nXCIsbGF5b3V0Om4saW5zdGFuY2VJZDpyfSl9fSx7a2V5OlwiYWRkTGl2ZVN0cmVhbWluZ0VuZHBvaW50c1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUuZW5kcG9pbnRzLG49ZS5pbnN0YW5jZUlkO3RoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246em8sZW5kcG9pbnRzT3A6WG8sZW5kcG9pbnRzOnQsaW5zdGFuY2VJZDpufSl9fSx7a2V5OlwicmVtb3ZlTGl2ZVN0cmVhbWluZ0VuZHBvaW50c1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUuZW5kcG9pbnRzLG49ZS5pbnN0YW5jZUlkO3RoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246em8sZW5kcG9pbnRzT3A6Wm8sZW5kcG9pbnRzOnQsaW5zdGFuY2VJZDpufSl9fSx7a2V5Olwic3RvcExpdmVTdHJlYW1pbmdcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTt0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZShmcyh7YWN0aW9uOlwiZGFpbHktbWV0aG9kLXN0b3AtbGl2ZS1zdHJlYW1pbmdcIn0sZSkpfX0se2tleTpcInZhbGlkYXRlRGFpbHlDb25maWdcIix2YWx1ZTpmdW5jdGlvbihlKXtlLmNhbVNpbXVsY2FzdEVuY29kaW5ncyYmKGNvbnNvbGUud2FybihcImNhbVNpbXVsY2FzdEVuY29kaW5ncyBpcyBkZXByZWNhdGVkLiBVc2Ugc2VuZFNldHRpbmdzLCBmb3VuZCBpbiBEYWlseUNhbGxPcHRpb25zLCB0byBwcm92aWRlIGNhbWVyYSBzaW11bGNhc3Qgc2V0dGluZ3MuXCIpLHRoaXMudmFsaWRhdGVTaW11bGNhc3RFbmNvZGluZ3MoZS5jYW1TaW11bGNhc3RFbmNvZGluZ3MpKSxlLnNjcmVlblNpbXVsY2FzdEVuY29kaW5ncyYmY29uc29sZS53YXJuKFwic2NyZWVuU2ltdWxjYXN0RW5jb2RpbmdzIGlzIGRlcHJlY2F0ZWQuIFVzZSBzZW5kU2V0dGluZ3MsIGZvdW5kIGluIERhaWx5Q2FsbE9wdGlvbnMsIHRvIHByb3ZpZGUgc2NyZWVuIHNpbXVsY2FzdCBzZXR0aW5ncy5cIiksdWEoKSYmZS5ub0F1dG9EZWZhdWx0RGV2aWNlQ2hhbmdlJiZjb25zb2xlLndhcm4oXCJub0F1dG9EZWZhdWx0RGV2aWNlQ2hhbmdlIGlzIG5vdCBzdXBwb3J0ZWQgb24gQW5kcm9pZCwgYW5kIHdpbGwgYmUgaWdub3JlZC5cIil9fSx7a2V5OlwidmFsaWRhdGVTaW11bGNhc3RFbmNvZGluZ3NcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbCxuPWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdJiZhcmd1bWVudHNbMl07aWYoZSl7aWYoIShlIGluc3RhbmNlb2YgQXJyYXl8fEFycmF5LmlzQXJyYXkoZSkpKXRocm93IG5ldyBFcnJvcihcImVuY29kaW5ncyBtdXN0IGJlIGFuIEFycmF5XCIpO2lmKCFyYyhlLmxlbmd0aCwxLDMpKXRocm93IG5ldyBFcnJvcihcImVuY29kaW5ncyBtdXN0IGJlIGFuIEFycmF5IHdpdGggYmV0d2VlbiAxIHRvIFwiLmNvbmNhdCgzLFwiIGxheWVyc1wiKSk7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBpPWVbcl07Zm9yKHZhciBvIGluIHRoaXMuX3ZhbGlkYXRlRW5jb2RpbmdMYXllckhhc1ZhbGlkUHJvcGVydGllcyhpKSxpKWlmKE1zLmluY2x1ZGVzKG8pKXtpZihcIm51bWJlclwiIT10eXBlb2YgaVtvXSl0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQobyxcIiBtdXN0IGJlIGEgbnVtYmVyXCIpKTtpZih0KXt2YXIgYT10W29dLHM9YS5taW4sYz1hLm1heDtpZighcmMoaVtvXSxzLGMpKXRocm93IG5ldyBFcnJvcihcIlwiLmNvbmNhdChvLFwiIHZhbHVlIG5vdCBpbiByYW5nZS4gdmFsaWQgcmFuZ2U6IFwiKS5jb25jYXQocyxcIiB0byBcIikuY29uY2F0KGMpKX19ZWxzZSBpZighW1wiYWN0aXZlXCIsXCJzY2FsYWJpbGl0eU1vZGVcIl0uaW5jbHVkZXMobykpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBrZXkgXCIuY29uY2F0KG8sXCIsIHZhbGlkIGtleXMgYXJlOlwiKStPYmplY3QudmFsdWVzKE1zKSk7aWYobiYmIWkuaGFzT3duUHJvcGVydHkoXCJtYXhCaXRyYXRlXCIpKXRocm93IG5ldyBFcnJvcihcIm1heEJpdHJhdGUgaXMgbm90IHNwZWNpZmllZFwiKX19fX0se2tleTpcInN0YXJ0UmVtb3RlTWVkaWFQbGF5ZXJcIix2YWx1ZTooUD1oKChmdW5jdGlvbiooZSl7dmFyIHQ9dGhpcyxuPWUudXJsLHI9ZS5zZXR0aW5ncyxpPXZvaWQgMD09PXI/e3N0YXRlOllvLlBMQVl9OnI7dHJ5eyFmdW5jdGlvbihlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoJ3VybCBwYXJhbWV0ZXIgbXVzdCBiZSBcInN0cmluZ1wiIHR5cGUnKX0obiksbmMoaSksZnVuY3Rpb24oZSl7Zm9yKHZhciB0IGluIGUpaWYoIUNzLmluY2x1ZGVzKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQga2V5IFwiLmNvbmNhdCh0LFwiLCB2YWxpZCBrZXlzIGFyZTogXCIpLmNvbmNhdChDcykpO2Uuc2ltdWxjYXN0RW5jb2RpbmdzJiZ0aGlzLnZhbGlkYXRlU2ltdWxjYXN0RW5jb2RpbmdzKGUuc2ltdWxjYXN0RW5jb2RpbmdzLFNzLCEwKX0oaSl9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS5lcnJvcihcImludmFsaWQgYXJndW1lbnQgRXJyb3I6IFwiLmNvbmNhdChlKSksY29uc29sZS5lcnJvcignc3RhcnRSZW1vdGVNZWRpYVBsYXllciBhcmd1bWVudHMgbXVzdCBiZSBvZiB0aGUgZm9ybTpcXG4gIHsgdXJsOiBcInBsYXliYWNrIHVybFwiLFxcbiAgc2V0dGluZ3M/OlxcbiAge3N0YXRlOiBcInBsYXlcInxcInBhdXNlXCIsIHNpbXVsY2FzdEVuY29kaW5ncz86IFt7fV0gfSB9JyksZX1yZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUscil7dC5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImRhaWx5LW1ldGhvZC1zdGFydC1yZW1vdGUtbWVkaWEtcGxheWVyXCIsdXJsOm4sc2V0dGluZ3M6aX0sKGZ1bmN0aW9uKHQpe3QuZXJyb3I/cih7ZXJyb3I6dC5lcnJvcixlcnJvck1zZzp0LmVycm9yTXNnfSk6ZSh7c2Vzc2lvbl9pZDp0LnNlc3Npb25faWQscmVtb3RlTWVkaWFQbGF5ZXJTdGF0ZTp7c3RhdGU6dC5zdGF0ZSxzZXR0aW5nczp0LnNldHRpbmdzfX0pfSkpfSkpfSkpLGZ1bmN0aW9uKGUpe3JldHVybiBQLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic3RvcFJlbW90ZU1lZGlhUGxheWVyXCIsdmFsdWU6KFQ9aCgoZnVuY3Rpb24qKGUpe3ZhciB0PXRoaXM7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwiIHJlbW90ZVBsYXllcklEIG11c3QgYmUgb2YgdHlwZSBzdHJpbmdcIik7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe3Quc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJkYWlseS1tZXRob2Qtc3RvcC1yZW1vdGUtbWVkaWEtcGxheWVyXCIsc2Vzc2lvbl9pZDplfSwoZnVuY3Rpb24oZSl7ZS5lcnJvcj9yKHtlcnJvcjplLmVycm9yLGVycm9yTXNnOmUuZXJyb3JNc2d9KTpuKCl9KSl9KSl9KSksZnVuY3Rpb24oZSl7cmV0dXJuIFQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJ1cGRhdGVSZW1vdGVNZWRpYVBsYXllclwiLHZhbHVlOihFPWgoKGZ1bmN0aW9uKihlKXt2YXIgdD10aGlzLG49ZS5zZXNzaW9uX2lkLHI9ZS5zZXR0aW5nczt0cnl7bmMocil9Y2F0Y2goZSl7dGhyb3cgY29uc29sZS5lcnJvcihcImludmFsaWQgYXJndW1lbnQgRXJyb3I6IFwiLmNvbmNhdChlKSksY29uc29sZS5lcnJvcigndXBkYXRlUmVtb3RlTWVkaWFQbGF5ZXIgYXJndW1lbnRzIG11c3QgYmUgb2YgdGhlIGZvcm06XFxuICBzZXNzaW9uX2lkOiBcInBhcnRpY2lwYW50IHNlc3Npb25cIixcXG4gIHsgc2V0dGluZ3M/OiB7c3RhdGU6IFwicGxheVwifFwicGF1c2VcIn0gfScpLGV9cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihlLGkpe3Quc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJkYWlseS1tZXRob2QtdXBkYXRlLXJlbW90ZS1tZWRpYS1wbGF5ZXJcIixzZXNzaW9uX2lkOm4sc2V0dGluZ3M6cn0sKGZ1bmN0aW9uKHQpe3QuZXJyb3I/aSh7ZXJyb3I6dC5lcnJvcixlcnJvck1zZzp0LmVycm9yTXNnfSk6ZSh7c2Vzc2lvbl9pZDp0LnNlc3Npb25faWQscmVtb3RlTWVkaWFQbGF5ZXJTdGF0ZTp7c3RhdGU6dC5zdGF0ZSxzZXR0aW5nczp0LnNldHRpbmdzfX0pfSkpfSkpfSkpLGZ1bmN0aW9uKGUpe3JldHVybiBFLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic3RhcnRUcmFuc2NyaXB0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7eHModGhpcy5fY2FsbFN0YXRlLFwic3RhcnRUcmFuc2NyaXB0aW9uKClcIiksdGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoZnMoe2FjdGlvbjpcImRhaWx5LW1ldGhvZC1zdGFydC10cmFuc2NyaXB0aW9uXCJ9LGUpKX19LHtrZXk6XCJ1cGRhdGVUcmFuc2NyaXB0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoeHModGhpcy5fY2FsbFN0YXRlLFwidXBkYXRlVHJhbnNjcmlwdGlvbigpXCIpLCFlKXRocm93IG5ldyBFcnJvcihcInVwZGF0ZVRyYW5zY3JpcHRpb24gRXJyb3I6IG9wdGlvbnMgaXMgbWFuZGF0b3J5XCIpO2lmKFwib2JqZWN0XCIhPT1uKGUpKXRocm93IG5ldyBFcnJvcihcInVwZGF0ZVRyYW5zY3JpcHRpb24gRXJyb3I6IG9wdGlvbnMgbXVzdCBiZSBvYmplY3QgdHlwZVwiKTtpZihlLnBhcnRpY2lwYW50cyYmIUFycmF5LmlzQXJyYXkoZS5wYXJ0aWNpcGFudHMpKXRocm93IG5ldyBFcnJvcihcInVwZGF0ZVRyYW5zY3JpcHRpb24gRXJyb3I6IHBhcnRpY2lwYW50cyBtdXN0IGJlIGFuIGFycmF5XCIpO3RoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKGZzKHthY3Rpb246XCJkYWlseS1tZXRob2QtdXBkYXRlLXRyYW5zY3JpcHRpb25cIn0sZSkpfX0se2tleTpcInN0b3BUcmFuc2NyaXB0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoeHModGhpcy5fY2FsbFN0YXRlLFwic3RvcFRyYW5zY3JpcHRpb24oKVwiKSxlJiZcIm9iamVjdFwiIT09bihlKSl0aHJvdyBuZXcgRXJyb3IoXCJzdG9wVHJhbnNjcmlwdGlvbiBFcnJvcjogb3B0aW9ucyBtdXN0IGJlIG9iamVjdCB0eXBlXCIpO2lmKGUmJiFlLmluc3RhbmNlSWQpdGhyb3cgbmV3IEVycm9yKCdcImluc3RhbmNlSWRcIiBub3QgcHJvdmlkZWQnKTt0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZShmcyh7YWN0aW9uOlwiZGFpbHktbWV0aG9kLXN0b3AtdHJhbnNjcmlwdGlvblwifSxlKSl9fSx7a2V5Olwic3RhcnREaWFsT3V0XCIsdmFsdWU6KEM9aCgoZnVuY3Rpb24qKGUpe3ZhciB0PXRoaXM7eHModGhpcy5fY2FsbFN0YXRlLFwic3RhcnREaWFsT3V0KClcIik7dmFyIG49ZnVuY3Rpb24oZSl7aWYoZSl7aWYoIUFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igc3RhcnRpbmcgZGlhbCBvdXQ6IGF1ZGlvIGNvZGVjIG11c3QgYmUgYW4gYXJyYXlcIik7aWYoZS5sZW5ndGg8PTApdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igc3RhcnRpbmcgZGlhbCBvdXQ6IGF1ZGlvIGNvZGVjIGFycmF5IHNwZWNpZmllZCBidXQgZW1wdHlcIik7ZS5mb3JFYWNoKChmdW5jdGlvbihlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBzdGFydGluZyBkaWFsIG91dDogYXVkaW8gY29kZWMgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZihcIk9QVVNcIiE9PWUmJlwiUENNVVwiIT09ZSYmXCJQQ01BXCIhPT1lJiZcIkc3MjJcIiE9PWUpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igc3RhcnRpbmcgZGlhbCBvdXQ6IGF1ZGlvIGNvZGVjIG11c3QgYmUgb25lIG9mIE9QVVMsIFBDTVUsIFBDTUEsIEc3MjJcIil9KSl9fTtpZighZS5zaXBVcmkmJiFlLnBob25lTnVtYmVyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIHN0YXJ0aW5nIGRpYWwgb3V0OiBlaXRoZXIgYSBzaXAgdXJpIG9yIHBob25lIG51bWJlciBtdXN0IGJlIHByb3ZpZGVkXCIpO2lmKGUuc2lwVXJpJiZlLnBob25lTnVtYmVyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIHN0YXJ0aW5nIGRpYWwgb3V0OiBvbmx5IG9uZSBvZiBzaXAgdXJpIG9yIHBob25lIG51bWJlciBtdXN0IGJlIHByb3ZpZGVkXCIpO2lmKGUuc2lwVXJpKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZS5zaXBVcmkpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igc3RhcnRpbmcgZGlhbCBvdXQ6IHNpcFVyaSBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKCFlLnNpcFVyaS5zdGFydHNXaXRoKFwic2lwOlwiKSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBzdGFydGluZyBkaWFsIG91dDogSW52YWxpZCBTSVAgVVJJLCBtdXN0IHN0YXJ0IHdpdGggJ3NpcDonXCIpO2lmKGUudmlkZW8mJlwiYm9vbGVhblwiIT10eXBlb2YgZS52aWRlbyl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBzdGFydGluZyBkaWFsIG91dDogdmlkZW8gbXVzdCBiZSBhIGJvb2xlYW4gdmFsdWVcIik7IWZ1bmN0aW9uKGUpe2lmKGUmJihuKGUuYXVkaW8pLGUudmlkZW8pKXtpZighQXJyYXkuaXNBcnJheShlLnZpZGVvKSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBzdGFydGluZyBkaWFsIG91dDogdmlkZW8gY29kZWMgbXVzdCBiZSBhbiBhcnJheVwiKTtpZihlLnZpZGVvLmxlbmd0aDw9MCl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBzdGFydGluZyBkaWFsIG91dDogdmlkZW8gY29kZWMgYXJyYXkgc3BlY2lmaWVkIGJ1dCBlbXB0eVwiKTtlLnZpZGVvLmZvckVhY2goKGZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIkVycm9yIHN0YXJ0aW5nIGRpYWwgb3V0OiB2aWRlbyBjb2RlYyBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKFwiSDI2NFwiIT09ZSYmXCJWUDhcIiE9PWUpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igc3RhcnRpbmcgZGlhbCBvdXQ6IHZpZGVvIGNvZGVjIG11c3QgYmUgSDI2NCBvciBWUDhcIil9KSl9fShlLmNvZGVjcyl9aWYoZS5waG9uZU51bWJlcil7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUucGhvbmVOdW1iZXIpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igc3RhcnRpbmcgZGlhbCBvdXQ6IHBob25lTnVtYmVyIG11c3QgYmUgYSBzdHJpbmdcIik7aWYoIS9eXFwrXFxkezEsfSQvLnRlc3QoZS5waG9uZU51bWJlcikpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igc3RhcnRpbmcgZGlhbCBvdXQ6IEludmFsaWQgcGhvbmUgbnVtYmVyLCBtdXN0IGJlIHZhbGlkIHBob25lIG51bWJlciBhcyBwZXIgRS4xNjRcIik7ZS5jb2RlY3MmJm4oZS5jb2RlY3MuYXVkaW8pfWlmKGUuY2FsbGVySWQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlLmNhbGxlcklkKXRocm93IG5ldyBFcnJvcihcIkVycm9yIHN0YXJ0aW5nIGRpYWwgb3V0OiBjYWxsZXJJZCBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKGUuc2lwVXJpKXRocm93IG5ldyBFcnJvcihcIkVycm9yIHN0YXJ0aW5nIGRpYWwgb3V0OiBjYWxsZXJJZCBub3QgYWxsb3dlZCB3aXRoIHNpcFVyaVwiKX1pZihlLmRpc3BsYXlOYW1lKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZS5kaXNwbGF5TmFtZSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBzdGFydGluZyBkaWFsIG91dDogZGlzcGxheU5hbWUgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZihlLmRpc3BsYXlOYW1lLmxlbmd0aD49MjAwKXRocm93IG5ldyBFcnJvcihcIkVycm9yIHN0YXJ0aW5nIGRpYWwgb3V0OiBkaXNwbGF5TmFtZSBsZW5ndGggbXVzdCBiZSBsZXNzIHRoYW4gMjAwXCIpfWlmKGUudXNlcklkKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZS51c2VySWQpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3Igc3RhcnRpbmcgZGlhbCBvdXQ6IHVzZXJJZCBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKGUudXNlcklkLmxlbmd0aD4zNil0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBzdGFydGluZyBkaWFsIG91dDogdXNlcklkIGxlbmd0aCBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAzNlwiKX1yZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7dC5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoZnMoe2FjdGlvbjpcImRpYWxvdXQtc3RhcnRcIn0sZSksKGZ1bmN0aW9uKGUpe2UuZXJyb3I/cihlLmVycm9yKTpuKGUpfSkpfSkpfSkpLGZ1bmN0aW9uKGUpe3JldHVybiBDLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic3RvcERpYWxPdXRcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiB4cyh0aGlzLl9jYWxsU3RhdGUsXCJzdG9wRGlhbE91dCgpXCIpLG5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe3Quc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKGZzKHthY3Rpb246XCJkaWFsb3V0LXN0b3BcIn0sZSksKGZ1bmN0aW9uKGUpe2UuZXJyb3I/cihlLmVycm9yKTpuKGUpfSkpfSkpfX0se2tleTpcInNpcENhbGxUcmFuc2ZlclwiLHZhbHVlOihNPWgoKGZ1bmN0aW9uKihlKXt2YXIgdD10aGlzO2lmKHhzKHRoaXMuX2NhbGxTdGF0ZSxcInNpcENhbGxUcmFuc2ZlcigpXCIpLCFlKXRocm93IG5ldyBFcnJvcihcInNpcENhbGxUcmFuc2ZlcigpIHJlcXVpcmVzIGEgc2Vzc2lvbklkIGFuZCB0b0VuZFBvaW50XCIpO3JldHVybiBlLnVzZVNpcFJlZmVyPSExLHRjKGUsXCJzaXBDYWxsVHJhbnNmZXJcIiksbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7dC5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoZnMoe2FjdGlvbjplYX0sZSksKGZ1bmN0aW9uKGUpe2UuZXJyb3I/cihlLmVycm9yKTpuKGUpfSkpfSkpfSkpLGZ1bmN0aW9uKGUpe3JldHVybiBNLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic2lwUmVmZXJcIix2YWx1ZTooUz1oKChmdW5jdGlvbiooZSl7dmFyIHQ9dGhpcztpZih4cyh0aGlzLl9jYWxsU3RhdGUsXCJzaXBSZWZlcigpXCIpLCFlKXRocm93IG5ldyBFcnJvcihcInNlc3Npb25JZCBhbmQgdG9FbmRQb2ludCBhcmUgbWFuZGF0b3J5IHBhcmFtZXRlclwiKTtyZXR1cm4gZS51c2VTaXBSZWZlcj0hMCx0YyhlLFwic2lwUmVmZXJcIiksbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7dC5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoZnMoe2FjdGlvbjplYX0sZSksKGZ1bmN0aW9uKGUpe2UuZXJyb3I/cihlLmVycm9yKTpuKGUpfSkpfSkpfSkpLGZ1bmN0aW9uKGUpe3JldHVybiBTLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic2VuZERUTUZcIix2YWx1ZTooaz1oKChmdW5jdGlvbiooZSl7dmFyIHQ9dGhpcztyZXR1cm4geHModGhpcy5fY2FsbFN0YXRlLFwic2VuZERUTUYoKVwiKSxmdW5jdGlvbihlKXt2YXIgdD1lLnNlc3Npb25JZCxuPWUudG9uZXM7aWYoIXR8fCFuKXRocm93IG5ldyBFcnJvcihcInNlc3Npb25JZCBhbmQgdG9uZXMgYXJlIG1hbmRhdG9yeSBwYXJhbWV0ZXJcIik7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHR8fFwic3RyaW5nXCIhPXR5cGVvZiBuKXRocm93IG5ldyBFcnJvcihcInNlc3Npb25JZCBhbmQgdG9uZXMgc2hvdWxkIGJlIG9mIHN0cmluZyB0eXBlXCIpO2lmKG4ubGVuZ3RoPjIwKXRocm93IG5ldyBFcnJvcihcInRvbmVzIHN0cmluZyBtdXN0IGJlIHVwdG8gMjAgY2hhcmFjdGVyc1wiKTt2YXIgcj0vW14wLTlBLUQqI10vZyxpPW4ubWF0Y2gocik7aWYoaSYmaVswXSl0aHJvdyBuZXcgRXJyb3IoXCJcIi5jb25jYXQoaVswXSxcIiBpcyBub3QgdmFsaWQgRFRNRiB0b25lXCIpKX0oZSksbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7dC5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoZnMoe2FjdGlvbjpcInNlbmQtZHRtZlwifSxlKSwoZnVuY3Rpb24oZSl7ZS5lcnJvcj9yKGUuZXJyb3IpOm4oZSl9KSl9KSl9KSksZnVuY3Rpb24oZSl7cmV0dXJuIGsuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJnZXROZXR3b3JrU3RhdHNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYodGhpcy5fY2FsbFN0YXRlIT09cmkpe3JldHVybntzdGF0czp7bGF0ZXN0Ont9fX19cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0KXtlLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwiZ2V0LWNhbGMtc3RhdHNcIn0sKGZ1bmN0aW9uKG4pe3QoZnMoe3N0YXRzOm4uc3RhdHN9LGUuX25ldHdvcmspKX0pKX0pKX19LHtrZXk6XCJ0ZXN0V2Vic29ja2V0Q29ubmVjdGl2aXR5XCIsdmFsdWU6KHc9aCgoZnVuY3Rpb24qKCl7dmFyIGU9dGhpcztpZihGcyh0aGlzLl90ZXN0Q2FsbEluUHJvZ3Jlc3MsXCJ0ZXN0V2Vic29ja2V0Q29ubmVjdGl2aXR5KClcIiksdGhpcy5uZWVkc0xvYWQoKSl0cnl7eWllbGQgdGhpcy5sb2FkKCl9Y2F0Y2goZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUpfXJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCxuKXtlLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwidGVzdC13ZWJzb2NrZXQtY29ubmVjdGl2aXR5XCJ9LChmdW5jdGlvbihlKXtlLmVycm9yP24oZS5lcnJvcik6dChlLnJlc3VsdHMpfSkpfSkpfSkpLGZ1bmN0aW9uKCl7cmV0dXJuIHcuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJhYm9ydFRlc3RXZWJzb2NrZXRDb25uZWN0aXZpdHlcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJhYm9ydC10ZXN0LXdlYnNvY2tldC1jb25uZWN0aXZpdHlcIn0pfX0se2tleTpcIl92YWxpZGF0ZVZpZGVvVHJhY2tGb3JOZXR3b3JrVGVzdHNcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZT9lIGluc3RhbmNlb2YgTWVkaWFTdHJlYW1UcmFjaz8hIXVzKGUse2lzTG9jYWxTY3JlZW5WaWRlbzohMX0pfHwoY29uc29sZS5lcnJvcihcIlZpZGVvIHRyYWNrIGlzIG5vdCBwbGF5YWJsZS4gVGhpcyB0ZXN0IG5lZWRzIGEgbGl2ZSB2aWRlbyB0cmFjay5cIiksITEpOihjb25zb2xlLmVycm9yKFwiVmlkZW8gdHJhY2sgbmVlZHMgdG8gYmUgb2YgdHlwZSBgTWVkaWFTdHJlYW1UcmFja2AuXCIpLCExKTooY29uc29sZS5lcnJvcihcIk1pc3NpbmcgdmlkZW8gdHJhY2suIFlvdSBtdXN0IHByb3ZpZGUgYSB2aWRlbyB0cmFjayBpbiBvcmRlciB0byBydW4gdGhpcyB0ZXN0LlwiKSwhMSl9fSx7a2V5OlwidGVzdENhbGxRdWFsaXR5XCIsdmFsdWU6KGI9aCgoZnVuY3Rpb24qKCl7dmFyIHQ9dGhpcztVcygpLFJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwidGVzdENhbGxRdWFsaXR5KClcIiksTnModGhpcy5fY2FsbE1hY2hpbmVJbml0aWFsaXplZCxcInRlc3RDYWxsUXVhbGl0eSgpXCIsbnVsbCwhMCksRHModGhpcy5fY2FsbFN0YXRlLHRoaXMuX2lzUHJlcGFyaW5nVG9Kb2luLFwidGVzdENhbGxRdWFsaXR5KClcIik7dmFyIG49dGhpcy5fdGVzdENhbGxBbHJlYWR5SW5Qcm9ncmVzcyxyPWZ1bmN0aW9uKGUpe258fCh0Ll90ZXN0Q2FsbEluUHJvZ3Jlc3M9ZSl9O2lmKHIoITApLHRoaXMubmVlZHNMb2FkKCkpdHJ5e3ZhciBpPXRoaXMuX2NhbGxTdGF0ZTt5aWVsZCB0aGlzLmxvYWQoKSx0aGlzLl9jYWxsU3RhdGU9aX1jYXRjaChlKXtyZXR1cm4gcighMSksUHJvbWlzZS5yZWplY3QoZSl9cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXt0LnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwidGVzdC1jYWxsLXF1YWxpdHlcIixkYWlseUpzVmVyc2lvbjp0LnByb3BlcnRpZXMuZGFpbHlKc1ZlcnNpb259LChmdW5jdGlvbihpKXt2YXIgbz1pLnJlc3VsdHMsYT1vLnJlc3VsdCxzPWUobyxkcyk7aWYoXCJmYWlsZWRcIj09PWEpe3ZhciBjLGw9ZnMoe30scyk7bnVsbCE9PShjPXMuZXJyb3IpJiZ2b2lkIDAhPT1jJiZjLmRldGFpbHM/KHMuZXJyb3IuZGV0YWlscz1KU09OLnBhcnNlKHMuZXJyb3IuZGV0YWlscyksbC5lcnJvcj1mcyhmcyh7fSxsLmVycm9yKSx7fSx7ZGV0YWlsczpmcyh7fSxsLmVycm9yLmRldGFpbHMpfSksbC5lcnJvci5kZXRhaWxzLmR1cmluZ1Rlc3Q9XCJ0ZXN0Q2FsbFF1YWxpdHlcIik6KGwuZXJyb3I9bC5lcnJvcj9mcyh7fSxsLmVycm9yKTp7fSxsLmVycm9yLmRldGFpbHM9e2R1cmluZ1Rlc3Q6XCJ0ZXN0Q2FsbFF1YWxpdHlcIn0pLHQuX21heWJlU2VuZFRvU2VudHJ5KGwpfXIoITEpLG4oZnMoe3Jlc3VsdDphfSxzKSl9KSl9KSl9KSksZnVuY3Rpb24oKXtyZXR1cm4gYi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInN0b3BUZXN0Q2FsbFF1YWxpdHlcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzdG9wLXRlc3QtY2FsbC1xdWFsaXR5XCJ9KX19LHtrZXk6XCJ0ZXN0Q29ubmVjdGlvblF1YWxpdHlcIix2YWx1ZTooXz1oKChmdW5jdGlvbiooZSl7dmFyIHQ7bmEoKT8oY29uc29sZS53YXJuKFwidGVzdENvbm5lY3Rpb25RdWFsaXR5KCkgaXMgZGVwcmVjYXRlZDogdXNlIHRlc3RQZWVyVG9QZWVyQ2FsbFF1YWxpdHkoKSBpbnN0ZWFkXCIpLHQ9eWllbGQgdGhpcy50ZXN0UGVlclRvUGVlckNhbGxRdWFsaXR5KGUpKTooY29uc29sZS53YXJuKFwidGVzdENvbm5lY3Rpb25RdWFsaXR5KCkgaXMgZGVwcmVjYXRlZDogdXNlIHRlc3RDYWxsUXVhbGl0eSgpIGluc3RlYWRcIiksdD15aWVsZCB0aGlzLnRlc3RDYWxsUXVhbGl0eSgpKTt2YXIgbj17cmVzdWx0OnQucmVzdWx0LHNlY29uZHNFbGFwc2VkOnQuc2Vjb25kc0VsYXBzZWR9O3JldHVybiB0LmRhdGEmJihuLmRhdGE9e21heFJUVDp0LmRhdGEubWF4Um91bmRUcmlwVGltZSxwYWNrZXRMb3NzOnQuZGF0YS5hdmdSZWN2UGFja2V0TG9zc30pLG59KSksZnVuY3Rpb24oZSl7cmV0dXJuIF8uYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJ0ZXN0UGVlclRvUGVlckNhbGxRdWFsaXR5XCIsdmFsdWU6KHk9aCgoZnVuY3Rpb24qKGUpe3ZhciB0PXRoaXM7aWYoRnModGhpcy5fdGVzdENhbGxJblByb2dyZXNzLFwidGVzdFBlZXJUb1BlZXJDYWxsUXVhbGl0eSgpXCIpLHRoaXMubmVlZHNMb2FkKCkpdHJ5e3lpZWxkIHRoaXMubG9hZCgpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX12YXIgbj1lLnZpZGVvVHJhY2sscj1lLmR1cmF0aW9uO2lmKCF0aGlzLl92YWxpZGF0ZVZpZGVvVHJhY2tGb3JOZXR3b3JrVGVzdHMobikpdGhyb3cgbmV3IEVycm9yKFwiVmlkZW8gdHJhY2sgZXJyb3JcIik7cmV0dXJuIHRoaXMuX3NoYXJlZFRyYWNrcy52aWRlb1RyYWNrRm9yQ29ubmVjdGlvblF1YWxpdHlUZXN0PW4sbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsbil7dC5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcInRlc3QtcDJwLWNhbGwtcXVhbGl0eVwiLGR1cmF0aW9uOnJ9LChmdW5jdGlvbih0KXt0LmVycm9yP24odC5lcnJvcik6ZSh0LnJlc3VsdHMpfSkpfSkpfSkpLGZ1bmN0aW9uKGUpe3JldHVybiB5LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic3RvcFRlc3RDb25uZWN0aW9uUXVhbGl0eVwiLHZhbHVlOmZ1bmN0aW9uKCl7bmEoKT8oY29uc29sZS53YXJuKFwic3RvcFRlc3RDb25uZWN0aW9uUXVhbGl0eSgpIGlzIGRlcHJlY2F0ZWQ6IHVzZSB0ZXN0UGVlclRvUGVlckNhbGxRdWFsaXR5KCkgYW5kIHN0b3BUZXN0UGVlclRvUGVlckNhbGxRdWFsaXR5KCkgaW5zdGVhZFwiKSx0aGlzLnN0b3BUZXN0UGVlclRvUGVlckNhbGxRdWFsaXR5KCkpOihjb25zb2xlLndhcm4oXCJzdG9wVGVzdENvbm5lY3Rpb25RdWFsaXR5KCkgaXMgZGVwcmVjYXRlZDogdXNlIHRlc3RDYWxsUXVhbGl0eSgpIGFuZCBzdG9wVGVzdENhbGxRdWFsaXR5KCkgaW5zdGVhZFwiKSx0aGlzLnN0b3BUZXN0Q2FsbFF1YWxpdHkoKSl9fSx7a2V5Olwic3RvcFRlc3RQZWVyVG9QZWVyQ2FsbFF1YWxpdHlcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzdG9wLXRlc3QtcDJwLWNhbGwtcXVhbGl0eVwifSl9fSx7a2V5OlwidGVzdE5ldHdvcmtDb25uZWN0aXZpdHlcIix2YWx1ZTooZz1oKChmdW5jdGlvbiooZSl7dmFyIHQ9dGhpcztpZihGcyh0aGlzLl90ZXN0Q2FsbEluUHJvZ3Jlc3MsXCJ0ZXN0TmV0d29ya0Nvbm5lY3Rpdml0eSgpXCIpLHRoaXMubmVlZHNMb2FkKCkpdHJ5e3lpZWxkIHRoaXMubG9hZCgpfWNhdGNoKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChlKX1pZighdGhpcy5fdmFsaWRhdGVWaWRlb1RyYWNrRm9yTmV0d29ya1Rlc3RzKGUpKXRocm93IG5ldyBFcnJvcihcIlZpZGVvIHRyYWNrIGVycm9yXCIpO3JldHVybiB0aGlzLl9zaGFyZWRUcmFja3MudmlkZW9UcmFja0Zvck5ldHdvcmtDb25uZWN0aXZpdHlUZXN0PWUsbmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsbil7dC5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcInRlc3QtbmV0d29yay1jb25uZWN0aXZpdHlcIn0sKGZ1bmN0aW9uKHQpe3QuZXJyb3I/bih0LmVycm9yKTplKHQucmVzdWx0cyl9KSl9KSl9KSksZnVuY3Rpb24oZSl7cmV0dXJuIGcuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJhYm9ydFRlc3ROZXR3b3JrQ29ubmVjdGl2aXR5XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwiYWJvcnQtdGVzdC1uZXR3b3JrLWNvbm5lY3Rpdml0eVwifSl9fSx7a2V5OlwiZ2V0Q3B1TG9hZFN0YXRzXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7aWYoZS5fY2FsbFN0YXRlPT09cmkpe2Uuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJnZXQtY3B1LWxvYWQtc3RhdHNcIn0sKGZ1bmN0aW9uKGUpe3QoZS5jcHVTdGF0cyl9KSl9ZWxzZSB0KHtjcHVMb2FkU3RhdGU6dm9pZCAwLGNwdUxvYWRTdGF0ZVJlYXNvbjp2b2lkIDAsc3RhdHM6e319KX0pKX19LHtrZXk6XCJfdmFsaWRhdGVFbmNvZGluZ0xheWVySGFzVmFsaWRQcm9wZXJ0aWVzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ7aWYoISgobnVsbD09PSh0PU9iamVjdC5rZXlzKGUpKXx8dm9pZCAwPT09dD92b2lkIDA6dC5sZW5ndGgpPjApKXRocm93IG5ldyBFcnJvcihcIkVtcHR5IGVuY29kaW5nIGlzIG5vdCBhbGxvd2VkLiBBdCBsZWFzdCBvbmUgb2YgdGhlc2UgdmFsaWQga2V5cyBzaG91bGQgYmUgc3BlY2lmaWVkOlwiK09iamVjdC52YWx1ZXMoTXMpKX19LHtrZXk6XCJfdmFsaWRhdGVWaWRlb1NlbmRTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIHI9XCJzY3JlZW5WaWRlb1wiPT09ZT9bXCJkZWZhdWx0LXNjcmVlbi12aWRlb1wiLFwiZGV0YWlsLW9wdGltaXplZFwiLFwibW90aW9uLW9wdGltaXplZFwiLFwibW90aW9uLWFuZC1kZXRhaWwtYmFsYW5jZWRcIl06W1wiZGVmYXVsdC12aWRlb1wiLFwiYmFuZHdpZHRoLW9wdGltaXplZFwiLFwiYmFuZHdpZHRoLWFuZC1xdWFsaXR5LWJhbGFuY2VkXCIsXCJxdWFsaXR5LW9wdGltaXplZFwiLFwiYWRhcHRpdmUtMi1sYXllcnNcIixcImFkYXB0aXZlLTMtbGF5ZXJzXCJdLGk9XCJWaWRlbyBzZW5kIHNldHRpbmdzIHNob3VsZCBiZSBlaXRoZXIgYW4gb2JqZWN0IG9yIG9uZSBvZiB0aGUgc3VwcG9ydGVkIHByZXNldHM6IFwiLmNvbmNhdChyLmpvaW4oKSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKCFyLmluY2x1ZGVzKHQpKXRocm93IG5ldyBFcnJvcihpKX1lbHNle2lmKFwib2JqZWN0XCIhPT1uKHQpKXRocm93IG5ldyBFcnJvcihpKTtpZighdC5tYXhRdWFsaXR5JiYhdC5lbmNvZGluZ3MmJnZvaWQgMD09PXQuYWxsb3dBZGFwdGl2ZUxheWVycyl0aHJvdyBuZXcgRXJyb3IoXCJWaWRlbyBzZW5kIHNldHRpbmdzIG11c3QgY29udGFpbiBhdCBsZWFzdCBtYXhRdWFsaXR5LCBhbGxvd0FkYXB0aXZlTGF5ZXJzIG9yIGVuY29kaW5ncyBhdHRyaWJ1dGVcIik7aWYodC5tYXhRdWFsaXR5JiYtMT09PVtcImxvd1wiLFwibWVkaXVtXCIsXCJoaWdoXCJdLmluZGV4T2YodC5tYXhRdWFsaXR5KSl0aHJvdyBuZXcgRXJyb3IoXCJtYXhRdWFsaXR5IG11c3QgYmUgZWl0aGVyIGxvdywgbWVkaXVtIG9yIGhpZ2hcIik7aWYodC5lbmNvZGluZ3Mpe3ZhciBvPSExO3N3aXRjaChPYmplY3Qua2V5cyh0LmVuY29kaW5ncykubGVuZ3RoKXtjYXNlIDE6bz0hdC5lbmNvZGluZ3MubG93O2JyZWFrO2Nhc2UgMjpvPSF0LmVuY29kaW5ncy5sb3d8fCF0LmVuY29kaW5ncy5tZWRpdW07YnJlYWs7Y2FzZSAzOm89IXQuZW5jb2RpbmdzLmxvd3x8IXQuZW5jb2RpbmdzLm1lZGl1bXx8IXQuZW5jb2RpbmdzLmhpZ2g7YnJlYWs7ZGVmYXVsdDpvPSEwfWlmKG8pdGhyb3cgbmV3IEVycm9yKFwiRW5jb2RpbmdzIG11c3QgYmUgZGVmaW5lZCBhczogbG93LCBsb3cgYW5kIG1lZGl1bSwgb3IgbG93LCBtZWRpdW0gYW5kIGhpZ2guXCIpO3QuZW5jb2RpbmdzLmxvdyYmdGhpcy5fdmFsaWRhdGVFbmNvZGluZ0xheWVySGFzVmFsaWRQcm9wZXJ0aWVzKHQuZW5jb2RpbmdzLmxvdyksdC5lbmNvZGluZ3MubWVkaXVtJiZ0aGlzLl92YWxpZGF0ZUVuY29kaW5nTGF5ZXJIYXNWYWxpZFByb3BlcnRpZXModC5lbmNvZGluZ3MubWVkaXVtKSx0LmVuY29kaW5ncy5oaWdoJiZ0aGlzLl92YWxpZGF0ZUVuY29kaW5nTGF5ZXJIYXNWYWxpZFByb3BlcnRpZXModC5lbmNvZGluZ3MuaGlnaCl9fX19LHtrZXk6XCJ2YWxpZGF0ZVVwZGF0ZVNlbmRTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoIWV8fDA9PT1PYmplY3Qua2V5cyhlKS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiU2VuZCBzZXR0aW5ncyBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgaW5mb3JtYXRpb24gZm9yIG9uZSB0cmFjayFcIik7T2JqZWN0LmVudHJpZXMoZSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49dihlLDIpLHI9blswXSxpPW5bMV07dC5fdmFsaWRhdGVWaWRlb1NlbmRTZXR0aW5ncyhyLGkpfSkpfX0se2tleTpcInVwZGF0ZVNlbmRTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIHRoaXMudmFsaWRhdGVVcGRhdGVTZW5kU2V0dGluZ3MoZSksdGhpcy5uZWVkc0xvYWQoKT8odGhpcy5fcHJlbG9hZENhY2hlLnNlbmRTZXR0aW5ncz1lLHtzZW5kU2V0dGluZ3M6dGhpcy5fcHJlbG9hZENhY2hlLnNlbmRTZXR0aW5nc30pOm5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe3Quc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJ1cGRhdGUtc2VuZC1zZXR0aW5nc1wiLHNlbmRTZXR0aW5nczplfSwoZnVuY3Rpb24oZSl7ZS5lcnJvcj9yKGUuZXJyb3IpOm4oZS5zZW5kU2V0dGluZ3MpfSkpfSkpfX0se2tleTpcImdldFNlbmRTZXR0aW5nc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlbmRTZXR0aW5nc3x8dGhpcy5fcHJlbG9hZENhY2hlLnNlbmRTZXR0aW5nc319LHtrZXk6XCJnZXRMb2NhbEF1ZGlvTGV2ZWxcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9sb2NhbEF1ZGlvTGV2ZWx9fSx7a2V5OlwiZ2V0UmVtb3RlUGFydGljaXBhbnRzQXVkaW9MZXZlbFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlbW90ZVBhcnRpY2lwYW50c0F1ZGlvTGV2ZWx9fSx7a2V5OlwiZ2V0QWN0aXZlU3BlYWtlclwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIFVzKCksdGhpcy5fYWN0aXZlU3BlYWtlcn19LHtrZXk6XCJzZXRBY3RpdmVTcGVha2VyTW9kZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBVcygpLHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtYWN0aXZlLXNwZWFrZXItbW9kZVwiLGVuYWJsZWQ6ZX0pLHRoaXN9fSx7a2V5OlwiYWN0aXZlU3BlYWtlck1vZGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBVcygpLHRoaXMuX2FjdGl2ZVNwZWFrZXJNb2RlfX0se2tleTpcInN1YnNjcmliZVRvVHJhY2tzQXV0b21hdGljYWxseVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3ByZWxvYWRDYWNoZS5zdWJzY3JpYmVUb1RyYWNrc0F1dG9tYXRpY2FsbHl9fSx7a2V5Olwic2V0U3Vic2NyaWJlVG9UcmFja3NBdXRvbWF0aWNhbGx5XCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHhzKHRoaXMuX2NhbGxTdGF0ZSxcInNldFN1YnNjcmliZVRvVHJhY2tzQXV0b21hdGljYWxseSgpXCIsXCJVc2UgdGhlIHN1YnNjcmliZVRvVHJhY2tzQXV0b21hdGljYWxseSBjb25maWd1cmF0aW9uIHByb3BlcnR5LlwiKSx0aGlzLl9wcmVsb2FkQ2FjaGUuc3Vic2NyaWJlVG9UcmFja3NBdXRvbWF0aWNhbGx5PWUsdGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImRhaWx5LW1ldGhvZC1zdWJzY3JpYmUtdG8tdHJhY2tzLWF1dG9tYXRpY2FsbHlcIixlbmFibGVkOmV9KSx0aGlzfX0se2tleTpcImVudW1lcmF0ZURldmljZXNcIix2YWx1ZTooZj1oKChmdW5jdGlvbiooKXt2YXIgZT10aGlzO2lmKHRoaXMuX2NhbGxPYmplY3RNb2RlKXt2YXIgdD15aWVsZCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKTtyZXR1cm5cIkZpcmVmb3hcIj09PXBhKCkmJmhhKCkubWFqb3I+MTE1JiZoYSgpLm1ham9yPDEyMyYmKHQ9dC5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVyblwiYXVkaW9vdXRwdXRcIiE9PWUua2luZH0pKSkse2RldmljZXM6dC5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpO2lmKCFuYSgpJiZcInZpZGVvaW5wdXRcIj09PWUua2luZCYmZS5nZXRDYXBhYmlsaXRpZXMpe3ZhciBuLHI9ZS5nZXRDYXBhYmlsaXRpZXMoKTt0LmZhY2luZz0obnVsbD09cnx8bnVsbD09PShuPXIuZmFjaW5nTW9kZSl8fHZvaWQgMD09PW4/dm9pZCAwOm4ubGVuZ3RoKT49MT9yLmZhY2luZ01vZGVbMF06dm9pZCAwfXJldHVybiB0fSkpfX1yZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe2Uuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJlbnVtZXJhdGUtZGV2aWNlc1wifSwoZnVuY3Rpb24oZSl7dCh7ZGV2aWNlczplLmRldmljZXN9KX0pKX0pKX0pKSxmdW5jdGlvbigpe3JldHVybiBmLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic2VuZEFwcE1lc3NhZ2VcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCIqXCI7aWYoeHModGhpcy5fY2FsbFN0YXRlLFwic2VuZEFwcE1lc3NhZ2UoKVwiKSxKU09OLnN0cmluZ2lmeShlKS5sZW5ndGg+dGhpcy5fbWF4QXBwTWVzc2FnZVNpemUpdGhyb3cgbmV3IEVycm9yKFwiTWVzc2FnZSBkYXRhIHRvbyBsYXJnZS4gTWF4IHNpemUgaXMgXCIrdGhpcy5fbWF4QXBwTWVzc2FnZVNpemUpO3JldHVybiB0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwiYXBwLW1zZ1wiLGRhdGE6ZSx0bzp0fSksdGhpc319LHtrZXk6XCJhZGRGYWtlUGFydGljaXBhbnRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gVXMoKSx4cyh0aGlzLl9jYWxsU3RhdGUsXCJhZGRGYWtlUGFydGljaXBhbnQoKVwiKSx0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZShmcyh7YWN0aW9uOlwiYWRkLWZha2UtcGFydGljaXBhbnRcIn0sZSkpLHRoaXN9fSx7a2V5Olwic2V0U2hvd05hbWVzTW9kZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBCcyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcInNldFNob3dOYW1lc01vZGUoKVwiKSxVcygpLGUmJlwiYWx3YXlzXCIhPT1lJiZcIm5ldmVyXCIhPT1lPyhjb25zb2xlLmVycm9yKCdzZXRTaG93TmFtZXNNb2RlIGFyZ3VtZW50IHNob3VsZCBiZSBcImFsd2F5c1wiLCBcIm5ldmVyXCIsIG9yIGZhbHNlJyksdGhpcyk6KHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtc2hvdy1uYW1lc1wiLG1vZGU6ZX0pLHRoaXMpfX0se2tleTpcInNldFNob3dMb2NhbFZpZGVvXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0hKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdKXx8YXJndW1lbnRzWzBdO3JldHVybiBCcyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcInNldFNob3dMb2NhbFZpZGVvKClcIiksVXMoKSx4cyh0aGlzLl9jYWxsU3RhdGUsXCJzZXRTaG93TG9jYWxWaWRlbygpXCIpLFwiYm9vbGVhblwiIT10eXBlb2YgZT8oY29uc29sZS5lcnJvcihcInNldFNob3dMb2NhbFZpZGVvIG9ubHkgYWNjZXB0cyBhIGJvb2xlYW4gdmFsdWVcIiksdGhpcyk6KHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtc2hvdy1sb2NhbC12aWRlb1wiLHNob3c6ZX0pLHRoaXMuX3Nob3dMb2NhbFZpZGVvPWUsdGhpcyl9fSx7a2V5Olwic2hvd0xvY2FsVmlkZW9cIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBCcyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcInNob3dMb2NhbFZpZGVvKClcIiksVXMoKSx0aGlzLl9zaG93TG9jYWxWaWRlb319LHtrZXk6XCJzZXRTaG93UGFydGljaXBhbnRzQmFyXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0hKGFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdKXx8YXJndW1lbnRzWzBdO3JldHVybiBCcyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcInNldFNob3dQYXJ0aWNpcGFudHNCYXIoKVwiKSxVcygpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcInNldFNob3dQYXJ0aWNpcGFudHNCYXIoKVwiKSxcImJvb2xlYW5cIiE9dHlwZW9mIGU/KGNvbnNvbGUuZXJyb3IoXCJzZXRTaG93UGFydGljaXBhbnRzQmFyIG9ubHkgYWNjZXB0cyBhIGJvb2xlYW4gdmFsdWVcIiksdGhpcyk6KHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtc2hvdy1wYXJ0aWNpcGFudHMtYmFyXCIsc2hvdzplfSksdGhpcy5fc2hvd1BhcnRpY2lwYW50c0Jhcj1lLHRoaXMpfX0se2tleTpcInNob3dQYXJ0aWNpcGFudHNCYXJcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiBCcyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcInNob3dQYXJ0aWNpcGFudHNCYXIoKVwiKSxVcygpLHRoaXMuX3Nob3dQYXJ0aWNpcGFudHNCYXJ9fSx7a2V5OlwiY3VzdG9tSW50ZWdyYXRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gVXMoKSxCcyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcImN1c3RvbUludGVncmF0aW9ucygpXCIpLHRoaXMuX2N1c3RvbUludGVncmF0aW9uc319LHtrZXk6XCJzZXRDdXN0b21JbnRlZ3JhdGlvbnNcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gVXMoKSxCcyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcInNldEN1c3RvbUludGVncmF0aW9ucygpXCIpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcInNldEN1c3RvbUludGVncmF0aW9ucygpXCIpLFpzKGUpPyh0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic2V0LWN1c3RvbS1pbnRlZ3JhdGlvbnNcIixpbnRlZ3JhdGlvbnM6ZX0pLHRoaXMuX2N1c3RvbUludGVncmF0aW9ucz1lLHRoaXMpOnRoaXN9fSx7a2V5Olwic3RhcnRDdXN0b21JbnRlZ3JhdGlvbnNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKFVzKCksQnModGhpcy5fY2FsbE9iamVjdE1vZGUsXCJzdGFydEN1c3RvbUludGVncmF0aW9ucygpXCIpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcInN0YXJ0Q3VzdG9tSW50ZWdyYXRpb25zKClcIiksQXJyYXkuaXNBcnJheShlKSYmZS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZX0pKXx8IUFycmF5LmlzQXJyYXkoZSkmJlwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiBjb25zb2xlLmVycm9yKFwic3RhcnRDdXN0b21JbnRlZ3JhdGlvbnMoKSBvbmx5IGFjY2VwdHMgc3RyaW5nIHwgc3RyaW5nW11cIiksdGhpczt2YXIgbj1cInN0cmluZ1wiPT10eXBlb2YgZT9bZV06ZSxyPW4uZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4hKGUgaW4gdC5fY3VzdG9tSW50ZWdyYXRpb25zKX0pKTtyZXR1cm4gci5sZW5ndGg/KGNvbnNvbGUuZXJyb3IoXCJDYW4ndCBmaW5kIGN1c3RvbSBpbnRlZ3JhdGlvbihzKTogXFxcIlwiLmNvbmNhdChyLmpvaW4oXCIsIFwiKSwnXCInKSksdGhpcyk6KHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzdGFydC1jdXN0b20taW50ZWdyYXRpb25zXCIsaWRzOm59KSx0aGlzKX19LHtrZXk6XCJzdG9wQ3VzdG9tSW50ZWdyYXRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZihVcygpLEJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwic3RvcEN1c3RvbUludGVncmF0aW9ucygpXCIpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcInN0b3BDdXN0b21JbnRlZ3JhdGlvbnMoKVwiKSxBcnJheS5pc0FycmF5KGUpJiZlLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBlfSkpfHwhQXJyYXkuaXNBcnJheShlKSYmXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJzdG9wQ3VzdG9tSW50ZWdyYXRpb25zKCkgb25seSBhY2NlcHRzIHN0cmluZyB8IHN0cmluZ1tdXCIpLHRoaXM7dmFyIG49XCJzdHJpbmdcIj09dHlwZW9mIGU/W2VdOmUscj1uLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIShlIGluIHQuX2N1c3RvbUludGVncmF0aW9ucyl9KSk7cmV0dXJuIHIubGVuZ3RoPyhjb25zb2xlLmVycm9yKFwiQ2FuJ3QgZmluZCBjdXN0b20gaW50ZWdyYXRpb24ocyk6IFxcXCJcIi5jb25jYXQoci5qb2luKFwiLCBcIiksJ1wiJykpLHRoaXMpOih0aGlzLnNlbmRNZXNzYWdlVG9DYWxsTWFjaGluZSh7YWN0aW9uOlwic3RvcC1jdXN0b20taW50ZWdyYXRpb25zXCIsaWRzOm59KSx0aGlzKX19LHtrZXk6XCJjdXN0b21UcmF5QnV0dG9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwiY3VzdG9tVHJheUJ1dHRvbnMoKVwiKSxVcygpLHRoaXMuX2N1c3RvbVRyYXlCdXR0b25zfX0se2tleTpcInVwZGF0ZUN1c3RvbVRyYXlCdXR0b25zXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuIEJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwidXBkYXRlQ3VzdG9tVHJheUJ1dHRvbnMoKVwiKSxVcygpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcInVwZGF0ZUN1c3RvbVRyYXlCdXR0b25zKClcIiksWHMoZSk/KHRoaXMuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJ1cGRhdGUtY3VzdG9tLXRyYXktYnV0dG9uc1wiLGJ0bnM6ZX0pLHRoaXMuX2N1c3RvbVRyYXlCdXR0b25zPWUsdGhpcyk6KGNvbnNvbGUuZXJyb3IoXCJ1cGRhdGVDdXN0b21UcmF5QnV0dG9ucyBvbmx5IGFjY2VwdHMgYSBkaWN0aW9uYXJ5IG9mIHRoZSB0eXBlIFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShUcykpKSx0aGlzKX19LHtrZXk6XCJ0aGVtZVwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEJzKHRoaXMuX2NhbGxPYmplY3RNb2RlLFwidGhlbWUoKVwiKSx0aGlzLnByb3BlcnRpZXMudGhlbWV9fSx7a2V5Olwic2V0VGhlbWVcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBCcyh0aGlzLl9jYWxsT2JqZWN0TW9kZSxcInNldFRoZW1lKClcIiksbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4scil7dHJ5e3QudmFsaWRhdGVQcm9wZXJ0aWVzKHt0aGVtZTplfSksdC5wcm9wZXJ0aWVzLnRoZW1lPWZzKHt9LGUpLHQuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtdGhlbWVcIix0aGVtZTp0LnByb3BlcnRpZXMudGhlbWV9KTt0cnl7dC5lbWl0RGFpbHlKU0V2ZW50KHthY3Rpb246UmksdGhlbWU6dC5wcm9wZXJ0aWVzLnRoZW1lfSl9Y2F0Y2goZSl7Y29uc29sZS5sb2coXCJjb3VsZCBub3QgZW1pdCAndGhlbWUtdXBkYXRlZCdcIixlKX1uKHQucHJvcGVydGllcy50aGVtZSl9Y2F0Y2goZSl7cihlKX19KSl9fSx7a2V5OlwicmVxdWVzdEZ1bGxzY3JlZW5cIix2YWx1ZToocD1oKChmdW5jdGlvbiooKXtpZihVcygpLHRoaXMuX2lmcmFtZSYmIWRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50JiZvYSgpKXRyeXsoeWllbGQgdGhpcy5faWZyYW1lLnJlcXVlc3RGdWxsc2NyZWVuKT90aGlzLl9pZnJhbWUucmVxdWVzdEZ1bGxzY3JlZW4oKTp0aGlzLl9pZnJhbWUud2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4oKX1jYXRjaChlKXtjb25zb2xlLmxvZyhcImNvdWxkIG5vdCBtYWtlIHZpZGVvIGNhbGwgZnVsbHNjcmVlblwiLGUpfX0pKSxmdW5jdGlvbigpe3JldHVybiBwLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiZXhpdEZ1bGxzY3JlZW5cIix2YWx1ZTpmdW5jdGlvbigpe1VzKCksZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQ/ZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKTpkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudCYmZG9jdW1lbnQud2Via2l0RXhpdEZ1bGxzY3JlZW4oKX19LHtrZXk6XCJnZXRTaWRlYmFyVmlld1wiLHZhbHVlOih1PWgoKGZ1bmN0aW9uKigpe3ZhciBlPXRoaXM7cmV0dXJuIHRoaXMuX2NhbGxPYmplY3RNb2RlPyhjb25zb2xlLmVycm9yKFwiZ2V0U2lkZWJhclZpZXcgaXMgbm90IGF2YWlsYWJsZSBpbiBjYWxsT2JqZWN0IG1vZGVcIiksUHJvbWlzZS5yZXNvbHZlKG51bGwpKTpuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7ZS5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImdldC1zaWRlYmFyLXZpZXdcIn0sKGZ1bmN0aW9uKGUpe3QoZS52aWV3KX0pKX0pKX0pKSxmdW5jdGlvbigpe3JldHVybiB1LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic2V0U2lkZWJhclZpZXdcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5fY2FsbE9iamVjdE1vZGU/KGNvbnNvbGUuZXJyb3IoXCJzZXRTaWRlYmFyVmlldyBpcyBub3QgYXZhaWxhYmxlIGluIGNhbGxPYmplY3QgbW9kZVwiKSx0aGlzKToodGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcInNldC1zaWRlYmFyLXZpZXdcIix2aWV3OmV9KSx0aGlzKX19LHtrZXk6XCJyb29tXCIsdmFsdWU6KGw9aCgoZnVuY3Rpb24qKCl7dmFyIGU9dGhpcyx0PShhcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e30pLmluY2x1ZGVSb29tQ29uZmlnRGVmYXVsdHMsbj12b2lkIDA9PT10fHx0O3JldHVybiB0aGlzLl9hY2Nlc3NTdGF0ZS5hY2Nlc3M9PT1waXx8dGhpcy5uZWVkc0xvYWQoKT90aGlzLnByb3BlcnRpZXMudXJsP3tyb29tVXJsUGVuZGluZ0pvaW46dGhpcy5wcm9wZXJ0aWVzLnVybH06bnVsbDpuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7ZS5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImxpYi1yb29tLWluZm9cIixpbmNsdWRlUm9vbUNvbmZpZ0RlZmF1bHRzOm59LChmdW5jdGlvbihlKXtkZWxldGUgZS5hY3Rpb24sZGVsZXRlIGUuY2FsbGJhY2tTdGFtcCx0KGUpfSkpfSkpfSkpLGZ1bmN0aW9uKCl7cmV0dXJuIGwuYXBwbHkodGhpcyxhcmd1bWVudHMpfSl9LHtrZXk6XCJnZW9cIix2YWx1ZToocz1oKChmdW5jdGlvbiooKXt0cnl7dmFyIGU9eWllbGQgZmV0Y2goXCJodHRwczovL2dzLmRhaWx5LmNvL19rc18veC1zd3NsLzpcIik7cmV0dXJue2N1cnJlbnQ6KHlpZWxkIGUuanNvbigpKS5nZW99fWNhdGNoKGUpe3JldHVybiBjb25zb2xlLmVycm9yKFwiZ2VvIGxvb2t1cCBmYWlsZWRcIixlKSx7Y3VycmVudDpcIlwifX19KSksZnVuY3Rpb24oKXtyZXR1cm4gcy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInNldE5ldHdvcmtUb3BvbG9neVwiLHZhbHVlOihpPWgoKGZ1bmN0aW9uKihlKXt2YXIgdD10aGlzO3JldHVybiBVcygpLHhzKHRoaXMuX2NhbGxTdGF0ZSxcInNldE5ldHdvcmtUb3BvbG9neSgpXCIpLG5ldyBQcm9taXNlKChmdW5jdGlvbihuLHIpe3Quc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246XCJzZXQtbmV0d29yay10b3BvbG9neVwiLG9wdHM6ZX0sKGZ1bmN0aW9uKGUpe2UuZXJyb3I/cih7ZXJyb3I6ZS5lcnJvcn0pOm4oe3dvcmtlcklkOmUud29ya2VySWR9KX0pKX0pKX0pKSxmdW5jdGlvbihlKXtyZXR1cm4gaS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcImdldE5ldHdvcmtUb3BvbG9neVwiLHZhbHVlOihyPWgoKGZ1bmN0aW9uKigpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LG4pe2UubmVlZHNMb2FkKCkmJnQoe3RvcG9sb2d5Olwibm9uZVwifSksZS5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImdldC1uZXR3b3JrLXRvcG9sb2d5XCJ9LChmdW5jdGlvbihlKXtlLmVycm9yP24oe2Vycm9yOmUuZXJyb3J9KTp0KHt0b3BvbG9neTplLnRvcG9sb2d5fSl9KSl9KSl9KSksZnVuY3Rpb24oKXtyZXR1cm4gci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9KX0se2tleTpcInNldFBsYXlOZXdQYXJ0aWNpcGFudFNvdW5kXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoVXMoKSxcIm51bWJlclwiIT10eXBlb2YgZSYmITAhPT1lJiYhMSE9PWUpdGhyb3cgbmV3IEVycm9yKFwiYXJndW1lbnQgdG8gc2V0U2hvdWxkUGxheU5ld1BhcnRpY2lwYW50U291bmQgc2hvdWxkIGJlIHRydWUsIGZhbHNlLCBvciBhIG51bWJlciwgYnV0IGlzIFwiLmNvbmNhdChlKSk7dGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoe2FjdGlvbjpcImRhaWx5LW1ldGhvZC1zZXQtcGxheS1kaW5nXCIsYXJnOmV9KX19LHtrZXk6XCJvblwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG0ucHJvdG90eXBlLm9uLmNhbGwodGhpcyxlLHQpfX0se2tleTpcIm9uY2VcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiBtLnByb3RvdHlwZS5vbmNlLmNhbGwodGhpcyxlLHQpfX0se2tleTpcIm9mZlwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG0ucHJvdG90eXBlLm9mZi5jYWxsKHRoaXMsZSx0KX19LHtrZXk6XCJ2YWxpZGF0ZVByb3BlcnRpZXNcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdCxuO2lmKG51bGwhPWUmJm51bGwhPT0odD1lLmRhaWx5Q29uZmlnKSYmdm9pZCAwIT09dCYmdC51c2VyTWVkaWFBdWRpb0NvbnN0cmFpbnRzKXt2YXIgcixpLG87bmEoKXx8Y29uc29sZS53YXJuKFwidXNlck1lZGlhQXVkaW9Db25zdHJhaW50cyBpcyBkZXByZWNhdGVkLiBZb3UgY2FuIG92ZXJyaWRlIGNvbnN0cmFpbnRzIHdpdGggaW5wdXRTZXR0aW5ncy5hdWRpby5zZXR0aW5ncywgZm91bmQgaW4gRGFpbHlDYWxsT3B0aW9ucy5cIik7dmFyIGE9ZS5pbnB1dFNldHRpbmdzfHx7fTthLmF1ZGlvPShudWxsPT09KHI9ZS5pbnB1dFNldHRpbmdzKXx8dm9pZCAwPT09cj92b2lkIDA6ci5hdWRpbyl8fHt9LGEuYXVkaW8uc2V0dGluZ3M9KG51bGw9PT0oaT1lLmlucHV0U2V0dGluZ3MpfHx2b2lkIDA9PT1pfHxudWxsPT09KG89aS5hdWRpbyl8fHZvaWQgMD09PW8/dm9pZCAwOm8uc2V0dGluZ3MpfHx7fSxhLmF1ZGlvLnNldHRpbmdzPWZzKGZzKHt9LGEuYXVkaW8uc2V0dGluZ3MpLGUuZGFpbHlDb25maWcudXNlck1lZGlhQXVkaW9Db25zdHJhaW50cyksZS5pbnB1dFNldHRpbmdzPWEsZGVsZXRlIGUuZGFpbHlDb25maWcudXNlck1lZGlhQXVkaW9Db25zdHJhaW50c31pZihudWxsIT1lJiZudWxsIT09KG49ZS5kYWlseUNvbmZpZykmJnZvaWQgMCE9PW4mJm4udXNlck1lZGlhVmlkZW9Db25zdHJhaW50cyl7dmFyIHMsYyxsO25hKCl8fGNvbnNvbGUud2FybihcInVzZXJNZWRpYVZpZGVvQ29uc3RyYWludHMgaXMgZGVwcmVjYXRlZC4gWW91IGNhbiBvdmVycmlkZSBjb25zdHJhaW50cyB3aXRoIGlucHV0U2V0dGluZ3MudmlkZW8uc2V0dGluZ3MsIGZvdW5kIGluIERhaWx5Q2FsbE9wdGlvbnMuXCIpO3ZhciB1PWUuaW5wdXRTZXR0aW5nc3x8e307dS52aWRlbz0obnVsbD09PShzPWUuaW5wdXRTZXR0aW5ncyl8fHZvaWQgMD09PXM/dm9pZCAwOnMudmlkZW8pfHx7fSx1LnZpZGVvLnNldHRpbmdzPShudWxsPT09KGM9ZS5pbnB1dFNldHRpbmdzKXx8dm9pZCAwPT09Y3x8bnVsbD09PShsPWMudmlkZW8pfHx2b2lkIDA9PT1sP3ZvaWQgMDpsLnNldHRpbmdzKXx8e30sdS52aWRlby5zZXR0aW5ncz1mcyhmcyh7fSx1LnZpZGVvLnNldHRpbmdzKSxlLmRhaWx5Q29uZmlnLnVzZXJNZWRpYVZpZGVvQ29uc3RyYWludHMpLGUuaW5wdXRTZXR0aW5ncz11LGRlbGV0ZSBlLmRhaWx5Q29uZmlnLnVzZXJNZWRpYVZpZGVvQ29uc3RyYWludHN9Zm9yKHZhciBkIGluIGUpe2lmKCFPc1tkXSl0aHJvdyBuZXcgRXJyb3IoXCJ1bnJlY29nbml6ZWQgcHJvcGVydHkgJ1wiLmNvbmNhdChkLFwiJ1wiKSk7aWYoT3NbZF0udmFsaWRhdGUmJiFPc1tkXS52YWxpZGF0ZShlW2RdLHRoaXMpKXRocm93IG5ldyBFcnJvcihcInByb3BlcnR5ICdcIi5jb25jYXQoZCxcIic6IFwiKS5jb25jYXQoT3NbZF0uaGVscCkpfX19LHtrZXk6XCJhc3NlbWJsZU1lZXRpbmdVcmxcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlLHQsbj1mcyhmcyh7fSx0aGlzLnByb3BlcnRpZXMpLHt9LHtlbWI6dGhpcy5jYWxsQ2xpZW50SWQsZW1iSHJlZjplbmNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLmhyZWYpLHByb3h5Om51bGwhPT0oZT10aGlzLnByb3BlcnRpZXMuZGFpbHlDb25maWcpJiZ2b2lkIDAhPT1lJiZlLnByb3h5VXJsP2VuY29kZVVSSUNvbXBvbmVudChudWxsPT09KHQ9dGhpcy5wcm9wZXJ0aWVzLmRhaWx5Q29uZmlnKXx8dm9pZCAwPT09dD92b2lkIDA6dC5wcm94eVVybCk6dm9pZCAwfSkscj1uLnVybC5tYXRjaCgvXFw/Lyk/XCImXCI6XCI/XCI7cmV0dXJuIG4udXJsK3IrT2JqZWN0LmtleXMoT3MpLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIE9zW2VdLnF1ZXJ5U3RyaW5nJiZ2b2lkIDAhPT1uW2VdfSkpLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuXCJcIi5jb25jYXQoT3NbZV0ucXVlcnlTdHJpbmcsXCI9XCIpLmNvbmNhdChuW2VdKX0pKS5qb2luKFwiJlwiKX19LHtrZXk6XCJuZWVkc0xvYWRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybltacixlaSxpaSxvaV0uaW5jbHVkZXModGhpcy5fY2FsbFN0YXRlKX19LHtrZXk6XCJzZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmVcIix2YWx1ZTpmdW5jdGlvbihlLHQpe2lmKHRoaXMuX2Rlc3Ryb3llZCYmKHRoaXMuX2xvZ1VzZUFmdGVyRGVzdHJveSgpLHRoaXMuc3RyaWN0TW9kZSkpdGhyb3cgbmV3IEVycm9yKFwiVXNlIGFmdGVyIGRlc3Ryb3lcIik7dGhpcy5fbWVzc2FnZUNoYW5uZWwuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKGUsdCx0aGlzLmNhbGxDbGllbnRJZCx0aGlzLl9pZnJhbWUpfX0se2tleTpcImZvcndhcmRQYWNrYWdlZE1lc3NhZ2VUb0NhbGxNYWNoaW5lXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fbWVzc2FnZUNoYW5uZWwuZm9yd2FyZFBhY2thZ2VkTWVzc2FnZVRvQ2FsbE1hY2hpbmUoZSx0aGlzLl9pZnJhbWUsdGhpcy5jYWxsQ2xpZW50SWQpfX0se2tleTpcImFkZExpc3RlbmVyRm9yUGFja2FnZWRNZXNzYWdlc0Zyb21DYWxsTWFjaGluZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl9tZXNzYWdlQ2hhbm5lbC5hZGRMaXN0ZW5lckZvclBhY2thZ2VkTWVzc2FnZXNGcm9tQ2FsbE1hY2hpbmUoZSx0aGlzLmNhbGxDbGllbnRJZCl9fSx7a2V5OlwicmVtb3ZlTGlzdGVuZXJGb3JQYWNrYWdlZE1lc3NhZ2VzRnJvbUNhbGxNYWNoaW5lXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fbWVzc2FnZUNoYW5uZWwucmVtb3ZlTGlzdGVuZXJGb3JQYWNrYWdlZE1lc3NhZ2VzRnJvbUNhbGxNYWNoaW5lKGUpfX0se2tleTpcImhhbmRsZU1lc3NhZ2VGcm9tQ2FsbE1hY2hpbmVcIix2YWx1ZTpmdW5jdGlvbih0KXtzd2l0Y2godC5hY3Rpb24pe2Nhc2UgTmk6dGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUoZnMoe2FjdGlvbjpGaX0sdGhpcy5wcm9wZXJ0aWVzKSk7YnJlYWs7Y2FzZVwiY2FsbC1tYWNoaW5lLWluaXRpYWxpemVkXCI6dGhpcy5fY2FsbE1hY2hpbmVJbml0aWFsaXplZD0hMDt2YXIgbj17YWN0aW9uOldvLGxldmVsOlwibG9nXCIsY29kZToxMDExLHN0YXRzOntldmVudDpcImJ1bmRsZSBsb2FkXCIsdGltZTpcIm5vLW9wXCI9PT10aGlzLl9idW5kbGVMb2FkVGltZT8wOnRoaXMuX2J1bmRsZUxvYWRUaW1lLHByZUxvYWRlZDpcIm5vLW9wXCI9PT10aGlzLl9idW5kbGVMb2FkVGltZSx1cmw6WCh0aGlzLnByb3BlcnRpZXMuZGFpbHlDb25maWcpfX07dGhpcy5zZW5kTWVzc2FnZVRvQ2FsbE1hY2hpbmUobiksdGhpcy5fZGVsYXlEdXBsaWNhdGVJbnN0YW5jZUxvZyYmdGhpcy5fbG9nRHVwbGljYXRlSW5zdGFuY2VBdHRlbXB0KCk7YnJlYWs7Y2FzZSBWaTp0aGlzLl9sb2FkZWRDYWxsYmFjayYmKHRoaXMuX2xvYWRlZENhbGxiYWNrKCksdGhpcy5fbG9hZGVkQ2FsbGJhY2s9bnVsbCksdGhpcy5lbWl0RGFpbHlKU0V2ZW50KHQpO2JyZWFrO2Nhc2Ugemk6dmFyIHIsaT1mcyh7fSx0KTtkZWxldGUgaS5pbnRlcm5hbCx0aGlzLl9tYXhBcHBNZXNzYWdlU2l6ZT0obnVsbD09PShyPXQuaW50ZXJuYWwpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLl9tYXhBcHBNZXNzYWdlU2l6ZSl8fFZvLHRoaXMuX2pvaW5lZENhbGxiYWNrJiYodGhpcy5fam9pbmVkQ2FsbGJhY2sodC5wYXJ0aWNpcGFudHMpLHRoaXMuX2pvaW5lZENhbGxiYWNrPW51bGwpLHRoaXMuZW1pdERhaWx5SlNFdmVudChpKTticmVhaztjYXNlIEhpOmNhc2UgR2k6aWYodGhpcy5fY2FsbFN0YXRlPT09aWkpcmV0dXJuO2lmKHQucGFydGljaXBhbnQmJnQucGFydGljaXBhbnQuc2Vzc2lvbl9pZCl7dmFyIG89dC5wYXJ0aWNpcGFudC5sb2NhbD9cImxvY2FsXCI6dC5wYXJ0aWNpcGFudC5zZXNzaW9uX2lkO2lmKHRoaXMuX2NhbGxPYmplY3RNb2RlKXt2YXIgYT10aGlzLl9jYWxsTWFjaGluZSgpLnN0b3JlO0dhKHQucGFydGljaXBhbnQsYSksUWEodC5wYXJ0aWNpcGFudCxhKSxLYSh0LnBhcnRpY2lwYW50LHRoaXMuX3BhcnRpY2lwYW50c1tvXSxhKX10cnl7dGhpcy5tYXliZVBhcnRpY2lwYW50VHJhY2tzU3RvcHBlZCh0aGlzLl9wYXJ0aWNpcGFudHNbb10sdC5wYXJ0aWNpcGFudCksdGhpcy5tYXliZVBhcnRpY2lwYW50VHJhY2tzU3RhcnRlZCh0aGlzLl9wYXJ0aWNpcGFudHNbb10sdC5wYXJ0aWNpcGFudCksdGhpcy5tYXliZUV2ZW50UmVjb3JkaW5nU3RvcHBlZCh0aGlzLl9wYXJ0aWNpcGFudHNbb10sdC5wYXJ0aWNpcGFudCksdGhpcy5tYXliZUV2ZW50UmVjb3JkaW5nU3RhcnRlZCh0aGlzLl9wYXJ0aWNpcGFudHNbb10sdC5wYXJ0aWNpcGFudCl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcihcInRyYWNrIGV2ZW50cyBlcnJvclwiLGUpfXRoaXMuY29tcGFyZUVxdWFsRm9yUGFydGljaXBhbnRVcGRhdGVFdmVudCh0LnBhcnRpY2lwYW50LHRoaXMuX3BhcnRpY2lwYW50c1tvXSl8fCh0aGlzLl9wYXJ0aWNpcGFudHNbb109ZnMoe30sdC5wYXJ0aWNpcGFudCksdGhpcy50b2dnbGVQYXJ0aWNpcGFudEF1ZGlvQmFzZWRPbk5hdGl2ZUF1ZGlvRm9jdXMoKSx0aGlzLmVtaXREYWlseUpTRXZlbnQodCkpfWJyZWFrO2Nhc2UgUWk6aWYodC5wYXJ0aWNpcGFudCYmdC5wYXJ0aWNpcGFudC5zZXNzaW9uX2lkKXt2YXIgcz10aGlzLl9wYXJ0aWNpcGFudHNbdC5wYXJ0aWNpcGFudC5zZXNzaW9uX2lkXTtzJiZ0aGlzLm1heWJlUGFydGljaXBhbnRUcmFja3NTdG9wcGVkKHMsbnVsbCksZGVsZXRlIHRoaXMuX3BhcnRpY2lwYW50c1t0LnBhcnRpY2lwYW50LnNlc3Npb25faWRdLHRoaXMuZW1pdERhaWx5SlNFdmVudCh0KX1icmVhaztjYXNlIFlpOkQodGhpcy5fcGFydGljaXBhbnRDb3VudHMsdC5wYXJ0aWNpcGFudENvdW50cyl8fCh0aGlzLl9wYXJ0aWNpcGFudENvdW50cz10LnBhcnRpY2lwYW50Q291bnRzLHRoaXMuZW1pdERhaWx5SlNFdmVudCh0KSk7YnJlYWs7Y2FzZSBLaTp2YXIgYz17YWNjZXNzOnQuYWNjZXNzfTt0LmF3YWl0aW5nQWNjZXNzJiYoYy5hd2FpdGluZ0FjY2Vzcz10LmF3YWl0aW5nQWNjZXNzKSxEKHRoaXMuX2FjY2Vzc1N0YXRlLGMpfHwodGhpcy5fYWNjZXNzU3RhdGU9Yyx0aGlzLmVtaXREYWlseUpTRXZlbnQodCkpO2JyZWFrO2Nhc2UgWGk6aWYodC5tZWV0aW5nU2Vzc2lvbil7dGhpcy5fbWVldGluZ1Nlc3Npb25TdW1tYXJ5PXQubWVldGluZ1Nlc3Npb24sdGhpcy5lbWl0RGFpbHlKU0V2ZW50KHQpO3ZhciBsPWZzKGZzKHt9LHQpLHt9LHthY3Rpb246XCJtZWV0aW5nLXNlc3Npb24tdXBkYXRlZFwifSk7dGhpcy5lbWl0RGFpbHlKU0V2ZW50KGwpfWJyZWFrO2Nhc2UgVW86dmFyIHU7dGhpcy5faWZyYW1lJiYhdC5wcmVzZXJ2ZUlmcmFtZSYmKHRoaXMuX2lmcmFtZS5zcmM9XCJcIiksdGhpcy5fdXBkYXRlQ2FsbFN0YXRlKG9pKSx0aGlzLnJlc2V0TWVldGluZ0RlcGVuZGVudFZhcnMoKSx0aGlzLl9sb2FkZWRDYWxsYmFjayYmKHRoaXMuX2xvYWRlZENhbGxiYWNrKHQuZXJyb3JNc2cpLHRoaXMuX2xvYWRlZENhbGxiYWNrPW51bGwpLHQucHJlc2VydmVJZnJhbWU7dmFyIGQ9ZSh0LHBzKTtudWxsIT1kJiZudWxsIT09KHU9ZC5lcnJvcikmJnZvaWQgMCE9PXUmJnUuZGV0YWlscyYmKGQuZXJyb3IuZGV0YWlscz1KU09OLnBhcnNlKGQuZXJyb3IuZGV0YWlscykpLHRoaXMuX21heWJlU2VuZFRvU2VudHJ5KHQpLHRoaXMuX2pvaW5lZENhbGxiYWNrJiYodGhpcy5fam9pbmVkQ2FsbGJhY2sobnVsbCxkKSx0aGlzLl9qb2luZWRDYWxsYmFjaz1udWxsKSx0aGlzLmVtaXREYWlseUpTRXZlbnQoZCk7YnJlYWs7Y2FzZSBXaTp0aGlzLl9jYWxsU3RhdGUhPT1vaSYmdGhpcy5fdXBkYXRlQ2FsbFN0YXRlKGlpKSx0aGlzLnJlc2V0TWVldGluZ0RlcGVuZGVudFZhcnMoKSx0aGlzLl9yZXNvbHZlTGVhdmUmJih0aGlzLl9yZXNvbHZlTGVhdmUoKSx0aGlzLl9yZXNvbHZlTGVhdmU9bnVsbCksdGhpcy5lbWl0RGFpbHlKU0V2ZW50KHQpO2JyZWFrO2Nhc2VcInNlbGVjdGVkLWRldmljZXMtdXBkYXRlZFwiOnQuZGV2aWNlcyYmdGhpcy5lbWl0RGFpbHlKU0V2ZW50KHQpO2JyZWFrO2Nhc2UgRW86dmFyIHA9dC50aHJlc2hvbGQsaD10LnF1YWxpdHk7cD09PXRoaXMuX25ldHdvcmsudGhyZXNob2xkJiZoPT09dGhpcy5fbmV0d29yay5xdWFsaXR5fHwodGhpcy5fbmV0d29yay5xdWFsaXR5PWgsdGhpcy5fbmV0d29yay50aHJlc2hvbGQ9cCx0aGlzLmVtaXREYWlseUpTRXZlbnQodCkpO2JyZWFrO2Nhc2UgUG86dCYmdC5jcHVMb2FkU3RhdGUmJnRoaXMuZW1pdERhaWx5SlNFdmVudCh0KTticmVhaztjYXNlIE9vOnQmJnZvaWQgMCE9PXQuZmFjZUNvdW50cyYmdGhpcy5lbWl0RGFpbHlKU0V2ZW50KHQpO2JyZWFrO2Nhc2UgTW86dmFyIGY9dC5hY3RpdmVTcGVha2VyO3RoaXMuX2FjdGl2ZVNwZWFrZXIucGVlcklkIT09Zi5wZWVySWQmJih0aGlzLl9hY3RpdmVTcGVha2VyLnBlZXJJZD1mLnBlZXJJZCx0aGlzLmVtaXREYWlseUpTRXZlbnQoe2FjdGlvbjp0LmFjdGlvbixhY3RpdmVTcGVha2VyOnRoaXMuX2FjdGl2ZVNwZWFrZXJ9KSk7YnJlYWs7Y2FzZVwic2hvdy1sb2NhbC12aWRlby1jaGFuZ2VkXCI6aWYodGhpcy5fY2FsbE9iamVjdE1vZGUpcmV0dXJuO3ZhciB2PXQuc2hvdzt0aGlzLl9zaG93TG9jYWxWaWRlbz12LHRoaXMuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOnQuYWN0aW9uLHNob3c6dn0pO2JyZWFrO2Nhc2UgQ286dmFyIGc9dC5lbmFibGVkO3RoaXMuX2FjdGl2ZVNwZWFrZXJNb2RlIT09ZyYmKHRoaXMuX2FjdGl2ZVNwZWFrZXJNb2RlPWcsdGhpcy5lbWl0RGFpbHlKU0V2ZW50KHthY3Rpb246dC5hY3Rpb24sZW5hYmxlZDp0aGlzLl9hY3RpdmVTcGVha2VyTW9kZX0pKTticmVhaztjYXNlIHRvOmNhc2Ugbm86Y2FzZSBybzp0aGlzLl93YWl0aW5nUGFydGljaXBhbnRzPXQuYWxsV2FpdGluZ1BhcnRpY2lwYW50cyx0aGlzLmVtaXREYWlseUpTRXZlbnQoe2FjdGlvbjp0LmFjdGlvbixwYXJ0aWNpcGFudDp0LnBhcnRpY2lwYW50fSk7YnJlYWs7Y2FzZSBGbzpEKHRoaXMuX3JlY2VpdmVTZXR0aW5ncyx0LnJlY2VpdmVTZXR0aW5ncyl8fCh0aGlzLl9yZWNlaXZlU2V0dGluZ3M9dC5yZWNlaXZlU2V0dGluZ3MsdGhpcy5lbWl0RGFpbHlKU0V2ZW50KHthY3Rpb246dC5hY3Rpb24scmVjZWl2ZVNldHRpbmdzOnQucmVjZWl2ZVNldHRpbmdzfSkpO2JyZWFrO2Nhc2UgUm86dGhpcy5fbWF5YmVVcGRhdGVJbnB1dFNldHRpbmdzKHQuaW5wdXRTZXR0aW5ncyk7YnJlYWs7Y2FzZVwic2VuZC1zZXR0aW5ncy11cGRhdGVkXCI6RCh0aGlzLl9zZW5kU2V0dGluZ3MsdC5zZW5kU2V0dGluZ3MpfHwodGhpcy5fc2VuZFNldHRpbmdzPXQuc2VuZFNldHRpbmdzLHRoaXMuX3ByZWxvYWRDYWNoZS5zZW5kU2V0dGluZ3M9bnVsbCx0aGlzLmVtaXREYWlseUpTRXZlbnQoe2FjdGlvbjp0LmFjdGlvbixzZW5kU2V0dGluZ3M6dC5zZW5kU2V0dGluZ3N9KSk7YnJlYWs7Y2FzZVwibG9jYWwtYXVkaW8tbGV2ZWxcIjp0aGlzLl9sb2NhbEF1ZGlvTGV2ZWw9dC5hdWRpb0xldmVsLHRoaXMuX3ByZWxvYWRDYWNoZS5sb2NhbEF1ZGlvTGV2ZWxPYnNlcnZlcj1udWxsLHRoaXMuZW1pdERhaWx5SlNFdmVudCh0KTticmVhaztjYXNlXCJyZW1vdGUtcGFydGljaXBhbnRzLWF1ZGlvLWxldmVsXCI6dGhpcy5fcmVtb3RlUGFydGljaXBhbnRzQXVkaW9MZXZlbD10LnBhcnRpY2lwYW50c0F1ZGlvTGV2ZWwsdGhpcy5fcHJlbG9hZENhY2hlLnJlbW90ZVBhcnRpY2lwYW50c0F1ZGlvTGV2ZWxPYnNlcnZlcj1udWxsLHRoaXMuZW1pdERhaWx5SlNFdmVudCh0KTticmVhaztjYXNlIHlvOnZhciBtPXQuc2Vzc2lvbl9pZDt0aGlzLl9ybXBQbGF5ZXJTdGF0ZVttXT10LnBsYXllclN0YXRlLHRoaXMuZW1pdERhaWx5SlNFdmVudCh0KTticmVhaztjYXNlIGJvOmRlbGV0ZSB0aGlzLl9ybXBQbGF5ZXJTdGF0ZVt0LnNlc3Npb25faWRdLHRoaXMuZW1pdERhaWx5SlNFdmVudCh0KTticmVhaztjYXNlIF9vOnZhciB5PXQuc2Vzc2lvbl9pZCxfPXRoaXMuX3JtcFBsYXllclN0YXRlW3ldO18mJnRoaXMuY29tcGFyZUVxdWFsRm9yUk1QVXBkYXRlRXZlbnQoXyx0LnJlbW90ZU1lZGlhUGxheWVyU3RhdGUpfHwodGhpcy5fcm1wUGxheWVyU3RhdGVbeV09dC5yZW1vdGVNZWRpYVBsYXllclN0YXRlLHRoaXMuZW1pdERhaWx5SlNFdmVudCh0KSk7YnJlYWs7Y2FzZVwiY3VzdG9tLWJ1dHRvbi1jbGlja1wiOmNhc2VcInNpZGViYXItdmlldy1jaGFuZ2VkXCI6dGhpcy5lbWl0RGFpbHlKU0V2ZW50KHQpO2JyZWFrO2Nhc2UgWmk6dmFyIGI9dGhpcy5fbWVldGluZ1Nlc3Npb25TdGF0ZS50b3BvbG9neSE9PSh0Lm1lZXRpbmdTZXNzaW9uU3RhdGUmJnQubWVldGluZ1Nlc3Npb25TdGF0ZS50b3BvbG9neSk7dGhpcy5fbWVldGluZ1Nlc3Npb25TdGF0ZT1pYyh0Lm1lZXRpbmdTZXNzaW9uU3RhdGUsdGhpcy5fY2FsbE9iamVjdE1vZGUpLCh0aGlzLl9jYWxsT2JqZWN0TW9kZXx8YikmJnRoaXMuZW1pdERhaWx5SlNFdmVudCh0KTticmVhaztjYXNlIHdvOnRoaXMuX2lzU2NyZWVuU2hhcmluZz0hMCx0aGlzLmVtaXREYWlseUpTRXZlbnQodCk7YnJlYWs7Y2FzZSBrbzpjYXNlIFNvOnRoaXMuX2lzU2NyZWVuU2hhcmluZz0hMSx0aGlzLmVtaXREYWlseUpTRXZlbnQodCk7YnJlYWs7Y2FzZSBsbzpjYXNlIHVvOmNhc2UgcG86Y2FzZSBobzpjYXNlIGZvOmNhc2UgYW86Y2FzZSBzbzpjYXNlIGNvOmNhc2UgSmk6Y2FzZSAkaTpjYXNlIGdvOmNhc2UgbW86Y2FzZVwidGVzdC1jb21wbGV0ZWRcIjpjYXNlIFRvOmNhc2Ugdm86Y2FzZSBMbzpjYXNlIHhvOmNhc2UgSW86Y2FzZSBEbzpjYXNlIEJvOmNhc2UgTm86Y2FzZVwiZGlhbGluLXJlYWR5XCI6Y2FzZVwiZGlhbGluLWNvbm5lY3RlZFwiOmNhc2VcImRpYWxpbi1lcnJvclwiOmNhc2VcImRpYWxpbi1zdG9wcGVkXCI6Y2FzZVwiZGlhbGluLXdhcm5pbmdcIjpjYXNlXCJkaWFsb3V0LWNvbm5lY3RlZFwiOmNhc2VcImRpYWxvdXQtYW5zd2VyZWRcIjpjYXNlXCJkaWFsb3V0LWVycm9yXCI6Y2FzZVwiZGlhbG91dC1zdG9wcGVkXCI6Y2FzZVwiZGlhbG91dC13YXJuaW5nXCI6dGhpcy5lbWl0RGFpbHlKU0V2ZW50KHQpO2JyZWFrO2Nhc2VcInJlcXVlc3QtZnVsbHNjcmVlblwiOnRoaXMucmVxdWVzdEZ1bGxzY3JlZW4oKTticmVhaztjYXNlXCJyZXF1ZXN0LWV4aXQtZnVsbHNjcmVlblwiOnRoaXMuZXhpdEZ1bGxzY3JlZW4oKX19fSx7a2V5OlwibWF5YmVFdmVudFJlY29yZGluZ1N0b3BwZWRcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPVwicmVjb3JkXCI7ZSYmKHQubG9jYWx8fCExIT09dFtuXXx8ZVtuXT09PXRbbl18fHRoaXMuZW1pdERhaWx5SlNFdmVudCh7YWN0aW9uOnVvfSkpfX0se2tleTpcIm1heWJlRXZlbnRSZWNvcmRpbmdTdGFydGVkXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1cInJlY29yZFwiO2UmJih0LmxvY2FsfHwhMCE9PXRbbl18fGVbbl09PT10W25dfHx0aGlzLmVtaXREYWlseUpTRXZlbnQoe2FjdGlvbjpsb30pKX19LHtrZXk6XCJfdHJhY2tTdGF0ZVBsYXlhYmxlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7cmV0dXJuISghZXx8ZS5zdGF0ZSE9PWRpKX19LHtrZXk6XCJfdHJhY2tDaGFuZ2VkXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4hKChudWxsPT1lP3ZvaWQgMDplLmlkKT09PShudWxsPT10P3ZvaWQgMDp0LmlkKSl9fSx7a2V5OlwibWF5YmVFdmVudFRyYWNrU3RvcHBlZFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89bnVsbCE9PShyPW51bGw9PXQ/dm9pZCAwOnQudHJhY2tzW2VdKSYmdm9pZCAwIT09cj9yOm51bGwsYT1udWxsIT09KGk9bnVsbD09bj92b2lkIDA6bi50cmFja3NbZV0pJiZ2b2lkIDAhPT1pP2k6bnVsbCxzPW51bGw9PW8/dm9pZCAwOm8udHJhY2s7aWYocyl7dmFyIGM9dGhpcy5fdHJhY2tTdGF0ZVBsYXlhYmxlKG8pLGw9dGhpcy5fdHJhY2tTdGF0ZVBsYXlhYmxlKGEpLHU9dGhpcy5fdHJhY2tDaGFuZ2VkKHMsbnVsbD09YT92b2lkIDA6YS50cmFjayk7YyYmKGwmJiF1fHx0aGlzLmVtaXREYWlseUpTRXZlbnQoe2FjdGlvbjpvbyx0cmFjazpzLHBhcnRpY2lwYW50Om51bGwhPW4/bjp0LHR5cGU6ZX0pKX19fSx7a2V5OlwibWF5YmVFdmVudFRyYWNrU3RhcnRlZFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG89bnVsbCE9PShyPW51bGw9PXQ/dm9pZCAwOnQudHJhY2tzW2VdKSYmdm9pZCAwIT09cj9yOm51bGwsYT1udWxsIT09KGk9bnVsbD09bj92b2lkIDA6bi50cmFja3NbZV0pJiZ2b2lkIDAhPT1pP2k6bnVsbCxzPW51bGw9PWE/dm9pZCAwOmEudHJhY2s7aWYocyl7dmFyIGM9dGhpcy5fdHJhY2tTdGF0ZVBsYXlhYmxlKG8pLGw9dGhpcy5fdHJhY2tTdGF0ZVBsYXlhYmxlKGEpLHU9dGhpcy5fdHJhY2tDaGFuZ2VkKG51bGw9PW8/dm9pZCAwOm8udHJhY2sscyk7bCYmKGMmJiF1fHx0aGlzLmVtaXREYWlseUpTRXZlbnQoe2FjdGlvbjppbyx0cmFjazpzLHBhcnRpY2lwYW50Om4sdHlwZTplfSkpfX19LHtrZXk6XCJtYXliZVBhcnRpY2lwYW50VHJhY2tzU3RvcHBlZFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoZSlmb3IodmFyIG4gaW4gZS50cmFja3MpdGhpcy5tYXliZUV2ZW50VHJhY2tTdG9wcGVkKG4sZSx0KX19LHtrZXk6XCJtYXliZVBhcnRpY2lwYW50VHJhY2tzU3RhcnRlZFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYodClmb3IodmFyIG4gaW4gdC50cmFja3MpdGhpcy5tYXliZUV2ZW50VHJhY2tTdGFydGVkKG4sZSx0KX19LHtrZXk6XCJjb21wYXJlRXF1YWxGb3JSTVBVcGRhdGVFdmVudFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG4scjtyZXR1cm4gZS5zdGF0ZT09PXQuc3RhdGUmJihudWxsPT09KG49ZS5zZXR0aW5ncyl8fHZvaWQgMD09PW4/dm9pZCAwOm4udm9sdW1lKT09PShudWxsPT09KHI9dC5zZXR0aW5ncyl8fHZvaWQgMD09PXI/dm9pZCAwOnIudm9sdW1lKX19LHtrZXk6XCJlbWl0RGFpbHlKU0V2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7dHJ5e2UuY2FsbENsaWVudElkPXRoaXMuY2FsbENsaWVudElkLHRoaXMuZW1pdChlLmFjdGlvbixlKX1jYXRjaCh0KXtjb25zb2xlLmxvZyhcImNvdWxkIG5vdCBlbWl0XCIsZSx0KX19fSx7a2V5OlwiY29tcGFyZUVxdWFsRm9yUGFydGljaXBhbnRVcGRhdGVFdmVudFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuISFEKGUsdCkmJigoIWUudmlkZW9UcmFja3x8IXQudmlkZW9UcmFja3x8ZS52aWRlb1RyYWNrLmlkPT09dC52aWRlb1RyYWNrLmlkJiZlLnZpZGVvVHJhY2subXV0ZWQ9PT10LnZpZGVvVHJhY2subXV0ZWQmJmUudmlkZW9UcmFjay5lbmFibGVkPT09dC52aWRlb1RyYWNrLmVuYWJsZWQpJiYoIWUuYXVkaW9UcmFja3x8IXQuYXVkaW9UcmFja3x8ZS5hdWRpb1RyYWNrLmlkPT09dC5hdWRpb1RyYWNrLmlkJiZlLmF1ZGlvVHJhY2subXV0ZWQ9PT10LmF1ZGlvVHJhY2subXV0ZWQmJmUuYXVkaW9UcmFjay5lbmFibGVkPT09dC5hdWRpb1RyYWNrLmVuYWJsZWQpKX19LHtrZXk6XCJuYXRpdmVVdGlsc1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIG5hKCk/XCJ1bmRlZmluZWRcIj09dHlwZW9mIERhaWx5TmF0aXZlVXRpbHM/KGNvbnNvbGUud2FybihcImluIFJlYWN0IE5hdGl2ZSwgRGFpbHlOYXRpdmVVdGlscyBpcyBleHBlY3RlZCB0byBiZSBhdmFpbGFibGVcIiksbnVsbCk6RGFpbHlOYXRpdmVVdGlsczpudWxsfX0se2tleTpcInVwZGF0ZUlzUHJlcGFyaW5nVG9Kb2luXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fdXBkYXRlQ2FsbFN0YXRlKHRoaXMuX2NhbGxTdGF0ZSxlKX19LHtrZXk6XCJfdXBkYXRlQ2FsbFN0YXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnRoaXMuX2lzUHJlcGFyaW5nVG9Kb2luO2lmKGUhPT10aGlzLl9jYWxsU3RhdGV8fHQhPT10aGlzLl9pc1ByZXBhcmluZ1RvSm9pbil7dmFyIG49dGhpcy5fY2FsbFN0YXRlLHI9dGhpcy5faXNQcmVwYXJpbmdUb0pvaW47dGhpcy5fY2FsbFN0YXRlPWUsdGhpcy5faXNQcmVwYXJpbmdUb0pvaW49dDt2YXIgaT10aGlzLl9jYWxsU3RhdGU9PT1yaTt0aGlzLnVwZGF0ZVNob3dBbmRyb2lkT25nb2luZ01lZXRpbmdOb3RpZmljYXRpb24oaSk7dmFyIG89SXMobixyKSxhPUlzKHRoaXMuX2NhbGxTdGF0ZSx0aGlzLl9pc1ByZXBhcmluZ1RvSm9pbik7byE9PWEmJih0aGlzLnVwZGF0ZUtlZXBEZXZpY2VBd2FrZShhKSx0aGlzLnVwZGF0ZURldmljZUF1ZGlvTW9kZShhKSx0aGlzLnVwZGF0ZU5vT3BSZWNvcmRpbmdFbnN1cmluZ0JhY2tncm91bmRDb250aW51aXR5KGEpKX19fSx7a2V5OlwicmVzZXRNZWV0aW5nRGVwZW5kZW50VmFyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fcGFydGljaXBhbnRzPXt9LHRoaXMuX3BhcnRpY2lwYW50Q291bnRzPWtzLHRoaXMuX3dhaXRpbmdQYXJ0aWNpcGFudHM9e30sdGhpcy5fYWN0aXZlU3BlYWtlcj17fSx0aGlzLl9hY3RpdmVTcGVha2VyTW9kZT0hMSx0aGlzLl9kaWRQcmVBdXRoPSExLHRoaXMuX2FjY2Vzc1N0YXRlPXthY2Nlc3M6cGl9LHRoaXMuX2ZpbmFsU3VtbWFyeU9mUHJldlNlc3Npb249dGhpcy5fbWVldGluZ1Nlc3Npb25TdW1tYXJ5LHRoaXMuX21lZXRpbmdTZXNzaW9uU3VtbWFyeT17fSx0aGlzLl9tZWV0aW5nU2Vzc2lvblN0YXRlPWljKHdzLHRoaXMuX2NhbGxPYmplY3RNb2RlKSx0aGlzLl9pc1NjcmVlblNoYXJpbmc9ITEsdGhpcy5fcmVjZWl2ZVNldHRpbmdzPXt9LHRoaXMuX2lucHV0U2V0dGluZ3M9dm9pZCAwLHRoaXMuX3NlbmRTZXR0aW5ncz17fSx0aGlzLl9sb2NhbEF1ZGlvTGV2ZWw9MCx0aGlzLl9pc0xvY2FsQXVkaW9MZXZlbE9ic2VydmVyUnVubmluZz0hMSx0aGlzLl9yZW1vdGVQYXJ0aWNpcGFudHNBdWRpb0xldmVsPXt9LHRoaXMuX2lzUmVtb3RlUGFydGljaXBhbnRzQXVkaW9MZXZlbE9ic2VydmVyUnVubmluZz0hMSx0aGlzLl9tYXhBcHBNZXNzYWdlU2l6ZT1Wbyx0aGlzLl9jYWxsTWFjaGluZUluaXRpYWxpemVkPSExLHRoaXMuX2J1bmRsZUxvYWRUaW1lPXZvaWQgMCx0aGlzLl9wcmVsb2FkQ2FjaGV9fSx7a2V5OlwidXBkYXRlS2VlcERldmljZUF3YWtlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7bmEoKSYmdGhpcy5uYXRpdmVVdGlscygpLnNldEtlZXBEZXZpY2VBd2FrZShlLHRoaXMuY2FsbENsaWVudElkKX19LHtrZXk6XCJ1cGRhdGVEZXZpY2VBdWRpb01vZGVcIix2YWx1ZTpmdW5jdGlvbihlKXtpZihuYSgpJiYhdGhpcy5kaXNhYmxlUmVhY3ROYXRpdmVBdXRvRGV2aWNlTWFuYWdlbWVudChcImF1ZGlvXCIpKXt2YXIgdD1lP3RoaXMuX25hdGl2ZUluQ2FsbEF1ZGlvTW9kZTpcImlkbGVcIjt0aGlzLm5hdGl2ZVV0aWxzKCkuc2V0QXVkaW9Nb2RlKHQpfX19LHtrZXk6XCJ1cGRhdGVTaG93QW5kcm9pZE9uZ29pbmdNZWV0aW5nTm90aWZpY2F0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYobmEoKSYmdGhpcy5uYXRpdmVVdGlscygpLnNldFNob3dPbmdvaW5nTWVldGluZ05vdGlmaWNhdGlvbil7dmFyIHQsbixyLGk7aWYodGhpcy5wcm9wZXJ0aWVzLnJlYWN0TmF0aXZlQ29uZmlnJiZ0aGlzLnByb3BlcnRpZXMucmVhY3ROYXRpdmVDb25maWcuYW5kcm9pZEluQ2FsbE5vdGlmaWNhdGlvbil7dmFyIG89dGhpcy5wcm9wZXJ0aWVzLnJlYWN0TmF0aXZlQ29uZmlnLmFuZHJvaWRJbkNhbGxOb3RpZmljYXRpb247dD1vLnRpdGxlLG49by5zdWJ0aXRsZSxyPW8uaWNvbk5hbWUsaT1vLmRpc2FibGVGb3JDdXN0b21PdmVycmlkZX1pJiYoZT0hMSksdGhpcy5uYXRpdmVVdGlscygpLnNldFNob3dPbmdvaW5nTWVldGluZ05vdGlmaWNhdGlvbihlLHQsbixyLHRoaXMuY2FsbENsaWVudElkKX19fSx7a2V5OlwidXBkYXRlTm9PcFJlY29yZGluZ0Vuc3VyaW5nQmFja2dyb3VuZENvbnRpbnVpdHlcIix2YWx1ZTpmdW5jdGlvbihlKXtuYSgpJiZ0aGlzLm5hdGl2ZVV0aWxzKCkuZW5hYmxlTm9PcFJlY29yZGluZ0Vuc3VyaW5nQmFja2dyb3VuZENvbnRpbnVpdHkmJnRoaXMubmF0aXZlVXRpbHMoKS5lbmFibGVOb09wUmVjb3JkaW5nRW5zdXJpbmdCYWNrZ3JvdW5kQ29udGludWl0eShlKX19LHtrZXk6XCJ0b2dnbGVQYXJ0aWNpcGFudEF1ZGlvQmFzZWRPbk5hdGl2ZUF1ZGlvRm9jdXNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlLHQ7aWYobmEoKSl7dmFyIG49bnVsbD09PShlPXRoaXMuX2NhbGxNYWNoaW5lKCkpfHx2b2lkIDA9PT1lfHxudWxsPT09KHQ9ZS5zdG9yZSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuZ2V0U3RhdGUoKTtmb3IodmFyIHIgaW4gbnVsbD09bj92b2lkIDA6bi5zdHJlYW1zKXt2YXIgaT1uLnN0cmVhbXNbcl07aSYmaS5wZW5kaW5nVHJhY2smJlwiYXVkaW9cIj09PWkucGVuZGluZ1RyYWNrLmtpbmQmJihpLnBlbmRpbmdUcmFjay5lbmFibGVkPXRoaXMuX2hhc05hdGl2ZUF1ZGlvRm9jdXMpfX19fSx7a2V5OlwiZGlzYWJsZVJlYWN0TmF0aXZlQXV0b0RldmljZU1hbmFnZW1lbnRcIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLnJlYWN0TmF0aXZlQ29uZmlnJiZ0aGlzLnByb3BlcnRpZXMucmVhY3ROYXRpdmVDb25maWcuZGlzYWJsZUF1dG9EZXZpY2VNYW5hZ2VtZW50JiZ0aGlzLnByb3BlcnRpZXMucmVhY3ROYXRpdmVDb25maWcuZGlzYWJsZUF1dG9EZXZpY2VNYW5hZ2VtZW50W2VdfX0se2tleTpcImFic29sdXRlVXJsXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYodm9pZCAwIT09ZSl7dmFyIHQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7cmV0dXJuIHQuaHJlZj1lLHQuaHJlZn19fSx7a2V5Olwic2F5SGVsbG9cIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPVwiaGVsbG8sIHdvcmxkLlwiO3JldHVybiBjb25zb2xlLmxvZyhlKSxlfX0se2tleTpcIl9sb2dVc2VBZnRlckRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPU9iamVjdC52YWx1ZXMoeXMpWzBdO2lmKHRoaXMubmVlZHNMb2FkKCkpe2lmKGUmJiFlLm5lZWRzTG9hZCgpKXt2YXIgdD17YWN0aW9uOldvLGxldmVsOlwiZXJyb3JcIixjb2RlOnRoaXMuc3RyaWN0TW9kZT85OTk1Ojk5OTd9O2Uuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHQpfWVsc2UgaWYoIXRoaXMuc3RyaWN0TW9kZSl7Y29uc29sZS5lcnJvcihcIllvdSBhcmUgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgY2FsbCBpbnN0YW5jZSB0aGF0IHdhcyBwcmV2aW91c2x5IGRlc3Ryb3llZCwgd2hpY2ggaXMgdW5zdXBwb3J0ZWQuIFBsZWFzZSByZW1vdmUgYHN0cmljdE1vZGU6IGZhbHNlYCBmcm9tIHlvdXIgY29uc3RydWN0b3IgcHJvcGVydGllcyB0byBlbmFibGUgc3RyaWN0IG1vZGUgdG8gdHJhY2sgZG93biBhbmQgZml4IHRoaXMgdW5zdXBwb3J0ZWQgdXNhZ2UuXCIpfX1lbHNle3ZhciBuPXthY3Rpb246V28sbGV2ZWw6XCJlcnJvclwiLGNvZGU6dGhpcy5zdHJpY3RNb2RlPzk5OTU6OTk5N307dGhpcy5fbWVzc2FnZUNoYW5uZWwuc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKG4sbnVsbCx0aGlzLmNhbGxDbGllbnRJZCx0aGlzLl9pZnJhbWUpfX19LHtrZXk6XCJfbG9nRHVwbGljYXRlSW5zdGFuY2VBdHRlbXB0XCIsdmFsdWU6ZnVuY3Rpb24oKXtmb3IodmFyIGU9MCx0PU9iamVjdC52YWx1ZXMoeXMpO2U8dC5sZW5ndGg7ZSsrKXt2YXIgbj10W2VdO24uX2NhbGxNYWNoaW5lSW5pdGlhbGl6ZWQ/KG4uc2VuZE1lc3NhZ2VUb0NhbGxNYWNoaW5lKHthY3Rpb246V28sbGV2ZWw6XCJ3YXJuXCIsY29kZTp0aGlzLmFsbG93TXVsdGlwbGVDYWxsSW5zdGFuY2VzPzk5OTM6OTk5Mn0pLG4uX2RlbGF5RHVwbGljYXRlSW5zdGFuY2VMb2c9ITEpOm4uX2RlbGF5RHVwbGljYXRlSW5zdGFuY2VMb2c9ITB9fX0se2tleTpcIl9tYXliZVNlbmRUb1NlbnRyeVwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpLG8sYTtpZihudWxsIT09KHQ9ZS5lcnJvcikmJnZvaWQgMCE9PXQmJnQudHlwZSl7aWYoIVtUaSxDaSxTaV0uaW5jbHVkZXMoZS5lcnJvci50eXBlKSlyZXR1cm47aWYoZS5lcnJvci50eXBlPT09U2kmJmUuZXJyb3IubXNnLmluY2x1ZGVzKFwiZGVsZXRlZFwiKSlyZXR1cm59dmFyIHM9bnVsbCE9PShuPXRoaXMucHJvcGVydGllcykmJnZvaWQgMCE9PW4mJm4udXJsP25ldyBVUkwodGhpcy5wcm9wZXJ0aWVzLnVybCk6dm9pZCAwLGM9XCJwcm9kdWN0aW9uXCI7cyYmcy5ob3N0LmluY2x1ZGVzKFwiLnN0YWdpbmcuZGFpbHlcIikmJihjPVwic3RhZ2luZ1wiKTt2YXIgbCx1LGQscCxoLGY9W0tuKCksUW4oKSwkcigpLFZyKCksR3IoKSxYcigpLFpuKCksS3IoKV0uZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4hW1wiQnJvd3NlckFwaUVycm9yc1wiLFwiQnJlYWRjcnVtYnNcIixcIkdsb2JhbEhhbmRsZXJzXCJdLmluY2x1ZGVzKGUubmFtZSl9KSksdj1uZXcgbXIoe2RzbjpcImh0dHBzOi8vZjEwZjFjODFlNWQ0NGE0MDk4NDE2YzA4NjdhOGI3NDBAbzc3OTA2LmluZ2VzdC5zZW50cnkuaW8vMTY4ODQ0XCIsdHJhbnNwb3J0OmpyLHN0YWNrUGFyc2VyOlJyLGludGVncmF0aW9uczpmLGVudmlyb25tZW50OmN9KSxnPW5ldyBvbjtpZihnLnNldENsaWVudCh2KSx2LmluaXQoKSx0aGlzLnNlc3Npb25faWQmJmcuc2V0RXh0cmEoXCJzZXNzaW9uSWRcIix0aGlzLnNlc3Npb25faWQpLHRoaXMucHJvcGVydGllcyl7dmFyIG09ZnMoe30sdGhpcy5wcm9wZXJ0aWVzKTttLnVzZXJOYW1lPW0udXNlck5hbWU/XCJbRmlsdGVyZWRdXCI6dm9pZCAwLG0udXNlckRhdGE9bS51c2VyRGF0YT9cIltGaWx0ZXJlZF1cIjp2b2lkIDAsbS50b2tlbj1tLnRva2VuP1wiW0ZpbHRlcmVkXVwiOnZvaWQgMCxnLnNldEV4dHJhKFwicHJvcGVydGllc1wiLG0pfWlmKHMpe3ZhciB5PXMuc2VhcmNoUGFyYW1zLmdldChcImRvbWFpblwiKTtpZigheSl7dmFyIF89cy5ob3N0Lm1hdGNoKC8oLio/KVxcLi8pO3k9XyYmX1sxXXx8XCJcIn15JiZnLnNldFRhZyhcImRvbWFpblwiLHkpfWUuZXJyb3ImJihnLnNldFRhZyhcImZhdGFsRXJyb3JUeXBlXCIsZS5lcnJvci50eXBlKSxnLnNldEV4dHJhKFwiZXJyb3JEZXRhaWxzXCIsZS5lcnJvci5kZXRhaWxzKSwobnVsbD09PShsPWUuZXJyb3IuZGV0YWlscyl8fHZvaWQgMD09PWw/dm9pZCAwOmwudXJpKSYmZy5zZXRUYWcoXCJzZXJ2ZXJBZGRyZXNzXCIsZS5lcnJvci5kZXRhaWxzLnVyaSksKG51bGw9PT0odT1lLmVycm9yLmRldGFpbHMpfHx2b2lkIDA9PT11P3ZvaWQgMDp1Lndvcmtlckdyb3VwKSYmZy5zZXRUYWcoXCJ3b3JrZXJHcm91cFwiLGUuZXJyb3IuZGV0YWlscy53b3JrZXJHcm91cCksKG51bGw9PT0oZD1lLmVycm9yLmRldGFpbHMpfHx2b2lkIDA9PT1kP3ZvaWQgMDpkLmdlb0dyb3VwKSYmZy5zZXRUYWcoXCJnZW9Hcm91cFwiLGUuZXJyb3IuZGV0YWlscy5nZW9Hcm91cCksKG51bGw9PT0ocD1lLmVycm9yLmRldGFpbHMpfHx2b2lkIDA9PT1wP3ZvaWQgMDpwLm9uKSYmZy5zZXRUYWcoXCJjb25uZWN0aW9uQXR0ZW1wdFwiLGUuZXJyb3IuZGV0YWlscy5vbiksbnVsbCE9PShoPWUuZXJyb3IuZGV0YWlscykmJnZvaWQgMCE9PWgmJmguYnVuZGxlVXJsJiYoZy5zZXRUYWcoXCJidW5kbGVVcmxcIixlLmVycm9yLmRldGFpbHMuYnVuZGxlVXJsKSxnLnNldFRhZyhcImJ1bmRsZUVycm9yXCIsZS5lcnJvci5kZXRhaWxzLnNvdXJjZUVycm9yLnR5cGUpKSk7Zy5zZXRUYWdzKHtjYWxsTW9kZTp0aGlzLl9jYWxsT2JqZWN0TW9kZT9uYSgpP1wicmVhY3ROYXRpdmVcIjpudWxsIT09KHI9dGhpcy5wcm9wZXJ0aWVzKSYmdm9pZCAwIT09ciYmbnVsbCE9PShpPXIuZGFpbHlDb25maWcpJiZ2b2lkIDAhPT1pJiZudWxsIT09KG89aS5jYWxsTW9kZSkmJnZvaWQgMCE9PW8mJm8uaW5jbHVkZXMoXCJwcmVidWlsdFwiKT90aGlzLnByb3BlcnRpZXMuZGFpbHlDb25maWcuY2FsbE1vZGU6XCJjdXN0b21cIjpcInByZWJ1aWx0LWZyYW1lXCIsdmVyc2lvbjplZS52ZXJzaW9uKCl9KTt2YXIgYj0obnVsbD09PShhPWUuZXJyb3IpfHx2b2lkIDA9PT1hP3ZvaWQgMDphLm1zZyl8fGUuZXJyb3JNc2c7Zy5jYXB0dXJlRXhjZXB0aW9uKG5ldyBFcnJvcihiKSl9fSx7a2V5OlwiX2NhbGxNYWNoaW5lXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZSx0LG47cmV0dXJuIG51bGw9PT0oZT13aW5kb3cuX2RhaWx5KXx8dm9pZCAwPT09ZXx8bnVsbD09PSh0PWUuaW5zdGFuY2VzKXx8dm9pZCAwPT09dHx8bnVsbD09PShuPXRbdGhpcy5jYWxsQ2xpZW50SWRdKXx8dm9pZCAwPT09bj92b2lkIDA6bi5jYWxsTWFjaGluZX19LHtrZXk6XCJfbWF5YmVVcGRhdGVJbnB1dFNldHRpbmdzXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIUQodGhpcy5faW5wdXRTZXR0aW5ncyxlKSl7dmFyIHQ9dGhpcy5fZ2V0SW5wdXRTZXR0aW5ncygpO3RoaXMuX2lucHV0U2V0dGluZ3M9ZTt2YXIgbj10aGlzLl9nZXRJbnB1dFNldHRpbmdzKCk7RCh0LG4pfHx0aGlzLmVtaXREYWlseUpTRXZlbnQoe2FjdGlvbjpSbyxpbnB1dFNldHRpbmdzOm59KX19fV0sW3trZXk6XCJzdXBwb3J0ZWRCcm93c2VyXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZihuYSgpKXJldHVybntzdXBwb3J0ZWQ6ITAsbW9iaWxlOiEwLG5hbWU6XCJSZWFjdCBOYXRpdmVcIix2ZXJzaW9uOm51bGwsc3VwcG9ydHNTY3JlZW5TaGFyZTohMCxzdXBwb3J0c1NmdTohMCxzdXBwb3J0c1ZpZGVvUHJvY2Vzc2luZzohMSxzdXBwb3J0c0F1ZGlvUHJvY2Vzc2luZzohMX07dmFyIGU9Ry5nZXRQYXJzZXIodGEoKSk7cmV0dXJue3N1cHBvcnRlZDohIWxhKCksbW9iaWxlOlwibW9iaWxlXCI9PT1lLmdldFBsYXRmb3JtVHlwZSgpLG5hbWU6ZS5nZXRCcm93c2VyTmFtZSgpLHZlcnNpb246ZS5nZXRCcm93c2VyVmVyc2lvbigpLHN1cHBvcnRzRnVsbHNjcmVlbjohIW9hKCksc3VwcG9ydHNTY3JlZW5TaGFyZTohIWlhKCksc3VwcG9ydHNTZnU6ISFsYSgpLHN1cHBvcnRzVmlkZW9Qcm9jZXNzaW5nOnNhKCksc3VwcG9ydHNBdWRpb1Byb2Nlc3Npbmc6Y2EoKX19fSx7a2V5OlwidmVyc2lvblwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuXCIwLjc1LjJcIn19LHtrZXk6XCJjcmVhdGVDYWxsT2JqZWN0XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06e307cmV0dXJuIGUubGF5b3V0PVwibm9uZVwiLG5ldyBlZShudWxsLGUpfX0se2tleTpcIndyYXBcIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06e307aWYoVXMoKSwhZXx8IWUuY29udGVudFdpbmRvd3x8XCJzdHJpbmdcIiE9dHlwZW9mIGUuc3JjKXRocm93IG5ldyBFcnJvcihcIkRhaWx5SWZyYW1lOjpXcmFwIG5lZWRzIGFuIGlmcmFtZS1saWtlIGZpcnN0IGFyZ3VtZW50XCIpO3JldHVybiB0LmxheW91dHx8KHQuY3VzdG9tTGF5b3V0P3QubGF5b3V0PVwiY3VzdG9tLXYxXCI6dC5sYXlvdXQ9XCJicm93c2VyXCIpLG5ldyBlZShlLHQpfX0se2tleTpcImNyZWF0ZUZyYW1lXCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbixyO1VzKCksZSYmdD8obj1lLHI9dCk6ZSYmZS5hcHBlbmQ/KG49ZSxyPXt9KToobj1kb2N1bWVudC5ib2R5LHI9ZXx8e30pO3ZhciBpPXIuaWZyYW1lU3R5bGU7aXx8KGk9bj09PWRvY3VtZW50LmJvZHk/e3Bvc2l0aW9uOlwiZml4ZWRcIixib3JkZXI6XCIxcHggc29saWQgYmxhY2tcIixiYWNrZ3JvdW5kQ29sb3I6XCJ3aGl0ZVwiLHdpZHRoOlwiMzc1cHhcIixoZWlnaHQ6XCI0NTBweFwiLHJpZ2h0OlwiMWVtXCIsYm90dG9tOlwiMWVtXCJ9Ontib3JkZXI6MCx3aWR0aDpcIjEwMCVcIixoZWlnaHQ6XCIxMDAlXCJ9KTt2YXIgbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO3dpbmRvdy5uYXZpZ2F0b3ImJndpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC82MVxcLi8pP28uYWxsb3c9XCJtaWNyb3Bob25lLCBjYW1lcmFcIjpvLmFsbG93PVwibWljcm9waG9uZTsgY2FtZXJhOyBhdXRvcGxheTsgZGlzcGxheS1jYXB0dXJlOyBzY3JlZW4td2FrZS1sb2NrXCIsby5zdHlsZS52aXNpYmlsaXR5PVwiaGlkZGVuXCIsbi5hcHBlbmRDaGlsZChvKSxvLnN0eWxlLnZpc2liaWxpdHk9bnVsbCxPYmplY3Qua2V5cyhpKS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gby5zdHlsZVtlXT1pW2VdfSkpLHIubGF5b3V0fHwoci5jdXN0b21MYXlvdXQ/ci5sYXlvdXQ9XCJjdXN0b20tdjFcIjpyLmxheW91dD1cImJyb3dzZXJcIik7dHJ5e3JldHVybiBuZXcgZWUobyxyKX1jYXRjaChlKXt0aHJvdyBuLnJlbW92ZUNoaWxkKG8pLGV9fX0se2tleTpcImNyZWF0ZVRyYW5zcGFyZW50RnJhbWVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTp7fTtVcygpO3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7cmV0dXJuIHQuYWxsb3c9XCJtaWNyb3Bob25lOyBjYW1lcmE7IGF1dG9wbGF5XCIsdC5zdHlsZS5jc3NUZXh0PVwiXFxuICAgICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICAgIHRvcDogMDtcXG4gICAgICBsZWZ0OiAwO1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGhlaWdodDogMTAwJTtcXG4gICAgICBib3JkZXI6IDA7XFxuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICAgIFwiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodCksZS5sYXlvdXR8fChlLmxheW91dD1cImN1c3RvbS12MVwiKSxlZS53cmFwKHQsZSl9fSx7a2V5OlwiZ2V0Q2FsbEluc3RhbmNlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXT9hcmd1bWVudHNbMF06dm9pZCAwO3JldHVybiBlP3lzW2VdOk9iamVjdC52YWx1ZXMoeXMpWzBdfX1dKSxlZX0oKTtmdW5jdGlvbiBMcyhlLHQpe3ZhciBuPXt9O2Zvcih2YXIgciBpbiBlKWlmKGVbcl1pbnN0YW5jZW9mIE1lZGlhU3RyZWFtVHJhY2spY29uc29sZS53YXJuKFwiTWVkaWFTdHJlYW1UcmFjayBmb3VuZCBpbiBwcm9wcyBvciBjYWNoZS5cIixyKSxuW3JdPUhvO2Vsc2UgaWYoXCJkYWlseUNvbmZpZ1wiPT09cil7aWYoZVtyXS5tb2RpZnlMb2NhbFNkcEhvb2spe3ZhciBpPXdpbmRvdy5fZGFpbHkuaW5zdGFuY2VzW3RdLmN1c3RvbUNhbGxiYWNrc3x8e307aS5tb2RpZnlMb2NhbFNkcEhvb2s9ZVtyXS5tb2RpZnlMb2NhbFNkcEhvb2ssd2luZG93Ll9kYWlseS5pbnN0YW5jZXNbdF0uY3VzdG9tQ2FsbGJhY2tzPWksZGVsZXRlIGVbcl0ubW9kaWZ5TG9jYWxTZHBIb29rfWlmKGVbcl0ubW9kaWZ5UmVtb3RlU2RwSG9vayl7dmFyIG89d2luZG93Ll9kYWlseS5pbnN0YW5jZXNbdF0uY3VzdG9tQ2FsbGJhY2tzfHx7fTtvLm1vZGlmeVJlbW90ZVNkcEhvb2s9ZVtyXS5tb2RpZnlSZW1vdGVTZHBIb29rLHdpbmRvdy5fZGFpbHkuaW5zdGFuY2VzW3RdLmN1c3RvbUNhbGxiYWNrcz1vLGRlbGV0ZSBlW3JdLm1vZGlmeVJlbW90ZVNkcEhvb2t9bltyXT1lW3JdfWVsc2UgbltyXT1lW3JdO3JldHVybiBufWZ1bmN0aW9uIHhzKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+Mj9hcmd1bWVudHNbMl06dm9pZCAwO2lmKGUhPT1yaSl7dmFyIG49XCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwiVGhpcyBkYWlseS1qcyBtZXRob2RcIixcIiBvbmx5IHN1cHBvcnRlZCBhZnRlciBqb2luLlwiKTt0aHJvdyB0JiYobis9XCIgXCIuY29uY2F0KHQpKSxjb25zb2xlLmVycm9yKG4pLG5ldyBFcnJvcihuKX19ZnVuY3Rpb24gSXMoZSx0KXtyZXR1cm5bbmkscmldLmluY2x1ZGVzKGUpfHx0fWZ1bmN0aW9uIERzKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aD4yJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOlwiVGhpcyBkYWlseS1qcyBtZXRob2RcIixyPWFyZ3VtZW50cy5sZW5ndGg+Mz9hcmd1bWVudHNbM106dm9pZCAwO2lmKElzKGUsdCkpe3ZhciBpPVwiXCIuY29uY2F0KG4sXCIgbm90IHN1cHBvcnRlZCBhZnRlciBqb2luaW5nIGEgbWVldGluZy5cIik7dGhyb3cgciYmKGkrPVwiIFwiLmNvbmNhdChyKSksY29uc29sZS5lcnJvcihpKSxuZXcgRXJyb3IoaSl9fWZ1bmN0aW9uIE5zKGUpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpcIlRoaXMgZGFpbHktanMgbWV0aG9kXCIsbj1hcmd1bWVudHMubGVuZ3RoPjI/YXJndW1lbnRzWzJdOnZvaWQgMDtpZighZSl7dmFyIHI9XCJcIi5jb25jYXQodCxhcmd1bWVudHMubGVuZ3RoPjMmJnZvaWQgMCE9PWFyZ3VtZW50c1szXSYmYXJndW1lbnRzWzNdP1wiIHJlcXVpcmVzIHByZUF1dGgoKSBvciBzdGFydENhbWVyYSgpIHRvIGluaXRpYWxpemUgY2FsbCBzdGF0ZS5cIjpcIiByZXF1aXJlcyBwcmVBdXRoKCksIHN0YXJ0Q2FtZXJhKCksIG9yIGpvaW4oKSB0byBpbml0aWFsaXplIGNhbGwgc3RhdGUuXCIpO3Rocm93IG4mJihyKz1cIiBcIi5jb25jYXQobikpLGNvbnNvbGUuZXJyb3IociksbmV3IEVycm9yKHIpfX1mdW5jdGlvbiBGcyhlKXtpZihlKXt2YXIgdD1cIkEgcHJlLWNhbGwgcXVhbGl0eSB0ZXN0IGlzIGluIHByb2dyZXNzLiBQbGVhc2UgdHJ5IFwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJUaGlzIGRhaWx5LWpzIG1ldGhvZFwiLFwiIGFnYWluIG9uY2UgdGVzdGluZyBoYXMgY29tcGxldGVkLiBVc2Ugc3RvcFRlc3RDYWxsUXVhbGl0eSgpIHRvIGVuZCBpdCBlYXJseS5cIik7dGhyb3cgY29uc29sZS5lcnJvcih0KSxuZXcgRXJyb3IodCl9fWZ1bmN0aW9uIFJzKGUpe2lmKCFlKXt2YXIgdD1cIlwiLmNvbmNhdChhcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06XCJUaGlzIGRhaWx5LWpzIG1ldGhvZFwiLFwiIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGN1c3RvbSBjYWxsT2JqZWN0IGluc3RhbmNlc1wiKTt0aHJvdyBjb25zb2xlLmVycm9yKHQpLG5ldyBFcnJvcih0KX19ZnVuY3Rpb24gQnMoZSl7aWYoZSl7dmFyIHQ9XCJcIi5jb25jYXQoYXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOlwiVGhpcyBkYWlseS1qcyBtZXRob2RcIixcIiBpcyBvbmx5IHN1cHBvcnRlZCBhcyBwYXJ0IG9mIERhaWx5J3MgUHJlYnVpbHRcIik7dGhyb3cgY29uc29sZS5lcnJvcih0KSxuZXcgRXJyb3IodCl9fWZ1bmN0aW9uIFVzKCl7aWYobmEoKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGRhaWx5LWpzIG1ldGhvZCBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbiBSZWFjdCBOYXRpdmVcIil9ZnVuY3Rpb24gVnMoKXtpZighbmEoKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGRhaWx5LWpzIG1ldGhvZCBpcyBvbmx5IHN1cHBvcnRlZCBpbiBSZWFjdCBOYXRpdmVcIil9ZnVuY3Rpb24gSnMoZSl7aWYodm9pZCAwPT09ZSlyZXR1cm4hMDt2YXIgdDtpZihcInN0cmluZ1wiPT10eXBlb2YgZSl0PWU7ZWxzZSB0cnl7dD1KU09OLnN0cmluZ2lmeShlKSxEKEpTT04ucGFyc2UodCksZSl8fGNvbnNvbGUud2FybihcIlRoZSB1c2VyRGF0YSBwcm92aWRlZCB3aWxsIGJlIG1vZGlmaWVkIHdoZW4gc2VyaWFsaXplZC5cIil9Y2F0Y2goZSl7dGhyb3cgRXJyb3IoXCJ1c2VyRGF0YSBtdXN0IGJlIHNlcmlhbGl6YWJsZSB0byBKU09OOiBcIi5jb25jYXQoZSkpfWlmKHQubGVuZ3RoPjQwOTYpdGhyb3cgRXJyb3IoXCJ1c2VyRGF0YSBpcyB0b28gbGFyZ2UgKFwiLmNvbmNhdCh0Lmxlbmd0aCxcIiBjaGFyYWN0ZXJzKS4gTWF4aW11bSBzaXplIHN1cHBwb3J0ZWQgaXMgXCIpLmNvbmNhdCg0MDk2LFwiLlwiKSk7cmV0dXJuITB9ZnVuY3Rpb24gJHMoZSx0KXtmb3IodmFyIG49dC5hbGxvd0FsbFBhcnRpY2lwYW50c0tleSxyPWZ1bmN0aW9uKGUpe3ZhciB0PVtcImxvY2FsXCJdO3JldHVybiBufHx0LnB1c2goXCIqXCIpLGUmJiF0LmluY2x1ZGVzKGUpfSxpPWZ1bmN0aW9uKGUpe3JldHVybiEhKHZvaWQgMD09PWUubGF5ZXJ8fE51bWJlci5pc0ludGVnZXIoZS5sYXllcikmJmUubGF5ZXI+PTB8fFwiaW5oZXJpdFwiPT09ZS5sYXllcil9LG89ZnVuY3Rpb24oZSl7cmV0dXJuISFlJiYoIShlLnZpZGVvJiYhaShlLnZpZGVvKSkmJiEoZS5zY3JlZW5WaWRlbyYmIWkoZS5zY3JlZW5WaWRlbykpKX0sYT0wLHM9T2JqZWN0LmVudHJpZXMoZSk7YTxzLmxlbmd0aDthKyspe3ZhciBjPXYoc1thXSwyKSxsPWNbMF0sdT1jWzFdO2lmKCFyKGwpfHwhbyh1KSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBxcyhlKXtpZihcIm9iamVjdFwiIT09bihlKSlyZXR1cm4hMTtmb3IodmFyIHQ9MCxyPU9iamVjdC5lbnRyaWVzKGUpO3Q8ci5sZW5ndGg7dCsrKXt2YXIgaT12KHJbdF0sMiksbz1pWzBdLGE9aVsxXTtzd2l0Y2gobyl7Y2FzZVwidmlkZW9cIjppZihcIm9iamVjdFwiIT09bihhKSlyZXR1cm4hMTtmb3IodmFyIHM9MCxjPU9iamVjdC5lbnRyaWVzKGEpO3M8Yy5sZW5ndGg7cysrKXt2YXIgbD12KGNbc10sMiksdT1sWzBdLGQ9bFsxXTtzd2l0Y2godSl7Y2FzZVwicHJvY2Vzc29yXCI6aWYoIUhzKGQpKXJldHVybiExO2JyZWFrO2Nhc2VcInNldHRpbmdzXCI6aWYoIUdzKGQpKXJldHVybiExO2JyZWFrO2RlZmF1bHQ6cmV0dXJuITF9fWJyZWFrO2Nhc2VcImF1ZGlvXCI6aWYoXCJvYmplY3RcIiE9PW4oYSkpcmV0dXJuITE7Zm9yKHZhciBwPTAsaD1PYmplY3QuZW50cmllcyhhKTtwPGgubGVuZ3RoO3ArKyl7dmFyIGY9dihoW3BdLDIpLGc9ZlswXSxtPWZbMV07c3dpdGNoKGcpe2Nhc2VcInByb2Nlc3NvclwiOmlmKCFXcyhtKSlyZXR1cm4hMTticmVhaztjYXNlXCJzZXR0aW5nc1wiOmlmKCFHcyhtKSlyZXR1cm4hMTticmVhaztkZWZhdWx0OnJldHVybiExfX1icmVhaztkZWZhdWx0OnJldHVybiExfX1yZXR1cm4hMH1mdW5jdGlvbiB6cyhlLHQsbil7dmFyIHIsaT1bXTtlLnZpZGVvJiZlLnZpZGVvLnByb2Nlc3NvciYmKHNhKG51bGwhPT0ocj1udWxsPT10P3ZvaWQgMDp0LnVzZUxlZ2FjeVZpZGVvUHJvY2Vzc29yKSYmdm9pZCAwIT09ciYmcil8fChlLnZpZGVvLnNldHRpbmdzP2RlbGV0ZSBlLnZpZGVvLnByb2Nlc3NvcjpkZWxldGUgZS52aWRlbyxpLnB1c2goXCJ2aWRlb1wiKSkpO2UuYXVkaW8mJmUuYXVkaW8ucHJvY2Vzc29yJiYoY2EoKXx8KGUuYXVkaW8uc2V0dGluZ3M/ZGVsZXRlIGUuYXVkaW8ucHJvY2Vzc29yOmRlbGV0ZSBlLmF1ZGlvLGkucHVzaChcImF1ZGlvXCIpKSksaS5sZW5ndGg+MCYmY29uc29sZS5lcnJvcihcIklnbm9yaW5nIHNldHRpbmdzIGZvciBicm93c2VyLSBvciBwbGF0Zm9ybS11bnN1cHBvcnRlZCBpbnB1dCBwcm9jZXNzb3Iocyk6IFwiLmNvbmNhdChpLmpvaW4oXCIsIFwiKSkpLGUuYXVkaW8mJmUuYXVkaW8uc2V0dGluZ3MmJihlLmF1ZGlvLnNldHRpbmdzLmN1c3RvbVRyYWNrPyhuLmF1ZGlvVHJhY2s9ZS5hdWRpby5zZXR0aW5ncy5jdXN0b21UcmFjayxlLmF1ZGlvLnNldHRpbmdzPXtjdXN0b21UcmFjazpIb30pOmRlbGV0ZSBuLmF1ZGlvVHJhY2spLGUudmlkZW8mJmUudmlkZW8uc2V0dGluZ3MmJihlLnZpZGVvLnNldHRpbmdzLmN1c3RvbVRyYWNrPyhuLnZpZGVvVHJhY2s9ZS52aWRlby5zZXR0aW5ncy5jdXN0b21UcmFjayxlLnZpZGVvLnNldHRpbmdzPXtjdXN0b21UcmFjazpIb30pOmRlbGV0ZSBuLnZpZGVvVHJhY2spfWZ1bmN0aW9uIFdzKGUpe2lmKG5hKCkpcmV0dXJuIGNvbnNvbGUud2FybihcIlZpZGVvIHByb2Nlc3NpbmcgaXMgbm90IHlldCBzdXBwb3J0ZWQgaW4gUmVhY3QgTmF0aXZlXCIpLCExO3ZhciB0PVtcInR5cGVcIl07cmV0dXJuISFlJiYoXCJvYmplY3RcIj09PW4oZSkmJihPYmplY3Qua2V5cyhlKS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiF0LmluY2x1ZGVzKGUpfSkpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2NvbnNvbGUud2FybihcImludmFsaWQga2V5IGlucHV0U2V0dGluZ3MgLT4gYXVkaW8gLT4gcHJvY2Vzc29yIDogXCIuY29uY2F0KHQpKSxkZWxldGUgZVt0XX0pKSwhIWZ1bmN0aW9uKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiExO2lmKCFPYmplY3QudmFsdWVzKFFvKS5pbmNsdWRlcyhlKSlyZXR1cm4gY29uc29sZS5lcnJvcihcImlucHV0U2V0dGluZ3MgYXVkaW8gcHJvY2Vzc29yIHR5cGUgaW52YWxpZFwiKSwhMTtyZXR1cm4hMH0oZS50eXBlKSkpfWZ1bmN0aW9uIEhzKGUpe2lmKG5hKCkpcmV0dXJuIGNvbnNvbGUud2FybihcIlZpZGVvIHByb2Nlc3NpbmcgaXMgbm90IHlldCBzdXBwb3J0ZWQgaW4gUmVhY3QgTmF0aXZlXCIpLCExO3ZhciB0PVtcInR5cGVcIixcImNvbmZpZ1wiXTtpZighZSlyZXR1cm4hMTtpZihcIm9iamVjdFwiIT09bihlKSlyZXR1cm4hMTtpZighZnVuY3Rpb24oZSl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuITE7aWYoIU9iamVjdC52YWx1ZXMoR28pLmluY2x1ZGVzKGUpKXJldHVybiBjb25zb2xlLmVycm9yKFwiaW5wdXRTZXR0aW5ncyB2aWRlbyBwcm9jZXNzb3IgdHlwZSBpbnZhbGlkXCIpLCExO3JldHVybiEwfShlLnR5cGUpKXJldHVybiExO2lmKGUuY29uZmlnKXtpZihcIm9iamVjdFwiIT09bihlLmNvbmZpZykpcmV0dXJuITE7aWYoIWZ1bmN0aW9uKGUsdCl7dmFyIG49T2JqZWN0LmtleXModCk7aWYoMD09PW4ubGVuZ3RoKXJldHVybiEwO3ZhciByPVwiaW52YWxpZCBvYmplY3QgaW4gaW5wdXRTZXR0aW5ncyAtPiB2aWRlbyAtPiBwcm9jZXNzb3IgLT4gY29uZmlnXCI7c3dpdGNoKGUpe2Nhc2UgR28uQkdCTFVSOnJldHVybiBuLmxlbmd0aD4xfHxcInN0cmVuZ3RoXCIhPT1uWzBdPyhjb25zb2xlLmVycm9yKHIpLCExKTohKFwibnVtYmVyXCIhPXR5cGVvZiB0LnN0cmVuZ3RofHx0LnN0cmVuZ3RoPD0wfHx0LnN0cmVuZ3RoPjF8fGlzTmFOKHQuc3RyZW5ndGgpKXx8KGNvbnNvbGUuZXJyb3IoXCJcIi5jb25jYXQocixcIjsgZXhwZWN0ZWQ6IHswIDwgc3RyZW5ndGggPD0gMX0sIGdvdDogXCIpLmNvbmNhdCh0LnN0cmVuZ3RoKSksITEpO2Nhc2UgR28uQkdJTUFHRTpyZXR1cm4hKHZvaWQgMCE9PXQuc291cmNlJiYhZnVuY3Rpb24oZSl7aWYoXCJkZWZhdWx0XCI9PT1lLnNvdXJjZSlyZXR1cm4gZS50eXBlPVwiZGVmYXVsdFwiLCEwO2lmKGUuc291cmNlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpcmV0dXJuITA7aWYoWihlLnNvdXJjZSkpcmV0dXJuIGUudHlwZT1cInVybFwiLCEhZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IFVSTChlKSxuPXQucGF0aG5hbWU7aWYoXCJkYXRhOlwiPT09dC5wcm90b2NvbCl0cnl7dmFyIHI9bi5zdWJzdHJpbmcobi5pbmRleE9mKFwiOlwiKSsxLG4uaW5kZXhPZihcIjtcIikpLnNwbGl0KFwiL1wiKVsxXTtyZXR1cm4gS28uaW5jbHVkZXMocil9Y2F0Y2goZSl7cmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJmYWlsZWQgdG8gZGVkdWNlIGJsb2IgY29udGVudCB0eXBlXCIsZSksITF9dmFyIGk9bi5zcGxpdChcIi5cIikuYXQoLTEpLnRvTG93ZXJDYXNlKCkudHJpbSgpO3JldHVybiBLby5pbmNsdWRlcyhpKX0oZS5zb3VyY2UpfHwoY29uc29sZS5lcnJvcihcImludmFsaWQgaW1hZ2UgdHlwZTsgc3VwcG9ydGVkIHR5cGVzOiBbXCIuY29uY2F0KEtvLmpvaW4oXCIsIFwiKSxcIl1cIikpLCExKTtyZXR1cm4gdD1lLnNvdXJjZSxuPU51bWJlcih0KSxpc05hTihuKXx8IU51bWJlci5pc0ludGVnZXIobil8fG48PTB8fG4+MTA/KGNvbnNvbGUuZXJyb3IoXCJpbnZhbGlkIGltYWdlIHNlbGVjdGlvbjsgbXVzdCBiZSBhbiBpbnQsID4gMCwgPD0gXCIuY29uY2F0KDEwKSksITEpOihlLnR5cGU9XCJkYWlseS1wcmVzZWxlY3RcIiwhMCk7dmFyIHQsbn0odCkpO2RlZmF1bHQ6cmV0dXJuITB9fShlLnR5cGUsZS5jb25maWcpKXJldHVybiExfXJldHVybiBPYmplY3Qua2V5cyhlKS5maWx0ZXIoKGZ1bmN0aW9uKGUpe3JldHVybiF0LmluY2x1ZGVzKGUpfSkpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2NvbnNvbGUud2FybihcImludmFsaWQga2V5IGlucHV0U2V0dGluZ3MgLT4gdmlkZW8gLT4gcHJvY2Vzc29yIDogXCIuY29uY2F0KHQpKSxkZWxldGUgZVt0XX0pKSwhMH1mdW5jdGlvbiBHcyhlKXtyZXR1cm5cIm9iamVjdFwiPT09bihlKSYmKCFlLmN1c3RvbVRyYWNrfHxlLmN1c3RvbVRyYWNrIGluc3RhbmNlb2YgTWVkaWFTdHJlYW1UcmFjayl9ZnVuY3Rpb24gUXMoKXt2YXIgZT1PYmplY3QudmFsdWVzKEdvKS5qb2luKFwiIHwgXCIpLHQ9T2JqZWN0LnZhbHVlcyhRbykuam9pbihcIiB8IFwiKTtyZXR1cm5cImlucHV0U2V0dGluZ3MgbXVzdCBiZSBvZiB0aGUgZm9ybTogeyB2aWRlbz86IHsgcHJvY2Vzc29yPzogeyB0eXBlOiBbIFwiLmNvbmNhdChlLFwiIF0sIGNvbmZpZz86IHt9IH0gfSwgYXVkaW8/OiB7IHByb2Nlc3Nvcjoge3R5cGU6IFsgXCIpLmNvbmNhdCh0LFwiIF0gfSB9IH1cIil9ZnVuY3Rpb24gWXMoZSl7dmFyIHQ9ZS5hbGxvd0FsbFBhcnRpY2lwYW50c0tleTtyZXR1cm5cInJlY2VpdmVTZXR0aW5ncyBtdXN0IGJlIG9mIHRoZSBmb3JtIHsgWzxyZW1vdGUgcGFydGljaXBhbnQgaWQ+IHwgXCIuY29uY2F0KGdpKS5jb25jYXQodD8nIHwgXCInLmNvbmNhdChcIipcIiwnXCInKTpcIlwiLFwiXTogXCIpKyd7IFt2aWRlbzogW3sgbGF5ZXI6IFs8bm9uLW5lZ2F0aXZlIGludGVnZXI+IHwgXCJpbmhlcml0XCJdIH0gfCBcImluaGVyaXRcIl1dLCBbc2NyZWVuVmlkZW86IFt7IGxheWVyOiBbPG5vbi1uZWdhdGl2ZSBpbnRlZ2VyPiB8IFwiaW5oZXJpdFwiXSB9IHwgXCJpbmhlcml0XCJdXSB9fX0nfWZ1bmN0aW9uIEtzKCl7cmV0dXJuXCJjdXN0b21JbnRlZ3JhdGlvbnMgc2hvdWxkIGJlIGFuIG9iamVjdCBvZiB0eXBlIFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShQcyksXCIuXCIpfWZ1bmN0aW9uIFhzKGUpe2lmKGUmJlwib2JqZWN0XCIhPT1uKGUpfHxBcnJheS5pc0FycmF5KGUpKXJldHVybiBjb25zb2xlLmVycm9yKFwiY3VzdG9tVHJheUJ1dHRvbnMgc2hvdWxkIGJlIGFuIE9iamVjdCBvZiB0aGUgdHlwZSBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoVHMpLFwiLlwiKSksITE7aWYoZSlmb3IodmFyIHQ9MCxyPU9iamVjdC5lbnRyaWVzKGUpO3Q8ci5sZW5ndGg7dCsrKWZvcih2YXIgaT12KHJbdF0sMSlbMF0sbz0wLGE9T2JqZWN0LmVudHJpZXMoZVtpXSk7bzxhLmxlbmd0aDtvKyspe3ZhciBzPXYoYVtvXSwyKSxjPXNbMF0sbD1zWzFdLHU9VHMuaWRbY107aWYoIXUpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJjdXN0b21UcmF5QnV0dG9uIGRvZXMgbm90IHN1cHBvcnQga2V5IFwiLmNvbmNhdChjKSksITE7c3dpdGNoKGMpe2Nhc2VcImljb25QYXRoXCI6Y2FzZVwiaWNvblBhdGhEYXJrTW9kZVwiOmlmKCFaKGwpKXJldHVybiBjb25zb2xlLmVycm9yKFwiY3VzdG9tVHJheUJ1dHRvbiBcIi5jb25jYXQoYyxcIiBzaG91bGQgYmUgYSB1cmwuXCIpKSwhMTticmVhaztjYXNlXCJ2aXN1YWxTdGF0ZVwiOmlmKCFbXCJkZWZhdWx0XCIsXCJzaWRlYmFyLW9wZW5cIixcImFjdGl2ZVwiXS5pbmNsdWRlcyhsKSlyZXR1cm4gY29uc29sZS5lcnJvcihcImN1c3RvbVRyYXlCdXR0b24gXCIuY29uY2F0KGMsXCIgc2hvdWxkIGJlIFwiKS5jb25jYXQodSxcIi4gR290OiBcIikuY29uY2F0KGwpKSwhMTticmVhaztkZWZhdWx0OmlmKG4obCkhPT11KXJldHVybiBjb25zb2xlLmVycm9yKFwiY3VzdG9tVHJheUJ1dHRvbiBcIi5jb25jYXQoYyxcIiBzaG91bGQgYmUgYSBcIikuY29uY2F0KHUsXCIuXCIpKSwhMX19cmV0dXJuITB9ZnVuY3Rpb24gWnMoZSl7aWYoIWV8fGUmJlwib2JqZWN0XCIhPT1uKGUpfHxBcnJheS5pc0FycmF5KGUpKXJldHVybiBjb25zb2xlLmVycm9yKEtzKCkpLCExO2Zvcih2YXIgdD1mdW5jdGlvbihlKXtyZXR1cm5cIlwiLmNvbmNhdChlLFwiIHNob3VsZCBiZSBcIikuY29uY2F0KFBzLmlkW2VdKX0scj1mdW5jdGlvbihlLHQpe3JldHVybiBjb25zb2xlLmVycm9yKFwiY3VzdG9tSW50ZWdyYXRpb24gXCIuY29uY2F0KGUsXCI6IFwiKS5jb25jYXQodCkpfSxpPTAsbz1PYmplY3QuZW50cmllcyhlKTtpPG8ubGVuZ3RoO2krKyl7dmFyIGE9dihvW2ldLDEpWzBdO2lmKCEoXCJsYWJlbFwiaW4gZVthXSkpcmV0dXJuIHIoYSxcImxhYmVsIGlzIHJlcXVpcmVkXCIpLCExO2lmKCEoXCJsb2NhdGlvblwiaW4gZVthXSkpcmV0dXJuIHIoYSxcImxvY2F0aW9uIGlzIHJlcXVpcmVkXCIpLCExO2lmKCEoXCJzcmNcImluIGVbYV0pJiYhKFwic3JjZG9jXCJpbiBlW2FdKSlyZXR1cm4gcihhLFwic3JjIG9yIHNyY2RvYyBpcyByZXF1aXJlZFwiKSwhMTtmb3IodmFyIHM9MCxjPU9iamVjdC5lbnRyaWVzKGVbYV0pO3M8Yy5sZW5ndGg7cysrKXt2YXIgbD12KGNbc10sMiksdT1sWzBdLGQ9bFsxXTtzd2l0Y2godSl7Y2FzZVwiYWxsb3dcIjpjYXNlXCJjc3BcIjpjYXNlXCJuYW1lXCI6Y2FzZVwicmVmZXJyZXJQb2xpY3lcIjpjYXNlXCJzYW5kYm94XCI6aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGQpcmV0dXJuIHIoYSx0KHUpKSwhMTticmVhaztjYXNlXCJpY29uVVJMXCI6aWYoIVooZCkpcmV0dXJuIHIoYSxcIlwiLmNvbmNhdCh1LFwiIHNob3VsZCBiZSBhIHVybFwiKSksITE7YnJlYWs7Y2FzZVwic3JjXCI6aWYoXCJzcmNkb2NcImluIGVbYV0pcmV0dXJuIHIoYSxcImNhbm5vdCBoYXZlIGJvdGggc3JjIGFuZCBzcmNkb2NcIiksITE7aWYoIVooZCkpcmV0dXJuIHIoYSwnc3JjIFwiJy5jb25jYXQoZCwnXCIgaXMgbm90IGEgdmFsaWQgVVJMJykpLCExO2JyZWFrO2Nhc2VcInNyY2RvY1wiOmlmKFwic3JjXCJpbiBlW2FdKXJldHVybiByKGEsXCJjYW5ub3QgaGF2ZSBib3RoIHNyYyBhbmQgc3JjZG9jXCIpLCExO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBkKXJldHVybiByKGEsdCh1KSksITE7YnJlYWs7Y2FzZVwibG9jYXRpb25cIjppZighW1wibWFpblwiLFwic2lkZWJhclwiXS5pbmNsdWRlcyhkKSlyZXR1cm4gcihhLHQodSkpLCExO2JyZWFrO2Nhc2VcImNvbnRyb2xsZWRCeVwiOmlmKFwiKlwiIT09ZCYmXCJvd25lcnNcIiE9PWQmJighQXJyYXkuaXNBcnJheShkKXx8ZC5zb21lKChmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZX0pKSkpcmV0dXJuIHIoYSx0KHUpKSwhMTticmVhaztjYXNlXCJzaGFyZWRcIjppZigoIUFycmF5LmlzQXJyYXkoZCl8fGQuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGV9KSkpJiZcIm93bmVyc1wiIT09ZCYmXCJib29sZWFuXCIhPXR5cGVvZiBkKXJldHVybiByKGEsdCh1KSksITE7YnJlYWs7ZGVmYXVsdDppZighUHMuaWRbdV0pcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJjdXN0b21JbnRlZ3JhdGlvbiBkb2VzIG5vdCBzdXBwb3J0IGtleSBcIi5jb25jYXQodSkpLCExfX19cmV0dXJuITB9ZnVuY3Rpb24gZWMoZSx0KXtpZih2b2lkIDA9PT10KXJldHVybiExO3N3aXRjaChuKHQpKXtjYXNlXCJzdHJpbmdcIjpyZXR1cm4gbihlKT09PXQ7Y2FzZVwib2JqZWN0XCI6aWYoXCJvYmplY3RcIiE9PW4oZSkpcmV0dXJuITE7Zm9yKHZhciByIGluIGUpaWYoIWVjKGVbcl0sdFtyXSkpcmV0dXJuITE7cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gdGMoZSx0KXt2YXIgbj1lLnNlc3Npb25JZCxyPWUudG9FbmRQb2ludCxpPWUudXNlU2lwUmVmZXI7aWYoIW58fCFyKXRocm93IG5ldyBFcnJvcihcIlwiLmNvbmNhdCh0LFwiKCkgcmVxdWlyZXMgYSBzZXNzaW9uSWQgYW5kIHRvRW5kUG9pbnRcIikpO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBufHxcInN0cmluZ1wiIT10eXBlb2Ygcil0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBhcmFtYXRlcjogc2Vzc2lvbklkIGFuZCB0b0VuZFBvaW50IG11c3QgYmUgb2YgdHlwZSBzdHJpbmdcIik7aWYoaSYmIXIuc3RhcnRzV2l0aChcInNpcDpcIikpdGhyb3cgbmV3IEVycm9yKCdcInRvRW5kUG9pbnRcIiBtdXN0IGJlIGEgXCJzaXBcIiBhZGRyZXNzJyk7aWYoIXIuc3RhcnRzV2l0aChcInNpcDpcIikmJiFyLnN0YXJ0c1dpdGgoXCIrXCIpKXRocm93IG5ldyBFcnJvcihcInRvRW5kUG9pbnQ6IFwiLmNvbmNhdChyLCcgbXVzdCBzdGFydHMgd2l0aCBlaXRoZXIgXCJzaXA6XCIgb3IgXCIrXCInKSl9ZnVuY3Rpb24gbmMoZSl7aWYoXCJvYmplY3RcIiE9PW4oZSkpdGhyb3cgbmV3IEVycm9yKCdSZW1vdGVNZWRpYVBsYXllclNldHRpbmdzOiBtdXN0IGJlIFwib2JqZWN0XCIgdHlwZScpO2lmKGUuc3RhdGUmJiFPYmplY3QudmFsdWVzKFlvKS5pbmNsdWRlcyhlLnN0YXRlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBSZW1vdGVNZWRpYVBsYXllclNldHRpbmdzLnN0YXRlLCB2YWxpZCB2YWx1ZXMgYXJlOiBcIitKU09OLnN0cmluZ2lmeShZbykpO2lmKGUudm9sdW1lKXtpZihcIm51bWJlclwiIT10eXBlb2YgZS52b2x1bWUpdGhyb3cgbmV3IEVycm9yKCdSZW1vdGVNZWRpYVBsYXllclNldHRpbmdzLnZvbHVtZTogbXVzdCBiZSBcIm51bWJlclwiIHR5cGUnKTtpZihlLnZvbHVtZTwwfHxlLnZvbHVtZT4yKXRocm93IG5ldyBFcnJvcihcIlJlbW90ZU1lZGlhUGxheWVyU2V0dGluZ3Mudm9sdW1lOiBtdXN0IGJlIGJldHdlZW4gMC4wIC0gMi4wXCIpfX1mdW5jdGlvbiByYyhlLHQsbil7cmV0dXJuIShcIm51bWJlclwiIT10eXBlb2YgZXx8ZTx0fHxlPm4pfWZ1bmN0aW9uIGljKGUsdCl7cmV0dXJuIGUmJiF0JiZkZWxldGUgZS5kYXRhLGV9ZXhwb3J0e2hpIGFzIERBSUxZX0FDQ0VTU19MRVZFTF9GVUxMLGZpIGFzIERBSUxZX0FDQ0VTU19MRVZFTF9MT0JCWSx2aSBhcyBEQUlMWV9BQ0NFU1NfTEVWRUxfTk9ORSxwaSBhcyBEQUlMWV9BQ0NFU1NfVU5LTk9XTixBaSBhcyBEQUlMWV9DQU1FUkFfRVJST1JfQ0FNX0FORF9NSUNfSU5fVVNFLFBpIGFzIERBSUxZX0NBTUVSQV9FUlJPUl9DQU1fSU5fVVNFLElpIGFzIERBSUxZX0NBTUVSQV9FUlJPUl9DT05TVFJBSU5UUyxPaSBhcyBEQUlMWV9DQU1FUkFfRVJST1JfTUlDX0lOX1VTRSx4aSBhcyBEQUlMWV9DQU1FUkFfRVJST1JfTk9UX0ZPVU5ELGppIGFzIERBSUxZX0NBTUVSQV9FUlJPUl9QRVJNSVNTSU9OUyxMaSBhcyBEQUlMWV9DQU1FUkFfRVJST1JfVU5ERUZfTUVESUFERVZJQ0VTLERpIGFzIERBSUxZX0NBTUVSQV9FUlJPUl9VTktOT1dOLEtpIGFzIERBSUxZX0VWRU5UX0FDQ0VTU19TVEFURV9VUERBVEVELE1vIGFzIERBSUxZX0VWRU5UX0FDVElWRV9TUEVBS0VSX0NIQU5HRSxDbyBhcyBEQUlMWV9FVkVOVF9BQ1RJVkVfU1BFQUtFUl9NT0RFX0NIQU5HRSxnbyBhcyBEQUlMWV9FVkVOVF9BUFBfTVNHLCRpIGFzIERBSUxZX0VWRU5UX0NBTUVSQV9FUlJPUixQbyBhcyBEQUlMWV9FVkVOVF9DUFVfTE9BRF9DSEFOR0UsVW8gYXMgREFJTFlfRVZFTlRfRVJST1Isam8gYXMgREFJTFlfRVZFTlRfRVhJVF9GVUxMU0NSRUVOLE9vIGFzIERBSUxZX0VWRU5UX0ZBQ0VfQ09VTlRTX1VQREFURUQsQW8gYXMgREFJTFlfRVZFTlRfRlVMTFNDUkVFTixGaSBhcyBEQUlMWV9FVkVOVF9JRlJBTUVfTEFVTkNIX0NPTkZJRyxOaSBhcyBEQUlMWV9FVkVOVF9JRlJBTUVfUkVBRFlfRk9SX0xBVU5DSF9DT05GSUcsUm8gYXMgREFJTFlfRVZFTlRfSU5QVVRfU0VUVElOR1NfVVBEQVRFRCx6aSBhcyBEQUlMWV9FVkVOVF9KT0lORURfTUVFVElORyxxaSBhcyBEQUlMWV9FVkVOVF9KT0lOSU5HX01FRVRJTkcsTm8gYXMgREFJTFlfRVZFTlRfTEFOR19VUERBVEVELFdpIGFzIERBSUxZX0VWRU5UX0xFRlRfTUVFVElORyxEbyBhcyBEQUlMWV9FVkVOVF9MSVZFX1NUUkVBTUlOR19FUlJPUixMbyBhcyBEQUlMWV9FVkVOVF9MSVZFX1NUUkVBTUlOR19TVEFSVEVELElvIGFzIERBSUxZX0VWRU5UX0xJVkVfU1RSRUFNSU5HX1NUT1BQRUQseG8gYXMgREFJTFlfRVZFTlRfTElWRV9TVFJFQU1JTkdfVVBEQVRFRCxWaSBhcyBEQUlMWV9FVkVOVF9MT0FERUQsQmkgYXMgREFJTFlfRVZFTlRfTE9BRElORyxVaSBhcyBEQUlMWV9FVkVOVF9MT0FEX0FUVEVNUFRfRkFJTEVELFNvIGFzIERBSUxZX0VWRU5UX0xPQ0FMX1NDUkVFTl9TSEFSRV9DQU5DRUxFRCx3byBhcyBEQUlMWV9FVkVOVF9MT0NBTF9TQ1JFRU5fU0hBUkVfU1RBUlRFRCxrbyBhcyBEQUlMWV9FVkVOVF9MT0NBTF9TQ1JFRU5fU0hBUkVfU1RPUFBFRCxlbyBhcyBEQUlMWV9FVkVOVF9NRUVUSU5HX1NFU1NJT05fREFUQV9FUlJPUixaaSBhcyBEQUlMWV9FVkVOVF9NRUVUSU5HX1NFU1NJT05fU1RBVEVfVVBEQVRFRCxYaSBhcyBEQUlMWV9FVkVOVF9NRUVUSU5HX1NFU1NJT05fU1VNTUFSWV9VUERBVEVELFRvIGFzIERBSUxZX0VWRU5UX05FVFdPUktfQ09OTkVDVElPTixFbyBhcyBEQUlMWV9FVkVOVF9ORVRXT1JLX1FVQUxJVFlfQ0hBTkdFLEJvIGFzIERBSUxZX0VWRU5UX05PTkZBVEFMX0VSUk9SLFlpIGFzIERBSUxZX0VWRU5UX1BBUlRJQ0lQQU5UX0NPVU5UU19VUERBVEVELEhpIGFzIERBSUxZX0VWRU5UX1BBUlRJQ0lQQU5UX0pPSU5FRCxRaSBhcyBEQUlMWV9FVkVOVF9QQVJUSUNJUEFOVF9MRUZULEdpIGFzIERBSUxZX0VWRU5UX1BBUlRJQ0lQQU5UX1VQREFURUQsRm8gYXMgREFJTFlfRVZFTlRfUkVDRUlWRV9TRVRUSU5HU19VUERBVEVELHZvIGFzIERBSUxZX0VWRU5UX1JFQ09SRElOR19EQVRBLGhvIGFzIERBSUxZX0VWRU5UX1JFQ09SRElOR19FUlJPUixsbyBhcyBEQUlMWV9FVkVOVF9SRUNPUkRJTkdfU1RBUlRFRCxwbyBhcyBEQUlMWV9FVkVOVF9SRUNPUkRJTkdfU1RBVFMsdW8gYXMgREFJTFlfRVZFTlRfUkVDT1JESU5HX1NUT1BQRUQsZm8gYXMgREFJTFlfRVZFTlRfUkVDT1JESU5HX1VQTE9BRF9DT01QTEVURUQseW8gYXMgREFJTFlfRVZFTlRfUkVNT1RFX01FRElBX1BMQVlFUl9TVEFSVEVELGJvIGFzIERBSUxZX0VWRU5UX1JFTU9URV9NRURJQV9QTEFZRVJfU1RPUFBFRCxfbyBhcyBEQUlMWV9FVkVOVF9SRU1PVEVfTUVESUFfUExBWUVSX1VQREFURUQsSmkgYXMgREFJTFlfRVZFTlRfU1RBUlRFRF9DQU1FUkEsUmkgYXMgREFJTFlfRVZFTlRfVEhFTUVfVVBEQVRFRCxpbyBhcyBEQUlMWV9FVkVOVF9UUkFDS19TVEFSVEVELG9vIGFzIERBSUxZX0VWRU5UX1RSQUNLX1NUT1BQRUQsY28gYXMgREFJTFlfRVZFTlRfVFJBTlNDUklQVElPTl9FUlJPUixtbyBhcyBEQUlMWV9FVkVOVF9UUkFOU0NSSVBUSU9OX01TRyxhbyBhcyBEQUlMWV9FVkVOVF9UUkFOU0NSSVBUSU9OX1NUQVJURUQsc28gYXMgREFJTFlfRVZFTlRfVFJBTlNDUklQVElPTl9TVE9QUEVELHRvIGFzIERBSUxZX0VWRU5UX1dBSVRJTkdfUEFSVElDSVBBTlRfQURERUQscm8gYXMgREFJTFlfRVZFTlRfV0FJVElOR19QQVJUSUNJUEFOVF9SRU1PVkVELG5vIGFzIERBSUxZX0VWRU5UX1dBSVRJTkdfUEFSVElDSVBBTlRfVVBEQVRFRCxUaSBhcyBEQUlMWV9GQVRBTF9FUlJPUl9DT05ORUNUSU9OLHlpIGFzIERBSUxZX0ZBVEFMX0VSUk9SX0VKRUNURUQsQ2kgYXMgREFJTFlfRkFUQUxfRVJST1JfRU9MLHdpIGFzIERBSUxZX0ZBVEFMX0VSUk9SX0VYUF9ST09NLGtpIGFzIERBSUxZX0ZBVEFMX0VSUk9SX0VYUF9UT0tFTixNaSBhcyBEQUlMWV9GQVRBTF9FUlJPUl9NRUVUSU5HX0ZVTEwsX2kgYXMgREFJTFlfRkFUQUxfRVJST1JfTkJGX1JPT00sYmkgYXMgREFJTFlfRkFUQUxfRVJST1JfTkJGX1RPS0VOLEVpIGFzIERBSUxZX0ZBVEFMX0VSUk9SX05PVF9BTExPV0VELFNpIGFzIERBSUxZX0ZBVEFMX0VSUk9SX05PX1JPT00sbWkgYXMgREFJTFlfUkVDRUlWRV9TRVRUSU5HU19BTExfUEFSVElDSVBBTlRTX0tFWSxnaSBhcyBEQUlMWV9SRUNFSVZFX1NFVFRJTkdTX0JBU0VfS0VZLG9pIGFzIERBSUxZX1NUQVRFX0VSUk9SLHJpIGFzIERBSUxZX1NUQVRFX0pPSU5FRCxuaSBhcyBEQUlMWV9TVEFURV9KT0lOSU5HLGlpIGFzIERBSUxZX1NUQVRFX0xFRlQsWnIgYXMgREFJTFlfU1RBVEVfTkVXLGFpIGFzIERBSUxZX1RSQUNLX1NUQVRFX0JMT0NLRUQsdWkgYXMgREFJTFlfVFJBQ0tfU1RBVEVfSU5URVJSVVBURUQsbGkgYXMgREFJTFlfVFJBQ0tfU1RBVEVfTE9BRElORyxzaSBhcyBEQUlMWV9UUkFDS19TVEFURV9PRkYsZGkgYXMgREFJTFlfVFJBQ0tfU1RBVEVfUExBWUFCTEUsY2kgYXMgREFJTFlfVFJBQ0tfU1RBVEVfU0VOREFCTEUsanMgYXMgZGVmYXVsdH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@daily-co/daily-js/dist/daily-esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@vapi-ai/web/dist/api.js":
/*!***********************************************!*\
  !*** ./node_modules/@vapi-ai/web/dist/api.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Api = exports.HttpClient = exports.ContentType = void 0;\nvar ContentType;\n(function (ContentType) {\n    ContentType[\"Json\"] = \"application/json\";\n    ContentType[\"FormData\"] = \"multipart/form-data\";\n    ContentType[\"UrlEncoded\"] = \"application/x-www-form-urlencoded\";\n    ContentType[\"Text\"] = \"text/plain\";\n})(ContentType || (exports.ContentType = ContentType = {}));\nclass HttpClient {\n    baseUrl = 'https://api.vapi.ai';\n    securityData = null;\n    securityWorker;\n    abortControllers = new Map();\n    customFetch = (...fetchParams) => fetch(...fetchParams);\n    baseApiParams = {\n        credentials: 'same-origin',\n        headers: {},\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n    };\n    constructor(apiConfig = {}) {\n        Object.assign(this, apiConfig);\n    }\n    setSecurityData = (data) => {\n        this.securityData = data;\n    };\n    encodeQueryParam(key, value) {\n        const encodedKey = encodeURIComponent(key);\n        return `${encodedKey}=${encodeURIComponent(typeof value === 'number' ? value : `${value}`)}`;\n    }\n    addQueryParam(query, key) {\n        return this.encodeQueryParam(key, query[key]);\n    }\n    addArrayQueryParam(query, key) {\n        const value = query[key];\n        return value.map((v) => this.encodeQueryParam(key, v)).join('&');\n    }\n    toQueryString(rawQuery) {\n        const query = rawQuery || {};\n        const keys = Object.keys(query).filter((key) => 'undefined' !== typeof query[key]);\n        return keys\n            .map((key) => Array.isArray(query[key])\n            ? this.addArrayQueryParam(query, key)\n            : this.addQueryParam(query, key))\n            .join('&');\n    }\n    addQueryParams(rawQuery) {\n        const queryString = this.toQueryString(rawQuery);\n        return queryString ? `?${queryString}` : '';\n    }\n    contentFormatters = {\n        [ContentType.Json]: (input) => input !== null && (typeof input === 'object' || typeof input === 'string')\n            ? JSON.stringify(input)\n            : input,\n        [ContentType.Text]: (input) => input !== null && typeof input !== 'string' ? JSON.stringify(input) : input,\n        [ContentType.FormData]: (input) => Object.keys(input || {}).reduce((formData, key) => {\n            const property = input[key];\n            formData.append(key, property instanceof Blob\n                ? property\n                : typeof property === 'object' && property !== null\n                    ? JSON.stringify(property)\n                    : `${property}`);\n            return formData;\n        }, new FormData()),\n        [ContentType.UrlEncoded]: (input) => this.toQueryString(input),\n    };\n    mergeRequestParams(params1, params2) {\n        return {\n            ...this.baseApiParams,\n            ...params1,\n            ...(params2 || {}),\n            headers: {\n                ...(this.baseApiParams.headers || {}),\n                ...(params1.headers || {}),\n                ...((params2 && params2.headers) || {}),\n            },\n        };\n    }\n    createAbortSignal = (cancelToken) => {\n        if (this.abortControllers.has(cancelToken)) {\n            const abortController = this.abortControllers.get(cancelToken);\n            if (abortController) {\n                return abortController.signal;\n            }\n            return void 0;\n        }\n        const abortController = new AbortController();\n        this.abortControllers.set(cancelToken, abortController);\n        return abortController.signal;\n    };\n    abortRequest = (cancelToken) => {\n        const abortController = this.abortControllers.get(cancelToken);\n        if (abortController) {\n            abortController.abort();\n            this.abortControllers.delete(cancelToken);\n        }\n    };\n    request = async ({ body, secure, path, type, query, format, baseUrl, cancelToken, ...params }) => {\n        const secureParams = ((typeof secure === 'boolean' ? secure : this.baseApiParams.secure) &&\n            this.securityWorker &&\n            (await this.securityWorker(this.securityData))) ||\n            {};\n        const requestParams = this.mergeRequestParams(params, secureParams);\n        const queryString = query && this.toQueryString(query);\n        const payloadFormatter = this.contentFormatters[type || ContentType.Json];\n        const responseFormat = format || requestParams.format;\n        return this.customFetch(`${baseUrl || this.baseUrl || ''}${path}${queryString ? `?${queryString}` : ''}`, {\n            ...requestParams,\n            headers: {\n                ...(requestParams.headers || {}),\n                ...(type && type !== ContentType.FormData ? { 'Content-Type': type } : {}),\n            },\n            signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,\n            body: typeof body === 'undefined' || body === null ? null : payloadFormatter(body),\n        }).then(async (response) => {\n            const r = response;\n            r.data = null;\n            r.error = null;\n            const data = !responseFormat\n                ? r\n                : await response[responseFormat]()\n                    .then((data) => {\n                    if (r.ok) {\n                        r.data = data;\n                    }\n                    else {\n                        r.error = data;\n                    }\n                    return r;\n                })\n                    .catch((e) => {\n                    r.error = e;\n                    return r;\n                });\n            if (cancelToken) {\n                this.abortControllers.delete(cancelToken);\n            }\n            if (!response.ok)\n                throw data;\n            return data;\n        });\n    };\n}\nexports.HttpClient = HttpClient;\n/**\n * @title Vapi API\n * @version 1.0\n * @baseUrl https://api.vapi.ai\n * @contact\n *\n * Voice AI for developers.\n */\nclass Api extends HttpClient {\n    call = {\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerCreate\n         * @summary Create Call\n         * @request POST:/call\n         * @secure\n         */\n        callControllerCreate: (data, params = {}) => this.request({\n            path: `/call`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindAll\n         * @summary List Calls\n         * @request GET:/call\n         * @secure\n         */\n        callControllerFindAll: (query, params = {}) => this.request({\n            path: `/call`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindOne\n         * @summary Get Call\n         * @request GET:/call/{id}\n         * @secure\n         */\n        callControllerFindOne: (id, params = {}) => this.request({\n            path: `/call/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerUpdate\n         * @summary Update Call\n         * @request PATCH:/call/{id}\n         * @secure\n         */\n        callControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/call/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerDeleteCallData\n         * @summary Delete Call Data\n         * @request DELETE:/call/{id}\n         * @secure\n         */\n        callControllerDeleteCallData: (id, params = {}) => this.request({\n            path: `/call/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerCreatePhoneCall\n         * @summary Create Phone Call\n         * @request POST:/call/phone\n         * @deprecated\n         * @secure\n         */\n        callControllerCreatePhoneCall: (data, params = {}) => this.request({\n            path: `/call/phone`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerCreateWebCall\n         * @summary Create Web Call\n         * @request POST:/call/web\n         * @secure\n         */\n        callControllerCreateWebCall: (data, params = {}) => this.request({\n            path: `/call/web`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    v2 = {\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindAllPaginated\n         * @summary List Calls\n         * @request GET:/v2/call\n         * @secure\n         */\n        callControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/v2/call`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Calls\n         * @name CallControllerFindAllMetadataPaginated\n         * @summary List Call Metadata\n         * @request GET:/v2/call/metadata\n         * @secure\n         */\n        callControllerFindAllMetadataPaginated: (query, params = {}) => this.request({\n            path: `/v2/call/metadata`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindAllPaginated\n         * @summary List Assistants with pagination\n         * @request GET:/v2/assistant\n         * @secure\n         */\n        assistantControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/v2/assistant`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerFindAllPaginated\n         * @summary List Phone Numbers\n         * @request GET:/v2/phone-number\n         * @secure\n         */\n        phoneNumberControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/v2/phone-number`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    chat = {\n        /**\n         * No description\n         *\n         * @tags Chat\n         * @name ChatController\n         * @summary Chat with Assistant\n         * @request POST:/chat\n         * @deprecated\n         * @secure\n         */\n        chatController: (params = {}) => this.request({\n            path: `/chat`,\n            method: 'POST',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Chat\n         * @name ChatControllerChatCompletions\n         * @summary Chat with a Workflow\n         * @request POST:/chat/completions\n         * @secure\n         */\n        chatControllerChatCompletions: (data, params = {}) => this.request({\n            path: `/chat/completions`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    assistant = {\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerCreate\n         * @summary Create Assistant\n         * @request POST:/assistant\n         * @secure\n         */\n        assistantControllerCreate: (data, params = {}) => this.request({\n            path: `/assistant`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindAll\n         * @summary List Assistants\n         * @request GET:/assistant\n         * @secure\n         */\n        assistantControllerFindAll: (query, params = {}) => this.request({\n            path: `/assistant`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerFindOne\n         * @summary Get Assistant\n         * @request GET:/assistant/{id}\n         * @secure\n         */\n        assistantControllerFindOne: (id, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerUpdate\n         * @summary Update Assistant\n         * @request PATCH:/assistant/{id}\n         * @secure\n         */\n        assistantControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerReplace\n         * @summary Replace Assistant\n         * @request PUT:/assistant/{id}\n         * @secure\n         */\n        assistantControllerReplace: (id, data, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: 'PUT',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Assistants\n         * @name AssistantControllerRemove\n         * @summary Delete Assistant\n         * @request DELETE:/assistant/{id}\n         * @secure\n         */\n        assistantControllerRemove: (id, params = {}) => this.request({\n            path: `/assistant/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    phoneNumber = {\n        /**\n         * @description Use POST /phone-number instead.\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerImportTwilio\n         * @summary Import Twilio Number\n         * @request POST:/phone-number/import/twilio\n         * @deprecated\n         * @secure\n         */\n        phoneNumberControllerImportTwilio: (data, params = {}) => this.request({\n            path: `/phone-number/import/twilio`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * @description Use POST /phone-number instead.\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerImportVonage\n         * @summary Import Vonage Number\n         * @request POST:/phone-number/import/vonage\n         * @deprecated\n         * @secure\n         */\n        phoneNumberControllerImportVonage: (data, params = {}) => this.request({\n            path: `/phone-number/import/vonage`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerCreate\n         * @summary Create Phone Number\n         * @request POST:/phone-number\n         * @secure\n         */\n        phoneNumberControllerCreate: (data, params = {}) => this.request({\n            path: `/phone-number`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerFindAll\n         * @summary List Phone Numbers\n         * @request GET:/phone-number\n         * @secure\n         */\n        phoneNumberControllerFindAll: (query, params = {}) => this.request({\n            path: `/phone-number`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerFindOne\n         * @summary Get Phone Number\n         * @request GET:/phone-number/{id}\n         * @secure\n         */\n        phoneNumberControllerFindOne: (id, params = {}) => this.request({\n            path: `/phone-number/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerUpdate\n         * @summary Update Phone Number\n         * @request PATCH:/phone-number/{id}\n         * @secure\n         */\n        phoneNumberControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/phone-number/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Phone Numbers\n         * @name PhoneNumberControllerRemove\n         * @summary Delete Phone Number\n         * @request DELETE:/phone-number/{id}\n         * @secure\n         */\n        phoneNumberControllerRemove: (id, params = {}) => this.request({\n            path: `/phone-number/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    tool = {\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerCreate\n         * @summary Create Tool\n         * @request POST:/tool\n         * @secure\n         */\n        toolControllerCreate: (data, params = {}) => this.request({\n            path: `/tool`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerFindAll\n         * @summary List Tools\n         * @request GET:/tool\n         * @secure\n         */\n        toolControllerFindAll: (query, params = {}) => this.request({\n            path: `/tool`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerFindOne\n         * @summary Get Tool\n         * @request GET:/tool/{id}\n         * @secure\n         */\n        toolControllerFindOne: (id, params = {}) => this.request({\n            path: `/tool/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerUpdate\n         * @summary Update Tool\n         * @request PATCH:/tool/{id}\n         * @secure\n         */\n        toolControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/tool/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tools\n         * @name ToolControllerRemove\n         * @summary Delete Tool\n         * @request DELETE:/tool/{id}\n         * @secure\n         */\n        toolControllerRemove: (id, params = {}) => this.request({\n            path: `/tool/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    file = {\n        /**\n         * @description Use POST /file instead.\n         *\n         * @tags Files\n         * @name FileControllerCreateDeprecated\n         * @summary Upload File\n         * @request POST:/file/upload\n         * @deprecated\n         * @secure\n         */\n        fileControllerCreateDeprecated: (data, params = {}) => this.request({\n            path: `/file/upload`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.FormData,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerCreate\n         * @summary Upload File\n         * @request POST:/file\n         * @secure\n         */\n        fileControllerCreate: (data, params = {}) => this.request({\n            path: `/file`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.FormData,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerFindAll\n         * @summary List Files\n         * @request GET:/file\n         * @secure\n         */\n        fileControllerFindAll: (params = {}) => this.request({\n            path: `/file`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerFindOne\n         * @summary Get File\n         * @request GET:/file/{id}\n         * @secure\n         */\n        fileControllerFindOne: (id, params = {}) => this.request({\n            path: `/file/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerUpdate\n         * @summary Update File\n         * @request PATCH:/file/{id}\n         * @secure\n         */\n        fileControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/file/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Files\n         * @name FileControllerRemove\n         * @summary Delete File\n         * @request DELETE:/file/{id}\n         * @secure\n         */\n        fileControllerRemove: (id, params = {}) => this.request({\n            path: `/file/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    knowledgeBase = {\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerCreate\n         * @summary Create Knowledge Base\n         * @request POST:/knowledge-base\n         * @secure\n         */\n        knowledgeBaseControllerCreate: (data, params = {}) => this.request({\n            path: `/knowledge-base`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerFindAll\n         * @summary List Knowledge Bases\n         * @request GET:/knowledge-base\n         * @secure\n         */\n        knowledgeBaseControllerFindAll: (query, params = {}) => this.request({\n            path: `/knowledge-base`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerFindOne\n         * @summary Get Knowledge Base\n         * @request GET:/knowledge-base/{id}\n         * @secure\n         */\n        knowledgeBaseControllerFindOne: (id, params = {}) => this.request({\n            path: `/knowledge-base/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerUpdate\n         * @summary Update Knowledge Base\n         * @request PATCH:/knowledge-base/{id}\n         * @secure\n         */\n        knowledgeBaseControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/knowledge-base/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Knowledge Base\n         * @name KnowledgeBaseControllerRemove\n         * @summary Delete Knowledge Base\n         * @request DELETE:/knowledge-base/{id}\n         * @secure\n         */\n        knowledgeBaseControllerRemove: (id, params = {}) => this.request({\n            path: `/knowledge-base/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    workflow = {\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerFindAll\n         * @summary Get Workflows\n         * @request GET:/workflow\n         * @secure\n         */\n        workflowControllerFindAll: (params = {}) => this.request({\n            path: `/workflow`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerCreate\n         * @summary Create Workflow\n         * @request POST:/workflow\n         * @secure\n         */\n        workflowControllerCreate: (data, params = {}) => this.request({\n            path: `/workflow`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerFindOne\n         * @summary Get Workflow\n         * @request GET:/workflow/{id}\n         * @secure\n         */\n        workflowControllerFindOne: (id, params = {}) => this.request({\n            path: `/workflow/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerDelete\n         * @summary Delete Workflow\n         * @request DELETE:/workflow/{id}\n         * @secure\n         */\n        workflowControllerDelete: (id, params = {}) => this.request({\n            path: `/workflow/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Workflow\n         * @name WorkflowControllerUpdate\n         * @summary Update Workflow\n         * @request PATCH:/workflow/{id}\n         * @secure\n         */\n        workflowControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/workflow/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    squad = {\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerCreate\n         * @summary Create Squad\n         * @request POST:/squad\n         * @secure\n         */\n        squadControllerCreate: (data, params = {}) => this.request({\n            path: `/squad`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerFindAll\n         * @summary List Squads\n         * @request GET:/squad\n         * @secure\n         */\n        squadControllerFindAll: (query, params = {}) => this.request({\n            path: `/squad`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerFindOne\n         * @summary Get Squad\n         * @request GET:/squad/{id}\n         * @secure\n         */\n        squadControllerFindOne: (id, params = {}) => this.request({\n            path: `/squad/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerUpdate\n         * @summary Update Squad\n         * @request PATCH:/squad/{id}\n         * @secure\n         */\n        squadControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/squad/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Squads\n         * @name SquadControllerRemove\n         * @summary Delete Squad\n         * @request DELETE:/squad/{id}\n         * @secure\n         */\n        squadControllerRemove: (id, params = {}) => this.request({\n            path: `/squad/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    testSuite = {\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerFindAllPaginated\n         * @summary List Test Suites\n         * @request GET:/test-suite\n         * @secure\n         */\n        testSuiteControllerFindAllPaginated: (query, params = {}) => this.request({\n            path: `/test-suite`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerCreate\n         * @summary Create Test Suite\n         * @request POST:/test-suite\n         * @secure\n         */\n        testSuiteControllerCreate: (data, params = {}) => this.request({\n            path: `/test-suite`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerFindOne\n         * @summary Get Test Suite\n         * @request GET:/test-suite/{id}\n         * @secure\n         */\n        testSuiteControllerFindOne: (id, params = {}) => this.request({\n            path: `/test-suite/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerUpdate\n         * @summary Update Test Suite\n         * @request PATCH:/test-suite/{id}\n         * @secure\n         */\n        testSuiteControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/test-suite/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suites\n         * @name TestSuiteControllerRemove\n         * @summary Delete Test Suite\n         * @request DELETE:/test-suite/{id}\n         * @secure\n         */\n        testSuiteControllerRemove: (id, params = {}) => this.request({\n            path: `/test-suite/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerFindAllPaginated\n         * @summary List Tests\n         * @request GET:/test-suite/{testSuiteId}/test\n         * @secure\n         */\n        testSuiteTestControllerFindAllPaginated: (testSuiteId, query, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerCreate\n         * @summary Create Test\n         * @request POST:/test-suite/{testSuiteId}/test\n         * @secure\n         */\n        testSuiteTestControllerCreate: (testSuiteId, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerFindOne\n         * @summary Get Test\n         * @request GET:/test-suite/{testSuiteId}/test/{id}\n         * @secure\n         */\n        testSuiteTestControllerFindOne: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerUpdate\n         * @summary Update Test\n         * @request PATCH:/test-suite/{testSuiteId}/test/{id}\n         * @secure\n         */\n        testSuiteTestControllerUpdate: (testSuiteId, id, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Tests\n         * @name TestSuiteTestControllerRemove\n         * @summary Delete Test\n         * @request DELETE:/test-suite/{testSuiteId}/test/{id}\n         * @secure\n         */\n        testSuiteTestControllerRemove: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/test/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerFindAllPaginated\n         * @summary List Test Suite Runs\n         * @request GET:/test-suite/{testSuiteId}/run\n         * @secure\n         */\n        testSuiteRunControllerFindAllPaginated: (testSuiteId, query, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerCreate\n         * @summary Create Test Suite Run\n         * @request POST:/test-suite/{testSuiteId}/run\n         * @secure\n         */\n        testSuiteRunControllerCreate: (testSuiteId, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerFindOne\n         * @summary Get Test Suite Run\n         * @request GET:/test-suite/{testSuiteId}/run/{id}\n         * @secure\n         */\n        testSuiteRunControllerFindOne: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerUpdate\n         * @summary Update Test Suite Run\n         * @request PATCH:/test-suite/{testSuiteId}/run/{id}\n         * @secure\n         */\n        testSuiteRunControllerUpdate: (testSuiteId, id, data, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Test Suite Runs\n         * @name TestSuiteRunControllerRemove\n         * @summary Delete Test Suite Run\n         * @request DELETE:/test-suite/{testSuiteId}/run/{id}\n         * @secure\n         */\n        testSuiteRunControllerRemove: (testSuiteId, id, params = {}) => this.request({\n            path: `/test-suite/${testSuiteId}/run/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    metrics = {\n        /**\n         * @description Use GET /metric instead\n         *\n         * @tags Analytics\n         * @name AnalyticsControllerFindAllDeprecated\n         * @summary List Billing Metrics\n         * @request GET:/metrics\n         * @deprecated\n         * @secure\n         */\n        analyticsControllerFindAllDeprecated: (query, params = {}) => this.request({\n            path: `/metrics`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    analytics = {\n        /**\n         * No description\n         *\n         * @tags Analytics\n         * @name AnalyticsControllerQuery\n         * @summary Create Analytics Queries\n         * @request POST:/analytics\n         * @secure\n         */\n        analyticsControllerQuery: (data, params = {}) => this.request({\n            path: `/analytics`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    log = {\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerCallLogsQuery\n         * @summary Get Call Logs\n         * @request GET:/log\n         * @secure\n         */\n        loggingControllerCallLogsQuery: (query, params = {}) => this.request({\n            path: `/log`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerCallLogsDeleteQuery\n         * @summary Delete Call Logs\n         * @request DELETE:/log\n         * @secure\n         */\n        loggingControllerCallLogsDeleteQuery: (query, params = {}) => this.request({\n            path: `/log`,\n            method: 'DELETE',\n            query: query,\n            secure: true,\n            ...params,\n        }),\n    };\n    logs = {\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerLogsQuery\n         * @summary Get Logs\n         * @request GET:/logs\n         * @deprecated\n         * @secure\n         */\n        loggingControllerLogsQuery: (query, params = {}) => this.request({\n            path: `/logs`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Logs\n         * @name LoggingControllerLogsDeleteQuery\n         * @summary Delete Logs\n         * @request DELETE:/logs\n         * @deprecated\n         * @secure\n         */\n        loggingControllerLogsDeleteQuery: (query, params = {}) => this.request({\n            path: `/logs`,\n            method: 'DELETE',\n            query: query,\n            secure: true,\n            ...params,\n        }),\n    };\n    org = {\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerCreate\n         * @summary Create Org\n         * @request POST:/org\n         * @secure\n         */\n        orgControllerCreate: (data, params = {}) => this.request({\n            path: `/org`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerFindAll\n         * @summary List Orgs\n         * @request GET:/org\n         * @secure\n         */\n        orgControllerFindAll: (params = {}) => this.request({\n            path: `/org`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerFindOne\n         * @summary Get Org\n         * @request GET:/org/{id}\n         * @secure\n         */\n        orgControllerFindOne: (id, params = {}) => this.request({\n            path: `/org/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerUpdate\n         * @summary Update Org\n         * @request PATCH:/org/{id}\n         * @secure\n         */\n        orgControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/org/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerDeleteOrg\n         * @summary Delete Org\n         * @request DELETE:/org/{id}\n         * @secure\n         */\n        orgControllerDeleteOrg: (id, params = {}) => this.request({\n            path: `/org/${id}`,\n            method: 'DELETE',\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerFindAllUsers\n         * @summary List Users\n         * @request GET:/org/{id}/user\n         * @secure\n         */\n        orgControllerFindAllUsers: (id, params = {}) => this.request({\n            path: `/org/${id}/user`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerOrgLeave\n         * @summary Leave Org\n         * @request DELETE:/org/{id}/leave\n         * @secure\n         */\n        orgControllerOrgLeave: (id, params = {}) => this.request({\n            path: `/org/${id}/leave`,\n            method: 'DELETE',\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerOrgRemoveUser\n         * @summary Remove Org Member\n         * @request DELETE:/org/{id}/member/{memberId}/leave\n         * @secure\n         */\n        orgControllerOrgRemoveUser: (id, memberId, params = {}) => this.request({\n            path: `/org/${id}/member/${memberId}/leave`,\n            method: 'DELETE',\n            secure: true,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerUsersInvite\n         * @summary Invite User\n         * @request POST:/org/{id}/invite\n         * @secure\n         */\n        orgControllerUsersInvite: (id, data, params = {}) => this.request({\n            path: `/org/${id}/invite`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Orgs\n         * @name OrgControllerUserUpdate\n         * @summary Update User Role\n         * @request PATCH:/org/{id}/role\n         * @secure\n         */\n        orgControllerUserUpdate: (id, data, params = {}) => this.request({\n            path: `/org/${id}/role`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            ...params,\n        }),\n    };\n    token = {\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerCreate\n         * @summary Create Token\n         * @request POST:/token\n         * @secure\n         */\n        tokenControllerCreate: (data, params = {}) => this.request({\n            path: `/token`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerFindAll\n         * @summary List Tokens\n         * @request GET:/token\n         * @secure\n         */\n        tokenControllerFindAll: (query, params = {}) => this.request({\n            path: `/token`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerFindOne\n         * @summary Get Token\n         * @request GET:/token/{id}\n         * @secure\n         */\n        tokenControllerFindOne: (id, params = {}) => this.request({\n            path: `/token/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerUpdate\n         * @summary Update Token\n         * @request PATCH:/token/{id}\n         * @secure\n         */\n        tokenControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/token/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Tokens\n         * @name TokenControllerRemove\n         * @summary Delete Token\n         * @request DELETE:/token/{id}\n         * @secure\n         */\n        tokenControllerRemove: (id, params = {}) => this.request({\n            path: `/token/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    credential = {\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerCreate\n         * @summary Create Credential\n         * @request POST:/credential\n         * @secure\n         */\n        credentialControllerCreate: (data, params = {}) => this.request({\n            path: `/credential`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerFindAll\n         * @summary List Credentials\n         * @request GET:/credential\n         * @secure\n         */\n        credentialControllerFindAll: (query, params = {}) => this.request({\n            path: `/credential`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerFindOne\n         * @summary Get Credential\n         * @request GET:/credential/{id}\n         * @secure\n         */\n        credentialControllerFindOne: (id, params = {}) => this.request({\n            path: `/credential/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerUpdate\n         * @summary Update Credential\n         * @request PATCH:/credential/{id}\n         * @secure\n         */\n        credentialControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/credential/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Credentials\n         * @name CredentialControllerRemove\n         * @summary Delete Credential\n         * @request DELETE:/credential/{id}\n         * @secure\n         */\n        credentialControllerRemove: (id, params = {}) => this.request({\n            path: `/credential/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    template = {\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerCreate\n         * @summary Create Template\n         * @request POST:/template\n         * @secure\n         */\n        templateControllerCreate: (data, params = {}) => this.request({\n            path: `/template`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerFindAll\n         * @summary List Templates\n         * @request GET:/template\n         * @secure\n         */\n        templateControllerFindAll: (query, params = {}) => this.request({\n            path: `/template`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerFindAllPinned\n         * @summary List Templates\n         * @request GET:/template/pinned\n         * @secure\n         */\n        templateControllerFindAllPinned: (params = {}) => this.request({\n            path: `/template/pinned`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerFindOne\n         * @summary Get Template\n         * @request GET:/template/{id}\n         * @secure\n         */\n        templateControllerFindOne: (id, params = {}) => this.request({\n            path: `/template/${id}`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerUpdate\n         * @summary Update Template\n         * @request PATCH:/template/{id}\n         * @secure\n         */\n        templateControllerUpdate: (id, data, params = {}) => this.request({\n            path: `/template/${id}`,\n            method: 'PATCH',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Templates\n         * @name TemplateControllerRemove\n         * @summary Delete Template\n         * @request DELETE:/template/{id}\n         * @secure\n         */\n        templateControllerRemove: (id, params = {}) => this.request({\n            path: `/template/${id}`,\n            method: 'DELETE',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n    };\n    voiceLibrary = {\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceGetByProvider\n         * @summary Get voices in Voice Library by Provider\n         * @request GET:/voice-library/{provider}\n         * @secure\n         */\n        voiceLibraryControllerVoiceGetByProvider: (provider, query, params = {}) => this.request({\n            path: `/voice-library/${provider}`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceGetAccentsByProvider\n         * @summary Get accents in Voice Library by Provider\n         * @request GET:/voice-library/{provider}/accents\n         * @secure\n         */\n        voiceLibraryControllerVoiceGetAccentsByProvider: (provider, params = {}) => this.request({\n            path: `/voice-library/${provider}/accents`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceLibrarySyncByProvider\n         * @summary Sync Private voices in Voice Library by Provider\n         * @request POST:/voice-library/sync/{provider}\n         * @secure\n         */\n        voiceLibraryControllerVoiceLibrarySyncByProvider: (provider, params = {}) => this.request({\n            path: `/voice-library/sync/${provider}`,\n            method: 'POST',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Voice Library\n         * @name VoiceLibraryControllerVoiceLibrarySyncDefaultVoices\n         * @summary Sync Default voices in Voice Library by Providers\n         * @request POST:/voice-library/sync\n         * @secure\n         */\n        voiceLibraryControllerVoiceLibrarySyncDefaultVoices: (data, params = {}) => this.request({\n            path: `/voice-library/sync`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    provider = {\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name ProviderControllerGetWorkflows\n         * @request GET:/{provider}/workflows\n         * @secure\n         */\n        providerControllerGetWorkflows: (provider, query, params = {}) => this.request({\n            path: `/${provider}/workflows`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name ProviderControllerGetWorkflowTriggerHook\n         * @request GET:/{provider}/workflows/{workflowId}/hooks\n         * @secure\n         */\n        providerControllerGetWorkflowTriggerHook: (provider, workflowId, params = {}) => this.request({\n            path: `/${provider}/workflows/${workflowId}/hooks`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name ProviderControllerGetLocations\n         * @request GET:/{provider}/locations\n         * @secure\n         */\n        providerControllerGetLocations: (provider, params = {}) => this.request({\n            path: `/${provider}/locations`,\n            method: 'GET',\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerSearchVoices\n         * @summary Search Voice from Provider Voice Library.\n         * @request GET:/{provider}/voices/search\n         * @deprecated\n         * @secure\n         */\n        voiceProviderControllerSearchVoices: (provider, query, params = {}) => this.request({\n            path: `/${provider}/voices/search`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerSearchVoice\n         * @summary Search Voice from Provider Voice Library.\n         * @request GET:/{provider}/voice/search\n         * @secure\n         */\n        voiceProviderControllerSearchVoice: (provider, query, params = {}) => this.request({\n            path: `/${provider}/voice/search`,\n            method: 'GET',\n            query: query,\n            secure: true,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerAddVoices\n         * @summary Add Shared Voice to your Provider Account.\n         * @request POST:/{provider}/voices/add\n         * @deprecated\n         * @secure\n         */\n        voiceProviderControllerAddVoices: (provider, data, params = {}) => this.request({\n            path: `/${provider}/voices/add`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerAddVoice\n         * @summary Add Shared Voice to your Provider Account.\n         * @request POST:/{provider}/voice/add\n         * @secure\n         */\n        voiceProviderControllerAddVoice: (provider, data, params = {}) => this.request({\n            path: `/${provider}/voice/add`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.Json,\n            format: 'json',\n            ...params,\n        }),\n    };\n    v11Labs = {\n        /**\n         * No description\n         *\n         * @tags Providers\n         * @name VoiceProviderControllerCloneVoices\n         * @summary Clone a voice to the provider account and add to Vapi Voice Library.\n         * @request POST:/11labs/voice/clone\n         * @secure\n         */\n        voiceProviderControllerCloneVoices: (data, params = {}) => this.request({\n            path: `/11labs/voice/clone`,\n            method: 'POST',\n            body: data,\n            secure: true,\n            type: ContentType.FormData,\n            ...params,\n        }),\n    };\n}\nexports.Api = Api;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vapi-ai/web/dist/api.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@vapi-ai/web/dist/client.js":
/*!**************************************************!*\
  !*** ./node_modules/@vapi-ai/web/dist/client.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.client = void 0;\nconst api_1 = __webpack_require__(/*! ./api */ \"(app-pages-browser)/./node_modules/@vapi-ai/web/dist/api.js\");\nconst api = new api_1.Api({\n    baseUrl: \"https://api.vapi.ai\",\n    baseApiParams: {\n        secure: true,\n    },\n    securityWorker: async (securityData) => {\n        if (securityData) {\n            return {\n                headers: {\n                    Authorization: `Bearer ${securityData}`,\n                },\n            };\n        }\n    },\n});\nexports.client = api;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AdmFwaS1haS93ZWIvZGlzdC9jbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLGNBQWMsbUJBQU8sQ0FBQywwRUFBTztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxhQUFhO0FBQzFELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRCxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvYWRpc2luL0Rlc2t0b3AvcHJlcHdpc2Uvbm9kZV9tb2R1bGVzL0B2YXBpLWFpL3dlYi9kaXN0L2NsaWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2xpZW50ID0gdm9pZCAwO1xuY29uc3QgYXBpXzEgPSByZXF1aXJlKFwiLi9hcGlcIik7XG5jb25zdCBhcGkgPSBuZXcgYXBpXzEuQXBpKHtcbiAgICBiYXNlVXJsOiBcImh0dHBzOi8vYXBpLnZhcGkuYWlcIixcbiAgICBiYXNlQXBpUGFyYW1zOiB7XG4gICAgICAgIHNlY3VyZTogdHJ1ZSxcbiAgICB9LFxuICAgIHNlY3VyaXR5V29ya2VyOiBhc3luYyAoc2VjdXJpdHlEYXRhKSA9PiB7XG4gICAgICAgIGlmIChzZWN1cml0eURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7c2VjdXJpdHlEYXRhfWAsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9LFxufSk7XG5leHBvcnRzLmNsaWVudCA9IGFwaTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vapi-ai/web/dist/client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@vapi-ai/web/dist/vapi.js":
/*!************************************************!*\
  !*** ./node_modules/@vapi-ai/web/dist/vapi.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst daily_js_1 = __importDefault(__webpack_require__(/*! @daily-co/daily-js */ \"(app-pages-browser)/./node_modules/@daily-co/daily-js/dist/daily-esm.js\"));\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"(app-pages-browser)/./node_modules/events/events.js\"));\nconst client_1 = __webpack_require__(/*! ./client */ \"(app-pages-browser)/./node_modules/@vapi-ai/web/dist/client.js\");\nasync function startAudioPlayer(player, track) {\n    player.muted = false;\n    player.autoplay = true;\n    if (track != null) {\n        player.srcObject = new MediaStream([track]);\n        await player.play();\n    }\n}\nasync function buildAudioPlayer(track, participantId) {\n    const player = document.createElement('audio');\n    player.dataset.participantId = participantId;\n    document.body.appendChild(player);\n    await startAudioPlayer(player, track);\n    return player;\n}\nfunction destroyAudioPlayer(participantId) {\n    const player = document.querySelector(`audio[data-participant-id=\"${participantId}\"]`);\n    player?.remove();\n}\nfunction subscribeToTracks(e, call, isVideoRecordingEnabled, isVideoEnabled) {\n    if (e.participant.local)\n        return;\n    call.updateParticipant(e.participant.session_id, {\n        setSubscribedTracks: {\n            audio: true,\n            video: isVideoRecordingEnabled || isVideoEnabled,\n        },\n    });\n}\nclass VapiEventEmitter extends events_1.default {\n    on(event, listener) {\n        super.on(event, listener);\n        return this;\n    }\n    once(event, listener) {\n        super.once(event, listener);\n        return this;\n    }\n    emit(event, ...args) {\n        return super.emit(event, ...args);\n    }\n    removeListener(event, listener) {\n        super.removeListener(event, listener);\n        return this;\n    }\n    removeAllListeners(event) {\n        super.removeAllListeners(event);\n        return this;\n    }\n}\nclass Vapi extends VapiEventEmitter {\n    started = false;\n    call = null;\n    speakingTimeout = null;\n    dailyCallConfig = {};\n    dailyCallObject = {};\n    hasEmittedCallEndedStatus = false;\n    constructor(apiToken, apiBaseUrl, dailyCallConfig, dailyCallObject) {\n        super();\n        client_1.client.baseUrl = apiBaseUrl ?? 'https://api.vapi.ai';\n        client_1.client.setSecurityData(apiToken);\n        this.dailyCallConfig = dailyCallConfig ?? {};\n        this.dailyCallObject = dailyCallObject ?? {};\n    }\n    cleanup() {\n        this.started = false;\n        this.hasEmittedCallEndedStatus = false;\n        this.call?.destroy();\n        this.call = null;\n        this.speakingTimeout = null;\n    }\n    isMobileDevice() {\n        if (typeof navigator === 'undefined') {\n            return false;\n        }\n        const userAgent = navigator.userAgent;\n        return /android|iphone|ipad|ipod|iemobile|blackberry|bada/i.test(userAgent.toLowerCase());\n    }\n    async sleep(ms) {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    }\n    async start(assistant, assistantOverrides, squad) {\n        if (!assistant && !squad) {\n            throw new Error('Assistant or Squad must be provided.');\n        }\n        if (this.started) {\n            return null;\n        }\n        this.started = true;\n        try {\n            const webCall = (await client_1.client.call.callControllerCreateWebCall({\n                assistant: typeof assistant === 'string' ? undefined : assistant,\n                assistantId: typeof assistant === 'string' ? assistant : undefined,\n                assistantOverrides,\n                squad: typeof squad === 'string' ? undefined : squad,\n                squadId: typeof squad === 'string' ? squad : undefined,\n            })).data;\n            if (this.call) {\n                this.cleanup();\n            }\n            const isVideoRecordingEnabled = webCall?.artifactPlan?.videoRecordingEnabled ?? false;\n            const isVideoEnabled = webCall.transport?.assistantVideoEnabled ?? false;\n            this.call = daily_js_1.default.createCallObject({\n                audioSource: this.dailyCallObject.audioSource ?? true,\n                videoSource: this.dailyCallObject.videoSource ?? isVideoRecordingEnabled,\n                dailyConfig: this.dailyCallConfig,\n            });\n            this.call.iframe()?.style.setProperty('display', 'none');\n            this.call.on('left-meeting', () => {\n                this.emit('call-end');\n                if (!this.hasEmittedCallEndedStatus) {\n                    this.emit('message', {\n                        type: 'status-update',\n                        status: 'ended',\n                        'endedReason': 'customer-ended-call',\n                    });\n                    this.hasEmittedCallEndedStatus = true;\n                }\n                if (isVideoRecordingEnabled) {\n                    this.call?.stopRecording();\n                }\n                this.cleanup();\n            });\n            this.call.on('error', (error) => {\n                this.emit('error', error);\n                if (isVideoRecordingEnabled) {\n                    this.call?.stopRecording();\n                }\n            });\n            this.call.on('camera-error', (error) => {\n                this.emit('error', error);\n            });\n            this.call.on('track-started', async (e) => {\n                if (!e || !e.participant) {\n                    return;\n                }\n                if (e.participant?.local) {\n                    return;\n                }\n                if (e.participant?.user_name !== 'Vapi Speaker') {\n                    return;\n                }\n                if (e.track.kind === 'video') {\n                    this.emit('video', e.track);\n                }\n                if (e.track.kind === 'audio') {\n                    await buildAudioPlayer(e.track, e.participant.session_id);\n                }\n                this.call?.sendAppMessage('playable');\n            });\n            this.call.on('participant-joined', (e) => {\n                if (!e || !this.call)\n                    return;\n                subscribeToTracks(e, this.call, isVideoRecordingEnabled, isVideoEnabled);\n            });\n            this.call.on('participant-updated', (e) => {\n                if (!e) {\n                    return;\n                }\n                this.emit('daily-participant-updated', e.participant);\n            });\n            this.call.on('participant-left', (e) => {\n                if (!e) {\n                    return;\n                }\n                destroyAudioPlayer(e.participant.session_id);\n            });\n            // Allow mobile devices to finish processing the microphone permissions\n            // request before joining the call and playing the assistant's audio\n            if (this.isMobileDevice()) {\n                await this.sleep(1000);\n            }\n            await this.call.join({\n                // @ts-expect-error This exists\n                url: webCall.webCallUrl,\n                subscribeToTracksAutomatically: false,\n            });\n            if (isVideoRecordingEnabled) {\n                const recordingRequestedTime = new Date().getTime();\n                this.call.startRecording({\n                    width: 1280,\n                    height: 720,\n                    backgroundColor: '#FF1F2D3D',\n                    layout: {\n                        preset: 'default',\n                    },\n                });\n                this.call.on('recording-started', () => {\n                    this.send({\n                        type: 'control',\n                        control: 'say-first-message',\n                        videoRecordingStartDelaySeconds: (new Date().getTime() - recordingRequestedTime) / 1000,\n                    });\n                });\n            }\n            this.call.startRemoteParticipantsAudioLevelObserver(100);\n            this.call.on('remote-participants-audio-level', (e) => {\n                if (e)\n                    this.handleRemoteParticipantsAudioLevel(e);\n            });\n            this.call.on('app-message', (e) => this.onAppMessage(e));\n            this.call.on('nonfatal-error', (e) => {\n                // https://docs.daily.co/reference/daily-js/events/meeting-events#type-audio-processor-error\n                if (e?.type === 'audio-processor-error') {\n                    this.call\n                        ?.updateInputSettings({\n                        audio: {\n                            processor: {\n                                type: 'none',\n                            },\n                        },\n                    })\n                        .then(() => {\n                        this.call?.setLocalAudio(true);\n                    });\n                }\n            });\n            this.call.updateInputSettings({\n                audio: {\n                    processor: {\n                        type: 'noise-cancellation',\n                    },\n                },\n            });\n            return webCall;\n        }\n        catch (e) {\n            console.error(e);\n            this.emit('error', e);\n            this.cleanup();\n            return null;\n        }\n    }\n    onAppMessage(e) {\n        if (!e) {\n            return;\n        }\n        try {\n            if (e.data === 'listening') {\n                return this.emit('call-start');\n            }\n            else {\n                try {\n                    const parsedMessage = JSON.parse(e.data);\n                    this.emit('message', parsedMessage);\n                    if (parsedMessage && 'type' in parsedMessage && 'status' in parsedMessage && parsedMessage.type === 'status-update' && parsedMessage.status === 'ended') {\n                        this.hasEmittedCallEndedStatus = true;\n                    }\n                }\n                catch (parseError) {\n                    console.log('Error parsing message data: ', parseError);\n                }\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    handleRemoteParticipantsAudioLevel(e) {\n        const speechLevel = Object.values(e.participantsAudioLevel).reduce((a, b) => a + b, 0);\n        this.emit('volume-level', Math.min(1, speechLevel / 0.15));\n        const isSpeaking = speechLevel > 0.01;\n        if (!isSpeaking) {\n            return;\n        }\n        if (this.speakingTimeout) {\n            clearTimeout(this.speakingTimeout);\n            this.speakingTimeout = null;\n        }\n        else {\n            this.emit('speech-start');\n        }\n        this.speakingTimeout = setTimeout(() => {\n            this.emit('speech-end');\n            this.speakingTimeout = null;\n        }, 1000);\n    }\n    stop() {\n        this.started = false;\n        this.call?.destroy();\n        this.call = null;\n    }\n    send(message) {\n        this.call?.sendAppMessage(JSON.stringify(message));\n    }\n    setMuted(mute) {\n        if (!this.call) {\n            throw new Error('Call object is not available.');\n        }\n        this.call.setLocalAudio(!mute);\n    }\n    isMuted() {\n        if (!this.call) {\n            return false;\n        }\n        return this.call.localAudio() === false;\n    }\n    say(message, endCallAfterSpoken) {\n        this.send({\n            type: 'say',\n            message,\n            endCallAfterSpoken,\n        });\n    }\n    setInputDevicesAsync(options) {\n        this.call?.setInputDevicesAsync(options);\n    }\n    async increaseMicLevel(gain) {\n        if (!this.call) {\n            throw new Error('Call object is not available.');\n        }\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            const audioContext = new AudioContext();\n            const source = audioContext.createMediaStreamSource(stream);\n            const gainNode = audioContext.createGain();\n            gainNode.gain.value = gain;\n            source.connect(gainNode);\n            const destination = audioContext.createMediaStreamDestination();\n            gainNode.connect(destination);\n            const [boostedTrack] = destination.stream.getAudioTracks();\n            await this.call.setInputDevicesAsync({ audioSource: boostedTrack });\n        }\n        catch (error) {\n            console.error(\"Error adjusting microphone level:\", error);\n        }\n    }\n    setOutputDeviceAsync(options) {\n        this.call?.setOutputDeviceAsync(options);\n    }\n    getDailyCallObject() {\n        return this.call;\n    }\n    startScreenSharing(displayMediaOptions, screenVideoSendSettings) {\n        this.call?.startScreenShare({\n            displayMediaOptions,\n            screenVideoSendSettings,\n        });\n    }\n    stopScreenSharing() {\n        this.call?.stopScreenShare();\n    }\n}\nexports[\"default\"] = Vapi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@vapi-ai/web/dist/vapi.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs":
/*!*****************************************!*\
  !*** ./node_modules/clsx/dist/clsx.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: () => (/* binding */ clsx),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f)}else for(f in e)e[f]&&(n&&(n+=\" \"),n+=f);return n}function clsx(){for(var e,t,f=0,n=\"\",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clsx);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxjQUFjLGFBQWEsK0NBQStDLGdEQUFnRCxlQUFlLFFBQVEsSUFBSSwwQ0FBMEMseUNBQXlDLFNBQWdCLGdCQUFnQix3Q0FBd0MsSUFBSSxtREFBbUQsU0FBUyxpRUFBZSxJQUFJIiwic291cmNlcyI6WyIvVXNlcnMvYWRpc2luL0Rlc2t0b3AvcHJlcHdpc2Uvbm9kZV9tb2R1bGVzL2Nsc3gvZGlzdC9jbHN4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByKGUpe3ZhciB0LGYsbj1cIlwiO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZSluKz1lO2Vsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGUpaWYoQXJyYXkuaXNBcnJheShlKSl7dmFyIG89ZS5sZW5ndGg7Zm9yKHQ9MDt0PG87dCsrKWVbdF0mJihmPXIoZVt0XSkpJiYobiYmKG4rPVwiIFwiKSxuKz1mKX1lbHNlIGZvcihmIGluIGUpZVtmXSYmKG4mJihuKz1cIiBcIiksbis9Zik7cmV0dXJuIG59ZXhwb3J0IGZ1bmN0aW9uIGNsc3goKXtmb3IodmFyIGUsdCxmPTAsbj1cIlwiLG89YXJndW1lbnRzLmxlbmd0aDtmPG87ZisrKShlPWFyZ3VtZW50c1tmXSkmJih0PXIoZSkpJiYobiYmKG4rPVwiIFwiKSxuKz10KTtyZXR1cm4gbn1leHBvcnQgZGVmYXVsdCBjbHN4OyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/events/events.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/api/image.js":
/*!*********************************************!*\
  !*** ./node_modules/next/dist/api/image.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport default from dynamic */ _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0___default.a)\n/* harmony export */ });\n/* harmony import */ var _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/lib/image-external */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-external.js\");\n/* harmony import */ var _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _shared_lib_image_external__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n\n//# sourceMappingURL=image.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL2ltYWdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF1RDtBQUNWOztBQUU3QyIsInNvdXJjZXMiOlsiL1VzZXJzL2FkaXNpbi9EZXNrdG9wL3ByZXB3aXNlL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL2ltYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuLi9zaGFyZWQvbGliL2ltYWdlLWV4dGVybmFsJztcbmV4cG9ydCAqIGZyb20gJy4uL3NoYXJlZC9saWIvaW1hZ2UtZXh0ZXJuYWwnO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/api/image.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/api/navigation.js":
/*!**************************************************!*\
  !*** ./node_modules/next/dist/api/navigation.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../client/components/navigation */ \"(app-pages-browser)/./node_modules/next/dist/client/components/navigation.js\");\n/* harmony import */ var _client_components_navigation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_client_components_navigation__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _client_components_navigation__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n//# sourceMappingURL=navigation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL25hdmlnYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWdEOztBQUVoRCIsInNvdXJjZXMiOlsiL1VzZXJzL2FkaXNpbi9EZXNrdG9wL3ByZXB3aXNlL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYXBpL25hdmlnYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vY2xpZW50L2NvbXBvbmVudHMvbmF2aWdhdGlvbic7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hdmlnYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/api/navigation.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fadisin%2FDesktop%2Fprepwise%2Fcomponents%2FAgent.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fadisin%2FDesktop%2Fprepwise%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fimage-component.js%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fadisin%2FDesktop%2Fprepwise%2Fcomponents%2FAgent.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fadisin%2FDesktop%2Fprepwise%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fimage-component.js%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./components/Agent.tsx */ \"(app-pages-browser)/./components/Agent.tsx\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/image-component.js */ \"(app-pages-browser)/./node_modules/next/dist/client/image-component.js\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZhZGlzaW4lMkZEZXNrdG9wJTJGcHJlcHdpc2UlMkZjb21wb25lbnRzJTJGQWdlbnQudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyZGVmYXVsdCUyMiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRmFkaXNpbiUyRkRlc2t0b3AlMkZwcmVwd2lzZSUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZkaXN0JTJGY2xpZW50JTJGaW1hZ2UtY29tcG9uZW50LmpzJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsc0tBQXFIO0FBQ3JIO0FBQ0Esb09BQW9IIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJkZWZhdWx0XCJdICovIFwiL1VzZXJzL2FkaXNpbi9EZXNrdG9wL3ByZXB3aXNlL2NvbXBvbmVudHMvQWdlbnQudHN4XCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIgKi8gXCIvVXNlcnMvYWRpc2luL0Rlc2t0b3AvcHJlcHdpc2Uvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvaW1hZ2UtY29tcG9uZW50LmpzXCIpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fadisin%2FDesktop%2Fprepwise%2Fcomponents%2FAgent.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fadisin%2FDesktop%2Fprepwise%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fimage-component.js%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    callServer: function() {\n        return _appcallserver.callServer;\n    },\n    createServerReference: function() {\n        return createServerReference;\n    },\n    findSourceMapURL: function() {\n        return _appfindsourcemapurl.findSourceMapURL;\n    }\n});\nconst _appcallserver = __webpack_require__(/*! next/dist/client/app-call-server */ \"(app-pages-browser)/./node_modules/next/dist/client/app-call-server.js\");\nconst _appfindsourcemapurl = __webpack_require__(/*! next/dist/client/app-find-source-map-url */ \"(app-pages-browser)/./node_modules/next/dist/client/app-find-source-map-url.js\");\nconst createServerReference = ( false ? 0 : __webpack_require__(/*! react-server-dom-webpack/client */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-server-dom-webpack/client.js\")).createServerReference;\n\n//# sourceMappingURL=action-client-wrapper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWxvYWRlci9hY3Rpb24tY2xpZW50LXdyYXBwZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNhO0FBQ2IsOENBQTZDO0FBQzdDO0FBQ0EsQ0FBQyxFQUFDO0FBQ0YsTUFBTSxDQUlMO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsdUJBQXVCLG1CQUFPLENBQUMsZ0hBQWtDO0FBQ2pFLDZCQUE2QixtQkFBTyxDQUFDLGdJQUEwQztBQUMvRSwrQkFBK0IsTUFBMEIsR0FBRyxDQUErQyxHQUFHLG1CQUFPLENBQUMsaUlBQWlDOztBQUV2SiIsInNvdXJjZXMiOlsiL1VzZXJzL2FkaXNpbi9EZXNrdG9wL3ByZXB3aXNlL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWxvYWRlci9hY3Rpb24tY2xpZW50LXdyYXBwZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIG11c3QgYmUgYnVuZGxlZCBpbiB0aGUgYXBwJ3MgY2xpZW50IGxheWVyLCBpdCBzaG91bGRuJ3QgYmUgZGlyZWN0bHlcbi8vIGltcG9ydGVkIGJ5IHRoZSBzZXJ2ZXIuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNhbGxTZXJ2ZXI6IG51bGwsXG4gICAgY3JlYXRlU2VydmVyUmVmZXJlbmNlOiBudWxsLFxuICAgIGZpbmRTb3VyY2VNYXBVUkw6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgY2FsbFNlcnZlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfYXBwY2FsbHNlcnZlci5jYWxsU2VydmVyO1xuICAgIH0sXG4gICAgY3JlYXRlU2VydmVyUmVmZXJlbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVNlcnZlclJlZmVyZW5jZTtcbiAgICB9LFxuICAgIGZpbmRTb3VyY2VNYXBVUkw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX2FwcGZpbmRzb3VyY2VtYXB1cmwuZmluZFNvdXJjZU1hcFVSTDtcbiAgICB9XG59KTtcbmNvbnN0IF9hcHBjYWxsc2VydmVyID0gcmVxdWlyZShcIm5leHQvZGlzdC9jbGllbnQvYXBwLWNhbGwtc2VydmVyXCIpO1xuY29uc3QgX2FwcGZpbmRzb3VyY2VtYXB1cmwgPSByZXF1aXJlKFwibmV4dC9kaXN0L2NsaWVudC9hcHAtZmluZC1zb3VyY2UtbWFwLXVybFwiKTtcbmNvbnN0IGNyZWF0ZVNlcnZlclJlZmVyZW5jZSA9ICghIXByb2Nlc3MuZW52Lk5FWFRfUlVOVElNRSA/IHJlcXVpcmUoJ3JlYWN0LXNlcnZlci1kb20td2VicGFjay9jbGllbnQuZWRnZScpIDogcmVxdWlyZSgncmVhY3Qtc2VydmVyLWRvbS13ZWJwYWNrL2NsaWVudCcpKS5jcmVhdGVTZXJ2ZXJSZWZlcmVuY2U7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGlvbi1jbGllbnQtd3JhcHBlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/image-component.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/client/image-component.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"Image\", ({\n    enumerable: true,\n    get: function() {\n        return Image;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _reactdom = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\"));\nconst _head = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ../shared/lib/head */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/head.js\"));\nconst _getimgprops = __webpack_require__(/*! ../shared/lib/get-img-props */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/get-img-props.js\");\nconst _imageconfig = __webpack_require__(/*! ../shared/lib/image-config */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js\");\nconst _imageconfigcontextsharedruntime = __webpack_require__(/*! ../shared/lib/image-config-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js\");\nconst _warnonce = __webpack_require__(/*! ../shared/lib/utils/warn-once */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils/warn-once.js\");\nconst _routercontextsharedruntime = __webpack_require__(/*! ../shared/lib/router-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js\");\nconst _imageloader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! next/dist/shared/lib/image-loader */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-loader.js\"));\nconst _usemergedref = __webpack_require__(/*! ./use-merged-ref */ \"(app-pages-browser)/./node_modules/next/dist/client/use-merged-ref.js\");\n// This is replaced by webpack define plugin\nconst configEnv = {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]};\nif (false) {}\n// See https://stackoverflow.com/q/39777833/266535 for why we use this ref\n// handler instead of the img's onLoad attribute.\nfunction handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput) {\n    const src = img == null ? void 0 : img.src;\n    if (!img || img['data-loaded-src'] === src) {\n        return;\n    }\n    img['data-loaded-src'] = src;\n    const p = 'decode' in img ? img.decode() : Promise.resolve();\n    p.catch(()=>{}).then(()=>{\n        if (!img.parentElement || !img.isConnected) {\n            // Exit early in case of race condition:\n            // - onload() is called\n            // - decode() is called but incomplete\n            // - unmount is called\n            // - decode() completes\n            return;\n        }\n        if (placeholder !== 'empty') {\n            setBlurComplete(true);\n        }\n        if (onLoadRef == null ? void 0 : onLoadRef.current) {\n            // Since we don't have the SyntheticEvent here,\n            // we must create one with the same shape.\n            // See https://reactjs.org/docs/events.html\n            const event = new Event('load');\n            Object.defineProperty(event, 'target', {\n                writable: false,\n                value: img\n            });\n            let prevented = false;\n            let stopped = false;\n            onLoadRef.current({\n                ...event,\n                nativeEvent: event,\n                currentTarget: img,\n                target: img,\n                isDefaultPrevented: ()=>prevented,\n                isPropagationStopped: ()=>stopped,\n                persist: ()=>{},\n                preventDefault: ()=>{\n                    prevented = true;\n                    event.preventDefault();\n                },\n                stopPropagation: ()=>{\n                    stopped = true;\n                    event.stopPropagation();\n                }\n            });\n        }\n        if (onLoadingCompleteRef == null ? void 0 : onLoadingCompleteRef.current) {\n            onLoadingCompleteRef.current(img);\n        }\n        if (true) {\n            const origSrc = new URL(src, 'http://n').searchParams.get('url') || src;\n            if (img.getAttribute('data-nimg') === 'fill') {\n                if (!unoptimized && (!sizesInput || sizesInput === '100vw')) {\n                    let widthViewportRatio = img.getBoundingClientRect().width / window.innerWidth;\n                    if (widthViewportRatio < 0.6) {\n                        if (sizesInput === '100vw') {\n                            (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has \"fill\" prop and \"sizes\" prop of \"100vw\", but image is not rendered at full viewport width. Please adjust \"sizes\" to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes');\n                        } else {\n                            (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has \"fill\" but is missing \"sizes\" prop. Please add it to improve page performance. Read more: https://nextjs.org/docs/api-reference/next/image#sizes');\n                        }\n                    }\n                }\n                if (img.parentElement) {\n                    const { position } = window.getComputedStyle(img.parentElement);\n                    const valid = [\n                        'absolute',\n                        'fixed',\n                        'relative'\n                    ];\n                    if (!valid.includes(position)) {\n                        (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has \"fill\" and parent element with invalid \"position\". Provided \"' + position + '\" should be one of ' + valid.map(String).join(',') + \".\");\n                    }\n                }\n                if (img.height === 0) {\n                    (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has \"fill\" and a height value of 0. This is likely because the parent element of the image has not been styled to have a set height.');\n                }\n            }\n            const heightModified = img.height.toString() !== img.getAttribute('height');\n            const widthModified = img.width.toString() !== img.getAttribute('width');\n            if (heightModified && !widthModified || !heightModified && widthModified) {\n                (0, _warnonce.warnOnce)('Image with src \"' + origSrc + '\" has either width or height modified, but not the other. If you use CSS to change the size of your image, also include the styles \\'width: \"auto\"\\' or \\'height: \"auto\"\\' to maintain the aspect ratio.');\n            }\n        }\n    });\n}\nfunction getDynamicProps(fetchPriority) {\n    if (Boolean(_react.use)) {\n        // In React 19.0.0 or newer, we must use camelCase\n        // prop to avoid \"Warning: Invalid DOM property\".\n        // See https://github.com/facebook/react/pull/25927\n        return {\n            fetchPriority\n        };\n    }\n    // In React 18.2.0 or older, we must use lowercase prop\n    // to avoid \"Warning: Invalid DOM property\".\n    return {\n        fetchpriority: fetchPriority\n    };\n}\nconst ImageElement = /*#__PURE__*/ (0, _react.forwardRef)((param, forwardedRef)=>{\n    let { src, srcSet, sizes, height, width, decoding, className, style, fetchPriority, placeholder, loading, unoptimized, fill, onLoadRef, onLoadingCompleteRef, setBlurComplete, setShowAltText, sizesInput, onLoad, onError, ...rest } = param;\n    const ownRef = (0, _react.useCallback)((img)=>{\n        if (!img) {\n            return;\n        }\n        if (onError) {\n            // If the image has an error before react hydrates, then the error is lost.\n            // The workaround is to wait until the image is mounted which is after hydration,\n            // then we set the src again to trigger the error handler (if there was an error).\n            // eslint-disable-next-line no-self-assign\n            img.src = img.src;\n        }\n        if (true) {\n            if (!src) {\n                console.error('Image is missing required \"src\" property:', img);\n            }\n            if (img.getAttribute('alt') === null) {\n                console.error('Image is missing required \"alt\" property. Please add Alternative Text to describe the image for screen readers and search engines.');\n            }\n        }\n        if (img.complete) {\n            handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput);\n        }\n    }, [\n        src,\n        placeholder,\n        onLoadRef,\n        onLoadingCompleteRef,\n        setBlurComplete,\n        onError,\n        unoptimized,\n        sizesInput\n    ]);\n    const ref = (0, _usemergedref.useMergedRef)(forwardedRef, ownRef);\n    return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"img\", {\n        ...rest,\n        ...getDynamicProps(fetchPriority),\n        // It's intended to keep `loading` before `src` because React updates\n        // props in order which causes Safari/Firefox to not lazy load properly.\n        // See https://github.com/facebook/react/issues/25883\n        loading: loading,\n        width: width,\n        height: height,\n        decoding: decoding,\n        \"data-nimg\": fill ? 'fill' : '1',\n        className: className,\n        style: style,\n        // It's intended to keep `src` the last attribute because React updates\n        // attributes in order. If we keep `src` the first one, Safari will\n        // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n        // updated by React. That causes multiple unnecessary requests if `srcSet`\n        // and `sizes` are defined.\n        // This bug cannot be reproduced in Chrome or Firefox.\n        sizes: sizes,\n        srcSet: srcSet,\n        src: src,\n        ref: ref,\n        onLoad: (event)=>{\n            const img = event.currentTarget;\n            handleLoading(img, placeholder, onLoadRef, onLoadingCompleteRef, setBlurComplete, unoptimized, sizesInput);\n        },\n        onError: (event)=>{\n            // if the real image fails to load, this will ensure \"alt\" is visible\n            setShowAltText(true);\n            if (placeholder !== 'empty') {\n                // If the real image fails to load, this will still remove the placeholder.\n                setBlurComplete(true);\n            }\n            if (onError) {\n                onError(event);\n            }\n        }\n    });\n});\nfunction ImagePreload(param) {\n    let { isAppRouter, imgAttributes } = param;\n    const opts = {\n        as: 'image',\n        imageSrcSet: imgAttributes.srcSet,\n        imageSizes: imgAttributes.sizes,\n        crossOrigin: imgAttributes.crossOrigin,\n        referrerPolicy: imgAttributes.referrerPolicy,\n        ...getDynamicProps(imgAttributes.fetchPriority)\n    };\n    if (isAppRouter && _reactdom.default.preload) {\n        // See https://github.com/facebook/react/pull/26940\n        _reactdom.default.preload(imgAttributes.src, opts);\n        return null;\n    }\n    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_head.default, {\n        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(\"link\", {\n            rel: \"preload\",\n            // Note how we omit the `href` attribute, as it would only be relevant\n            // for browsers that do not support `imagesrcset`, and in those cases\n            // it would cause the incorrect image to be preloaded.\n            //\n            // https://html.spec.whatwg.org/multipage/semantics.html#attr-link-imagesrcset\n            href: imgAttributes.srcSet ? undefined : imgAttributes.src,\n            ...opts\n        }, '__nimg-' + imgAttributes.src + imgAttributes.srcSet + imgAttributes.sizes)\n    });\n}\n_c = ImagePreload;\nconst Image = /*#__PURE__*/ (0, _react.forwardRef)((props, forwardedRef)=>{\n    const pagesRouter = (0, _react.useContext)(_routercontextsharedruntime.RouterContext);\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter;\n    const configContext = (0, _react.useContext)(_imageconfigcontextsharedruntime.ImageConfigContext);\n    const config = (0, _react.useMemo)(()=>{\n        var _c_qualities;\n        const c = configEnv || configContext || _imageconfig.imageConfigDefault;\n        const allSizes = [\n            ...c.deviceSizes,\n            ...c.imageSizes\n        ].sort((a, b)=>a - b);\n        const deviceSizes = c.deviceSizes.sort((a, b)=>a - b);\n        const qualities = (_c_qualities = c.qualities) == null ? void 0 : _c_qualities.sort((a, b)=>a - b);\n        return {\n            ...c,\n            allSizes,\n            deviceSizes,\n            qualities\n        };\n    }, [\n        configContext\n    ]);\n    const { onLoad, onLoadingComplete } = props;\n    const onLoadRef = (0, _react.useRef)(onLoad);\n    (0, _react.useEffect)(()=>{\n        onLoadRef.current = onLoad;\n    }, [\n        onLoad\n    ]);\n    const onLoadingCompleteRef = (0, _react.useRef)(onLoadingComplete);\n    (0, _react.useEffect)(()=>{\n        onLoadingCompleteRef.current = onLoadingComplete;\n    }, [\n        onLoadingComplete\n    ]);\n    const [blurComplete, setBlurComplete] = (0, _react.useState)(false);\n    const [showAltText, setShowAltText] = (0, _react.useState)(false);\n    const { props: imgAttributes, meta: imgMeta } = (0, _getimgprops.getImgProps)(props, {\n        defaultLoader: _imageloader.default,\n        imgConf: config,\n        blurComplete,\n        showAltText\n    });\n    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {\n        children: [\n            /*#__PURE__*/ (0, _jsxruntime.jsx)(ImageElement, {\n                ...imgAttributes,\n                unoptimized: imgMeta.unoptimized,\n                placeholder: imgMeta.placeholder,\n                fill: imgMeta.fill,\n                onLoadRef: onLoadRef,\n                onLoadingCompleteRef: onLoadingCompleteRef,\n                setBlurComplete: setBlurComplete,\n                setShowAltText: setShowAltText,\n                sizesInput: props.sizes,\n                ref: forwardedRef\n            }),\n            imgMeta.priority ? /*#__PURE__*/ (0, _jsxruntime.jsx)(ImagePreload, {\n                isAppRouter: isAppRouter,\n                imgAttributes: imgAttributes\n            }) : null\n        ]\n    });\n});\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=image-component.js.map\nvar _c;\n$RefreshReg$(_c, \"ImagePreload\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/image-component.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/use-merged-ref.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/client/use-merged-ref.js ***!
  \*********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"useMergedRef\", ({\n    enumerable: true,\n    get: function() {\n        return useMergedRef;\n    }\n}));\nconst _react = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nfunction useMergedRef(refA, refB) {\n    const cleanupA = (0, _react.useRef)(null);\n    const cleanupB = (0, _react.useRef)(null);\n    // NOTE: In theory, we could skip the wrapping if only one of the refs is non-null.\n    // (this happens often if the user doesn't pass a ref to Link/Form/Image)\n    // But this can cause us to leak a cleanup-ref into user code (e.g. via `<Link legacyBehavior>`),\n    // and the user might pass that ref into ref-merging library that doesn't support cleanup refs\n    // (because it hasn't been updated for React 19)\n    // which can then cause things to blow up, because a cleanup-returning ref gets called with `null`.\n    // So in practice, it's safer to be defensive and always wrap the ref, even on React 19.\n    return (0, _react.useCallback)((current)=>{\n        if (current === null) {\n            const cleanupFnA = cleanupA.current;\n            if (cleanupFnA) {\n                cleanupA.current = null;\n                cleanupFnA();\n            }\n            const cleanupFnB = cleanupB.current;\n            if (cleanupFnB) {\n                cleanupB.current = null;\n                cleanupFnB();\n            }\n        } else {\n            if (refA) {\n                cleanupA.current = applyRef(refA, current);\n            }\n            if (refB) {\n                cleanupB.current = applyRef(refB, current);\n            }\n        }\n    }, [\n        refA,\n        refB\n    ]);\n}\nfunction applyRef(refA, current) {\n    if (typeof refA === 'function') {\n        const cleanup = refA(current);\n        if (typeof cleanup === 'function') {\n            return cleanup;\n        } else {\n            return ()=>refA(null);\n        }\n    } else {\n        refA.current = current;\n        return ()=>{\n            refA.current = null;\n        };\n    }\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=use-merged-ref.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3VzZS1tZXJnZWQtcmVmLmpzIiwibWFwcGluZ3MiOiI7Ozs7Z0RBU2dCQTs7O2VBQUFBOzs7bUNBVDhCO0FBU3ZDLFNBQVNBLGFBQ2RDLElBQW1CLEVBQ25CQyxJQUFtQjtJQUVuQixNQUFNQyxXQUFXQyxDQUFBQSxHQUFBQSxPQUFBQSxNQUFBQSxFQUE0QjtJQUM3QyxNQUFNQyxXQUFXRCxDQUFBQSxHQUFBQSxPQUFBQSxNQUFBQSxFQUE0QjtJQUU3QyxtRkFBbUY7SUFDbkYseUVBQXlFO0lBQ3pFLGlHQUFpRztJQUNqRyw4RkFBOEY7SUFDOUYsZ0RBQWdEO0lBQ2hELG1HQUFtRztJQUNuRyx3RkFBd0Y7SUFDeEYsT0FBT0UsQ0FBQUEsR0FBQUEsT0FBQUEsV0FBQUEsRUFDTCxDQUFDQztRQUNDLElBQUlBLFlBQVksTUFBTTtZQUNwQixNQUFNQyxhQUFhTCxTQUFTSSxPQUFPO1lBQ25DLElBQUlDLFlBQVk7Z0JBQ2RMLFNBQVNJLE9BQU8sR0FBRztnQkFDbkJDO1lBQ0Y7WUFDQSxNQUFNQyxhQUFhSixTQUFTRSxPQUFPO1lBQ25DLElBQUlFLFlBQVk7Z0JBQ2RKLFNBQVNFLE9BQU8sR0FBRztnQkFDbkJFO1lBQ0Y7UUFDRixPQUFPO1lBQ0wsSUFBSVIsTUFBTTtnQkFDUkUsU0FBU0ksT0FBTyxHQUFHRyxTQUFTVCxNQUFNTTtZQUNwQztZQUNBLElBQUlMLE1BQU07Z0JBQ1JHLFNBQVNFLE9BQU8sR0FBR0csU0FBU1IsTUFBTUs7WUFDcEM7UUFDRjtJQUNGLEdBQ0E7UUFBQ047UUFBTUM7S0FBSztBQUVoQjtBQUVBLFNBQVNRLFNBQ1BULElBQWdDLEVBQ2hDTSxPQUFpQjtJQUVqQixJQUFJLE9BQU9OLFNBQVMsWUFBWTtRQUM5QixNQUFNVSxVQUFVVixLQUFLTTtRQUNyQixJQUFJLE9BQU9JLFlBQVksWUFBWTtZQUNqQyxPQUFPQTtRQUNULE9BQU87WUFDTCxPQUFPLElBQU1WLEtBQUs7UUFDcEI7SUFDRixPQUFPO1FBQ0xBLEtBQUtNLE9BQU8sR0FBR0E7UUFDZixPQUFPO1lBQ0xOLEtBQUtNLE9BQU8sR0FBRztRQUNqQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZGlzaW4vc3JjL2NsaWVudC91c2UtbWVyZ2VkLXJlZi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmLCB0eXBlIFJlZiB9IGZyb20gJ3JlYWN0J1xuXG4vLyBUaGlzIGlzIGEgY29tcGF0aWJpbGl0eSBob29rIHRvIHN1cHBvcnQgUmVhY3QgMTggYW5kIDE5IHJlZnMuXG4vLyBJbiAxOSwgYSBjbGVhbnVwIGZ1bmN0aW9uIGZyb20gcmVmcyBtYXkgYmUgcmV0dXJuZWQuXG4vLyBJbiAxOCwgcmV0dXJuaW5nIGEgY2xlYW51cCBmdW5jdGlvbiBjcmVhdGVzIGEgd2FybmluZy5cbi8vIFNpbmNlIHdlIHRha2UgdXNlcnNwYWNlIHJlZnMsIHdlIGRvbid0IGtub3cgYWhlYWQgb2YgdGltZSBpZiBhIGNsZWFudXAgZnVuY3Rpb24gd2lsbCBiZSByZXR1cm5lZC5cbi8vIFRoaXMgaW1wbGVtZW50cyBjbGVhbnVwIGZ1bmN0aW9ucyB3aXRoIHRoZSBvbGQgYmVoYXZpb3IgaW4gMTguXG4vLyBXZSBrbm93IHJlZnMgYXJlIGFsd2F5cyBjYWxsZWQgYWx0ZXJuYXRpbmcgd2l0aCBgbnVsbGAgYW5kIHRoZW4gYFRgLlxuLy8gU28gYSBjYWxsIHdpdGggYG51bGxgIG1lYW5zIHdlIG5lZWQgdG8gY2FsbCB0aGUgcHJldmlvdXMgY2xlYW51cCBmdW5jdGlvbnMuXG5leHBvcnQgZnVuY3Rpb24gdXNlTWVyZ2VkUmVmPFRFbGVtZW50PihcbiAgcmVmQTogUmVmPFRFbGVtZW50PixcbiAgcmVmQjogUmVmPFRFbGVtZW50PlxuKTogUmVmPFRFbGVtZW50PiB7XG4gIGNvbnN0IGNsZWFudXBBID0gdXNlUmVmPCgoKSA9PiB2b2lkKSB8IG51bGw+KG51bGwpXG4gIGNvbnN0IGNsZWFudXBCID0gdXNlUmVmPCgoKSA9PiB2b2lkKSB8IG51bGw+KG51bGwpXG5cbiAgLy8gTk9URTogSW4gdGhlb3J5LCB3ZSBjb3VsZCBza2lwIHRoZSB3cmFwcGluZyBpZiBvbmx5IG9uZSBvZiB0aGUgcmVmcyBpcyBub24tbnVsbC5cbiAgLy8gKHRoaXMgaGFwcGVucyBvZnRlbiBpZiB0aGUgdXNlciBkb2Vzbid0IHBhc3MgYSByZWYgdG8gTGluay9Gb3JtL0ltYWdlKVxuICAvLyBCdXQgdGhpcyBjYW4gY2F1c2UgdXMgdG8gbGVhayBhIGNsZWFudXAtcmVmIGludG8gdXNlciBjb2RlIChlLmcuIHZpYSBgPExpbmsgbGVnYWN5QmVoYXZpb3I+YCksXG4gIC8vIGFuZCB0aGUgdXNlciBtaWdodCBwYXNzIHRoYXQgcmVmIGludG8gcmVmLW1lcmdpbmcgbGlicmFyeSB0aGF0IGRvZXNuJ3Qgc3VwcG9ydCBjbGVhbnVwIHJlZnNcbiAgLy8gKGJlY2F1c2UgaXQgaGFzbid0IGJlZW4gdXBkYXRlZCBmb3IgUmVhY3QgMTkpXG4gIC8vIHdoaWNoIGNhbiB0aGVuIGNhdXNlIHRoaW5ncyB0byBibG93IHVwLCBiZWNhdXNlIGEgY2xlYW51cC1yZXR1cm5pbmcgcmVmIGdldHMgY2FsbGVkIHdpdGggYG51bGxgLlxuICAvLyBTbyBpbiBwcmFjdGljZSwgaXQncyBzYWZlciB0byBiZSBkZWZlbnNpdmUgYW5kIGFsd2F5cyB3cmFwIHRoZSByZWYsIGV2ZW4gb24gUmVhY3QgMTkuXG4gIHJldHVybiB1c2VDYWxsYmFjayhcbiAgICAoY3VycmVudDogVEVsZW1lbnQgfCBudWxsKTogdm9pZCA9PiB7XG4gICAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICBjb25zdCBjbGVhbnVwRm5BID0gY2xlYW51cEEuY3VycmVudFxuICAgICAgICBpZiAoY2xlYW51cEZuQSkge1xuICAgICAgICAgIGNsZWFudXBBLmN1cnJlbnQgPSBudWxsXG4gICAgICAgICAgY2xlYW51cEZuQSgpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2xlYW51cEZuQiA9IGNsZWFudXBCLmN1cnJlbnRcbiAgICAgICAgaWYgKGNsZWFudXBGbkIpIHtcbiAgICAgICAgICBjbGVhbnVwQi5jdXJyZW50ID0gbnVsbFxuICAgICAgICAgIGNsZWFudXBGbkIoKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVmQSkge1xuICAgICAgICAgIGNsZWFudXBBLmN1cnJlbnQgPSBhcHBseVJlZihyZWZBLCBjdXJyZW50KVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZWZCKSB7XG4gICAgICAgICAgY2xlYW51cEIuY3VycmVudCA9IGFwcGx5UmVmKHJlZkIsIGN1cnJlbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtyZWZBLCByZWZCXVxuICApXG59XG5cbmZ1bmN0aW9uIGFwcGx5UmVmPFRFbGVtZW50PihcbiAgcmVmQTogTm9uTnVsbGFibGU8UmVmPFRFbGVtZW50Pj4sXG4gIGN1cnJlbnQ6IFRFbGVtZW50XG4pIHtcbiAgaWYgKHR5cGVvZiByZWZBID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc3QgY2xlYW51cCA9IHJlZkEoY3VycmVudClcbiAgICBpZiAodHlwZW9mIGNsZWFudXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjbGVhbnVwXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoKSA9PiByZWZBKG51bGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlZkEuY3VycmVudCA9IGN1cnJlbnRcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgcmVmQS5jdXJyZW50ID0gbnVsbFxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbInVzZU1lcmdlZFJlZiIsInJlZkEiLCJyZWZCIiwiY2xlYW51cEEiLCJ1c2VSZWYiLCJjbGVhbnVwQiIsInVzZUNhbGxiYWNrIiwiY3VycmVudCIsImNsZWFudXBGbkEiLCJjbGVhbnVwRm5CIiwiYXBwbHlSZWYiLCJjbGVhbnVwIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/use-merged-ref.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/picomatch/index.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/compiled/picomatch/index.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var __dirname = \"/\";\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n(()=>{\"use strict\";var t={170:(t,e,u)=>{const n=u(510);const isWindows=()=>{if(typeof navigator!==\"undefined\"&&navigator.platform){const t=navigator.platform.toLowerCase();return t===\"win32\"||t===\"windows\"}if(typeof process!==\"undefined\"&&process.platform){return process.platform===\"win32\"}return false};function picomatch(t,e,u=false){if(e&&(e.windows===null||e.windows===undefined)){e={...e,windows:isWindows()}}return n(t,e,u)}Object.assign(picomatch,n);t.exports=picomatch},154:t=>{const e=\"\\\\\\\\/\";const u=`[^${e}]`;const n=\"\\\\.\";const o=\"\\\\+\";const s=\"\\\\?\";const r=\"\\\\/\";const a=\"(?=.)\";const i=\"[^/]\";const c=`(?:${r}|$)`;const p=`(?:^|${r})`;const l=`${n}{1,2}${c}`;const f=`(?!${n})`;const A=`(?!${p}${l})`;const _=`(?!${n}{0,1}${c})`;const R=`(?!${l})`;const E=`[^.${r}]`;const h=`${i}*?`;const g=\"/\";const b={DOT_LITERAL:n,PLUS_LITERAL:o,QMARK_LITERAL:s,SLASH_LITERAL:r,ONE_CHAR:a,QMARK:i,END_ANCHOR:c,DOTS_SLASH:l,NO_DOT:f,NO_DOTS:A,NO_DOT_SLASH:_,NO_DOTS_SLASH:R,QMARK_NO_DOT:E,STAR:h,START_ANCHOR:p,SEP:g};const C={...b,SLASH_LITERAL:`[${e}]`,QMARK:u,STAR:`${u}*?`,DOTS_SLASH:`${n}{1,2}(?:[${e}]|$)`,NO_DOT:`(?!${n})`,NO_DOTS:`(?!(?:^|[${e}])${n}{1,2}(?:[${e}]|$))`,NO_DOT_SLASH:`(?!${n}{0,1}(?:[${e}]|$))`,NO_DOTS_SLASH:`(?!${n}{1,2}(?:[${e}]|$))`,QMARK_NO_DOT:`[^.${e}]`,START_ANCHOR:`(?:^|[${e}])`,END_ANCHOR:`(?:[${e}]|$)`,SEP:\"\\\\\"};const y={alnum:\"a-zA-Z0-9\",alpha:\"a-zA-Z\",ascii:\"\\\\x00-\\\\x7F\",blank:\" \\\\t\",cntrl:\"\\\\x00-\\\\x1F\\\\x7F\",digit:\"0-9\",graph:\"\\\\x21-\\\\x7E\",lower:\"a-z\",print:\"\\\\x20-\\\\x7E \",punct:\"\\\\-!\\\"#$%&'()\\\\*+,./:;<=>?@[\\\\]^_`{|}~\",space:\" \\\\t\\\\r\\\\n\\\\v\\\\f\",upper:\"A-Z\",word:\"A-Za-z0-9_\",xdigit:\"A-Fa-f0-9\"};t.exports={MAX_LENGTH:1024*64,POSIX_REGEX_SOURCE:y,REGEX_BACKSLASH:/\\\\(?![*+?^${}(|)[\\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\\].,$*+?^{}()|\\\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\\\?)((\\W)(\\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\\[.*?[^\\\\]\\]|\\\\(?=.))/g,REPLACEMENTS:{\"***\":\"*\",\"**/**\":\"**\",\"**/**/**\":\"**\"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,extglobChars(t){return{\"!\":{type:\"negate\",open:\"(?:(?!(?:\",close:`))${t.STAR})`},\"?\":{type:\"qmark\",open:\"(?:\",close:\")?\"},\"+\":{type:\"plus\",open:\"(?:\",close:\")+\"},\"*\":{type:\"star\",open:\"(?:\",close:\")*\"},\"@\":{type:\"at\",open:\"(?:\",close:\")\"}}},globChars(t){return t===true?C:b}}},697:(t,e,u)=>{const n=u(154);const o=u(96);const{MAX_LENGTH:s,POSIX_REGEX_SOURCE:r,REGEX_NON_SPECIAL_CHARS:a,REGEX_SPECIAL_CHARS_BACKREF:i,REPLACEMENTS:c}=n;const expandRange=(t,e)=>{if(typeof e.expandRange===\"function\"){return e.expandRange(...t,e)}t.sort();const u=`[${t.join(\"-\")}]`;try{new RegExp(u)}catch(e){return t.map((t=>o.escapeRegex(t))).join(\"..\")}return u};const syntaxError=(t,e)=>`Missing ${t}: \"${e}\" - use \"\\\\\\\\${e}\" to match literal characters`;const parse=(t,e)=>{if(typeof t!==\"string\"){throw new TypeError(\"Expected a string\")}t=c[t]||t;const u={...e};const p=typeof u.maxLength===\"number\"?Math.min(s,u.maxLength):s;let l=t.length;if(l>p){throw new SyntaxError(`Input length: ${l}, exceeds maximum allowed length: ${p}`)}const f={type:\"bos\",value:\"\",output:u.prepend||\"\"};const A=[f];const _=u.capture?\"\":\"?:\";const R=n.globChars(u.windows);const E=n.extglobChars(R);const{DOT_LITERAL:h,PLUS_LITERAL:g,SLASH_LITERAL:b,ONE_CHAR:C,DOTS_SLASH:y,NO_DOT:$,NO_DOT_SLASH:x,NO_DOTS_SLASH:S,QMARK:H,QMARK_NO_DOT:v,STAR:d,START_ANCHOR:L}=R;const globstar=t=>`(${_}(?:(?!${L}${t.dot?y:h}).)*?)`;const T=u.dot?\"\":$;const O=u.dot?H:v;let k=u.bash===true?globstar(u):d;if(u.capture){k=`(${k})`}if(typeof u.noext===\"boolean\"){u.noextglob=u.noext}const m={input:t,index:-1,start:0,dot:u.dot===true,consumed:\"\",output:\"\",prefix:\"\",backtrack:false,negated:false,brackets:0,braces:0,parens:0,quotes:0,globstar:false,tokens:A};t=o.removePrefix(t,m);l=t.length;const w=[];const N=[];const I=[];let B=f;let G;const eos=()=>m.index===l-1;const D=m.peek=(e=1)=>t[m.index+e];const M=m.advance=()=>t[++m.index]||\"\";const remaining=()=>t.slice(m.index+1);const consume=(t=\"\",e=0)=>{m.consumed+=t;m.index+=e};const append=t=>{m.output+=t.output!=null?t.output:t.value;consume(t.value)};const negate=()=>{let t=1;while(D()===\"!\"&&(D(2)!==\"(\"||D(3)===\"?\")){M();m.start++;t++}if(t%2===0){return false}m.negated=true;m.start++;return true};const increment=t=>{m[t]++;I.push(t)};const decrement=t=>{m[t]--;I.pop()};const push=t=>{if(B.type===\"globstar\"){const e=m.braces>0&&(t.type===\"comma\"||t.type===\"brace\");const u=t.extglob===true||w.length&&(t.type===\"pipe\"||t.type===\"paren\");if(t.type!==\"slash\"&&t.type!==\"paren\"&&!e&&!u){m.output=m.output.slice(0,-B.output.length);B.type=\"star\";B.value=\"*\";B.output=k;m.output+=B.output}}if(w.length&&t.type!==\"paren\"){w[w.length-1].inner+=t.value}if(t.value||t.output)append(t);if(B&&B.type===\"text\"&&t.type===\"text\"){B.output=(B.output||B.value)+t.value;B.value+=t.value;return}t.prev=B;A.push(t);B=t};const extglobOpen=(t,e)=>{const n={...E[e],conditions:1,inner:\"\"};n.prev=B;n.parens=m.parens;n.output=m.output;const o=(u.capture?\"(\":\"\")+n.open;increment(\"parens\");push({type:t,value:e,output:m.output?\"\":C});push({type:\"paren\",extglob:true,value:M(),output:o});w.push(n)};const extglobClose=t=>{let n=t.close+(u.capture?\")\":\"\");let o;if(t.type===\"negate\"){let s=k;if(t.inner&&t.inner.length>1&&t.inner.includes(\"/\")){s=globstar(u)}if(s!==k||eos()||/^\\)+$/.test(remaining())){n=t.close=`)$))${s}`}if(t.inner.includes(\"*\")&&(o=remaining())&&/^\\.[^\\\\/.]+$/.test(o)){const u=parse(o,{...e,fastpaths:false}).output;n=t.close=`)${u})${s})`}if(t.prev.type===\"bos\"){m.negatedExtglob=true}}push({type:\"paren\",extglob:true,value:G,output:n});decrement(\"parens\")};if(u.fastpaths!==false&&!/(^[*!]|[/()[\\]{}\"])/.test(t)){let n=false;let s=t.replace(i,((t,e,u,o,s,r)=>{if(o===\"\\\\\"){n=true;return t}if(o===\"?\"){if(e){return e+o+(s?H.repeat(s.length):\"\")}if(r===0){return O+(s?H.repeat(s.length):\"\")}return H.repeat(u.length)}if(o===\".\"){return h.repeat(u.length)}if(o===\"*\"){if(e){return e+o+(s?k:\"\")}return k}return e?t:`\\\\${t}`}));if(n===true){if(u.unescape===true){s=s.replace(/\\\\/g,\"\")}else{s=s.replace(/\\\\+/g,(t=>t.length%2===0?\"\\\\\\\\\":t?\"\\\\\":\"\"))}}if(s===t&&u.contains===true){m.output=t;return m}m.output=o.wrapOutput(s,m,e);return m}while(!eos()){G=M();if(G===\"\\0\"){continue}if(G===\"\\\\\"){const t=D();if(t===\"/\"&&u.bash!==true){continue}if(t===\".\"||t===\";\"){continue}if(!t){G+=\"\\\\\";push({type:\"text\",value:G});continue}const e=/^\\\\+/.exec(remaining());let n=0;if(e&&e[0].length>2){n=e[0].length;m.index+=n;if(n%2!==0){G+=\"\\\\\"}}if(u.unescape===true){G=M()}else{G+=M()}if(m.brackets===0){push({type:\"text\",value:G});continue}}if(m.brackets>0&&(G!==\"]\"||B.value===\"[\"||B.value===\"[^\")){if(u.posix!==false&&G===\":\"){const t=B.value.slice(1);if(t.includes(\"[\")){B.posix=true;if(t.includes(\":\")){const t=B.value.lastIndexOf(\"[\");const e=B.value.slice(0,t);const u=B.value.slice(t+2);const n=r[u];if(n){B.value=e+n;m.backtrack=true;M();if(!f.output&&A.indexOf(B)===1){f.output=C}continue}}}}if(G===\"[\"&&D()!==\":\"||G===\"-\"&&D()===\"]\"){G=`\\\\${G}`}if(G===\"]\"&&(B.value===\"[\"||B.value===\"[^\")){G=`\\\\${G}`}if(u.posix===true&&G===\"!\"&&B.value===\"[\"){G=\"^\"}B.value+=G;append({value:G});continue}if(m.quotes===1&&G!=='\"'){G=o.escapeRegex(G);B.value+=G;append({value:G});continue}if(G==='\"'){m.quotes=m.quotes===1?0:1;if(u.keepQuotes===true){push({type:\"text\",value:G})}continue}if(G===\"(\"){increment(\"parens\");push({type:\"paren\",value:G});continue}if(G===\")\"){if(m.parens===0&&u.strictBrackets===true){throw new SyntaxError(syntaxError(\"opening\",\"(\"))}const t=w[w.length-1];if(t&&m.parens===t.parens+1){extglobClose(w.pop());continue}push({type:\"paren\",value:G,output:m.parens?\")\":\"\\\\)\"});decrement(\"parens\");continue}if(G===\"[\"){if(u.nobracket===true||!remaining().includes(\"]\")){if(u.nobracket!==true&&u.strictBrackets===true){throw new SyntaxError(syntaxError(\"closing\",\"]\"))}G=`\\\\${G}`}else{increment(\"brackets\")}push({type:\"bracket\",value:G});continue}if(G===\"]\"){if(u.nobracket===true||B&&B.type===\"bracket\"&&B.value.length===1){push({type:\"text\",value:G,output:`\\\\${G}`});continue}if(m.brackets===0){if(u.strictBrackets===true){throw new SyntaxError(syntaxError(\"opening\",\"[\"))}push({type:\"text\",value:G,output:`\\\\${G}`});continue}decrement(\"brackets\");const t=B.value.slice(1);if(B.posix!==true&&t[0]===\"^\"&&!t.includes(\"/\")){G=`/${G}`}B.value+=G;append({value:G});if(u.literalBrackets===false||o.hasRegexChars(t)){continue}const e=o.escapeRegex(B.value);m.output=m.output.slice(0,-B.value.length);if(u.literalBrackets===true){m.output+=e;B.value=e;continue}B.value=`(${_}${e}|${B.value})`;m.output+=B.value;continue}if(G===\"{\"&&u.nobrace!==true){increment(\"braces\");const t={type:\"brace\",value:G,output:\"(\",outputIndex:m.output.length,tokensIndex:m.tokens.length};N.push(t);push(t);continue}if(G===\"}\"){const t=N[N.length-1];if(u.nobrace===true||!t){push({type:\"text\",value:G,output:G});continue}let e=\")\";if(t.dots===true){const t=A.slice();const n=[];for(let e=t.length-1;e>=0;e--){A.pop();if(t[e].type===\"brace\"){break}if(t[e].type!==\"dots\"){n.unshift(t[e].value)}}e=expandRange(n,u);m.backtrack=true}if(t.comma!==true&&t.dots!==true){const u=m.output.slice(0,t.outputIndex);const n=m.tokens.slice(t.tokensIndex);t.value=t.output=\"\\\\{\";G=e=\"\\\\}\";m.output=u;for(const t of n){m.output+=t.output||t.value}}push({type:\"brace\",value:G,output:e});decrement(\"braces\");N.pop();continue}if(G===\"|\"){if(w.length>0){w[w.length-1].conditions++}push({type:\"text\",value:G});continue}if(G===\",\"){let t=G;const e=N[N.length-1];if(e&&I[I.length-1]===\"braces\"){e.comma=true;t=\"|\"}push({type:\"comma\",value:G,output:t});continue}if(G===\"/\"){if(B.type===\"dot\"&&m.index===m.start+1){m.start=m.index+1;m.consumed=\"\";m.output=\"\";A.pop();B=f;continue}push({type:\"slash\",value:G,output:b});continue}if(G===\".\"){if(m.braces>0&&B.type===\"dot\"){if(B.value===\".\")B.output=h;const t=N[N.length-1];B.type=\"dots\";B.output+=G;B.value+=G;t.dots=true;continue}if(m.braces+m.parens===0&&B.type!==\"bos\"&&B.type!==\"slash\"){push({type:\"text\",value:G,output:h});continue}push({type:\"dot\",value:G,output:h});continue}if(G===\"?\"){const t=B&&B.value===\"(\";if(!t&&u.noextglob!==true&&D()===\"(\"&&D(2)!==\"?\"){extglobOpen(\"qmark\",G);continue}if(B&&B.type===\"paren\"){const t=D();let e=G;if(B.value===\"(\"&&!/[!=<:]/.test(t)||t===\"<\"&&!/<([!=]|\\w+>)/.test(remaining())){e=`\\\\${G}`}push({type:\"text\",value:G,output:e});continue}if(u.dot!==true&&(B.type===\"slash\"||B.type===\"bos\")){push({type:\"qmark\",value:G,output:v});continue}push({type:\"qmark\",value:G,output:H});continue}if(G===\"!\"){if(u.noextglob!==true&&D()===\"(\"){if(D(2)!==\"?\"||!/[!=<:]/.test(D(3))){extglobOpen(\"negate\",G);continue}}if(u.nonegate!==true&&m.index===0){negate();continue}}if(G===\"+\"){if(u.noextglob!==true&&D()===\"(\"&&D(2)!==\"?\"){extglobOpen(\"plus\",G);continue}if(B&&B.value===\"(\"||u.regex===false){push({type:\"plus\",value:G,output:g});continue}if(B&&(B.type===\"bracket\"||B.type===\"paren\"||B.type===\"brace\")||m.parens>0){push({type:\"plus\",value:G});continue}push({type:\"plus\",value:g});continue}if(G===\"@\"){if(u.noextglob!==true&&D()===\"(\"&&D(2)!==\"?\"){push({type:\"at\",extglob:true,value:G,output:\"\"});continue}push({type:\"text\",value:G});continue}if(G!==\"*\"){if(G===\"$\"||G===\"^\"){G=`\\\\${G}`}const t=a.exec(remaining());if(t){G+=t[0];m.index+=t[0].length}push({type:\"text\",value:G});continue}if(B&&(B.type===\"globstar\"||B.star===true)){B.type=\"star\";B.star=true;B.value+=G;B.output=k;m.backtrack=true;m.globstar=true;consume(G);continue}let e=remaining();if(u.noextglob!==true&&/^\\([^?]/.test(e)){extglobOpen(\"star\",G);continue}if(B.type===\"star\"){if(u.noglobstar===true){consume(G);continue}const n=B.prev;const o=n.prev;const s=n.type===\"slash\"||n.type===\"bos\";const r=o&&(o.type===\"star\"||o.type===\"globstar\");if(u.bash===true&&(!s||e[0]&&e[0]!==\"/\")){push({type:\"star\",value:G,output:\"\"});continue}const a=m.braces>0&&(n.type===\"comma\"||n.type===\"brace\");const i=w.length&&(n.type===\"pipe\"||n.type===\"paren\");if(!s&&n.type!==\"paren\"&&!a&&!i){push({type:\"star\",value:G,output:\"\"});continue}while(e.slice(0,3)===\"/**\"){const u=t[m.index+4];if(u&&u!==\"/\"){break}e=e.slice(3);consume(\"/**\",3)}if(n.type===\"bos\"&&eos()){B.type=\"globstar\";B.value+=G;B.output=globstar(u);m.output=B.output;m.globstar=true;consume(G);continue}if(n.type===\"slash\"&&n.prev.type!==\"bos\"&&!r&&eos()){m.output=m.output.slice(0,-(n.output+B.output).length);n.output=`(?:${n.output}`;B.type=\"globstar\";B.output=globstar(u)+(u.strictSlashes?\")\":\"|$)\");B.value+=G;m.globstar=true;m.output+=n.output+B.output;consume(G);continue}if(n.type===\"slash\"&&n.prev.type!==\"bos\"&&e[0]===\"/\"){const t=e[1]!==void 0?\"|$\":\"\";m.output=m.output.slice(0,-(n.output+B.output).length);n.output=`(?:${n.output}`;B.type=\"globstar\";B.output=`${globstar(u)}${b}|${b}${t})`;B.value+=G;m.output+=n.output+B.output;m.globstar=true;consume(G+M());push({type:\"slash\",value:\"/\",output:\"\"});continue}if(n.type===\"bos\"&&e[0]===\"/\"){B.type=\"globstar\";B.value+=G;B.output=`(?:^|${b}|${globstar(u)}${b})`;m.output=B.output;m.globstar=true;consume(G+M());push({type:\"slash\",value:\"/\",output:\"\"});continue}m.output=m.output.slice(0,-B.output.length);B.type=\"globstar\";B.output=globstar(u);B.value+=G;m.output+=B.output;m.globstar=true;consume(G);continue}const n={type:\"star\",value:G,output:k};if(u.bash===true){n.output=\".*?\";if(B.type===\"bos\"||B.type===\"slash\"){n.output=T+n.output}push(n);continue}if(B&&(B.type===\"bracket\"||B.type===\"paren\")&&u.regex===true){n.output=G;push(n);continue}if(m.index===m.start||B.type===\"slash\"||B.type===\"dot\"){if(B.type===\"dot\"){m.output+=x;B.output+=x}else if(u.dot===true){m.output+=S;B.output+=S}else{m.output+=T;B.output+=T}if(D()!==\"*\"){m.output+=C;B.output+=C}}push(n)}while(m.brackets>0){if(u.strictBrackets===true)throw new SyntaxError(syntaxError(\"closing\",\"]\"));m.output=o.escapeLast(m.output,\"[\");decrement(\"brackets\")}while(m.parens>0){if(u.strictBrackets===true)throw new SyntaxError(syntaxError(\"closing\",\")\"));m.output=o.escapeLast(m.output,\"(\");decrement(\"parens\")}while(m.braces>0){if(u.strictBrackets===true)throw new SyntaxError(syntaxError(\"closing\",\"}\"));m.output=o.escapeLast(m.output,\"{\");decrement(\"braces\")}if(u.strictSlashes!==true&&(B.type===\"star\"||B.type===\"bracket\")){push({type:\"maybe_slash\",value:\"\",output:`${b}?`})}if(m.backtrack===true){m.output=\"\";for(const t of m.tokens){m.output+=t.output!=null?t.output:t.value;if(t.suffix){m.output+=t.suffix}}}return m};parse.fastpaths=(t,e)=>{const u={...e};const r=typeof u.maxLength===\"number\"?Math.min(s,u.maxLength):s;const a=t.length;if(a>r){throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${r}`)}t=c[t]||t;const{DOT_LITERAL:i,SLASH_LITERAL:p,ONE_CHAR:l,DOTS_SLASH:f,NO_DOT:A,NO_DOTS:_,NO_DOTS_SLASH:R,STAR:E,START_ANCHOR:h}=n.globChars(u.windows);const g=u.dot?_:A;const b=u.dot?R:A;const C=u.capture?\"\":\"?:\";const y={negated:false,prefix:\"\"};let $=u.bash===true?\".*?\":E;if(u.capture){$=`(${$})`}const globstar=t=>{if(t.noglobstar===true)return $;return`(${C}(?:(?!${h}${t.dot?f:i}).)*?)`};const create=t=>{switch(t){case\"*\":return`${g}${l}${$}`;case\".*\":return`${i}${l}${$}`;case\"*.*\":return`${g}${$}${i}${l}${$}`;case\"*/*\":return`${g}${$}${p}${l}${b}${$}`;case\"**\":return g+globstar(u);case\"**/*\":return`(?:${g}${globstar(u)}${p})?${b}${l}${$}`;case\"**/*.*\":return`(?:${g}${globstar(u)}${p})?${b}${$}${i}${l}${$}`;case\"**/.*\":return`(?:${g}${globstar(u)}${p})?${i}${l}${$}`;default:{const e=/^(.*?)\\.(\\w+)$/.exec(t);if(!e)return;const u=create(e[1]);if(!u)return;return u+i+e[2]}}};const x=o.removePrefix(t,y);let S=create(x);if(S&&u.strictSlashes!==true){S+=`${p}?`}return S};t.exports=parse},510:(t,e,u)=>{const n=u(716);const o=u(697);const s=u(96);const r=u(154);const isObject=t=>t&&typeof t===\"object\"&&!Array.isArray(t);const picomatch=(t,e,u=false)=>{if(Array.isArray(t)){const n=t.map((t=>picomatch(t,e,u)));const arrayMatcher=t=>{for(const e of n){const u=e(t);if(u)return u}return false};return arrayMatcher}const n=isObject(t)&&t.tokens&&t.input;if(t===\"\"||typeof t!==\"string\"&&!n){throw new TypeError(\"Expected pattern to be a non-empty string\")}const o=e||{};const s=o.windows;const r=n?picomatch.compileRe(t,e):picomatch.makeRe(t,e,false,true);const a=r.state;delete r.state;let isIgnored=()=>false;if(o.ignore){const t={...e,ignore:null,onMatch:null,onResult:null};isIgnored=picomatch(o.ignore,t,u)}const matcher=(u,n=false)=>{const{isMatch:i,match:c,output:p}=picomatch.test(u,r,e,{glob:t,posix:s});const l={glob:t,state:a,regex:r,posix:s,input:u,output:p,match:c,isMatch:i};if(typeof o.onResult===\"function\"){o.onResult(l)}if(i===false){l.isMatch=false;return n?l:false}if(isIgnored(u)){if(typeof o.onIgnore===\"function\"){o.onIgnore(l)}l.isMatch=false;return n?l:false}if(typeof o.onMatch===\"function\"){o.onMatch(l)}return n?l:true};if(u){matcher.state=a}return matcher};picomatch.test=(t,e,u,{glob:n,posix:o}={})=>{if(typeof t!==\"string\"){throw new TypeError(\"Expected input to be a string\")}if(t===\"\"){return{isMatch:false,output:\"\"}}const r=u||{};const a=r.format||(o?s.toPosixSlashes:null);let i=t===n;let c=i&&a?a(t):t;if(i===false){c=a?a(t):t;i=c===n}if(i===false||r.capture===true){if(r.matchBase===true||r.basename===true){i=picomatch.matchBase(t,e,u,o)}else{i=e.exec(c)}}return{isMatch:Boolean(i),match:i,output:c}};picomatch.matchBase=(t,e,u)=>{const n=e instanceof RegExp?e:picomatch.makeRe(e,u);return n.test(s.basename(t))};picomatch.isMatch=(t,e,u)=>picomatch(e,u)(t);picomatch.parse=(t,e)=>{if(Array.isArray(t))return t.map((t=>picomatch.parse(t,e)));return o(t,{...e,fastpaths:false})};picomatch.scan=(t,e)=>n(t,e);picomatch.compileRe=(t,e,u=false,n=false)=>{if(u===true){return t.output}const o=e||{};const s=o.contains?\"\":\"^\";const r=o.contains?\"\":\"$\";let a=`${s}(?:${t.output})${r}`;if(t&&t.negated===true){a=`^(?!${a}).*$`}const i=picomatch.toRegex(a,e);if(n===true){i.state=t}return i};picomatch.makeRe=(t,e={},u=false,n=false)=>{if(!t||typeof t!==\"string\"){throw new TypeError(\"Expected a non-empty string\")}let s={negated:false,fastpaths:true};if(e.fastpaths!==false&&(t[0]===\".\"||t[0]===\"*\")){s.output=o.fastpaths(t,e)}if(!s.output){s=o(t,e)}return picomatch.compileRe(s,e,u,n)};picomatch.toRegex=(t,e)=>{try{const u=e||{};return new RegExp(t,u.flags||(u.nocase?\"i\":\"\"))}catch(t){if(e&&e.debug===true)throw t;return/$^/}};picomatch.constants=r;t.exports=picomatch},716:(t,e,u)=>{const n=u(96);const{CHAR_ASTERISK:o,CHAR_AT:s,CHAR_BACKWARD_SLASH:r,CHAR_COMMA:a,CHAR_DOT:i,CHAR_EXCLAMATION_MARK:c,CHAR_FORWARD_SLASH:p,CHAR_LEFT_CURLY_BRACE:l,CHAR_LEFT_PARENTHESES:f,CHAR_LEFT_SQUARE_BRACKET:A,CHAR_PLUS:_,CHAR_QUESTION_MARK:R,CHAR_RIGHT_CURLY_BRACE:E,CHAR_RIGHT_PARENTHESES:h,CHAR_RIGHT_SQUARE_BRACKET:g}=u(154);const isPathSeparator=t=>t===p||t===r;const depth=t=>{if(t.isPrefix!==true){t.depth=t.isGlobstar?Infinity:1}};const scan=(t,e)=>{const u=e||{};const b=t.length-1;const C=u.parts===true||u.scanToEnd===true;const y=[];const $=[];const x=[];let S=t;let H=-1;let v=0;let d=0;let L=false;let T=false;let O=false;let k=false;let m=false;let w=false;let N=false;let I=false;let B=false;let G=false;let D=0;let M;let P;let K={value:\"\",depth:0,isGlob:false};const eos=()=>H>=b;const peek=()=>S.charCodeAt(H+1);const advance=()=>{M=P;return S.charCodeAt(++H)};while(H<b){P=advance();let t;if(P===r){N=K.backslashes=true;P=advance();if(P===l){w=true}continue}if(w===true||P===l){D++;while(eos()!==true&&(P=advance())){if(P===r){N=K.backslashes=true;advance();continue}if(P===l){D++;continue}if(w!==true&&P===i&&(P=advance())===i){L=K.isBrace=true;O=K.isGlob=true;G=true;if(C===true){continue}break}if(w!==true&&P===a){L=K.isBrace=true;O=K.isGlob=true;G=true;if(C===true){continue}break}if(P===E){D--;if(D===0){w=false;L=K.isBrace=true;G=true;break}}}if(C===true){continue}break}if(P===p){y.push(H);$.push(K);K={value:\"\",depth:0,isGlob:false};if(G===true)continue;if(M===i&&H===v+1){v+=2;continue}d=H+1;continue}if(u.noext!==true){const t=P===_||P===s||P===o||P===R||P===c;if(t===true&&peek()===f){O=K.isGlob=true;k=K.isExtglob=true;G=true;if(P===c&&H===v){B=true}if(C===true){while(eos()!==true&&(P=advance())){if(P===r){N=K.backslashes=true;P=advance();continue}if(P===h){O=K.isGlob=true;G=true;break}}continue}break}}if(P===o){if(M===o)m=K.isGlobstar=true;O=K.isGlob=true;G=true;if(C===true){continue}break}if(P===R){O=K.isGlob=true;G=true;if(C===true){continue}break}if(P===A){while(eos()!==true&&(t=advance())){if(t===r){N=K.backslashes=true;advance();continue}if(t===g){T=K.isBracket=true;O=K.isGlob=true;G=true;break}}if(C===true){continue}break}if(u.nonegate!==true&&P===c&&H===v){I=K.negated=true;v++;continue}if(u.noparen!==true&&P===f){O=K.isGlob=true;if(C===true){while(eos()!==true&&(P=advance())){if(P===f){N=K.backslashes=true;P=advance();continue}if(P===h){G=true;break}}continue}break}if(O===true){G=true;if(C===true){continue}break}}if(u.noext===true){k=false;O=false}let U=S;let X=\"\";let F=\"\";if(v>0){X=S.slice(0,v);S=S.slice(v);d-=v}if(U&&O===true&&d>0){U=S.slice(0,d);F=S.slice(d)}else if(O===true){U=\"\";F=S}else{U=S}if(U&&U!==\"\"&&U!==\"/\"&&U!==S){if(isPathSeparator(U.charCodeAt(U.length-1))){U=U.slice(0,-1)}}if(u.unescape===true){if(F)F=n.removeBackslashes(F);if(U&&N===true){U=n.removeBackslashes(U)}}const Q={prefix:X,input:t,start:v,base:U,glob:F,isBrace:L,isBracket:T,isGlob:O,isExtglob:k,isGlobstar:m,negated:I,negatedExtglob:B};if(u.tokens===true){Q.maxDepth=0;if(!isPathSeparator(P)){$.push(K)}Q.tokens=$}if(u.parts===true||u.tokens===true){let e;for(let n=0;n<y.length;n++){const o=e?e+1:v;const s=y[n];const r=t.slice(o,s);if(u.tokens){if(n===0&&v!==0){$[n].isPrefix=true;$[n].value=X}else{$[n].value=r}depth($[n]);Q.maxDepth+=$[n].depth}if(n!==0||r!==\"\"){x.push(r)}e=s}if(e&&e+1<t.length){const n=t.slice(e+1);x.push(n);if(u.tokens){$[$.length-1].value=n;depth($[$.length-1]);Q.maxDepth+=$[$.length-1].depth}}Q.slashes=y;Q.parts=x}return Q};t.exports=scan},96:(t,e,u)=>{const{REGEX_BACKSLASH:n,REGEX_REMOVE_BACKSLASH:o,REGEX_SPECIAL_CHARS:s,REGEX_SPECIAL_CHARS_GLOBAL:r}=u(154);e.isObject=t=>t!==null&&typeof t===\"object\"&&!Array.isArray(t);e.hasRegexChars=t=>s.test(t);e.isRegexChar=t=>t.length===1&&e.hasRegexChars(t);e.escapeRegex=t=>t.replace(r,\"\\\\$1\");e.toPosixSlashes=t=>t.replace(n,\"/\");e.removeBackslashes=t=>t.replace(o,(t=>t===\"\\\\\"?\"\":t));e.escapeLast=(t,u,n)=>{const o=t.lastIndexOf(u,n);if(o===-1)return t;if(t[o-1]===\"\\\\\")return e.escapeLast(t,u,o-1);return`${t.slice(0,o)}\\\\${t.slice(o)}`};e.removePrefix=(t,e={})=>{let u=t;if(u.startsWith(\"./\")){u=u.slice(2);e.prefix=\"./\"}return u};e.wrapOutput=(t,e={},u={})=>{const n=u.contains?\"\":\"^\";const o=u.contains?\"\":\"$\";let s=`${n}(?:${t})${o}`;if(e.negated===true){s=`(?:^(?!${s}).*$)`}return s};e.basename=(t,{windows:e}={})=>{const u=t.split(e?/[\\\\/]/:\"/\");const n=u[u.length-1];if(n===\"\"){return u[u.length-2]}return n}}};var e={};function __nccwpck_require__(u){var n=e[u];if(n!==undefined){return n.exports}var o=e[u]={exports:{}};var s=true;try{t[u](o,o.exports,__nccwpck_require__);s=false}finally{if(s)delete e[u]}return o.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var u=__nccwpck_require__(170);module.exports=u})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/picomatch/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n true &&\n  (function () {\n    function getComponentNameFromType(type) {\n      if (null == type) return null;\n      if (\"function\" === typeof type)\n        return type.$$typeof === REACT_CLIENT_REFERENCE\n          ? null\n          : type.displayName || type.name || null;\n      if (\"string\" === typeof type) return type;\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (\"object\" === typeof type)\n        switch (\n          (\"number\" === typeof type.tag &&\n            console.error(\n              \"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"\n            ),\n          type.$$typeof)\n        ) {\n          case REACT_CONTEXT_TYPE:\n            return (type.displayName || \"Context\") + \".Provider\";\n          case REACT_CONSUMER_TYPE:\n            return (type._context.displayName || \"Context\") + \".Consumer\";\n          case REACT_FORWARD_REF_TYPE:\n            var innerType = type.render;\n            type = type.displayName;\n            type ||\n              ((type = innerType.displayName || innerType.name || \"\"),\n              (type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\"));\n            return type;\n          case REACT_MEMO_TYPE:\n            return (\n              (innerType = type.displayName || null),\n              null !== innerType\n                ? innerType\n                : getComponentNameFromType(type.type) || \"Memo\"\n            );\n          case REACT_LAZY_TYPE:\n            innerType = type._payload;\n            type = type._init;\n            try {\n              return getComponentNameFromType(type(innerType));\n            } catch (x) {}\n        }\n      return null;\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      try {\n        testStringCoercion(value);\n        var JSCompiler_inline_result = !1;\n      } catch (e) {\n        JSCompiler_inline_result = !0;\n      }\n      if (JSCompiler_inline_result) {\n        JSCompiler_inline_result = console;\n        var JSCompiler_temp_const = JSCompiler_inline_result.error;\n        var JSCompiler_inline_result$jscomp$0 =\n          (\"function\" === typeof Symbol &&\n            Symbol.toStringTag &&\n            value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\";\n        JSCompiler_temp_const.call(\n          JSCompiler_inline_result,\n          \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\",\n          JSCompiler_inline_result$jscomp$0\n        );\n        return testStringCoercion(value);\n      }\n    }\n    function getTaskName(type) {\n      if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n      if (\n        \"object\" === typeof type &&\n        null !== type &&\n        type.$$typeof === REACT_LAZY_TYPE\n      )\n        return \"<...>\";\n      try {\n        var name = getComponentNameFromType(type);\n        return name ? \"<\" + name + \">\" : \"<...>\";\n      } catch (x) {\n        return \"<...>\";\n      }\n    }\n    function getOwner() {\n      var dispatcher = ReactSharedInternals.A;\n      return null === dispatcher ? null : dispatcher.getOwner();\n    }\n    function hasValidKey(config) {\n      if (hasOwnProperty.call(config, \"key\")) {\n        var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n        if (getter && getter.isReactWarning) return !1;\n      }\n      return void 0 !== config.key;\n    }\n    function defineKeyPropWarningGetter(props, displayName) {\n      function warnAboutAccessingKey() {\n        specialPropKeyWarningShown ||\n          ((specialPropKeyWarningShown = !0),\n          console.error(\n            \"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\",\n            displayName\n          ));\n      }\n      warnAboutAccessingKey.isReactWarning = !0;\n      Object.defineProperty(props, \"key\", {\n        get: warnAboutAccessingKey,\n        configurable: !0\n      });\n    }\n    function elementRefGetterWithDeprecationWarning() {\n      var componentName = getComponentNameFromType(this.type);\n      didWarnAboutElementRef[componentName] ||\n        ((didWarnAboutElementRef[componentName] = !0),\n        console.error(\n          \"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"\n        ));\n      componentName = this.props.ref;\n      return void 0 !== componentName ? componentName : null;\n    }\n    function ReactElement(\n      type,\n      key,\n      self,\n      source,\n      owner,\n      props,\n      debugStack,\n      debugTask\n    ) {\n      self = props.ref;\n      type = {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key,\n        props: props,\n        _owner: owner\n      };\n      null !== (void 0 !== self ? self : null)\n        ? Object.defineProperty(type, \"ref\", {\n            enumerable: !1,\n            get: elementRefGetterWithDeprecationWarning\n          })\n        : Object.defineProperty(type, \"ref\", { enumerable: !1, value: null });\n      type._store = {};\n      Object.defineProperty(type._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: 0\n      });\n      Object.defineProperty(type, \"_debugInfo\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: null\n      });\n      Object.defineProperty(type, \"_debugStack\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugStack\n      });\n      Object.defineProperty(type, \"_debugTask\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: debugTask\n      });\n      Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n      return type;\n    }\n    function jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      debugStack,\n      debugTask\n    ) {\n      var children = config.children;\n      if (void 0 !== children)\n        if (isStaticChildren)\n          if (isArrayImpl(children)) {\n            for (\n              isStaticChildren = 0;\n              isStaticChildren < children.length;\n              isStaticChildren++\n            )\n              validateChildKeys(children[isStaticChildren]);\n            Object.freeze && Object.freeze(children);\n          } else\n            console.error(\n              \"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\"\n            );\n        else validateChildKeys(children);\n      if (hasOwnProperty.call(config, \"key\")) {\n        children = getComponentNameFromType(type);\n        var keys = Object.keys(config).filter(function (k) {\n          return \"key\" !== k;\n        });\n        isStaticChildren =\n          0 < keys.length\n            ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\"\n            : \"{key: someKey}\";\n        didWarnAboutKeySpread[children + isStaticChildren] ||\n          ((keys =\n            0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\"),\n          console.error(\n            'A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />',\n            isStaticChildren,\n            children,\n            keys,\n            children\n          ),\n          (didWarnAboutKeySpread[children + isStaticChildren] = !0));\n      }\n      children = null;\n      void 0 !== maybeKey &&\n        (checkKeyStringCoercion(maybeKey), (children = \"\" + maybeKey));\n      hasValidKey(config) &&\n        (checkKeyStringCoercion(config.key), (children = \"\" + config.key));\n      if (\"key\" in config) {\n        maybeKey = {};\n        for (var propName in config)\n          \"key\" !== propName && (maybeKey[propName] = config[propName]);\n      } else maybeKey = config;\n      children &&\n        defineKeyPropWarningGetter(\n          maybeKey,\n          \"function\" === typeof type\n            ? type.displayName || type.name || \"Unknown\"\n            : type\n        );\n      return ReactElement(\n        type,\n        children,\n        self,\n        source,\n        getOwner(),\n        maybeKey,\n        debugStack,\n        debugTask\n      );\n    }\n    function validateChildKeys(node) {\n      \"object\" === typeof node &&\n        null !== node &&\n        node.$$typeof === REACT_ELEMENT_TYPE &&\n        node._store &&\n        (node._store.validated = 1);\n    }\n    var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"),\n      REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n      REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n      REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n      REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n      REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    Symbol.for(\"react.provider\");\n    var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n      REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n      REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n      REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n      REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n      REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n      REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n      REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n      ReactSharedInternals =\n        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      isArrayImpl = Array.isArray,\n      createTask = console.createTask\n        ? console.createTask\n        : function () {\n            return null;\n          },\n      specialPropKeyWarningShown;\n    var didWarnAboutElementRef = {};\n    var didWarnAboutKeySpread = {};\n    exports.Fragment = REACT_FRAGMENT_TYPE;\n    exports.jsxDEV = function (\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self\n    ) {\n      return jsxDEVImpl(\n        type,\n        config,\n        maybeKey,\n        isStaticChildren,\n        source,\n        self,\n        Error(\"react-stack-top-frame\"),\n        createTask(getTaskName(type))\n      );\n    };\n  })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYixLQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLCtDQUErQyw2QkFBNkI7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxnQkFBZ0IsZ0RBQWdEO0FBQ2hFLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQSxnQ0FBZ0Msa0NBQWtDLE9BQU87QUFDekU7QUFDQSxnR0FBZ0csU0FBUyxVQUFVLHNGQUFzRixhQUFhLFVBQVUsVUFBVTtBQUMxTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBTyxDQUFDLHNHQUEwQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxJQUFJLGdCQUFnQjtBQUNwQixJQUFJLGNBQWM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyIsInNvdXJjZXMiOlsiL1VzZXJzL2FkaXNpbi9EZXNrdG9wL3ByZXB3aXNlL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtZGV2LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cblwidXNlIHN0cmljdFwiO1xuXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WICYmXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpIHtcbiAgICAgIGlmIChudWxsID09IHR5cGUpIHJldHVybiBudWxsO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHR5cGUpXG4gICAgICAgIHJldHVybiB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DTElFTlRfUkVGRVJFTkNFXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICAgICAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiB0eXBlKSByZXR1cm4gdHlwZTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIFwiRnJhZ21lbnRcIjtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gXCJQb3J0YWxcIjtcbiAgICAgICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgICAgIHJldHVybiBcIlByb2ZpbGVyXCI7XG4gICAgICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgICAgICByZXR1cm4gXCJTdHJpY3RNb2RlXCI7XG4gICAgICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfVFlQRTpcbiAgICAgICAgICByZXR1cm4gXCJTdXNwZW5zZVwiO1xuICAgICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgICAgICByZXR1cm4gXCJTdXNwZW5zZUxpc3RcIjtcbiAgICAgIH1cbiAgICAgIGlmIChcIm9iamVjdFwiID09PSB0eXBlb2YgdHlwZSlcbiAgICAgICAgc3dpdGNoIChcbiAgICAgICAgICAoXCJudW1iZXJcIiA9PT0gdHlwZW9mIHR5cGUudGFnICYmXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICBcIlJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgb2JqZWN0IGluIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSgpLiBUaGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgdHlwZS4kJHR5cGVvZilcbiAgICAgICAgKSB7XG4gICAgICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gKHR5cGUuZGlzcGxheU5hbWUgfHwgXCJDb250ZXh0XCIpICsgXCIuUHJvdmlkZXJcIjtcbiAgICAgICAgICBjYXNlIFJFQUNUX0NPTlNVTUVSX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gKHR5cGUuX2NvbnRleHQuZGlzcGxheU5hbWUgfHwgXCJDb250ZXh0XCIpICsgXCIuQ29uc3VtZXJcIjtcbiAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICB2YXIgaW5uZXJUeXBlID0gdHlwZS5yZW5kZXI7XG4gICAgICAgICAgICB0eXBlID0gdHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgICAgICAgIHR5cGUgfHxcbiAgICAgICAgICAgICAgKCh0eXBlID0gaW5uZXJUeXBlLmRpc3BsYXlOYW1lIHx8IGlubmVyVHlwZS5uYW1lIHx8IFwiXCIpLFxuICAgICAgICAgICAgICAodHlwZSA9IFwiXCIgIT09IHR5cGUgPyBcIkZvcndhcmRSZWYoXCIgKyB0eXBlICsgXCIpXCIgOiBcIkZvcndhcmRSZWZcIikpO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAoaW5uZXJUeXBlID0gdHlwZS5kaXNwbGF5TmFtZSB8fCBudWxsKSxcbiAgICAgICAgICAgICAgbnVsbCAhPT0gaW5uZXJUeXBlXG4gICAgICAgICAgICAgICAgPyBpbm5lclR5cGVcbiAgICAgICAgICAgICAgICA6IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8IFwiTWVtb1wiXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgICAgaW5uZXJUeXBlID0gdHlwZS5fcGF5bG9hZDtcbiAgICAgICAgICAgIHR5cGUgPSB0eXBlLl9pbml0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKGlubmVyVHlwZSkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RTdHJpbmdDb2VyY2lvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIFwiXCIgKyB2YWx1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tLZXlTdHJpbmdDb2VyY2lvbih2YWx1ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCA9ICExO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQgPSAhMDtcbiAgICAgIH1cbiAgICAgIGlmIChKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQpIHtcbiAgICAgICAgSlNDb21waWxlcl9pbmxpbmVfcmVzdWx0ID0gY29uc29sZTtcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfdGVtcF9jb25zdCA9IEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdC5lcnJvcjtcbiAgICAgICAgdmFyIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMCA9XG4gICAgICAgICAgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFN5bWJvbCAmJlxuICAgICAgICAgICAgU3ltYm9sLnRvU3RyaW5nVGFnICYmXG4gICAgICAgICAgICB2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddKSB8fFxuICAgICAgICAgIHZhbHVlLmNvbnN0cnVjdG9yLm5hbWUgfHxcbiAgICAgICAgICBcIk9iamVjdFwiO1xuICAgICAgICBKU0NvbXBpbGVyX3RlbXBfY29uc3QuY2FsbChcbiAgICAgICAgICBKU0NvbXBpbGVyX2lubGluZV9yZXN1bHQsXG4gICAgICAgICAgXCJUaGUgcHJvdmlkZWQga2V5IGlzIGFuIHVuc3VwcG9ydGVkIHR5cGUgJXMuIFRoaXMgdmFsdWUgbXVzdCBiZSBjb2VyY2VkIHRvIGEgc3RyaW5nIGJlZm9yZSB1c2luZyBpdCBoZXJlLlwiLFxuICAgICAgICAgIEpTQ29tcGlsZXJfaW5saW5lX3Jlc3VsdCRqc2NvbXAkMFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VGFza05hbWUodHlwZSkge1xuICAgICAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHJldHVybiBcIjw+XCI7XG4gICAgICBpZiAoXG4gICAgICAgIFwib2JqZWN0XCIgPT09IHR5cGVvZiB0eXBlICYmXG4gICAgICAgIG51bGwgIT09IHR5cGUgJiZcbiAgICAgICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFXG4gICAgICApXG4gICAgICAgIHJldHVybiBcIjwuLi4+XCI7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKTtcbiAgICAgICAgcmV0dXJuIG5hbWUgPyBcIjxcIiArIG5hbWUgKyBcIj5cIiA6IFwiPC4uLj5cIjtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgcmV0dXJuIFwiPC4uLj5cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0T3duZXIoKSB7XG4gICAgICB2YXIgZGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLkE7XG4gICAgICByZXR1cm4gbnVsbCA9PT0gZGlzcGF0Y2hlciA/IG51bGwgOiBkaXNwYXRjaGVyLmdldE93bmVyKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc1ZhbGlkS2V5KGNvbmZpZykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBcImtleVwiKSkge1xuICAgICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsIFwia2V5XCIpLmdldDtcbiAgICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHJldHVybiAhMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2b2lkIDAgIT09IGNvbmZpZy5rZXk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkge1xuICAgICAgZnVuY3Rpb24gd2FybkFib3V0QWNjZXNzaW5nS2V5KCkge1xuICAgICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biB8fFxuICAgICAgICAgICgoc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24gPSAhMCksXG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIFwiJXM6IGBrZXlgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSB2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50IHByb3AuIChodHRwczovL3JlYWN0LmRldi9saW5rL3NwZWNpYWwtcHJvcHMpXCIsXG4gICAgICAgICAgICBkaXNwbGF5TmFtZVxuICAgICAgICAgICkpO1xuICAgICAgfVxuICAgICAgd2FybkFib3V0QWNjZXNzaW5nS2V5LmlzUmVhY3RXYXJuaW5nID0gITA7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsIFwia2V5XCIsIHtcbiAgICAgICAgZ2V0OiB3YXJuQWJvdXRBY2Nlc3NpbmdLZXksXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogITBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbGVtZW50UmVmR2V0dGVyV2l0aERlcHJlY2F0aW9uV2FybmluZygpIHtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHRoaXMudHlwZSk7XG4gICAgICBkaWRXYXJuQWJvdXRFbGVtZW50UmVmW2NvbXBvbmVudE5hbWVdIHx8XG4gICAgICAgICgoZGlkV2FybkFib3V0RWxlbWVudFJlZltjb21wb25lbnROYW1lXSA9ICEwKSxcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBcIkFjY2Vzc2luZyBlbGVtZW50LnJlZiB3YXMgcmVtb3ZlZCBpbiBSZWFjdCAxOS4gcmVmIGlzIG5vdyBhIHJlZ3VsYXIgcHJvcC4gSXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIEpTWCBFbGVtZW50IHR5cGUgaW4gYSBmdXR1cmUgcmVsZWFzZS5cIlxuICAgICAgICApKTtcbiAgICAgIGNvbXBvbmVudE5hbWUgPSB0aGlzLnByb3BzLnJlZjtcbiAgICAgIHJldHVybiB2b2lkIDAgIT09IGNvbXBvbmVudE5hbWUgPyBjb21wb25lbnROYW1lIDogbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gUmVhY3RFbGVtZW50KFxuICAgICAgdHlwZSxcbiAgICAgIGtleSxcbiAgICAgIHNlbGYsXG4gICAgICBzb3VyY2UsXG4gICAgICBvd25lcixcbiAgICAgIHByb3BzLFxuICAgICAgZGVidWdTdGFjayxcbiAgICAgIGRlYnVnVGFza1xuICAgICkge1xuICAgICAgc2VsZiA9IHByb3BzLnJlZjtcbiAgICAgIHR5cGUgPSB7XG4gICAgICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGtleToga2V5LFxuICAgICAgICBwcm9wczogcHJvcHMsXG4gICAgICAgIF9vd25lcjogb3duZXJcbiAgICAgIH07XG4gICAgICBudWxsICE9PSAodm9pZCAwICE9PSBzZWxmID8gc2VsZiA6IG51bGwpXG4gICAgICAgID8gT2JqZWN0LmRlZmluZVByb3BlcnR5KHR5cGUsIFwicmVmXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICAgICAgZ2V0OiBlbGVtZW50UmVmR2V0dGVyV2l0aERlcHJlY2F0aW9uV2FybmluZ1xuICAgICAgICAgIH0pXG4gICAgICAgIDogT2JqZWN0LmRlZmluZVByb3BlcnR5KHR5cGUsIFwicmVmXCIsIHsgZW51bWVyYWJsZTogITEsIHZhbHVlOiBudWxsIH0pO1xuICAgICAgdHlwZS5fc3RvcmUgPSB7fTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0eXBlLl9zdG9yZSwgXCJ2YWxpZGF0ZWRcIiwge1xuICAgICAgICBjb25maWd1cmFibGU6ICExLFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgICB2YWx1ZTogMFxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHlwZSwgXCJfZGVidWdJbmZvXCIsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIHdyaXRhYmxlOiAhMCxcbiAgICAgICAgdmFsdWU6IG51bGxcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR5cGUsIFwiX2RlYnVnU3RhY2tcIiwge1xuICAgICAgICBjb25maWd1cmFibGU6ICExLFxuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgd3JpdGFibGU6ICEwLFxuICAgICAgICB2YWx1ZTogZGVidWdTdGFja1xuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHlwZSwgXCJfZGVidWdUYXNrXCIsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiAhMSxcbiAgICAgICAgZW51bWVyYWJsZTogITEsXG4gICAgICAgIHdyaXRhYmxlOiAhMCxcbiAgICAgICAgdmFsdWU6IGRlYnVnVGFza1xuICAgICAgfSk7XG4gICAgICBPYmplY3QuZnJlZXplICYmIChPYmplY3QuZnJlZXplKHR5cGUucHJvcHMpLCBPYmplY3QuZnJlZXplKHR5cGUpKTtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBqc3hERVZJbXBsKFxuICAgICAgdHlwZSxcbiAgICAgIGNvbmZpZyxcbiAgICAgIG1heWJlS2V5LFxuICAgICAgaXNTdGF0aWNDaGlsZHJlbixcbiAgICAgIHNvdXJjZSxcbiAgICAgIHNlbGYsXG4gICAgICBkZWJ1Z1N0YWNrLFxuICAgICAgZGVidWdUYXNrXG4gICAgKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBjb25maWcuY2hpbGRyZW47XG4gICAgICBpZiAodm9pZCAwICE9PSBjaGlsZHJlbilcbiAgICAgICAgaWYgKGlzU3RhdGljQ2hpbGRyZW4pXG4gICAgICAgICAgaWYgKGlzQXJyYXlJbXBsKGNoaWxkcmVuKSkge1xuICAgICAgICAgICAgZm9yIChcbiAgICAgICAgICAgICAgaXNTdGF0aWNDaGlsZHJlbiA9IDA7XG4gICAgICAgICAgICAgIGlzU3RhdGljQ2hpbGRyZW4gPCBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgICAgICAgIGlzU3RhdGljQ2hpbGRyZW4rK1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhjaGlsZHJlbltpc1N0YXRpY0NoaWxkcmVuXSk7XG4gICAgICAgICAgICBPYmplY3QuZnJlZXplICYmIE9iamVjdC5mcmVlemUoY2hpbGRyZW4pO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgXCJSZWFjdC5qc3g6IFN0YXRpYyBjaGlsZHJlbiBzaG91bGQgYWx3YXlzIGJlIGFuIGFycmF5LiBZb3UgYXJlIGxpa2VseSBleHBsaWNpdGx5IGNhbGxpbmcgUmVhY3QuanN4cyBvciBSZWFjdC5qc3hERVYuIFVzZSB0aGUgQmFiZWwgdHJhbnNmb3JtIGluc3RlYWQuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIGVsc2UgdmFsaWRhdGVDaGlsZEtleXMoY2hpbGRyZW4pO1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBcImtleVwiKSkge1xuICAgICAgICBjaGlsZHJlbiA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKTtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhjb25maWcpLmZpbHRlcihmdW5jdGlvbiAoaykge1xuICAgICAgICAgIHJldHVybiBcImtleVwiICE9PSBrO1xuICAgICAgICB9KTtcbiAgICAgICAgaXNTdGF0aWNDaGlsZHJlbiA9XG4gICAgICAgICAgMCA8IGtleXMubGVuZ3RoXG4gICAgICAgICAgICA/IFwie2tleTogc29tZUtleSwgXCIgKyBrZXlzLmpvaW4oXCI6IC4uLiwgXCIpICsgXCI6IC4uLn1cIlxuICAgICAgICAgICAgOiBcIntrZXk6IHNvbWVLZXl9XCI7XG4gICAgICAgIGRpZFdhcm5BYm91dEtleVNwcmVhZFtjaGlsZHJlbiArIGlzU3RhdGljQ2hpbGRyZW5dIHx8XG4gICAgICAgICAgKChrZXlzID1cbiAgICAgICAgICAgIDAgPCBrZXlzLmxlbmd0aCA/IFwie1wiICsga2V5cy5qb2luKFwiOiAuLi4sIFwiKSArIFwiOiAuLi59XCIgOiBcInt9XCIpLFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAnQSBwcm9wcyBvYmplY3QgY29udGFpbmluZyBhIFwia2V5XCIgcHJvcCBpcyBiZWluZyBzcHJlYWQgaW50byBKU1g6XFxuICBsZXQgcHJvcHMgPSAlcztcXG4gIDwlcyB7Li4ucHJvcHN9IC8+XFxuUmVhY3Qga2V5cyBtdXN0IGJlIHBhc3NlZCBkaXJlY3RseSB0byBKU1ggd2l0aG91dCB1c2luZyBzcHJlYWQ6XFxuICBsZXQgcHJvcHMgPSAlcztcXG4gIDwlcyBrZXk9e3NvbWVLZXl9IHsuLi5wcm9wc30gLz4nLFxuICAgICAgICAgICAgaXNTdGF0aWNDaGlsZHJlbixcbiAgICAgICAgICAgIGNoaWxkcmVuLFxuICAgICAgICAgICAga2V5cyxcbiAgICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICAgKSxcbiAgICAgICAgICAoZGlkV2FybkFib3V0S2V5U3ByZWFkW2NoaWxkcmVuICsgaXNTdGF0aWNDaGlsZHJlbl0gPSAhMCkpO1xuICAgICAgfVxuICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgdm9pZCAwICE9PSBtYXliZUtleSAmJlxuICAgICAgICAoY2hlY2tLZXlTdHJpbmdDb2VyY2lvbihtYXliZUtleSksIChjaGlsZHJlbiA9IFwiXCIgKyBtYXliZUtleSkpO1xuICAgICAgaGFzVmFsaWRLZXkoY29uZmlnKSAmJlxuICAgICAgICAoY2hlY2tLZXlTdHJpbmdDb2VyY2lvbihjb25maWcua2V5KSwgKGNoaWxkcmVuID0gXCJcIiArIGNvbmZpZy5rZXkpKTtcbiAgICAgIGlmIChcImtleVwiIGluIGNvbmZpZykge1xuICAgICAgICBtYXliZUtleSA9IHt9O1xuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBjb25maWcpXG4gICAgICAgICAgXCJrZXlcIiAhPT0gcHJvcE5hbWUgJiYgKG1heWJlS2V5W3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV0pO1xuICAgICAgfSBlbHNlIG1heWJlS2V5ID0gY29uZmlnO1xuICAgICAgY2hpbGRyZW4gJiZcbiAgICAgICAgZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIoXG4gICAgICAgICAgbWF5YmVLZXksXG4gICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdHlwZVxuICAgICAgICAgICAgPyB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBcIlVua25vd25cIlxuICAgICAgICAgICAgOiB0eXBlXG4gICAgICAgICk7XG4gICAgICByZXR1cm4gUmVhY3RFbGVtZW50KFxuICAgICAgICB0eXBlLFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgc2VsZixcbiAgICAgICAgc291cmNlLFxuICAgICAgICBnZXRPd25lcigpLFxuICAgICAgICBtYXliZUtleSxcbiAgICAgICAgZGVidWdTdGFjayxcbiAgICAgICAgZGVidWdUYXNrXG4gICAgICApO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlKSB7XG4gICAgICBcIm9iamVjdFwiID09PSB0eXBlb2Ygbm9kZSAmJlxuICAgICAgICBudWxsICE9PSBub2RlICYmXG4gICAgICAgIG5vZGUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSAmJlxuICAgICAgICBub2RlLl9zdG9yZSAmJlxuICAgICAgICAobm9kZS5fc3RvcmUudmFsaWRhdGVkID0gMSk7XG4gICAgfVxuICAgIHZhciBSZWFjdCA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3RcIiksXG4gICAgICBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QudHJhbnNpdGlvbmFsLmVsZW1lbnRcIiksXG4gICAgICBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIiksXG4gICAgICBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICAgICAgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxcbiAgICAgIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik7XG4gICAgU3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpO1xuICAgIHZhciBSRUFDVF9DT05TVU1FUl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnN1bWVyXCIpLFxuICAgICAgUkVBQ1RfQ09OVEVYVF9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksXG4gICAgICBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLFxuICAgICAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxcbiAgICAgIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLFxuICAgICAgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksXG4gICAgICBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSxcbiAgICAgIFJFQUNUX0NMSUVOVF9SRUZFUkVOQ0UgPSBTeW1ib2wuZm9yKFwicmVhY3QuY2xpZW50LnJlZmVyZW5jZVwiKSxcbiAgICAgIFJlYWN0U2hhcmVkSW50ZXJuYWxzID1cbiAgICAgICAgUmVhY3QuX19DTElFTlRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfV0FSTl9VU0VSU19USEVZX0NBTk5PVF9VUEdSQURFLFxuICAgICAgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICAgICAgaXNBcnJheUltcGwgPSBBcnJheS5pc0FycmF5LFxuICAgICAgY3JlYXRlVGFzayA9IGNvbnNvbGUuY3JlYXRlVGFza1xuICAgICAgICA/IGNvbnNvbGUuY3JlYXRlVGFza1xuICAgICAgICA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0sXG4gICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bjtcbiAgICB2YXIgZGlkV2FybkFib3V0RWxlbWVudFJlZiA9IHt9O1xuICAgIHZhciBkaWRXYXJuQWJvdXRLZXlTcHJlYWQgPSB7fTtcbiAgICBleHBvcnRzLkZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbiAgICBleHBvcnRzLmpzeERFViA9IGZ1bmN0aW9uIChcbiAgICAgIHR5cGUsXG4gICAgICBjb25maWcsXG4gICAgICBtYXliZUtleSxcbiAgICAgIGlzU3RhdGljQ2hpbGRyZW4sXG4gICAgICBzb3VyY2UsXG4gICAgICBzZWxmXG4gICAgKSB7XG4gICAgICByZXR1cm4ganN4REVWSW1wbChcbiAgICAgICAgdHlwZSxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICBtYXliZUtleSxcbiAgICAgICAgaXNTdGF0aWNDaGlsZHJlbixcbiAgICAgICAgc291cmNlLFxuICAgICAgICBzZWxmLFxuICAgICAgICBFcnJvcihcInJlYWN0LXN0YWNrLXRvcC1mcmFtZVwiKSxcbiAgICAgICAgY3JlYXRlVGFzayhnZXRUYXNrTmFtZSh0eXBlKSlcbiAgICAgICk7XG4gICAgfTtcbiAgfSkoKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZGlzaW4vRGVza3RvcC9wcmVwd2lzZS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-context.shared-runtime.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/amp-context.shared-runtime.js ***!
  \*************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"AmpStateContext\", ({\n    enumerable: true,\n    get: function() {\n        return AmpStateContext;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst AmpStateContext = _react.default.createContext({});\nif (true) {\n    AmpStateContext.displayName = 'AmpStateContext';\n} //# sourceMappingURL=amp-context.shared-runtime.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtY29udGV4dC5zaGFyZWQtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiOzs7O21EQUVhQTs7O2VBQUFBOzs7OzRFQUZLO0FBRVgsTUFBTUEsa0JBQXNDQyxPQUFBQSxPQUFLLENBQUNDLGFBQWEsQ0FBQyxDQUFDO0FBRXhFLElBQUlDLElBQW9CLEVBQW1CO0lBQ3pDSCxnQkFBZ0JNLFdBQVcsR0FBRztBQUNoQyIsInNvdXJjZXMiOlsiL1VzZXJzL3NyYy9zaGFyZWQvbGliL2FtcC1jb250ZXh0LnNoYXJlZC1ydW50aW1lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuZXhwb3J0IGNvbnN0IEFtcFN0YXRlQ29udGV4dDogUmVhY3QuQ29udGV4dDxhbnk+ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7fSlcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgQW1wU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gJ0FtcFN0YXRlQ29udGV4dCdcbn1cbiJdLCJuYW1lcyI6WyJBbXBTdGF0ZUNvbnRleHQiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJkaXNwbGF5TmFtZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-context.shared-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-mode.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/amp-mode.js ***!
  \*******************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"isInAmpMode\", ({\n    enumerable: true,\n    get: function() {\n        return isInAmpMode;\n    }\n}));\nfunction isInAmpMode(param) {\n    let { ampFirst = false, hybrid = false, hasQuery = false } = param === void 0 ? {} : param;\n    return ampFirst || hybrid && hasQuery;\n} //# sourceMappingURL=amp-mode.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9hbXAtbW9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7OytDQUFnQkE7OztlQUFBQTs7O0FBQVQsU0FBU0EsWUFBWTtJQUFBLE1BQzFCQyxXQUFXLEtBQUssRUFDaEJDLFNBQVMsS0FBSyxFQUNkQyxXQUFXLEtBQUssRUFDakIsR0FKMkIsbUJBSXhCLENBQUMsSUFKdUI7SUFLMUIsT0FBT0YsWUFBYUMsVUFBVUM7QUFDaEMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcmMvc2hhcmVkL2xpYi9hbXAtbW9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNJbkFtcE1vZGUoe1xuICBhbXBGaXJzdCA9IGZhbHNlLFxuICBoeWJyaWQgPSBmYWxzZSxcbiAgaGFzUXVlcnkgPSBmYWxzZSxcbn0gPSB7fSk6IGJvb2xlYW4ge1xuICByZXR1cm4gYW1wRmlyc3QgfHwgKGh5YnJpZCAmJiBoYXNRdWVyeSlcbn1cbiJdLCJuYW1lcyI6WyJpc0luQW1wTW9kZSIsImFtcEZpcnN0IiwiaHlicmlkIiwiaGFzUXVlcnkiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-mode.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/get-img-props.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/get-img-props.js ***!
  \************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getImgProps\", ({\n    enumerable: true,\n    get: function() {\n        return getImgProps;\n    }\n}));\nconst _warnonce = __webpack_require__(/*! ./utils/warn-once */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils/warn-once.js\");\nconst _imageblursvg = __webpack_require__(/*! ./image-blur-svg */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-blur-svg.js\");\nconst _imageconfig = __webpack_require__(/*! ./image-config */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js\");\nconst VALID_LOADING_VALUES = [\n    'lazy',\n    'eager',\n    undefined\n];\nfunction isStaticRequire(src) {\n    return src.default !== undefined;\n}\nfunction isStaticImageData(src) {\n    return src.src !== undefined;\n}\nfunction isStaticImport(src) {\n    return !!src && typeof src === 'object' && (isStaticRequire(src) || isStaticImageData(src));\n}\nconst allImgs = new Map();\nlet perfObserver;\nfunction getInt(x) {\n    if (typeof x === 'undefined') {\n        return x;\n    }\n    if (typeof x === 'number') {\n        return Number.isFinite(x) ? x : NaN;\n    }\n    if (typeof x === 'string' && /^[0-9]+$/.test(x)) {\n        return parseInt(x, 10);\n    }\n    return NaN;\n}\nfunction getWidths(param, width, sizes) {\n    let { deviceSizes, allSizes } = param;\n    if (sizes) {\n        // Find all the \"vw\" percent sizes used in the sizes prop\n        const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g;\n        const percentSizes = [];\n        for(let match; match = viewportWidthRe.exec(sizes); match){\n            percentSizes.push(parseInt(match[2]));\n        }\n        if (percentSizes.length) {\n            const smallestRatio = Math.min(...percentSizes) * 0.01;\n            return {\n                widths: allSizes.filter((s)=>s >= deviceSizes[0] * smallestRatio),\n                kind: 'w'\n            };\n        }\n        return {\n            widths: allSizes,\n            kind: 'w'\n        };\n    }\n    if (typeof width !== 'number') {\n        return {\n            widths: deviceSizes,\n            kind: 'w'\n        };\n    }\n    const widths = [\n        ...new Set(// > are actually 3x in the green color, but only 1.5x in the red and\n        // > blue colors. Showing a 3x resolution image in the app vs a 2x\n        // > resolution image will be visually the same, though the 3x image\n        // > takes significantly more data. Even true 3x resolution screens are\n        // > wasteful as the human eye cannot see that level of detail without\n        // > something like a magnifying glass.\n        // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n        [\n            width,\n            width * 2 /*, width * 3*/ \n        ].map((w)=>allSizes.find((p)=>p >= w) || allSizes[allSizes.length - 1]))\n    ];\n    return {\n        widths,\n        kind: 'x'\n    };\n}\nfunction generateImgAttrs(param) {\n    let { config, src, unoptimized, width, quality, sizes, loader } = param;\n    if (unoptimized) {\n        return {\n            src,\n            srcSet: undefined,\n            sizes: undefined\n        };\n    }\n    const { widths, kind } = getWidths(config, width, sizes);\n    const last = widths.length - 1;\n    return {\n        sizes: !sizes && kind === 'w' ? '100vw' : sizes,\n        srcSet: widths.map((w, i)=>loader({\n                config,\n                src,\n                quality,\n                width: w\n            }) + \" \" + (kind === 'w' ? w : i + 1) + kind).join(', '),\n        // It's intended to keep `src` the last attribute because React updates\n        // attributes in order. If we keep `src` the first one, Safari will\n        // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n        // updated by React. That causes multiple unnecessary requests if `srcSet`\n        // and `sizes` are defined.\n        // This bug cannot be reproduced in Chrome or Firefox.\n        src: loader({\n            config,\n            src,\n            quality,\n            width: widths[last]\n        })\n    };\n}\nfunction getImgProps(param, _state) {\n    let { src, sizes, unoptimized = false, priority = false, loading, className, quality, width, height, fill = false, style, overrideSrc, onLoad, onLoadingComplete, placeholder = 'empty', blurDataURL, fetchPriority, decoding = 'async', layout, objectFit, objectPosition, lazyBoundary, lazyRoot, ...rest } = param;\n    const { imgConf, showAltText, blurComplete, defaultLoader } = _state;\n    let config;\n    let c = imgConf || _imageconfig.imageConfigDefault;\n    if ('allSizes' in c) {\n        config = c;\n    } else {\n        var _c_qualities;\n        const allSizes = [\n            ...c.deviceSizes,\n            ...c.imageSizes\n        ].sort((a, b)=>a - b);\n        const deviceSizes = c.deviceSizes.sort((a, b)=>a - b);\n        const qualities = (_c_qualities = c.qualities) == null ? void 0 : _c_qualities.sort((a, b)=>a - b);\n        config = {\n            ...c,\n            allSizes,\n            deviceSizes,\n            qualities\n        };\n    }\n    if (typeof defaultLoader === 'undefined') {\n        throw Object.defineProperty(new Error('images.loaderFile detected but the file is missing default export.\\nRead more: https://nextjs.org/docs/messages/invalid-images-config'), \"__NEXT_ERROR_CODE\", {\n            value: \"E163\",\n            enumerable: false,\n            configurable: true\n        });\n    }\n    let loader = rest.loader || defaultLoader;\n    // Remove property so it's not spread on <img> element\n    delete rest.loader;\n    delete rest.srcSet;\n    // This special value indicates that the user\n    // didn't define a \"loader\" prop or \"loader\" config.\n    const isDefaultLoader = '__next_img_default' in loader;\n    if (isDefaultLoader) {\n        if (config.loader === 'custom') {\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" is missing \"loader\" prop.' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E252\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    } else {\n        // The user defined a \"loader\" prop or config.\n        // Since the config object is internal only, we\n        // must not pass it to the user-defined \"loader\".\n        const customImageLoader = loader;\n        loader = (obj)=>{\n            const { config: _, ...opts } = obj;\n            return customImageLoader(opts);\n        };\n    }\n    if (layout) {\n        if (layout === 'fill') {\n            fill = true;\n        }\n        const layoutToStyle = {\n            intrinsic: {\n                maxWidth: '100%',\n                height: 'auto'\n            },\n            responsive: {\n                width: '100%',\n                height: 'auto'\n            }\n        };\n        const layoutToSizes = {\n            responsive: '100vw',\n            fill: '100vw'\n        };\n        const layoutStyle = layoutToStyle[layout];\n        if (layoutStyle) {\n            style = {\n                ...style,\n                ...layoutStyle\n            };\n        }\n        const layoutSizes = layoutToSizes[layout];\n        if (layoutSizes && !sizes) {\n            sizes = layoutSizes;\n        }\n    }\n    let staticSrc = '';\n    let widthInt = getInt(width);\n    let heightInt = getInt(height);\n    let blurWidth;\n    let blurHeight;\n    if (isStaticImport(src)) {\n        const staticImageData = isStaticRequire(src) ? src.default : src;\n        if (!staticImageData.src) {\n            throw Object.defineProperty(new Error(\"An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received \" + JSON.stringify(staticImageData)), \"__NEXT_ERROR_CODE\", {\n                value: \"E460\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (!staticImageData.height || !staticImageData.width) {\n            throw Object.defineProperty(new Error(\"An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received \" + JSON.stringify(staticImageData)), \"__NEXT_ERROR_CODE\", {\n                value: \"E48\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        blurWidth = staticImageData.blurWidth;\n        blurHeight = staticImageData.blurHeight;\n        blurDataURL = blurDataURL || staticImageData.blurDataURL;\n        staticSrc = staticImageData.src;\n        if (!fill) {\n            if (!widthInt && !heightInt) {\n                widthInt = staticImageData.width;\n                heightInt = staticImageData.height;\n            } else if (widthInt && !heightInt) {\n                const ratio = widthInt / staticImageData.width;\n                heightInt = Math.round(staticImageData.height * ratio);\n            } else if (!widthInt && heightInt) {\n                const ratio = heightInt / staticImageData.height;\n                widthInt = Math.round(staticImageData.width * ratio);\n            }\n        }\n    }\n    src = typeof src === 'string' ? src : staticSrc;\n    let isLazy = !priority && (loading === 'lazy' || typeof loading === 'undefined');\n    if (!src || src.startsWith('data:') || src.startsWith('blob:')) {\n        // https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs\n        unoptimized = true;\n        isLazy = false;\n    }\n    if (config.unoptimized) {\n        unoptimized = true;\n    }\n    if (isDefaultLoader && !config.dangerouslyAllowSVG && src.split('?', 1)[0].endsWith('.svg')) {\n        // Special case to make svg serve as-is to avoid proxying\n        // through the built-in Image Optimization API.\n        unoptimized = true;\n    }\n    const qualityInt = getInt(quality);\n    if (true) {\n        if (config.output === 'export' && isDefaultLoader && !unoptimized) {\n            throw Object.defineProperty(new Error(\"Image Optimization using the default loader is not compatible with `{ output: 'export' }`.\\n  Possible solutions:\\n    - Remove `{ output: 'export' }` and run \\\"next start\\\" to run server mode including the Image Optimization API.\\n    - Configure `{ images: { unoptimized: true } }` in `next.config.js` to disable the Image Optimization API.\\n  Read more: https://nextjs.org/docs/messages/export-image-api\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E500\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (!src) {\n            // React doesn't show the stack trace and there's\n            // no `src` to help identify which image, so we\n            // instead console.error(ref) during mount.\n            unoptimized = true;\n        } else {\n            if (fill) {\n                if (width) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"width\" and \"fill\" properties. Only one should be used.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E96\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if (height) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"height\" and \"fill\" properties. Only one should be used.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E115\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if ((style == null ? void 0 : style.position) && style.position !== 'absolute') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.position\" properties. Images with \"fill\" always use position absolute - it cannot be modified.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E216\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if ((style == null ? void 0 : style.width) && style.width !== '100%') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.width\" properties. Images with \"fill\" always use width 100% - it cannot be modified.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E73\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if ((style == null ? void 0 : style.height) && style.height !== '100%') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"fill\" and \"style.height\" properties. Images with \"fill\" always use height 100% - it cannot be modified.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E404\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            } else {\n                if (typeof widthInt === 'undefined') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" is missing required \"width\" property.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E451\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                } else if (isNaN(widthInt)) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has invalid \"width\" property. Expected a numeric value in pixels but received \"' + width + '\".'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E66\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                if (typeof heightInt === 'undefined') {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" is missing required \"height\" property.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E397\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                } else if (isNaN(heightInt)) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" has invalid \"height\" property. Expected a numeric value in pixels but received \"' + height + '\".'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E444\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                // eslint-disable-next-line no-control-regex\n                if (/^[\\x00-\\x20]/.test(src)) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" cannot start with a space or control character. Use src.trimStart() to remove it or encodeURIComponent(src) to keep it.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E176\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n                // eslint-disable-next-line no-control-regex\n                if (/[\\x00-\\x20]$/.test(src)) {\n                    throw Object.defineProperty(new Error('Image with src \"' + src + '\" cannot end with a space or control character. Use src.trimEnd() to remove it or encodeURIComponent(src) to keep it.'), \"__NEXT_ERROR_CODE\", {\n                        value: \"E21\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            }\n        }\n        if (!VALID_LOADING_VALUES.includes(loading)) {\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" has invalid \"loading\" property. Provided \"' + loading + '\" should be one of ' + VALID_LOADING_VALUES.map(String).join(',') + \".\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E357\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (priority && loading === 'lazy') {\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" has both \"priority\" and \"loading=\\'lazy\\'\" properties. Only one should be used.'), \"__NEXT_ERROR_CODE\", {\n                value: \"E218\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (placeholder !== 'empty' && placeholder !== 'blur' && !placeholder.startsWith('data:image/')) {\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" has invalid \"placeholder\" property \"' + placeholder + '\".'), \"__NEXT_ERROR_CODE\", {\n                value: \"E431\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (placeholder !== 'empty') {\n            if (widthInt && heightInt && widthInt * heightInt < 1600) {\n                (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is smaller than 40x40. Consider removing the \"placeholder\" property to improve performance.');\n            }\n        }\n        if (placeholder === 'blur' && !blurDataURL) {\n            const VALID_BLUR_EXT = [\n                'jpeg',\n                'png',\n                'webp',\n                'avif'\n            ] // should match next-image-loader\n            ;\n            throw Object.defineProperty(new Error('Image with src \"' + src + '\" has \"placeholder=\\'blur\\'\" property but is missing the \"blurDataURL\" property.\\n        Possible solutions:\\n          - Add a \"blurDataURL\" property, the contents should be a small Data URL to represent the image\\n          - Change the \"src\" property to a static import with one of the supported file types: ' + VALID_BLUR_EXT.join(',') + ' (animated images not supported)\\n          - Remove the \"placeholder\" property, effectively no blur effect\\n        Read more: https://nextjs.org/docs/messages/placeholder-blur-data-url'), \"__NEXT_ERROR_CODE\", {\n                value: \"E371\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if ('ref' in rest) {\n            (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is using unsupported \"ref\" property. Consider using the \"onLoad\" property instead.');\n        }\n        if (!unoptimized && !isDefaultLoader) {\n            const urlStr = loader({\n                config,\n                src,\n                width: widthInt || 400,\n                quality: qualityInt || 75\n            });\n            let url;\n            try {\n                url = new URL(urlStr);\n            } catch (err) {}\n            if (urlStr === src || url && url.pathname === src && !url.search) {\n                (0, _warnonce.warnOnce)('Image with src \"' + src + '\" has a \"loader\" property that does not implement width. Please implement it or use the \"unoptimized\" property instead.' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader-width\");\n            }\n        }\n        if (onLoadingComplete) {\n            (0, _warnonce.warnOnce)('Image with src \"' + src + '\" is using deprecated \"onLoadingComplete\" property. Please use the \"onLoad\" property instead.');\n        }\n        for (const [legacyKey, legacyValue] of Object.entries({\n            layout,\n            objectFit,\n            objectPosition,\n            lazyBoundary,\n            lazyRoot\n        })){\n            if (legacyValue) {\n                (0, _warnonce.warnOnce)('Image with src \"' + src + '\" has legacy prop \"' + legacyKey + '\". Did you forget to run the codemod?' + \"\\nRead more: https://nextjs.org/docs/messages/next-image-upgrade-to-13\");\n            }\n        }\n        if ( true && !perfObserver && window.PerformanceObserver) {\n            perfObserver = new PerformanceObserver((entryList)=>{\n                for (const entry of entryList.getEntries()){\n                    var _entry_element;\n                    // @ts-ignore - missing \"LargestContentfulPaint\" class with \"element\" prop\n                    const imgSrc = (entry == null ? void 0 : (_entry_element = entry.element) == null ? void 0 : _entry_element.src) || '';\n                    const lcpImage = allImgs.get(imgSrc);\n                    if (lcpImage && !lcpImage.priority && lcpImage.placeholder === 'empty' && !lcpImage.src.startsWith('data:') && !lcpImage.src.startsWith('blob:')) {\n                        // https://web.dev/lcp/#measure-lcp-in-javascript\n                        (0, _warnonce.warnOnce)('Image with src \"' + lcpImage.src + '\" was detected as the Largest Contentful Paint (LCP). Please add the \"priority\" property if this image is above the fold.' + \"\\nRead more: https://nextjs.org/docs/api-reference/next/image#priority\");\n                    }\n                }\n            });\n            try {\n                perfObserver.observe({\n                    type: 'largest-contentful-paint',\n                    buffered: true\n                });\n            } catch (err) {\n                // Log error but don't crash the app\n                console.error(err);\n            }\n        }\n    }\n    const imgStyle = Object.assign(fill ? {\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        objectFit,\n        objectPosition\n    } : {}, showAltText ? {} : {\n        color: 'transparent'\n    }, style);\n    const backgroundImage = !blurComplete && placeholder !== 'empty' ? placeholder === 'blur' ? 'url(\"data:image/svg+xml;charset=utf-8,' + (0, _imageblursvg.getImageBlurSvg)({\n        widthInt,\n        heightInt,\n        blurWidth,\n        blurHeight,\n        blurDataURL: blurDataURL || '',\n        objectFit: imgStyle.objectFit\n    }) + '\")' : 'url(\"' + placeholder + '\")' // assume `data:image/`\n     : null;\n    let placeholderStyle = backgroundImage ? {\n        backgroundSize: imgStyle.objectFit || 'cover',\n        backgroundPosition: imgStyle.objectPosition || '50% 50%',\n        backgroundRepeat: 'no-repeat',\n        backgroundImage\n    } : {};\n    if (true) {\n        if (placeholderStyle.backgroundImage && placeholder === 'blur' && (blurDataURL == null ? void 0 : blurDataURL.startsWith('/'))) {\n            // During `next dev`, we don't want to generate blur placeholders with webpack\n            // because it can delay starting the dev server. Instead, `next-image-loader.js`\n            // will inline a special url to lazily generate the blur placeholder at request time.\n            placeholderStyle.backgroundImage = 'url(\"' + blurDataURL + '\")';\n        }\n    }\n    const imgAttributes = generateImgAttrs({\n        config,\n        src,\n        unoptimized,\n        width: widthInt,\n        quality: qualityInt,\n        sizes,\n        loader\n    });\n    if (true) {\n        if (true) {\n            let fullUrl;\n            try {\n                fullUrl = new URL(imgAttributes.src);\n            } catch (e) {\n                fullUrl = new URL(imgAttributes.src, window.location.href);\n            }\n            allImgs.set(fullUrl.href, {\n                src,\n                priority,\n                placeholder\n            });\n        }\n    }\n    const props = {\n        ...rest,\n        loading: isLazy ? 'lazy' : loading,\n        fetchPriority,\n        width: widthInt,\n        height: heightInt,\n        decoding,\n        className,\n        style: {\n            ...imgStyle,\n            ...placeholderStyle\n        },\n        sizes: imgAttributes.sizes,\n        srcSet: imgAttributes.srcSet,\n        src: overrideSrc || imgAttributes.src\n    };\n    const meta = {\n        unoptimized,\n        priority,\n        placeholder,\n        fill\n    };\n    return {\n        props,\n        meta\n    };\n} //# sourceMappingURL=get-img-props.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/get-img-props.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/head.js":
/*!***************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/head.js ***!
  \***************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return _default;\n    },\n    defaultHead: function() {\n        return defaultHead;\n    }\n});\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _sideeffect = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! ./side-effect */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/side-effect.js\"));\nconst _ampcontextsharedruntime = __webpack_require__(/*! ./amp-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-context.shared-runtime.js\");\nconst _headmanagercontextsharedruntime = __webpack_require__(/*! ./head-manager-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.js\");\nconst _ampmode = __webpack_require__(/*! ./amp-mode */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/amp-mode.js\");\nconst _warnonce = __webpack_require__(/*! ./utils/warn-once */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/utils/warn-once.js\");\nfunction defaultHead(inAmpMode) {\n    if (inAmpMode === void 0) inAmpMode = false;\n    const head = [\n        /*#__PURE__*/ (0, _jsxruntime.jsx)(\"meta\", {\n            charSet: \"utf-8\"\n        }, \"charset\")\n    ];\n    if (!inAmpMode) {\n        head.push(/*#__PURE__*/ (0, _jsxruntime.jsx)(\"meta\", {\n            name: \"viewport\",\n            content: \"width=device-width\"\n        }, \"viewport\"));\n    }\n    return head;\n}\nfunction onlyReactElement(list, child) {\n    // React children can be \"string\" or \"number\" in this case we ignore them for backwards compat\n    if (typeof child === 'string' || typeof child === 'number') {\n        return list;\n    }\n    // Adds support for React.Fragment\n    if (child.type === _react.default.Fragment) {\n        return list.concat(_react.default.Children.toArray(child.props.children).reduce((fragmentList, fragmentChild)=>{\n            if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {\n                return fragmentList;\n            }\n            return fragmentList.concat(fragmentChild);\n        }, []));\n    }\n    return list.concat(child);\n}\nconst METATYPES = [\n    'name',\n    'httpEquiv',\n    'charSet',\n    'itemProp'\n];\n/*\n returns a function for filtering head child elements\n which shouldn't be duplicated, like <title/>\n Also adds support for deduplicated `key` properties\n*/ function unique() {\n    const keys = new Set();\n    const tags = new Set();\n    const metaTypes = new Set();\n    const metaCategories = {};\n    return (h)=>{\n        let isUnique = true;\n        let hasKey = false;\n        if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {\n            hasKey = true;\n            const key = h.key.slice(h.key.indexOf('$') + 1);\n            if (keys.has(key)) {\n                isUnique = false;\n            } else {\n                keys.add(key);\n            }\n        }\n        // eslint-disable-next-line default-case\n        switch(h.type){\n            case 'title':\n            case 'base':\n                if (tags.has(h.type)) {\n                    isUnique = false;\n                } else {\n                    tags.add(h.type);\n                }\n                break;\n            case 'meta':\n                for(let i = 0, len = METATYPES.length; i < len; i++){\n                    const metatype = METATYPES[i];\n                    if (!h.props.hasOwnProperty(metatype)) continue;\n                    if (metatype === 'charSet') {\n                        if (metaTypes.has(metatype)) {\n                            isUnique = false;\n                        } else {\n                            metaTypes.add(metatype);\n                        }\n                    } else {\n                        const category = h.props[metatype];\n                        const categories = metaCategories[metatype] || new Set();\n                        if ((metatype !== 'name' || !hasKey) && categories.has(category)) {\n                            isUnique = false;\n                        } else {\n                            categories.add(category);\n                            metaCategories[metatype] = categories;\n                        }\n                    }\n                }\n                break;\n        }\n        return isUnique;\n    };\n}\n/**\n *\n * @param headChildrenElements List of children of <Head>\n */ function reduceComponents(headChildrenElements, props) {\n    const { inAmpMode } = props;\n    return headChildrenElements.reduce(onlyReactElement, []).reverse().concat(defaultHead(inAmpMode).reverse()).filter(unique()).reverse().map((c, i)=>{\n        const key = c.key || i;\n        if (false) {}\n        if (true) {\n            // omit JSON-LD structured data snippets from the warning\n            if (c.type === 'script' && c.props['type'] !== 'application/ld+json') {\n                const srcMessage = c.props['src'] ? '<script> tag with src=\"' + c.props['src'] + '\"' : \"inline <script>\";\n                (0, _warnonce.warnOnce)(\"Do not add <script> tags using next/head (see \" + srcMessage + \"). Use next/script instead. \\nSee more info here: https://nextjs.org/docs/messages/no-script-tags-in-head-component\");\n            } else if (c.type === 'link' && c.props['rel'] === 'stylesheet') {\n                (0, _warnonce.warnOnce)('Do not add stylesheets using next/head (see <link rel=\"stylesheet\"> tag with href=\"' + c.props['href'] + '\"). Use Document instead. \\nSee more info here: https://nextjs.org/docs/messages/no-stylesheets-in-head-component');\n            }\n        }\n        return /*#__PURE__*/ _react.default.cloneElement(c, {\n            key\n        });\n    });\n}\n/**\n * This component injects elements to `<head>` of your page.\n * To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.\n */ function Head(param) {\n    let { children } = param;\n    const ampState = (0, _react.useContext)(_ampcontextsharedruntime.AmpStateContext);\n    const headManager = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);\n    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_sideeffect.default, {\n        reduceComponentsToState: reduceComponents,\n        headManager: headManager,\n        inAmpMode: (0, _ampmode.isInAmpMode)(ampState),\n        children: children\n    });\n}\n_c = Head;\nconst _default = Head;\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n    Object.defineProperty(exports.default, '__esModule', {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=head.js.map\nvar _c;\n$RefreshReg$(_c, \"Head\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9oZWFkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQXVNQSxPQUFtQjtlQUFuQjs7SUExTGdCQSxXQUFXO2VBQVhBOzs7Ozs7NkVBWDRCO2lGQUN6QjtxREFDYTs2REFDRztxQ0FDUDtzQ0FDSDtBQU1sQixTQUFTQSxZQUFZQyxTQUFpQjtJQUFqQkEsSUFBQUEsY0FBQUEsS0FBQUEsR0FBQUEsWUFBWTtJQUN0QyxNQUFNQyxPQUFPO3NCQUFDLHFCQUFDQyxRQUFBQTtZQUFLQyxTQUFRO1dBQVk7S0FBYTtJQUNyRCxJQUFJLENBQUNILFdBQVc7UUFDZEMsS0FBS0csSUFBSSxlQUNQLHFCQUFDRixRQUFBQTtZQUFLRyxNQUFLO1lBQVdDLFNBQVE7V0FBeUI7SUFFM0Q7SUFDQSxPQUFPTDtBQUNUO0FBRUEsU0FBU00saUJBQ1BDLElBQW9DLEVBQ3BDQyxLQUEyQztJQUUzQyw4RkFBOEY7SUFDOUYsSUFBSSxPQUFPQSxVQUFVLFlBQVksT0FBT0EsVUFBVSxVQUFVO1FBQzFELE9BQU9EO0lBQ1Q7SUFDQSxrQ0FBa0M7SUFDbEMsSUFBSUMsTUFBTUMsSUFBSSxLQUFLQyxPQUFBQSxPQUFLLENBQUNDLFFBQVEsRUFBRTtRQUNqQyxPQUFPSixLQUFLSyxNQUFNLENBQ2hCLE9BQ0FGLE9BQUssQ0FBQ0csUUFBUSxDQUFDQyxPQUFPLENBQUNOLE1BQU1PLEtBQUssQ0FBQ0MsUUFBUSxFQUFFQyxNQUFNLENBQ2pELENBRUVDLGNBQ0FDO1lBRUEsSUFDRSxPQUFPQSxrQkFBa0IsWUFDekIsT0FBT0Esa0JBQWtCLFVBQ3pCO2dCQUNBLE9BQU9EO1lBQ1Q7WUFDQSxPQUFPQSxhQUFhTixNQUFNLENBQUNPO1FBQzdCLEdBQ0EsRUFBRTtJQUdSO0lBQ0EsT0FBT1osS0FBS0ssTUFBTSxDQUFDSjtBQUNyQjtBQUVBLE1BQU1ZLFlBQVk7SUFBQztJQUFRO0lBQWE7SUFBVztDQUFX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LENBQUMsTUFBTSxLQUFLLGNBQWM7Z0JBQy9ENEMsQ0FBQUEsR0FBQUEsVUFBQUEsUUFBQUEsRUFDRyx3RkFBcUZaLEVBQUVoQyxLQUFLLENBQUMsT0FBTyxHQUFDO1lBRTFHO1FBQ0Y7UUFDQSxxQkFBT0wsT0FBQUEsT0FBSyxDQUFDK0MsWUFBWSxDQUFDVixHQUFHO1lBQUVqQjtRQUFJO0lBQ3JDO0FBQ0o7QUFFQTs7O0NBR0MsR0FDRCxjQUFjLEtBQTJDO0lBQTNDLE1BQUVkLFFBQVEsRUFBaUMsR0FBM0M7SUFDWixNQUFNNkMsV0FBV0MsQ0FBQUEsR0FBQUEsT0FBQUEsVUFBQUEsRUFBV0MseUJBQUFBLGVBQWU7SUFDM0MsTUFBTUMsY0FBY0YsQ0FBQUEsR0FBQUEsT0FBQUEsVUFBQUEsRUFBV0csaUNBQUFBLGtCQUFrQjtJQUNqRCxxQkFDRSxxQkFBQ0MsWUFBQUEsT0FBTTtRQUNMQyx5QkFBeUJ6QjtRQUN6QnNCLGFBQWFBO1FBQ2JqRSxXQUFXcUUsQ0FBQUEsR0FBQUEsU0FBQUEsV0FBQUEsRUFBWVA7a0JBRXRCN0M7O0FBR1A7S0FaUzRDO01BY1QsV0FBZUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcmMvc2hhcmVkL2xpYi9oZWFkLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHR5cGUgSlNYIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgRWZmZWN0IGZyb20gJy4vc2lkZS1lZmZlY3QnXG5pbXBvcnQgeyBBbXBTdGF0ZUNvbnRleHQgfSBmcm9tICcuL2FtcC1jb250ZXh0LnNoYXJlZC1ydW50aW1lJ1xuaW1wb3J0IHsgSGVhZE1hbmFnZXJDb250ZXh0IH0gZnJvbSAnLi9oZWFkLW1hbmFnZXItY29udGV4dC5zaGFyZWQtcnVudGltZSdcbmltcG9ydCB7IGlzSW5BbXBNb2RlIH0gZnJvbSAnLi9hbXAtbW9kZSdcbmltcG9ydCB7IHdhcm5PbmNlIH0gZnJvbSAnLi91dGlscy93YXJuLW9uY2UnXG5cbnR5cGUgV2l0aEluQW1wTW9kZSA9IHtcbiAgaW5BbXBNb2RlPzogYm9vbGVhblxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEhlYWQoaW5BbXBNb2RlID0gZmFsc2UpOiBKU1guRWxlbWVudFtdIHtcbiAgY29uc3QgaGVhZCA9IFs8bWV0YSBjaGFyU2V0PVwidXRmLThcIiBrZXk9XCJjaGFyc2V0XCIgLz5dXG4gIGlmICghaW5BbXBNb2RlKSB7XG4gICAgaGVhZC5wdXNoKFxuICAgICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aFwiIGtleT1cInZpZXdwb3J0XCIgLz5cbiAgICApXG4gIH1cbiAgcmV0dXJuIGhlYWRcbn1cblxuZnVuY3Rpb24gb25seVJlYWN0RWxlbWVudChcbiAgbGlzdDogQXJyYXk8UmVhY3QuUmVhY3RFbGVtZW50PGFueT4+LFxuICBjaGlsZDogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVtYmVyIHwgc3RyaW5nXG4pOiBBcnJheTxSZWFjdC5SZWFjdEVsZW1lbnQ8YW55Pj4ge1xuICAvLyBSZWFjdCBjaGlsZHJlbiBjYW4gYmUgXCJzdHJpbmdcIiBvciBcIm51bWJlclwiIGluIHRoaXMgY2FzZSB3ZSBpZ25vcmUgdGhlbSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGxpc3RcbiAgfVxuICAvLyBBZGRzIHN1cHBvcnQgZm9yIFJlYWN0LkZyYWdtZW50XG4gIGlmIChjaGlsZC50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgIHJldHVybiBsaXN0LmNvbmNhdChcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgQHR5cGVzL3JlYWN0IGRvZXMgbm90IHJlbW92ZSBmcmFnbWVudHMgYnV0IHRoaXMgY291bGQgYWxzbyByZXR1cm4gUmVhY3RQb3J0YWxbXVxuICAgICAgUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZC5wcm9wcy5jaGlsZHJlbikucmVkdWNlKFxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIEB0eXBlcy9yZWFjdCBkb2VzIG5vdCByZW1vdmUgZnJhZ21lbnRzIGJ1dCB0aGlzIGNvdWxkIGFsc28gcmV0dXJuIFJlYWN0UG9ydGFsW11cbiAgICAgICAgKFxuICAgICAgICAgIGZyYWdtZW50TGlzdDogQXJyYXk8UmVhY3QuUmVhY3RFbGVtZW50PGFueT4+LFxuICAgICAgICAgIGZyYWdtZW50Q2hpbGQ6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bWJlciB8IHN0cmluZ1xuICAgICAgICApOiBBcnJheTxSZWFjdC5SZWFjdEVsZW1lbnQ8YW55Pj4gPT4ge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBmcmFnbWVudENoaWxkID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgdHlwZW9mIGZyYWdtZW50Q2hpbGQgPT09ICdudW1iZXInXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJhZ21lbnRMaXN0XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmcmFnbWVudExpc3QuY29uY2F0KGZyYWdtZW50Q2hpbGQpXG4gICAgICAgIH0sXG4gICAgICAgIFtdXG4gICAgICApXG4gICAgKVxuICB9XG4gIHJldHVybiBsaXN0LmNvbmNhdChjaGlsZClcbn1cblxuY29uc3QgTUVUQVRZUEVTID0gWyduYW1lJywgJ2h0dHBFcXVpdicsICdjaGFyU2V0JywgJ2l0ZW1Qcm9wJ11cblxuLypcbiByZXR1cm5zIGEgZnVuY3Rpb24gZm9yIGZpbHRlcmluZyBoZWFkIGNoaWxkIGVsZW1lbnRzXG4gd2hpY2ggc2hvdWxkbid0IGJlIGR1cGxpY2F0ZWQsIGxpa2UgPHRpdGxlLz5cbiBBbHNvIGFkZHMgc3VwcG9ydCBmb3IgZGVkdXBsaWNhdGVkIGBrZXlgIHByb3BlcnRpZXNcbiovXG5mdW5jdGlvbiB1bmlxdWUoKSB7XG4gIGNvbnN0IGtleXMgPSBuZXcgU2V0KClcbiAgY29uc3QgdGFncyA9IG5ldyBTZXQoKVxuICBjb25zdCBtZXRhVHlwZXMgPSBuZXcgU2V0KClcbiAgY29uc3QgbWV0YUNhdGVnb3JpZXM6IHsgW21ldGF0eXBlOiBzdHJpbmddOiBTZXQ8c3RyaW5nPiB9ID0ge31cblxuICByZXR1cm4gKGg6IFJlYWN0LlJlYWN0RWxlbWVudDxhbnk+KSA9PiB7XG4gICAgbGV0IGlzVW5pcXVlID0gdHJ1ZVxuICAgIGxldCBoYXNLZXkgPSBmYWxzZVxuXG4gICAgaWYgKGgua2V5ICYmIHR5cGVvZiBoLmtleSAhPT0gJ251bWJlcicgJiYgaC5rZXkuaW5kZXhPZignJCcpID4gMCkge1xuICAgICAgaGFzS2V5ID0gdHJ1ZVxuICAgICAgY29uc3Qga2V5ID0gaC5rZXkuc2xpY2UoaC5rZXkuaW5kZXhPZignJCcpICsgMSlcbiAgICAgIGlmIChrZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgIGlzVW5pcXVlID0gZmFsc2VcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMuYWRkKGtleSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXG4gICAgc3dpdGNoIChoLnR5cGUpIHtcbiAgICAgIGNhc2UgJ3RpdGxlJzpcbiAgICAgIGNhc2UgJ2Jhc2UnOlxuICAgICAgICBpZiAodGFncy5oYXMoaC50eXBlKSkge1xuICAgICAgICAgIGlzVW5pcXVlID0gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YWdzLmFkZChoLnR5cGUpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ21ldGEnOlxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gTUVUQVRZUEVTLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgbWV0YXR5cGUgPSBNRVRBVFlQRVNbaV1cbiAgICAgICAgICBpZiAoIWgucHJvcHMuaGFzT3duUHJvcGVydHkobWV0YXR5cGUpKSBjb250aW51ZVxuXG4gICAgICAgICAgaWYgKG1ldGF0eXBlID09PSAnY2hhclNldCcpIHtcbiAgICAgICAgICAgIGlmIChtZXRhVHlwZXMuaGFzKG1ldGF0eXBlKSkge1xuICAgICAgICAgICAgICBpc1VuaXF1ZSA9IGZhbHNlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtZXRhVHlwZXMuYWRkKG1ldGF0eXBlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBjYXRlZ29yeSA9IGgucHJvcHNbbWV0YXR5cGVdXG4gICAgICAgICAgICBjb25zdCBjYXRlZ29yaWVzID0gbWV0YUNhdGVnb3JpZXNbbWV0YXR5cGVdIHx8IG5ldyBTZXQoKVxuICAgICAgICAgICAgaWYgKChtZXRhdHlwZSAhPT0gJ25hbWUnIHx8ICFoYXNLZXkpICYmIGNhdGVnb3JpZXMuaGFzKGNhdGVnb3J5KSkge1xuICAgICAgICAgICAgICBpc1VuaXF1ZSA9IGZhbHNlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjYXRlZ29yaWVzLmFkZChjYXRlZ29yeSlcbiAgICAgICAgICAgICAgbWV0YUNhdGVnb3JpZXNbbWV0YXR5cGVdID0gY2F0ZWdvcmllc1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIHJldHVybiBpc1VuaXF1ZVxuICB9XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBoZWFkQ2hpbGRyZW5FbGVtZW50cyBMaXN0IG9mIGNoaWxkcmVuIG9mIDxIZWFkPlxuICovXG5mdW5jdGlvbiByZWR1Y2VDb21wb25lbnRzPFQgZXh0ZW5kcyB7fSAmIFdpdGhJbkFtcE1vZGU+KFxuICBoZWFkQ2hpbGRyZW5FbGVtZW50czogQXJyYXk8UmVhY3QuUmVhY3RFbGVtZW50PGFueT4+LFxuICBwcm9wczogVFxuKSB7XG4gIGNvbnN0IHsgaW5BbXBNb2RlIH0gPSBwcm9wc1xuICByZXR1cm4gaGVhZENoaWxkcmVuRWxlbWVudHNcbiAgICAucmVkdWNlKG9ubHlSZWFjdEVsZW1lbnQsIFtdKVxuICAgIC5yZXZlcnNlKClcbiAgICAuY29uY2F0KGRlZmF1bHRIZWFkKGluQW1wTW9kZSkucmV2ZXJzZSgpKVxuICAgIC5maWx0ZXIodW5pcXVlKCkpXG4gICAgLnJldmVyc2UoKVxuICAgIC5tYXAoKGM6IFJlYWN0LlJlYWN0RWxlbWVudDxhbnk+LCBpOiBudW1iZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IGMua2V5IHx8IGlcbiAgICAgIGlmIChcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdkZXZlbG9wbWVudCcgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuX19ORVhUX09QVElNSVpFX0ZPTlRTICYmXG4gICAgICAgICFpbkFtcE1vZGVcbiAgICAgICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgYy50eXBlID09PSAnbGluaycgJiZcbiAgICAgICAgICBjLnByb3BzWydocmVmJ10gJiZcbiAgICAgICAgICAvLyBUT0RPKHByYXRlZWtiaEApOiBSZXBsYWNlIHRoaXMgd2l0aCBjb25zdCBmcm9tIGBjb25zdGFudHNgIHdoZW4gdGhlIHRyZWUgc2hha2luZyB3b3Jrcy5cbiAgICAgICAgICBbJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzJywgJ2h0dHBzOi8vdXNlLnR5cGVraXQubmV0LyddLnNvbWUoXG4gICAgICAgICAgICAodXJsKSA9PiBjLnByb3BzWydocmVmJ10uc3RhcnRzV2l0aCh1cmwpXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBuZXdQcm9wcyA9IHsgLi4uKGMucHJvcHMgfHwge30pIH1cbiAgICAgICAgICBuZXdQcm9wc1snZGF0YS1ocmVmJ10gPSBuZXdQcm9wc1snaHJlZiddXG4gICAgICAgICAgbmV3UHJvcHNbJ2hyZWYnXSA9IHVuZGVmaW5lZFxuXG4gICAgICAgICAgLy8gQWRkIHRoaXMgYXR0cmlidXRlIHRvIG1ha2UgaXQgZWFzeSB0byBpZGVudGlmeSBvcHRpbWl6ZWQgdGFnc1xuICAgICAgICAgIG5ld1Byb3BzWydkYXRhLW9wdGltaXplZC1mb250cyddID0gdHJ1ZVxuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjLCBuZXdQcm9wcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgIC8vIG9taXQgSlNPTi1MRCBzdHJ1Y3R1cmVkIGRhdGEgc25pcHBldHMgZnJvbSB0aGUgd2FybmluZ1xuICAgICAgICBpZiAoYy50eXBlID09PSAnc2NyaXB0JyAmJiBjLnByb3BzWyd0eXBlJ10gIT09ICdhcHBsaWNhdGlvbi9sZCtqc29uJykge1xuICAgICAgICAgIGNvbnN0IHNyY01lc3NhZ2UgPSBjLnByb3BzWydzcmMnXVxuICAgICAgICAgICAgPyBgPHNjcmlwdD4gdGFnIHdpdGggc3JjPVwiJHtjLnByb3BzWydzcmMnXX1cImBcbiAgICAgICAgICAgIDogYGlubGluZSA8c2NyaXB0PmBcbiAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgIGBEbyBub3QgYWRkIDxzY3JpcHQ+IHRhZ3MgdXNpbmcgbmV4dC9oZWFkIChzZWUgJHtzcmNNZXNzYWdlfSkuIFVzZSBuZXh0L3NjcmlwdCBpbnN0ZWFkLiBcXG5TZWUgbW9yZSBpbmZvIGhlcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL25vLXNjcmlwdC10YWdzLWluLWhlYWQtY29tcG9uZW50YFxuICAgICAgICAgIClcbiAgICAgICAgfSBlbHNlIGlmIChjLnR5cGUgPT09ICdsaW5rJyAmJiBjLnByb3BzWydyZWwnXSA9PT0gJ3N0eWxlc2hlZXQnKSB7XG4gICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICBgRG8gbm90IGFkZCBzdHlsZXNoZWV0cyB1c2luZyBuZXh0L2hlYWQgKHNlZSA8bGluayByZWw9XCJzdHlsZXNoZWV0XCI+IHRhZyB3aXRoIGhyZWY9XCIke2MucHJvcHNbJ2hyZWYnXX1cIikuIFVzZSBEb2N1bWVudCBpbnN0ZWFkLiBcXG5TZWUgbW9yZSBpbmZvIGhlcmU6IGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL21lc3NhZ2VzL25vLXN0eWxlc2hlZXRzLWluLWhlYWQtY29tcG9uZW50YFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjLCB7IGtleSB9KVxuICAgIH0pXG59XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgaW5qZWN0cyBlbGVtZW50cyB0byBgPGhlYWQ+YCBvZiB5b3VyIHBhZ2UuXG4gKiBUbyBhdm9pZCBkdXBsaWNhdGVkIGB0YWdzYCBpbiBgPGhlYWQ+YCB5b3UgY2FuIHVzZSB0aGUgYGtleWAgcHJvcGVydHksIHdoaWNoIHdpbGwgbWFrZSBzdXJlIGV2ZXJ5IHRhZyBpcyBvbmx5IHJlbmRlcmVkIG9uY2UuXG4gKi9cbmZ1bmN0aW9uIEhlYWQoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfSkge1xuICBjb25zdCBhbXBTdGF0ZSA9IHVzZUNvbnRleHQoQW1wU3RhdGVDb250ZXh0KVxuICBjb25zdCBoZWFkTWFuYWdlciA9IHVzZUNvbnRleHQoSGVhZE1hbmFnZXJDb250ZXh0KVxuICByZXR1cm4gKFxuICAgIDxFZmZlY3RcbiAgICAgIHJlZHVjZUNvbXBvbmVudHNUb1N0YXRlPXtyZWR1Y2VDb21wb25lbnRzfVxuICAgICAgaGVhZE1hbmFnZXI9e2hlYWRNYW5hZ2VyfVxuICAgICAgaW5BbXBNb2RlPXtpc0luQW1wTW9kZShhbXBTdGF0ZSl9XG4gICAgPlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvRWZmZWN0PlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRcbiJdLCJuYW1lcyI6WyJkZWZhdWx0SGVhZCIsImluQW1wTW9kZSIsImhlYWQiLCJtZXRhIiwiY2hhclNldCIsInB1c2giLCJuYW1lIiwiY29udGVudCIsIm9ubHlSZWFjdEVsZW1lbnQiLCJsaXN0IiwiY2hpbGQiLCJ0eXBlIiwiUmVhY3QiLCJGcmFnbWVudCIsImNvbmNhdCIsIkNoaWxkcmVuIiwidG9BcnJheSIsInByb3BzIiwiY2hpbGRyZW4iLCJyZWR1Y2UiLCJmcmFnbWVudExpc3QiLCJmcmFnbWVudENoaWxkIiwiTUVUQVRZUEVTIiwidW5pcXVlIiwia2V5cyIsIlNldCIsInRhZ3MiLCJtZXRhVHlwZXMiLCJtZXRhQ2F0ZWdvcmllcyIsImgiLCJpc1VuaXF1ZSIsImhhc0tleSIsImtleSIsImluZGV4T2YiLCJzbGljZSIsImhhcyIsImFkZCIsImkiLCJsZW4iLCJsZW5ndGgiLCJtZXRhdHlwZSIsImhhc093blByb3BlcnR5IiwiY2F0ZWdvcnkiLCJjYXRlZ29yaWVzIiwicmVkdWNlQ29tcG9uZW50cyIsImhlYWRDaGlsZHJlbkVsZW1lbnRzIiwicmV2ZXJzZSIsImZpbHRlciIsIm1hcCIsImMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJfX05FWFRfT1BUSU1JWkVfRk9OVFMiLCJzb21lIiwidXJsIiwic3RhcnRzV2l0aCIsIm5ld1Byb3BzIiwidW5kZWZpbmVkIiwiY2xvbmVFbGVtZW50Iiwic3JjTWVzc2FnZSIsIndhcm5PbmNlIiwiSGVhZCIsImFtcFN0YXRlIiwidXNlQ29udGV4dCIsIkFtcFN0YXRlQ29udGV4dCIsImhlYWRNYW5hZ2VyIiwiSGVhZE1hbmFnZXJDb250ZXh0IiwiRWZmZWN0IiwicmVkdWNlQ29tcG9uZW50c1RvU3RhdGUiLCJpc0luQW1wTW9kZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/head.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-blur-svg.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-blur-svg.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * A shared function, used on both client and server, to generate a SVG blur placeholder.\n */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getImageBlurSvg\", ({\n    enumerable: true,\n    get: function() {\n        return getImageBlurSvg;\n    }\n}));\nfunction getImageBlurSvg(param) {\n    let { widthInt, heightInt, blurWidth, blurHeight, blurDataURL, objectFit } = param;\n    const std = 20;\n    const svgWidth = blurWidth ? blurWidth * 40 : widthInt;\n    const svgHeight = blurHeight ? blurHeight * 40 : heightInt;\n    const viewBox = svgWidth && svgHeight ? \"viewBox='0 0 \" + svgWidth + \" \" + svgHeight + \"'\" : '';\n    const preserveAspectRatio = viewBox ? 'none' : objectFit === 'contain' ? 'xMidYMid' : objectFit === 'cover' ? 'xMidYMid slice' : 'none';\n    return \"%3Csvg xmlns='http://www.w3.org/2000/svg' \" + viewBox + \"%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='\" + std + \"'/%3E%3CfeColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 100 -1' result='s'/%3E%3CfeFlood x='0' y='0' width='100%25' height='100%25'/%3E%3CfeComposite operator='out' in='s'/%3E%3CfeComposite in2='SourceGraphic'/%3E%3CfeGaussianBlur stdDeviation='\" + std + \"'/%3E%3C/filter%3E%3Cimage width='100%25' height='100%25' x='0' y='0' preserveAspectRatio='\" + preserveAspectRatio + \"' style='filter: url(%23b);' href='\" + blurDataURL + \"'/%3E%3C/svg%3E\";\n} //# sourceMappingURL=image-blur-svg.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pbWFnZS1ibHVyLXN2Zy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7Q0FFQzs7OzttREFDZUE7OztlQUFBQTs7O0FBQVQsU0FBU0EsZ0JBQWdCLEtBYy9CO0lBZCtCLE1BQzlCQyxRQUFRLEVBQ1JDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyxVQUFVLEVBQ1ZDLFdBQVcsRUFDWEMsU0FBUyxFQVFWLEdBZCtCO0lBZTlCLE1BQU1DLE1BQU07SUFDWixNQUFNQyxXQUFXTCxZQUFZQSxZQUFZLEtBQUtGO0lBQzlDLE1BQU1RLFlBQVlMLGFBQWFBLGFBQWEsS0FBS0Y7SUFFakQsTUFBTVEsVUFDSkYsWUFBWUMsWUFBYSxrQkFBZUQsV0FBUyxNQUFHQyxZQUFVLE1BQUs7SUFDckUsTUFBTUUsc0JBQXNCRCxVQUN4QixTQUNBSixjQUFjLFlBQ1osYUFDQUEsY0FBYyxVQUNaLG1CQUNBO0lBRVIsT0FBUSwrQ0FBNENJLFVBQVEsOEZBQTJGSCxNQUFJLG9RQUFpUUEsTUFBSSxnR0FBNkZJLHNCQUFvQix3Q0FBcUNOLGNBQVk7QUFDcGtCIiwic291cmNlcyI6WyIvVXNlcnMvc3JjL3NoYXJlZC9saWIvaW1hZ2UtYmx1ci1zdmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIHNoYXJlZCBmdW5jdGlvbiwgdXNlZCBvbiBib3RoIGNsaWVudCBhbmQgc2VydmVyLCB0byBnZW5lcmF0ZSBhIFNWRyBibHVyIHBsYWNlaG9sZGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1hZ2VCbHVyU3ZnKHtcbiAgd2lkdGhJbnQsXG4gIGhlaWdodEludCxcbiAgYmx1cldpZHRoLFxuICBibHVySGVpZ2h0LFxuICBibHVyRGF0YVVSTCxcbiAgb2JqZWN0Rml0LFxufToge1xuICB3aWR0aEludD86IG51bWJlclxuICBoZWlnaHRJbnQ/OiBudW1iZXJcbiAgYmx1cldpZHRoPzogbnVtYmVyXG4gIGJsdXJIZWlnaHQ/OiBudW1iZXJcbiAgYmx1ckRhdGFVUkw6IHN0cmluZ1xuICBvYmplY3RGaXQ/OiBzdHJpbmdcbn0pOiBzdHJpbmcge1xuICBjb25zdCBzdGQgPSAyMFxuICBjb25zdCBzdmdXaWR0aCA9IGJsdXJXaWR0aCA/IGJsdXJXaWR0aCAqIDQwIDogd2lkdGhJbnRcbiAgY29uc3Qgc3ZnSGVpZ2h0ID0gYmx1ckhlaWdodCA/IGJsdXJIZWlnaHQgKiA0MCA6IGhlaWdodEludFxuXG4gIGNvbnN0IHZpZXdCb3ggPVxuICAgIHN2Z1dpZHRoICYmIHN2Z0hlaWdodCA/IGB2aWV3Qm94PScwIDAgJHtzdmdXaWR0aH0gJHtzdmdIZWlnaHR9J2AgOiAnJ1xuICBjb25zdCBwcmVzZXJ2ZUFzcGVjdFJhdGlvID0gdmlld0JveFxuICAgID8gJ25vbmUnXG4gICAgOiBvYmplY3RGaXQgPT09ICdjb250YWluJ1xuICAgICAgPyAneE1pZFlNaWQnXG4gICAgICA6IG9iamVjdEZpdCA9PT0gJ2NvdmVyJ1xuICAgICAgICA/ICd4TWlkWU1pZCBzbGljZSdcbiAgICAgICAgOiAnbm9uZSdcblxuICByZXR1cm4gYCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnICR7dmlld0JveH0lM0UlM0NmaWx0ZXIgaWQ9J2InIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycz0nc1JHQiclM0UlM0NmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249JyR7c3RkfScvJTNFJTNDZmVDb2xvck1hdHJpeCB2YWx1ZXM9JzEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEwMCAtMScgcmVzdWx0PSdzJy8lM0UlM0NmZUZsb29kIHg9JzAnIHk9JzAnIHdpZHRoPScxMDAlMjUnIGhlaWdodD0nMTAwJTI1Jy8lM0UlM0NmZUNvbXBvc2l0ZSBvcGVyYXRvcj0nb3V0JyBpbj0ncycvJTNFJTNDZmVDb21wb3NpdGUgaW4yPSdTb3VyY2VHcmFwaGljJy8lM0UlM0NmZUdhdXNzaWFuQmx1ciBzdGREZXZpYXRpb249JyR7c3RkfScvJTNFJTNDL2ZpbHRlciUzRSUzQ2ltYWdlIHdpZHRoPScxMDAlMjUnIGhlaWdodD0nMTAwJTI1JyB4PScwJyB5PScwJyBwcmVzZXJ2ZUFzcGVjdFJhdGlvPScke3ByZXNlcnZlQXNwZWN0UmF0aW99JyBzdHlsZT0nZmlsdGVyOiB1cmwoJTIzYik7JyBocmVmPScke2JsdXJEYXRhVVJMfScvJTNFJTNDL3N2ZyUzRWBcbn1cbiJdLCJuYW1lcyI6WyJnZXRJbWFnZUJsdXJTdmciLCJ3aWR0aEludCIsImhlaWdodEludCIsImJsdXJXaWR0aCIsImJsdXJIZWlnaHQiLCJibHVyRGF0YVVSTCIsIm9iamVjdEZpdCIsInN0ZCIsInN2Z1dpZHRoIiwic3ZnSGVpZ2h0Iiwidmlld0JveCIsInByZXNlcnZlQXNwZWN0UmF0aW8iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-blur-svg.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js ***!
  \**********************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"ImageConfigContext\", ({\n    enumerable: true,\n    get: function() {\n        return ImageConfigContext;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _imageconfig = __webpack_require__(/*! ./image-config */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js\");\nconst ImageConfigContext = _react.default.createContext(_imageconfig.imageConfigDefault);\nif (true) {\n    ImageConfigContext.displayName = 'ImageConfigContext';\n} //# sourceMappingURL=image-config-context.shared-runtime.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pbWFnZS1jb25maWctY29udGV4dC5zaGFyZWQtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiOzs7O3NEQUlhQTs7O2VBQUFBOzs7OzRFQUpLO3lDQUVpQjtBQUU1QixNQUFNQSxxQkFDWEMsT0FBQUEsT0FBSyxDQUFDQyxhQUFhLENBQXNCQyxhQUFBQSxrQkFBa0I7QUFFN0QsSUFBSUMsSUFBb0IsRUFBbUI7SUFDekNKLG1CQUFtQk8sV0FBVyxHQUFHO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvc3JjL3NoYXJlZC9saWIvaW1hZ2UtY29uZmlnLWNvbnRleHQuc2hhcmVkLXJ1bnRpbWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHR5cGUgeyBJbWFnZUNvbmZpZ0NvbXBsZXRlIH0gZnJvbSAnLi9pbWFnZS1jb25maWcnXG5pbXBvcnQgeyBpbWFnZUNvbmZpZ0RlZmF1bHQgfSBmcm9tICcuL2ltYWdlLWNvbmZpZydcblxuZXhwb3J0IGNvbnN0IEltYWdlQ29uZmlnQ29udGV4dCA9XG4gIFJlYWN0LmNyZWF0ZUNvbnRleHQ8SW1hZ2VDb25maWdDb21wbGV0ZT4oaW1hZ2VDb25maWdEZWZhdWx0KVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBJbWFnZUNvbmZpZ0NvbnRleHQuZGlzcGxheU5hbWUgPSAnSW1hZ2VDb25maWdDb250ZXh0J1xufVxuIl0sIm5hbWVzIjpbIkltYWdlQ29uZmlnQ29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsImltYWdlQ29uZmlnRGVmYXVsdCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImRpc3BsYXlOYW1lIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config-context.shared-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-config.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    VALID_LOADERS: function() {\n        return VALID_LOADERS;\n    },\n    imageConfigDefault: function() {\n        return imageConfigDefault;\n    }\n});\nconst VALID_LOADERS = [\n    'default',\n    'imgix',\n    'cloudinary',\n    'akamai',\n    'custom'\n];\nconst imageConfigDefault = {\n    deviceSizes: [\n        640,\n        750,\n        828,\n        1080,\n        1200,\n        1920,\n        2048,\n        3840\n    ],\n    imageSizes: [\n        16,\n        32,\n        48,\n        64,\n        96,\n        128,\n        256,\n        384\n    ],\n    path: '/_next/image',\n    loader: 'default',\n    loaderFile: '',\n    domains: [],\n    disableStaticImages: false,\n    minimumCacheTTL: 60,\n    formats: [\n        'image/webp'\n    ],\n    dangerouslyAllowSVG: false,\n    contentSecurityPolicy: \"script-src 'none'; frame-src 'none'; sandbox;\",\n    contentDispositionType: 'attachment',\n    localPatterns: undefined,\n    remotePatterns: [],\n    qualities: undefined,\n    unoptimized: false\n}; //# sourceMappingURL=image-config.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pbWFnZS1jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBQWFBLGFBQWE7ZUFBYkE7O0lBaUlBQyxrQkFBa0I7ZUFBbEJBOzs7QUFqSU4sTUFBTUQsZ0JBQWdCO0lBQzNCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRDtBQTJITSxNQUFNQyxxQkFBMEM7SUFDckRDLGFBQWE7UUFBQztRQUFLO1FBQUs7UUFBSztRQUFNO1FBQU07UUFBTTtRQUFNO0tBQUs7SUFDMURDLFlBQVk7UUFBQztRQUFJO1FBQUk7UUFBSTtRQUFJO1FBQUk7UUFBSztRQUFLO0tBQUk7SUFDL0NDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxZQUFZO0lBQ1pDLFNBQVMsRUFBRTtJQUNYQyxxQkFBcUI7SUFDckJDLGlCQUFpQjtJQUNqQkMsU0FBUztRQUFDO0tBQWE7SUFDdkJDLHFCQUFxQjtJQUNyQkMsdUJBQXdCO0lBQ3hCQyx3QkFBd0I7SUFDeEJDLGVBQWVDO0lBQ2ZDLGdCQUFnQixFQUFFO0lBQ2xCQyxXQUFXRjtJQUNYRyxhQUFhO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcmMvc2hhcmVkL2xpYi9pbWFnZS1jb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IFZBTElEX0xPQURFUlMgPSBbXG4gICdkZWZhdWx0JyxcbiAgJ2ltZ2l4JyxcbiAgJ2Nsb3VkaW5hcnknLFxuICAnYWthbWFpJyxcbiAgJ2N1c3RvbScsXG5dIGFzIGNvbnN0XG5cbmV4cG9ydCB0eXBlIExvYWRlclZhbHVlID0gKHR5cGVvZiBWQUxJRF9MT0FERVJTKVtudW1iZXJdXG5cbmV4cG9ydCB0eXBlIEltYWdlTG9hZGVyUHJvcHMgPSB7XG4gIHNyYzogc3RyaW5nXG4gIHdpZHRoOiBudW1iZXJcbiAgcXVhbGl0eT86IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBJbWFnZUxvYWRlclByb3BzV2l0aENvbmZpZyA9IEltYWdlTG9hZGVyUHJvcHMgJiB7XG4gIGNvbmZpZzogUmVhZG9ubHk8SW1hZ2VDb25maWc+XG59XG5cbmV4cG9ydCB0eXBlIExvY2FsUGF0dGVybiA9IHtcbiAgLyoqXG4gICAqIENhbiBiZSBsaXRlcmFsIG9yIHdpbGRjYXJkLlxuICAgKiBTaW5nbGUgYCpgIG1hdGNoZXMgYSBzaW5nbGUgcGF0aCBzZWdtZW50LlxuICAgKiBEb3VibGUgYCoqYCBtYXRjaGVzIGFueSBudW1iZXIgb2YgcGF0aCBzZWdtZW50cy5cbiAgICovXG4gIHBhdGhuYW1lPzogc3RyaW5nXG5cbiAgLyoqXG4gICAqIENhbiBiZSBsaXRlcmFsIHF1ZXJ5IHN0cmluZyBzdWNoIGFzIGA/dj0xYCBvclxuICAgKiBlbXB0eSBzdHJpbmcgbWVhbmluZyBubyBxdWVyeSBzdHJpbmcuXG4gICAqL1xuICBzZWFyY2g/OiBzdHJpbmdcbn1cblxuZXhwb3J0IHR5cGUgUmVtb3RlUGF0dGVybiA9IHtcbiAgLyoqXG4gICAqIE11c3QgYmUgYGh0dHBgIG9yIGBodHRwc2AuXG4gICAqL1xuICBwcm90b2NvbD86ICdodHRwJyB8ICdodHRwcydcblxuICAvKipcbiAgICogQ2FuIGJlIGxpdGVyYWwgb3Igd2lsZGNhcmQuXG4gICAqIFNpbmdsZSBgKmAgbWF0Y2hlcyBhIHNpbmdsZSBzdWJkb21haW4uXG4gICAqIERvdWJsZSBgKipgIG1hdGNoZXMgYW55IG51bWJlciBvZiBzdWJkb21haW5zLlxuICAgKi9cbiAgaG9zdG5hbWU6IHN0cmluZ1xuXG4gIC8qKlxuICAgKiBDYW4gYmUgbGl0ZXJhbCBwb3J0IHN1Y2ggYXMgYDgwODBgIG9yIGVtcHR5IHN0cmluZ1xuICAgKiBtZWFuaW5nIG5vIHBvcnQuXG4gICAqL1xuICBwb3J0Pzogc3RyaW5nXG5cbiAgLyoqXG4gICAqIENhbiBiZSBsaXRlcmFsIG9yIHdpbGRjYXJkLlxuICAgKiBTaW5nbGUgYCpgIG1hdGNoZXMgYSBzaW5nbGUgcGF0aCBzZWdtZW50LlxuICAgKiBEb3VibGUgYCoqYCBtYXRjaGVzIGFueSBudW1iZXIgb2YgcGF0aCBzZWdtZW50cy5cbiAgICovXG4gIHBhdGhuYW1lPzogc3RyaW5nXG5cbiAgLyoqXG4gICAqIENhbiBiZSBsaXRlcmFsIHF1ZXJ5IHN0cmluZyBzdWNoIGFzIGA/dj0xYCBvclxuICAgKiBlbXB0eSBzdHJpbmcgbWVhbmluZyBubyBxdWVyeSBzdHJpbmcuXG4gICAqL1xuICBzZWFyY2g/OiBzdHJpbmdcbn1cblxudHlwZSBJbWFnZUZvcm1hdCA9ICdpbWFnZS9hdmlmJyB8ICdpbWFnZS93ZWJwJ1xuXG4vKipcbiAqIEltYWdlIGNvbmZpZ3VyYXRpb25zXG4gKlxuICogQHNlZSBbSW1hZ2UgY29uZmlndXJhdGlvbiBvcHRpb25zXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25leHQvaW1hZ2UjY29uZmlndXJhdGlvbi1vcHRpb25zKVxuICovXG5leHBvcnQgdHlwZSBJbWFnZUNvbmZpZ0NvbXBsZXRlID0ge1xuICAvKiogQHNlZSBbRGV2aWNlIHNpemVzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNkZXZpY2Utc2l6ZXMpICovXG4gIGRldmljZVNpemVzOiBudW1iZXJbXVxuXG4gIC8qKiBAc2VlIFtJbWFnZSBzaXppbmcgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2J1aWxkaW5nLXlvdXItYXBwbGljYXRpb24vb3B0aW1pemluZy9pbWFnZXMjaW1hZ2Utc2l6aW5nKSAqL1xuICBpbWFnZVNpemVzOiBudW1iZXJbXVxuXG4gIC8qKiBAc2VlIFtJbWFnZSBsb2FkZXJzIGNvbmZpZ3VyYXRpb25dKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9sZWdhY3kvaW1hZ2UjbG9hZGVyKSAqL1xuICBsb2FkZXI6IExvYWRlclZhbHVlXG5cbiAgLyoqIEBzZWUgW0ltYWdlIGxvYWRlciBjb25maWd1cmF0aW9uXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25leHQvbGVnYWN5L2ltYWdlI2xvYWRlci1jb25maWd1cmF0aW9uKSAqL1xuICBwYXRoOiBzdHJpbmdcblxuICAvKiogQHNlZSBbSW1hZ2UgbG9hZGVyIGNvbmZpZ3VyYXRpb25dKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNsb2FkZXItY29uZmlndXJhdGlvbikgKi9cbiAgbG9hZGVyRmlsZTogc3RyaW5nXG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgcmVtb3RlUGF0dGVybnNgIGluc3RlYWQuXG4gICAqL1xuICBkb21haW5zOiBzdHJpbmdbXVxuXG4gIC8qKiBAc2VlIFtEaXNhYmxlIHN0YXRpYyBpbWFnZSBpbXBvcnQgY29uZmlndXJhdGlvbl0oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9uZXh0L2ltYWdlI2Rpc2FibGUtc3RhdGljLWltcG9ydHMpICovXG4gIGRpc2FibGVTdGF0aWNJbWFnZXM6IGJvb2xlYW5cblxuICAvKiogQHNlZSBbQ2FjaGUgYmVoYXZpb3JdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNjYWNoaW5nLWJlaGF2aW9yKSAqL1xuICBtaW5pbXVtQ2FjaGVUVEw6IG51bWJlclxuXG4gIC8qKiBAc2VlIFtBY2NlcHRhYmxlIGZvcm1hdHNdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNhY2NlcHRhYmxlLWZvcm1hdHMpICovXG4gIGZvcm1hdHM6IEltYWdlRm9ybWF0W11cblxuICAvKiogQHNlZSBbRGFuZ2Vyb3VzbHkgQWxsb3cgU1ZHXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25leHQvaW1hZ2UjZGFuZ2Vyb3VzbHktYWxsb3ctc3ZnKSAqL1xuICBkYW5nZXJvdXNseUFsbG93U1ZHOiBib29sZWFuXG5cbiAgLyoqIEBzZWUgW0Rhbmdlcm91c2x5IEFsbG93IFNWR10oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBpLXJlZmVyZW5jZS9uZXh0L2ltYWdlI2Rhbmdlcm91c2x5LWFsbG93LXN2ZykgKi9cbiAgY29udGVudFNlY3VyaXR5UG9saWN5OiBzdHJpbmdcblxuICAvKiogQHNlZSBbRGFuZ2Vyb3VzbHkgQWxsb3cgU1ZHXShodHRwczovL25leHRqcy5vcmcvZG9jcy9hcGktcmVmZXJlbmNlL25leHQvaW1hZ2UjZGFuZ2Vyb3VzbHktYWxsb3ctc3ZnKSAqL1xuICBjb250ZW50RGlzcG9zaXRpb25UeXBlOiAnaW5saW5lJyB8ICdhdHRhY2htZW50J1xuXG4gIC8qKiBAc2VlIFtSZW1vdGUgUGF0dGVybnNdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNyZW1vdGVwYXR0ZXJucykgKi9cbiAgcmVtb3RlUGF0dGVybnM6IFJlbW90ZVBhdHRlcm5bXVxuXG4gIC8qKiBAc2VlIFtSZW1vdGUgUGF0dGVybnNdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNsb2NhbFBhdHRlcm5zKSAqL1xuICBsb2NhbFBhdHRlcm5zOiBMb2NhbFBhdHRlcm5bXSB8IHVuZGVmaW5lZFxuXG4gIC8qKiBAc2VlIFtRdWFsaXRpZXNdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSNxdWFsaXRpZXMpICovXG4gIHF1YWxpdGllczogbnVtYmVyW10gfCB1bmRlZmluZWRcblxuICAvKiogQHNlZSBbVW5vcHRpbWl6ZWRdKGh0dHBzOi8vbmV4dGpzLm9yZy9kb2NzL2FwaS1yZWZlcmVuY2UvbmV4dC9pbWFnZSN1bm9wdGltaXplZCkgKi9cbiAgdW5vcHRpbWl6ZWQ6IGJvb2xlYW5cbn1cblxuZXhwb3J0IHR5cGUgSW1hZ2VDb25maWcgPSBQYXJ0aWFsPEltYWdlQ29uZmlnQ29tcGxldGU+XG5cbmV4cG9ydCBjb25zdCBpbWFnZUNvbmZpZ0RlZmF1bHQ6IEltYWdlQ29uZmlnQ29tcGxldGUgPSB7XG4gIGRldmljZVNpemVzOiBbNjQwLCA3NTAsIDgyOCwgMTA4MCwgMTIwMCwgMTkyMCwgMjA0OCwgMzg0MF0sXG4gIGltYWdlU2l6ZXM6IFsxNiwgMzIsIDQ4LCA2NCwgOTYsIDEyOCwgMjU2LCAzODRdLFxuICBwYXRoOiAnL19uZXh0L2ltYWdlJyxcbiAgbG9hZGVyOiAnZGVmYXVsdCcsXG4gIGxvYWRlckZpbGU6ICcnLFxuICBkb21haW5zOiBbXSxcbiAgZGlzYWJsZVN0YXRpY0ltYWdlczogZmFsc2UsXG4gIG1pbmltdW1DYWNoZVRUTDogNjAsXG4gIGZvcm1hdHM6IFsnaW1hZ2Uvd2VicCddLFxuICBkYW5nZXJvdXNseUFsbG93U1ZHOiBmYWxzZSxcbiAgY29udGVudFNlY3VyaXR5UG9saWN5OiBgc2NyaXB0LXNyYyAnbm9uZSc7IGZyYW1lLXNyYyAnbm9uZSc7IHNhbmRib3g7YCxcbiAgY29udGVudERpc3Bvc2l0aW9uVHlwZTogJ2F0dGFjaG1lbnQnLFxuICBsb2NhbFBhdHRlcm5zOiB1bmRlZmluZWQsIC8vIGRlZmF1bHQ6IGFsbG93IGFsbCBsb2NhbCBpbWFnZXNcbiAgcmVtb3RlUGF0dGVybnM6IFtdLCAvLyBkZWZhdWx0OiBhbGxvdyBubyByZW1vdGUgaW1hZ2VzXG4gIHF1YWxpdGllczogdW5kZWZpbmVkLCAvLyBkZWZhdWx0OiBhbGxvdyBhbGwgcXVhbGl0aWVzXG4gIHVub3B0aW1pemVkOiBmYWxzZSxcbn1cbiJdLCJuYW1lcyI6WyJWQUxJRF9MT0FERVJTIiwiaW1hZ2VDb25maWdEZWZhdWx0IiwiZGV2aWNlU2l6ZXMiLCJpbWFnZVNpemVzIiwicGF0aCIsImxvYWRlciIsImxvYWRlckZpbGUiLCJkb21haW5zIiwiZGlzYWJsZVN0YXRpY0ltYWdlcyIsIm1pbmltdW1DYWNoZVRUTCIsImZvcm1hdHMiLCJkYW5nZXJvdXNseUFsbG93U1ZHIiwiY29udGVudFNlY3VyaXR5UG9saWN5IiwiY29udGVudERpc3Bvc2l0aW9uVHlwZSIsImxvY2FsUGF0dGVybnMiLCJ1bmRlZmluZWQiLCJyZW1vdGVQYXR0ZXJucyIsInF1YWxpdGllcyIsInVub3B0aW1pemVkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-config.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-external.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-external.js ***!
  \*************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    default: function() {\n        return _default;\n    },\n    getImageProps: function() {\n        return getImageProps;\n    }\n});\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _getimgprops = __webpack_require__(/*! ./get-img-props */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/get-img-props.js\");\nconst _imagecomponent = __webpack_require__(/*! ../../client/image-component */ \"(app-pages-browser)/./node_modules/next/dist/client/image-component.js\");\nconst _imageloader = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! next/dist/shared/lib/image-loader */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/image-loader.js\"));\nfunction getImageProps(imgProps) {\n    const { props } = (0, _getimgprops.getImgProps)(imgProps, {\n        defaultLoader: _imageloader.default,\n        // This is replaced by webpack define plugin\n        imgConf: {\"deviceSizes\":[640,750,828,1080,1200,1920,2048,3840],\"imageSizes\":[16,32,48,64,96,128,256,384],\"path\":\"/_next/image\",\"loader\":\"default\",\"dangerouslyAllowSVG\":false,\"unoptimized\":false,\"domains\":[],\"remotePatterns\":[]}\n    });\n    // Normally we don't care about undefined props because we pass to JSX,\n    // but this exported function could be used by the end user for anything\n    // so we delete undefined props to clean it up a little.\n    for (const [key, value] of Object.entries(props)){\n        if (value === undefined) {\n            delete props[key];\n        }\n    }\n    return {\n        props\n    };\n}\nconst _default = _imagecomponent.Image; //# sourceMappingURL=image-external.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9pbWFnZS1leHRlcm5hbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7SUFpQ0EsT0FBb0I7ZUFBcEI7O0lBakJnQkEsYUFBYTtlQUFiQTs7Ozt5Q0FiWTs0Q0FDTjtrRkFHSTtBQVNuQixTQUFTQSxjQUFjQyxRQUFvQjtJQUNoRCxNQUFNLEVBQUVDLEtBQUssRUFBRSxHQUFHQyxDQUFBQSxHQUFBQSxhQUFBQSxXQUFBQSxFQUFZRixVQUFVO1FBQ3RDRyxlQUFBQSxhQUFBQSxPQUFhO1FBQ2IsNENBQTRDO1FBQzVDQyxTQUFTQywwTkFBNkI7SUFDeEM7SUFDQSx1RUFBdUU7SUFDdkUsd0VBQXdFO0lBQ3hFLHdEQUF3RDtJQUN4RCxLQUFLLE1BQU0sQ0FBQ0csS0FBS0MsTUFBTSxJQUFJQyxPQUFPQyxPQUFPLENBQUNWLE9BQVE7UUFDaEQsSUFBSVEsVUFBVUcsV0FBVztZQUN2QixPQUFPWCxLQUFLLENBQUNPLElBQTBCO1FBQ3pDO0lBQ0Y7SUFDQSxPQUFPO1FBQUVQO0lBQU07QUFDakI7TUFFQSxXQUFlWSxnQkFBQUEsS0FBSyIsInNvdXJjZXMiOlsiL1VzZXJzL3NyYy9zaGFyZWQvbGliL2ltYWdlLWV4dGVybmFsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEltYWdlQ29uZmlnQ29tcGxldGUsIEltYWdlTG9hZGVyUHJvcHMgfSBmcm9tICcuL2ltYWdlLWNvbmZpZydcbmltcG9ydCB0eXBlIHsgSW1hZ2VQcm9wcywgSW1hZ2VMb2FkZXIsIFN0YXRpY0ltYWdlRGF0YSB9IGZyb20gJy4vZ2V0LWltZy1wcm9wcydcblxuaW1wb3J0IHsgZ2V0SW1nUHJvcHMgfSBmcm9tICcuL2dldC1pbWctcHJvcHMnXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJy4uLy4uL2NsaWVudC9pbWFnZS1jb21wb25lbnQnXG5cbi8vIEB0cy1pZ25vcmUgLSBUaGlzIGlzIHJlcGxhY2VkIGJ5IHdlYnBhY2sgYWxpYXNcbmltcG9ydCBkZWZhdWx0TG9hZGVyIGZyb20gJ25leHQvZGlzdC9zaGFyZWQvbGliL2ltYWdlLWxvYWRlcidcblxuLyoqXG4gKiBGb3IgbW9yZSBhZHZhbmNlZCB1c2UgY2FzZXMsIHlvdSBjYW4gY2FsbCBgZ2V0SW1hZ2VQcm9wcygpYFxuICogdG8gZ2V0IHRoZSBwcm9wcyB0aGF0IHdvdWxkIGJlIHBhc3NlZCB0byB0aGUgdW5kZXJseWluZyBgPGltZz5gIGVsZW1lbnQsXG4gKiBhbmQgaW5zdGVhZCBwYXNzIHRvIHRoZW0gdG8gYW5vdGhlciBjb21wb25lbnQsIHN0eWxlLCBjYW52YXMsIGV0Yy5cbiAqXG4gKiBSZWFkIG1vcmU6IFtOZXh0LmpzIGRvY3M6IGBnZXRJbWFnZVByb3BzYF0oaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvYXBwL2FwaS1yZWZlcmVuY2UvY29tcG9uZW50cy9pbWFnZSNnZXRpbWFnZXByb3BzKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1hZ2VQcm9wcyhpbWdQcm9wczogSW1hZ2VQcm9wcykge1xuICBjb25zdCB7IHByb3BzIH0gPSBnZXRJbWdQcm9wcyhpbWdQcm9wcywge1xuICAgIGRlZmF1bHRMb2FkZXIsXG4gICAgLy8gVGhpcyBpcyByZXBsYWNlZCBieSB3ZWJwYWNrIGRlZmluZSBwbHVnaW5cbiAgICBpbWdDb25mOiBwcm9jZXNzLmVudi5fX05FWFRfSU1BR0VfT1BUUyBhcyBhbnkgYXMgSW1hZ2VDb25maWdDb21wbGV0ZSxcbiAgfSlcbiAgLy8gTm9ybWFsbHkgd2UgZG9uJ3QgY2FyZSBhYm91dCB1bmRlZmluZWQgcHJvcHMgYmVjYXVzZSB3ZSBwYXNzIHRvIEpTWCxcbiAgLy8gYnV0IHRoaXMgZXhwb3J0ZWQgZnVuY3Rpb24gY291bGQgYmUgdXNlZCBieSB0aGUgZW5kIHVzZXIgZm9yIGFueXRoaW5nXG4gIC8vIHNvIHdlIGRlbGV0ZSB1bmRlZmluZWQgcHJvcHMgdG8gY2xlYW4gaXQgdXAgYSBsaXR0bGUuXG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWxldGUgcHJvcHNba2V5IGFzIGtleW9mIHR5cGVvZiBwcm9wc11cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgcHJvcHMgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbWFnZVxuXG5leHBvcnQgdHlwZSB7IEltYWdlUHJvcHMsIEltYWdlTG9hZGVyUHJvcHMsIEltYWdlTG9hZGVyLCBTdGF0aWNJbWFnZURhdGEgfVxuIl0sIm5hbWVzIjpbImdldEltYWdlUHJvcHMiLCJpbWdQcm9wcyIsInByb3BzIiwiZ2V0SW1nUHJvcHMiLCJkZWZhdWx0TG9hZGVyIiwiaW1nQ29uZiIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfSU1BR0VfT1BUUyIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsInVuZGVmaW5lZCIsIkltYWdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-external.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/image-loader.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/image-loader.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nconst DEFAULT_Q = 75;\nfunction defaultLoader(param) {\n    let { config, src, width, quality } = param;\n    var _config_qualities;\n    if (true) {\n        const missingValues = [];\n        // these should always be provided but make sure they are\n        if (!src) missingValues.push('src');\n        if (!width) missingValues.push('width');\n        if (missingValues.length > 0) {\n            throw Object.defineProperty(new Error(\"Next Image Optimization requires \" + missingValues.join(', ') + \" to be provided. Make sure you pass them as props to the `next/image` component. Received: \" + JSON.stringify({\n                src,\n                width,\n                quality\n            })), \"__NEXT_ERROR_CODE\", {\n                value: \"E188\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (src.startsWith('//')) {\n            throw Object.defineProperty(new Error('Failed to parse src \"' + src + '\" on `next/image`, protocol-relative URL (//) must be changed to an absolute URL (http:// or https://)'), \"__NEXT_ERROR_CODE\", {\n                value: \"E360\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n        if (src.startsWith('/') && config.localPatterns) {\n            if (true) {\n                // We use dynamic require because this should only error in development\n                const { hasLocalMatch } = __webpack_require__(/*! ./match-local-pattern */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/match-local-pattern.js\");\n                if (!hasLocalMatch(config.localPatterns, src)) {\n                    throw Object.defineProperty(new Error(\"Invalid src prop (\" + src + \") on `next/image` does not match `images.localPatterns` configured in your `next.config.js`\\n\" + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-localpatterns\"), \"__NEXT_ERROR_CODE\", {\n                        value: \"E426\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            }\n        }\n        if (!src.startsWith('/') && (config.domains || config.remotePatterns)) {\n            let parsedSrc;\n            try {\n                parsedSrc = new URL(src);\n            } catch (err) {\n                console.error(err);\n                throw Object.defineProperty(new Error('Failed to parse src \"' + src + '\" on `next/image`, if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)'), \"__NEXT_ERROR_CODE\", {\n                    value: \"E63\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (true) {\n                // We use dynamic require because this should only error in development\n                const { hasRemoteMatch } = __webpack_require__(/*! ./match-remote-pattern */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/match-remote-pattern.js\");\n                if (!hasRemoteMatch(config.domains, config.remotePatterns, parsedSrc)) {\n                    throw Object.defineProperty(new Error(\"Invalid src prop (\" + src + ') on `next/image`, hostname \"' + parsedSrc.hostname + '\" is not configured under images in your `next.config.js`\\n' + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-host\"), \"__NEXT_ERROR_CODE\", {\n                        value: \"E231\",\n                        enumerable: false,\n                        configurable: true\n                    });\n                }\n            }\n        }\n        if (quality && config.qualities && !config.qualities.includes(quality)) {\n            throw Object.defineProperty(new Error(\"Invalid quality prop (\" + quality + \") on `next/image` does not match `images.qualities` configured in your `next.config.js`\\n\" + \"See more info: https://nextjs.org/docs/messages/next-image-unconfigured-qualities\"), \"__NEXT_ERROR_CODE\", {\n                value: \"E623\",\n                enumerable: false,\n                configurable: true\n            });\n        }\n    }\n    const q = quality || ((_config_qualities = config.qualities) == null ? void 0 : _config_qualities.reduce((prev, cur)=>Math.abs(cur - DEFAULT_Q) < Math.abs(prev - DEFAULT_Q) ? cur : prev)) || DEFAULT_Q;\n    return config.path + \"?url=\" + encodeURIComponent(src) + \"&w=\" + width + \"&q=\" + q + (src.startsWith('/_next/static/media/') && false ? 0 : '');\n}\n// We use this to determine if the import is the default loader\n// or a custom loader defined by the user in next.config.js\ndefaultLoader.__next_img_default = true;\nconst _default = defaultLoader; //# sourceMappingURL=image-loader.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/image-loader.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/match-local-pattern.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/match-local-pattern.js ***!
  \******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    hasLocalMatch: function() {\n        return hasLocalMatch;\n    },\n    matchLocalPattern: function() {\n        return matchLocalPattern;\n    }\n});\nconst _picomatch = __webpack_require__(/*! next/dist/compiled/picomatch */ \"(app-pages-browser)/./node_modules/next/dist/compiled/picomatch/index.js\");\nfunction matchLocalPattern(pattern, url) {\n    if (pattern.search !== undefined) {\n        if (pattern.search !== url.search) {\n            return false;\n        }\n    }\n    var _pattern_pathname;\n    if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {\n        dot: true\n    }).test(url.pathname)) {\n        return false;\n    }\n    return true;\n}\nfunction hasLocalMatch(localPatterns, urlPathAndQuery) {\n    if (!localPatterns) {\n        // if the user didn't define \"localPatterns\", we allow all local images\n        return true;\n    }\n    const url = new URL(urlPathAndQuery, 'http://n');\n    return localPatterns.some((p)=>matchLocalPattern(p, url));\n} //# sourceMappingURL=match-local-pattern.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9tYXRjaC1sb2NhbC1wYXR0ZXJuLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztJQWtCZ0JBLGFBQWE7ZUFBYkE7O0lBZEFDLGlCQUFpQjtlQUFqQkE7Ozt1Q0FITztBQUdoQixTQUFTQSxrQkFBa0JDLE9BQXFCLEVBQUVDLEdBQVE7SUFDL0QsSUFBSUQsUUFBUUUsTUFBTSxLQUFLQyxXQUFXO1FBQ2hDLElBQUlILFFBQVFFLE1BQU0sS0FBS0QsSUFBSUMsTUFBTSxFQUFFO1lBQ2pDLE9BQU87UUFDVDtJQUNGO1FBRVlGO0lBQVosSUFBSSxDQUFDSSxDQUFBQSxHQUFBQSxXQUFBQSxNQUFBQSxFQUFPSixDQUFBQSxvQkFBQUEsUUFBUUssUUFBQUEsS0FBUSxPQUFoQkwsb0JBQW9CLE1BQU07UUFBRU0sS0FBSztJQUFLLEdBQUdDLElBQUksQ0FBQ04sSUFBSUksUUFBUSxHQUFHO1FBQ3ZFLE9BQU87SUFDVDtJQUVBLE9BQU87QUFDVDtBQUVPLFNBQVNQLGNBQ2RVLGFBQXlDLEVBQ3pDQyxlQUF1QjtJQUV2QixJQUFJLENBQUNELGVBQWU7UUFDbEIsdUVBQXVFO1FBQ3ZFLE9BQU87SUFDVDtJQUNBLE1BQU1QLE1BQU0sSUFBSVMsSUFBSUQsaUJBQWlCO0lBQ3JDLE9BQU9ELGNBQWNHLElBQUksQ0FBQyxDQUFDQyxJQUFNYixrQkFBa0JhLEdBQUdYO0FBQ3hEIiwic291cmNlcyI6WyIvVXNlcnMvc3JjL3NoYXJlZC9saWIvbWF0Y2gtbG9jYWwtcGF0dGVybi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IExvY2FsUGF0dGVybiB9IGZyb20gJy4vaW1hZ2UtY29uZmlnJ1xuaW1wb3J0IHsgbWFrZVJlIH0gZnJvbSAnbmV4dC9kaXN0L2NvbXBpbGVkL3BpY29tYXRjaCdcblxuLy8gTW9kaWZ5aW5nIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGFsc28gbW9kaWZ5IHdyaXRlSW1hZ2VzTWFuaWZlc3QoKVxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoTG9jYWxQYXR0ZXJuKHBhdHRlcm46IExvY2FsUGF0dGVybiwgdXJsOiBVUkwpOiBib29sZWFuIHtcbiAgaWYgKHBhdHRlcm4uc2VhcmNoICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAocGF0dGVybi5zZWFyY2ggIT09IHVybC5zZWFyY2gpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGlmICghbWFrZVJlKHBhdHRlcm4ucGF0aG5hbWUgPz8gJyoqJywgeyBkb3Q6IHRydWUgfSkudGVzdCh1cmwucGF0aG5hbWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzTG9jYWxNYXRjaChcbiAgbG9jYWxQYXR0ZXJuczogTG9jYWxQYXR0ZXJuW10gfCB1bmRlZmluZWQsXG4gIHVybFBhdGhBbmRRdWVyeTogc3RyaW5nXG4pOiBib29sZWFuIHtcbiAgaWYgKCFsb2NhbFBhdHRlcm5zKSB7XG4gICAgLy8gaWYgdGhlIHVzZXIgZGlkbid0IGRlZmluZSBcImxvY2FsUGF0dGVybnNcIiwgd2UgYWxsb3cgYWxsIGxvY2FsIGltYWdlc1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgY29uc3QgdXJsID0gbmV3IFVSTCh1cmxQYXRoQW5kUXVlcnksICdodHRwOi8vbicpXG4gIHJldHVybiBsb2NhbFBhdHRlcm5zLnNvbWUoKHApID0+IG1hdGNoTG9jYWxQYXR0ZXJuKHAsIHVybCkpXG59XG4iXSwibmFtZXMiOlsiaGFzTG9jYWxNYXRjaCIsIm1hdGNoTG9jYWxQYXR0ZXJuIiwicGF0dGVybiIsInVybCIsInNlYXJjaCIsInVuZGVmaW5lZCIsIm1ha2VSZSIsInBhdGhuYW1lIiwiZG90IiwidGVzdCIsImxvY2FsUGF0dGVybnMiLCJ1cmxQYXRoQW5kUXVlcnkiLCJVUkwiLCJzb21lIiwicCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/match-local-pattern.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/match-remote-pattern.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/match-remote-pattern.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    hasRemoteMatch: function() {\n        return hasRemoteMatch;\n    },\n    matchRemotePattern: function() {\n        return matchRemotePattern;\n    }\n});\nconst _picomatch = __webpack_require__(/*! next/dist/compiled/picomatch */ \"(app-pages-browser)/./node_modules/next/dist/compiled/picomatch/index.js\");\nfunction matchRemotePattern(pattern, url) {\n    if (pattern.protocol !== undefined) {\n        const actualProto = url.protocol.slice(0, -1);\n        if (pattern.protocol !== actualProto) {\n            return false;\n        }\n    }\n    if (pattern.port !== undefined) {\n        if (pattern.port !== url.port) {\n            return false;\n        }\n    }\n    if (pattern.hostname === undefined) {\n        throw Object.defineProperty(new Error(\"Pattern should define hostname but found\\n\" + JSON.stringify(pattern)), \"__NEXT_ERROR_CODE\", {\n            value: \"E410\",\n            enumerable: false,\n            configurable: true\n        });\n    } else {\n        if (!(0, _picomatch.makeRe)(pattern.hostname).test(url.hostname)) {\n            return false;\n        }\n    }\n    if (pattern.search !== undefined) {\n        if (pattern.search !== url.search) {\n            return false;\n        }\n    }\n    var _pattern_pathname;\n    // Should be the same as writeImagesManifest()\n    if (!(0, _picomatch.makeRe)((_pattern_pathname = pattern.pathname) != null ? _pattern_pathname : '**', {\n        dot: true\n    }).test(url.pathname)) {\n        return false;\n    }\n    return true;\n}\nfunction hasRemoteMatch(domains, remotePatterns, url) {\n    return domains.some((domain)=>url.hostname === domain) || remotePatterns.some((p)=>matchRemotePattern(p, url));\n} //# sourceMappingURL=match-remote-pattern.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9tYXRjaC1yZW1vdGUtcGF0dGVybi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7SUF5Q2dCQSxjQUFjO2VBQWRBOztJQXJDQUMsa0JBQWtCO2VBQWxCQTs7O3VDQUhPO0FBR2hCLFNBQVNBLG1CQUFtQkMsT0FBc0IsRUFBRUMsR0FBUTtJQUNqRSxJQUFJRCxRQUFRRSxRQUFRLEtBQUtDLFdBQVc7UUFDbEMsTUFBTUMsY0FBY0gsSUFBSUMsUUFBUSxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQzNDLElBQUlMLFFBQVFFLFFBQVEsS0FBS0UsYUFBYTtZQUNwQyxPQUFPO1FBQ1Q7SUFDRjtJQUNBLElBQUlKLFFBQVFNLElBQUksS0FBS0gsV0FBVztRQUM5QixJQUFJSCxRQUFRTSxJQUFJLEtBQUtMLElBQUlLLElBQUksRUFBRTtZQUM3QixPQUFPO1FBQ1Q7SUFDRjtJQUVBLElBQUlOLFFBQVFPLFFBQVEsS0FBS0osV0FBVztRQUNsQyxNQUFNLHFCQUVMLENBRkssSUFBSUssTUFDUCwrQ0FBNENDLEtBQUtDLFNBQVMsQ0FBQ1YsV0FEeEQ7bUJBQUE7d0JBQUE7MEJBQUE7UUFFTjtJQUNGLE9BQU87UUFDTCxJQUFJLENBQUNXLENBQUFBLEdBQUFBLFdBQUFBLE1BQUFBLEVBQU9YLFFBQVFPLFFBQVEsRUFBRUssSUFBSSxDQUFDWCxJQUFJTSxRQUFRLEdBQUc7WUFDaEQsT0FBTztRQUNUO0lBQ0Y7SUFFQSxJQUFJUCxRQUFRYSxNQUFNLEtBQUtWLFdBQVc7UUFDaEMsSUFBSUgsUUFBUWEsTUFBTSxLQUFLWixJQUFJWSxNQUFNLEVBQUU7WUFDakMsT0FBTztRQUNUO0lBQ0Y7UUFHWWI7SUFEWiw4Q0FBOEM7SUFDOUMsSUFBSSxDQUFDVyxDQUFBQSxHQUFBQSxXQUFBQSxNQUFBQSxFQUFPWCxDQUFBQSxvQkFBQUEsUUFBUWMsUUFBQUEsS0FBUSxPQUFoQmQsb0JBQW9CLE1BQU07UUFBRWUsS0FBSztJQUFLLEdBQUdILElBQUksQ0FBQ1gsSUFBSWEsUUFBUSxHQUFHO1FBQ3ZFLE9BQU87SUFDVDtJQUVBLE9BQU87QUFDVDtBQUVPLFNBQVNoQixlQUNka0IsT0FBaUIsRUFDakJDLGNBQStCLEVBQy9CaEIsR0FBUTtJQUVSLE9BQ0VlLFFBQVFFLElBQUksQ0FBQyxDQUFDQyxTQUFXbEIsSUFBSU0sUUFBUSxLQUFLWSxXQUMxQ0YsZUFBZUMsSUFBSSxDQUFDLENBQUNFLElBQU1yQixtQkFBbUJxQixHQUFHbkI7QUFFckQiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcmMvc2hhcmVkL2xpYi9tYXRjaC1yZW1vdGUtcGF0dGVybi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlbW90ZVBhdHRlcm4gfSBmcm9tICcuL2ltYWdlLWNvbmZpZydcbmltcG9ydCB7IG1ha2VSZSB9IGZyb20gJ25leHQvZGlzdC9jb21waWxlZC9waWNvbWF0Y2gnXG5cbi8vIE1vZGlmeWluZyB0aGlzIGZ1bmN0aW9uIHNob3VsZCBhbHNvIG1vZGlmeSB3cml0ZUltYWdlc01hbmlmZXN0KClcbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFJlbW90ZVBhdHRlcm4ocGF0dGVybjogUmVtb3RlUGF0dGVybiwgdXJsOiBVUkwpOiBib29sZWFuIHtcbiAgaWYgKHBhdHRlcm4ucHJvdG9jb2wgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGFjdHVhbFByb3RvID0gdXJsLnByb3RvY29sLnNsaWNlKDAsIC0xKVxuICAgIGlmIChwYXR0ZXJuLnByb3RvY29sICE9PSBhY3R1YWxQcm90bykge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIGlmIChwYXR0ZXJuLnBvcnQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwYXR0ZXJuLnBvcnQgIT09IHVybC5wb3J0KSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAocGF0dGVybi5ob3N0bmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFBhdHRlcm4gc2hvdWxkIGRlZmluZSBob3N0bmFtZSBidXQgZm91bmRcXG4ke0pTT04uc3RyaW5naWZ5KHBhdHRlcm4pfWBcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgaWYgKCFtYWtlUmUocGF0dGVybi5ob3N0bmFtZSkudGVzdCh1cmwuaG9zdG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cblxuICBpZiAocGF0dGVybi5zZWFyY2ggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChwYXR0ZXJuLnNlYXJjaCAhPT0gdXJsLnNlYXJjaCkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLy8gU2hvdWxkIGJlIHRoZSBzYW1lIGFzIHdyaXRlSW1hZ2VzTWFuaWZlc3QoKVxuICBpZiAoIW1ha2VSZShwYXR0ZXJuLnBhdGhuYW1lID8/ICcqKicsIHsgZG90OiB0cnVlIH0pLnRlc3QodXJsLnBhdGhuYW1lKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlbW90ZU1hdGNoKFxuICBkb21haW5zOiBzdHJpbmdbXSxcbiAgcmVtb3RlUGF0dGVybnM6IFJlbW90ZVBhdHRlcm5bXSxcbiAgdXJsOiBVUkxcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIGRvbWFpbnMuc29tZSgoZG9tYWluKSA9PiB1cmwuaG9zdG5hbWUgPT09IGRvbWFpbikgfHxcbiAgICByZW1vdGVQYXR0ZXJucy5zb21lKChwKSA9PiBtYXRjaFJlbW90ZVBhdHRlcm4ocCwgdXJsKSlcbiAgKVxufVxuIl0sIm5hbWVzIjpbImhhc1JlbW90ZU1hdGNoIiwibWF0Y2hSZW1vdGVQYXR0ZXJuIiwicGF0dGVybiIsInVybCIsInByb3RvY29sIiwidW5kZWZpbmVkIiwiYWN0dWFsUHJvdG8iLCJzbGljZSIsInBvcnQiLCJob3N0bmFtZSIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ha2VSZSIsInRlc3QiLCJzZWFyY2giLCJwYXRobmFtZSIsImRvdCIsImRvbWFpbnMiLCJyZW1vdGVQYXR0ZXJucyIsInNvbWUiLCJkb21haW4iLCJwIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/match-remote-pattern.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/router-context.shared-runtime.js ***!
  \****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"RouterContext\", ({\n    enumerable: true,\n    get: function() {\n        return RouterContext;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst RouterContext = _react.default.createContext(null);\nif (true) {\n    RouterContext.displayName = 'RouterContext';\n} //# sourceMappingURL=router-context.shared-runtime.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXItY29udGV4dC5zaGFyZWQtcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiOzs7O2lEQUdhQTs7O2VBQUFBOzs7OzRFQUhLO0FBR1gsTUFBTUEsZ0JBQWdCQyxPQUFBQSxPQUFLLENBQUNDLGFBQWEsQ0FBb0I7QUFFcEUsSUFBSUMsSUFBb0IsRUFBbUI7SUFDekNILGNBQWNNLFdBQVcsR0FBRztBQUM5QiIsInNvdXJjZXMiOlsiL1VzZXJzL3NyYy9zaGFyZWQvbGliL3JvdXRlci1jb250ZXh0LnNoYXJlZC1ydW50aW1lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB0eXBlIHsgTmV4dFJvdXRlciB9IGZyb20gJy4vcm91dGVyL3JvdXRlcidcblxuZXhwb3J0IGNvbnN0IFJvdXRlckNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PE5leHRSb3V0ZXIgfCBudWxsPihudWxsKVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JvdXRlckNvbnRleHQnXG59XG4iXSwibmFtZXMiOlsiUm91dGVyQ29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImRpc3BsYXlOYW1lIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/router-context.shared-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/side-effect.js":
/*!**********************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/side-effect.js ***!
  \**********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nvar _s = $RefreshSig$();\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return SideEffect;\n    }\n}));\nconst _react = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nconst isServer = \"object\" === 'undefined';\nconst useClientOnlyLayoutEffect = isServer ? ()=>{} : _react.useLayoutEffect;\nconst useClientOnlyEffect = isServer ? ()=>{} : _react.useEffect;\nfunction SideEffect(props) {\n    _s();\n    const { headManager, reduceComponentsToState } = props;\n    function emitChange() {\n        if (headManager && headManager.mountedInstances) {\n            const headElements = _react.Children.toArray(Array.from(headManager.mountedInstances).filter(Boolean));\n            headManager.updateHead(reduceComponentsToState(headElements, props));\n        }\n    }\n    if (isServer) {\n        var _headManager_mountedInstances;\n        headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.add(props.children);\n        emitChange();\n    }\n    useClientOnlyLayoutEffect({\n        \"SideEffect.useClientOnlyLayoutEffect\": ()=>{\n            var _headManager_mountedInstances;\n            headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.add(props.children);\n            return ({\n                \"SideEffect.useClientOnlyLayoutEffect\": ()=>{\n                    var _headManager_mountedInstances;\n                    headManager == null ? void 0 : (_headManager_mountedInstances = headManager.mountedInstances) == null ? void 0 : _headManager_mountedInstances.delete(props.children);\n                }\n            })[\"SideEffect.useClientOnlyLayoutEffect\"];\n        }\n    }[\"SideEffect.useClientOnlyLayoutEffect\"]);\n    // We need to call `updateHead` method whenever the `SideEffect` is trigger in all\n    // life-cycles: mount, update, unmount. However, if there are multiple `SideEffect`s\n    // being rendered, we only trigger the method from the last one.\n    // This is ensured by keeping the last unflushed `updateHead` in the `_pendingUpdate`\n    // singleton in the layout effect pass, and actually trigger it in the effect pass.\n    useClientOnlyLayoutEffect({\n        \"SideEffect.useClientOnlyLayoutEffect\": ()=>{\n            if (headManager) {\n                headManager._pendingUpdate = emitChange;\n            }\n            return ({\n                \"SideEffect.useClientOnlyLayoutEffect\": ()=>{\n                    if (headManager) {\n                        headManager._pendingUpdate = emitChange;\n                    }\n                }\n            })[\"SideEffect.useClientOnlyLayoutEffect\"];\n        }\n    }[\"SideEffect.useClientOnlyLayoutEffect\"]);\n    useClientOnlyEffect({\n        \"SideEffect.useClientOnlyEffect\": ()=>{\n            if (headManager && headManager._pendingUpdate) {\n                headManager._pendingUpdate();\n                headManager._pendingUpdate = null;\n            }\n            return ({\n                \"SideEffect.useClientOnlyEffect\": ()=>{\n                    if (headManager && headManager._pendingUpdate) {\n                        headManager._pendingUpdate();\n                        headManager._pendingUpdate = null;\n                    }\n                }\n            })[\"SideEffect.useClientOnlyEffect\"];\n        }\n    }[\"SideEffect.useClientOnlyEffect\"]);\n    return null;\n} //# sourceMappingURL=side-effect.js.map\n_s(SideEffect, \"gHVkikNHNxjVdD11eJBzaqkCiPY=\", false, function() {\n    return [\n        useClientOnlyLayoutEffect,\n        useClientOnlyLayoutEffect,\n        useClientOnlyEffect\n    ];\n});\n_c = SideEffect;\nvar _c;\n$RefreshReg$(_c, \"SideEffect\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9zaWRlLWVmZmVjdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7MkNBb0JBOzs7ZUFBd0JBOzs7bUNBbkJ1QztBQWUvRCxNQUFNQyxXQUFXLE9BQU9DLE1BQVc7QUFDbkMsTUFBTUMsNEJBQTRCRixXQUFXLEtBQU8sSUFBSUcsT0FBQUEsZUFBZTtBQUN2RSxNQUFNQyxzQkFBc0JKLFdBQVcsS0FBTyxJQUFJSyxPQUFBQSxTQUFTO0FBRTVDLG9CQUFvQkMsS0FBc0I7O0lBQ3ZELE1BQU0sRUFBRUMsV0FBVyxFQUFFQyx1QkFBdUIsRUFBRSxHQUFHRjtJQUVqRCxTQUFTRztRQUNQLElBQUlGLGVBQWVBLFlBQVlHLGdCQUFnQixFQUFFO1lBQy9DLE1BQU1DLGVBQWVDLE9BQUFBLFFBQVEsQ0FBQ0MsT0FBTyxDQUNuQ0MsTUFBTUMsSUFBSSxDQUFDUixZQUFZRyxnQkFBZ0IsRUFBMEJNLE1BQU0sQ0FDckVDO1lBR0pWLFlBQVlXLFVBQVUsQ0FBQ1Ysd0JBQXdCRyxjQUFjTDtRQUMvRDtJQUNGO0lBRUEsSUFBSU4sVUFBVTtZQUNaTztRQUFBQSxlQUFBQSxPQUFBQSxLQUFBQSxJQUFBQSxDQUFBQSxnQ0FBQUEsWUFBYUcsZ0JBQUFBLEtBQWdCLGdCQUE3QkgsOEJBQStCWSxHQUFHLENBQUNiLE1BQU1jLFFBQVE7UUFDakRYO0lBQ0Y7O2dEQUUwQjtnQkFDeEJGO1lBQUFBLGVBQUFBLE9BQUFBLEtBQUFBLElBQUFBLENBQUFBLGdDQUFBQSxZQUFhRyxnQkFBQUEsS0FBZ0IsZ0JBQTdCSCw4QkFBK0JZLEdBQUcsQ0FBQ2IsTUFBTWMsUUFBUTtZQUNqRDt3REFBTzt3QkFDTGI7b0JBQUFBLGVBQUFBLE9BQUFBLEtBQUFBLElBQUFBLENBQUFBLGdDQUFBQSxZQUFhRyxnQkFBQUEsS0FBZ0IsZ0JBQTdCSCw4QkFBK0JjLE1BQU0sQ0FBQ2YsTUFBTWMsUUFBUTtnQkFDdEQ7O1FBQ0Y7O0lBRUEsa0ZBQWtGO0lBQ2xGLG9GQUFvRjtJQUNwRixnRUFBZ0U7SUFDaEUscUZBQXFGO0lBQ3JGLG1GQUFtRjs7Z0RBQ3pEO1lBQ3hCLElBQUliLGFBQWE7Z0JBQ2ZBLFlBQVllLGNBQWMsR0FBR2I7WUFDL0I7WUFDQTt3REFBTztvQkFDTCxJQUFJRixhQUFhO3dCQUNmQSxZQUFZZSxjQUFjLEdBQUdiO29CQUMvQjtnQkFDRjs7UUFDRjs7OzBDQUVvQjtZQUNsQixJQUFJRixlQUFlQSxZQUFZZSxjQUFjLEVBQUU7Z0JBQzdDZixZQUFZZSxjQUFjO2dCQUMxQmYsWUFBWWUsY0FBYyxHQUFHO1lBQy9CO1lBQ0E7a0RBQU87b0JBQ0wsSUFBSWYsZUFBZUEsWUFBWWUsY0FBYyxFQUFFO3dCQUM3Q2YsWUFBWWUsY0FBYzt3QkFDMUJmLFlBQVllLGNBQWMsR0FBRztvQkFDL0I7Z0JBQ0Y7O1FBQ0Y7O0lBRUEsT0FBTztBQUNUOzs7UUFyQ0VwQjtRQVlBQTtRQVdBRTs7O0tBMUNzQkwiLCJzb3VyY2VzIjpbIi9Vc2Vycy9zcmMvc2hhcmVkL2xpYi9zaWRlLWVmZmVjdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBDaGlsZHJlbiwgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIHR5cGUgSlNYIH0gZnJvbSAncmVhY3QnXG5cbnR5cGUgU3RhdGUgPSBKU1guRWxlbWVudFtdIHwgdW5kZWZpbmVkXG5cbmV4cG9ydCB0eXBlIFNpZGVFZmZlY3RQcm9wcyA9IHtcbiAgcmVkdWNlQ29tcG9uZW50c1RvU3RhdGU6IDxUIGV4dGVuZHMge30+KFxuICAgIGNvbXBvbmVudHM6IEFycmF5PFJlYWN0LlJlYWN0RWxlbWVudDxhbnk+PixcbiAgICBwcm9wczogVFxuICApID0+IFN0YXRlXG4gIGhhbmRsZVN0YXRlQ2hhbmdlPzogKHN0YXRlOiBTdGF0ZSkgPT4gdm9pZFxuICBoZWFkTWFuYWdlcjogYW55XG4gIGluQW1wTW9kZT86IGJvb2xlYW5cbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZVxufVxuXG5jb25zdCBpc1NlcnZlciA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnXG5jb25zdCB1c2VDbGllbnRPbmx5TGF5b3V0RWZmZWN0ID0gaXNTZXJ2ZXIgPyAoKSA9PiB7fSA6IHVzZUxheW91dEVmZmVjdFxuY29uc3QgdXNlQ2xpZW50T25seUVmZmVjdCA9IGlzU2VydmVyID8gKCkgPT4ge30gOiB1c2VFZmZlY3RcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2lkZUVmZmVjdChwcm9wczogU2lkZUVmZmVjdFByb3BzKSB7XG4gIGNvbnN0IHsgaGVhZE1hbmFnZXIsIHJlZHVjZUNvbXBvbmVudHNUb1N0YXRlIH0gPSBwcm9wc1xuXG4gIGZ1bmN0aW9uIGVtaXRDaGFuZ2UoKSB7XG4gICAgaWYgKGhlYWRNYW5hZ2VyICYmIGhlYWRNYW5hZ2VyLm1vdW50ZWRJbnN0YW5jZXMpIHtcbiAgICAgIGNvbnN0IGhlYWRFbGVtZW50cyA9IENoaWxkcmVuLnRvQXJyYXkoXG4gICAgICAgIEFycmF5LmZyb20oaGVhZE1hbmFnZXIubW91bnRlZEluc3RhbmNlcyBhcyBTZXQ8UmVhY3QuUmVhY3ROb2RlPikuZmlsdGVyKFxuICAgICAgICAgIEJvb2xlYW5cbiAgICAgICAgKVxuICAgICAgKSBhcyBSZWFjdC5SZWFjdEVsZW1lbnRbXVxuICAgICAgaGVhZE1hbmFnZXIudXBkYXRlSGVhZChyZWR1Y2VDb21wb25lbnRzVG9TdGF0ZShoZWFkRWxlbWVudHMsIHByb3BzKSlcbiAgICB9XG4gIH1cblxuICBpZiAoaXNTZXJ2ZXIpIHtcbiAgICBoZWFkTWFuYWdlcj8ubW91bnRlZEluc3RhbmNlcz8uYWRkKHByb3BzLmNoaWxkcmVuKVxuICAgIGVtaXRDaGFuZ2UoKVxuICB9XG5cbiAgdXNlQ2xpZW50T25seUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaGVhZE1hbmFnZXI/Lm1vdW50ZWRJbnN0YW5jZXM/LmFkZChwcm9wcy5jaGlsZHJlbilcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaGVhZE1hbmFnZXI/Lm1vdW50ZWRJbnN0YW5jZXM/LmRlbGV0ZShwcm9wcy5jaGlsZHJlbilcbiAgICB9XG4gIH0pXG5cbiAgLy8gV2UgbmVlZCB0byBjYWxsIGB1cGRhdGVIZWFkYCBtZXRob2Qgd2hlbmV2ZXIgdGhlIGBTaWRlRWZmZWN0YCBpcyB0cmlnZ2VyIGluIGFsbFxuICAvLyBsaWZlLWN5Y2xlczogbW91bnQsIHVwZGF0ZSwgdW5tb3VudC4gSG93ZXZlciwgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGBTaWRlRWZmZWN0YHNcbiAgLy8gYmVpbmcgcmVuZGVyZWQsIHdlIG9ubHkgdHJpZ2dlciB0aGUgbWV0aG9kIGZyb20gdGhlIGxhc3Qgb25lLlxuICAvLyBUaGlzIGlzIGVuc3VyZWQgYnkga2VlcGluZyB0aGUgbGFzdCB1bmZsdXNoZWQgYHVwZGF0ZUhlYWRgIGluIHRoZSBgX3BlbmRpbmdVcGRhdGVgXG4gIC8vIHNpbmdsZXRvbiBpbiB0aGUgbGF5b3V0IGVmZmVjdCBwYXNzLCBhbmQgYWN0dWFsbHkgdHJpZ2dlciBpdCBpbiB0aGUgZWZmZWN0IHBhc3MuXG4gIHVzZUNsaWVudE9ubHlMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChoZWFkTWFuYWdlcikge1xuICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUgPSBlbWl0Q2hhbmdlXG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoaGVhZE1hbmFnZXIpIHtcbiAgICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUgPSBlbWl0Q2hhbmdlXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIHVzZUNsaWVudE9ubHlFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChoZWFkTWFuYWdlciAmJiBoZWFkTWFuYWdlci5fcGVuZGluZ1VwZGF0ZSkge1xuICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUoKVxuICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUgPSBudWxsXG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoaGVhZE1hbmFnZXIgJiYgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUpIHtcbiAgICAgICAgaGVhZE1hbmFnZXIuX3BlbmRpbmdVcGRhdGUoKVxuICAgICAgICBoZWFkTWFuYWdlci5fcGVuZGluZ1VwZGF0ZSA9IG51bGxcbiAgICAgIH1cbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIG51bGxcbn1cbiJdLCJuYW1lcyI6WyJTaWRlRWZmZWN0IiwiaXNTZXJ2ZXIiLCJ3aW5kb3ciLCJ1c2VDbGllbnRPbmx5TGF5b3V0RWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlQ2xpZW50T25seUVmZmVjdCIsInVzZUVmZmVjdCIsInByb3BzIiwiaGVhZE1hbmFnZXIiLCJyZWR1Y2VDb21wb25lbnRzVG9TdGF0ZSIsImVtaXRDaGFuZ2UiLCJtb3VudGVkSW5zdGFuY2VzIiwiaGVhZEVsZW1lbnRzIiwiQ2hpbGRyZW4iLCJ0b0FycmF5IiwiQXJyYXkiLCJmcm9tIiwiZmlsdGVyIiwiQm9vbGVhbiIsInVwZGF0ZUhlYWQiLCJhZGQiLCJjaGlsZHJlbiIsImRlbGV0ZSIsIl9wZW5kaW5nVXBkYXRlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/side-effect.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/tailwind-merge/dist/bundle-mjs.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTailwindMerge: () => (/* binding */ createTailwindMerge),\n/* harmony export */   extendTailwindMerge: () => (/* binding */ extendTailwindMerge),\n/* harmony export */   fromTheme: () => (/* binding */ fromTheme),\n/* harmony export */   getDefaultConfig: () => (/* binding */ getDefaultConfig),\n/* harmony export */   mergeConfigs: () => (/* binding */ mergeConfigs),\n/* harmony export */   twJoin: () => (/* binding */ twJoin),\n/* harmony export */   twMerge: () => (/* binding */ twMerge),\n/* harmony export */   validators: () => (/* binding */ validators)\n/* harmony export */ });\nconst CLASS_PART_SEPARATOR = '-';\nconst createClassGroupUtils = config => {\n  const classMap = createClassMap(config);\n  const {\n    conflictingClassGroups,\n    conflictingClassGroupModifiers\n  } = config;\n  const getClassGroupId = className => {\n    const classParts = className.split(CLASS_PART_SEPARATOR);\n    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n    if (classParts[0] === '' && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  };\n  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {\n    const conflicts = conflictingClassGroups[classGroupId] || [];\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];\n    }\n    return conflicts;\n  };\n  return {\n    getClassGroupId,\n    getConflictingClassGroupIds\n  };\n};\nconst getGroupRecursive = (classParts, classPartObject) => {\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  const currentClassPart = classParts[0];\n  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return undefined;\n  }\n  const classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return classPartObject.validators.find(({\n    validator\n  }) => validator(classRest))?.classGroupId;\n};\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nconst getGroupIdForArbitraryProperty = className => {\n  if (arbitraryPropertyRegex.test(className)) {\n    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));\n    if (property) {\n      // I use two dots here because one dot is used as prefix for class groups in plugins\n      return 'arbitrary..' + property;\n    }\n  }\n};\n/**\n * Exported for testing only\n */\nconst createClassMap = config => {\n  const {\n    theme,\n    classGroups\n  } = config;\n  const classMap = {\n    nextPart: new Map(),\n    validators: []\n  };\n  for (const classGroupId in classGroups) {\n    processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);\n  }\n  return classMap;\n};\nconst processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {\n  classGroup.forEach(classDefinition => {\n    if (typeof classDefinition === 'string') {\n      const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === 'function') {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(([key, classGroup]) => {\n      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n};\nconst getPart = (classPartObject, path) => {\n  let currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach(pathPart => {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n};\nconst isThemeGetter = func => func.isThemeGetter;\n\n// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance\nconst createLruCache = maxCacheSize => {\n  if (maxCacheSize < 1) {\n    return {\n      get: () => undefined,\n      set: () => {}\n    };\n  }\n  let cacheSize = 0;\n  let cache = new Map();\n  let previousCache = new Map();\n  const update = (key, value) => {\n    cache.set(key, value);\n    cacheSize++;\n    if (cacheSize > maxCacheSize) {\n      cacheSize = 0;\n      previousCache = cache;\n      cache = new Map();\n    }\n  };\n  return {\n    get(key) {\n      let value = cache.get(key);\n      if (value !== undefined) {\n        return value;\n      }\n      if ((value = previousCache.get(key)) !== undefined) {\n        update(key, value);\n        return value;\n      }\n    },\n    set(key, value) {\n      if (cache.has(key)) {\n        cache.set(key, value);\n      } else {\n        update(key, value);\n      }\n    }\n  };\n};\nconst IMPORTANT_MODIFIER = '!';\nconst MODIFIER_SEPARATOR = ':';\nconst MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;\nconst createParseClassName = config => {\n  const {\n    prefix,\n    experimentalParseClassName\n  } = config;\n  /**\n   * Parse class name into parts.\n   *\n   * Inspired by `splitAtTopLevelOnly` used in Tailwind CSS\n   * @see https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js\n   */\n  let parseClassName = className => {\n    const modifiers = [];\n    let bracketDepth = 0;\n    let parenDepth = 0;\n    let modifierStart = 0;\n    let postfixModifierPosition;\n    for (let index = 0; index < className.length; index++) {\n      let currentCharacter = className[index];\n      if (bracketDepth === 0 && parenDepth === 0) {\n        if (currentCharacter === MODIFIER_SEPARATOR) {\n          modifiers.push(className.slice(modifierStart, index));\n          modifierStart = index + MODIFIER_SEPARATOR_LENGTH;\n          continue;\n        }\n        if (currentCharacter === '/') {\n          postfixModifierPosition = index;\n          continue;\n        }\n      }\n      if (currentCharacter === '[') {\n        bracketDepth++;\n      } else if (currentCharacter === ']') {\n        bracketDepth--;\n      } else if (currentCharacter === '(') {\n        parenDepth++;\n      } else if (currentCharacter === ')') {\n        parenDepth--;\n      }\n    }\n    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n    const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);\n    const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;\n    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;\n    return {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    };\n  };\n  if (prefix) {\n    const fullPrefix = prefix + MODIFIER_SEPARATOR;\n    const parseClassNameOriginal = parseClassName;\n    parseClassName = className => className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {\n      isExternal: true,\n      modifiers: [],\n      hasImportantModifier: false,\n      baseClassName: className,\n      maybePostfixModifierPosition: undefined\n    };\n  }\n  if (experimentalParseClassName) {\n    const parseClassNameOriginal = parseClassName;\n    parseClassName = className => experimentalParseClassName({\n      className,\n      parseClassName: parseClassNameOriginal\n    });\n  }\n  return parseClassName;\n};\nconst stripImportantModifier = baseClassName => {\n  if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {\n    return baseClassName.substring(0, baseClassName.length - 1);\n  }\n  /**\n   * In Tailwind CSS v3 the important modifier was at the start of the base class name. This is still supported for legacy reasons.\n   * @see https://github.com/dcastil/tailwind-merge/issues/513#issuecomment-2614029864\n   */\n  if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {\n    return baseClassName.substring(1);\n  }\n  return baseClassName;\n};\n\n/**\n * Sorts modifiers according to following schema:\n * - Predefined modifiers are sorted alphabetically\n * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it\n */\nconst createSortModifiers = config => {\n  const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map(modifier => [modifier, true]));\n  const sortModifiers = modifiers => {\n    if (modifiers.length <= 1) {\n      return modifiers;\n    }\n    const sortedModifiers = [];\n    let unsortedModifiers = [];\n    modifiers.forEach(modifier => {\n      const isPositionSensitive = modifier[0] === '[' || orderSensitiveModifiers[modifier];\n      if (isPositionSensitive) {\n        sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n        unsortedModifiers = [];\n      } else {\n        unsortedModifiers.push(modifier);\n      }\n    });\n    sortedModifiers.push(...unsortedModifiers.sort());\n    return sortedModifiers;\n  };\n  return sortModifiers;\n};\nconst createConfigUtils = config => ({\n  cache: createLruCache(config.cacheSize),\n  parseClassName: createParseClassName(config),\n  sortModifiers: createSortModifiers(config),\n  ...createClassGroupUtils(config)\n});\nconst SPLIT_CLASSES_REGEX = /\\s+/;\nconst mergeClassList = (classList, configUtils) => {\n  const {\n    parseClassName,\n    getClassGroupId,\n    getConflictingClassGroupIds,\n    sortModifiers\n  } = configUtils;\n  /**\n   * Set of classGroupIds in following format:\n   * `{importantModifier}{variantModifiers}{classGroupId}`\n   * @example 'float'\n   * @example 'hover:focus:bg-color'\n   * @example 'md:!pr'\n   */\n  const classGroupsInConflict = [];\n  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n  let result = '';\n  for (let index = classNames.length - 1; index >= 0; index -= 1) {\n    const originalClassName = classNames[index];\n    const {\n      isExternal,\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    } = parseClassName(originalClassName);\n    if (isExternal) {\n      result = originalClassName + (result.length > 0 ? ' ' + result : result);\n      continue;\n    }\n    let hasPostfixModifier = !!maybePostfixModifierPosition;\n    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n    if (!classGroupId) {\n      if (!hasPostfixModifier) {\n        // Not a Tailwind class\n        result = originalClassName + (result.length > 0 ? ' ' + result : result);\n        continue;\n      }\n      classGroupId = getClassGroupId(baseClassName);\n      if (!classGroupId) {\n        // Not a Tailwind class\n        result = originalClassName + (result.length > 0 ? ' ' + result : result);\n        continue;\n      }\n      hasPostfixModifier = false;\n    }\n    const variantModifier = sortModifiers(modifiers).join(':');\n    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n    const classId = modifierId + classGroupId;\n    if (classGroupsInConflict.includes(classId)) {\n      // Tailwind class omitted due to conflict\n      continue;\n    }\n    classGroupsInConflict.push(classId);\n    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n    for (let i = 0; i < conflictGroups.length; ++i) {\n      const group = conflictGroups[i];\n      classGroupsInConflict.push(modifierId + group);\n    }\n    // Tailwind class not in conflict\n    result = originalClassName + (result.length > 0 ? ' ' + result : result);\n  }\n  return result;\n};\n\n/**\n * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.\n *\n * Specifically:\n * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js\n * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts\n *\n * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n */\nfunction twJoin() {\n  let index = 0;\n  let argument;\n  let resolvedValue;\n  let string = '';\n  while (index < arguments.length) {\n    if (argument = arguments[index++]) {\n      if (resolvedValue = toValue(argument)) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\nconst toValue = mix => {\n  if (typeof mix === 'string') {\n    return mix;\n  }\n  let resolvedValue;\n  let string = '';\n  for (let k = 0; k < mix.length; k++) {\n    if (mix[k]) {\n      if (resolvedValue = toValue(mix[k])) {\n        string && (string += ' ');\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n};\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n  let configUtils;\n  let cacheGet;\n  let cacheSet;\n  let functionToCall = initTailwindMerge;\n  function initTailwindMerge(classList) {\n    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\n    configUtils = createConfigUtils(config);\n    cacheGet = configUtils.cache.get;\n    cacheSet = configUtils.cache.set;\n    functionToCall = tailwindMerge;\n    return tailwindMerge(classList);\n  }\n  function tailwindMerge(classList) {\n    const cachedResult = cacheGet(classList);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const result = mergeClassList(classList, configUtils);\n    cacheSet(classList, result);\n    return result;\n  }\n  return function callTailwindMerge() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\nconst fromTheme = key => {\n  const themeGetter = theme => theme[key] || [];\n  themeGetter.isThemeGetter = true;\n  return themeGetter;\n};\nconst arbitraryValueRegex = /^\\[(?:(\\w[\\w-]*):)?(.+)\\]$/i;\nconst arbitraryVariableRegex = /^\\((?:(\\w[\\w-]*):)?(.+)\\)$/i;\nconst fractionRegex = /^\\d+\\/\\d+$/;\nconst tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nconst lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nconst colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\n// Shadow always begins with x and y offset separated by underscore optionally prepended by inset\nconst shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nconst imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nconst isFraction = value => fractionRegex.test(value);\nconst isNumber = value => Boolean(value) && !Number.isNaN(Number(value));\nconst isInteger = value => Boolean(value) && Number.isInteger(Number(value));\nconst isPercent = value => value.endsWith('%') && isNumber(value.slice(0, -1));\nconst isTshirtSize = value => tshirtUnitRegex.test(value);\nconst isAny = () => true;\nconst isLengthOnly = value =>\n// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n// For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n// I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\nlengthUnitRegex.test(value) && !colorFunctionRegex.test(value);\nconst isNever = () => false;\nconst isShadow = value => shadowRegex.test(value);\nconst isImage = value => imageRegex.test(value);\nconst isAnyNonArbitrary = value => !isArbitraryValue(value) && !isArbitraryVariable(value);\nconst isArbitrarySize = value => getIsArbitraryValue(value, isLabelSize, isNever);\nconst isArbitraryValue = value => arbitraryValueRegex.test(value);\nconst isArbitraryLength = value => getIsArbitraryValue(value, isLabelLength, isLengthOnly);\nconst isArbitraryNumber = value => getIsArbitraryValue(value, isLabelNumber, isNumber);\nconst isArbitraryPosition = value => getIsArbitraryValue(value, isLabelPosition, isNever);\nconst isArbitraryImage = value => getIsArbitraryValue(value, isLabelImage, isImage);\nconst isArbitraryShadow = value => getIsArbitraryValue(value, isNever, isShadow);\nconst isArbitraryVariable = value => arbitraryVariableRegex.test(value);\nconst isArbitraryVariableLength = value => getIsArbitraryVariable(value, isLabelLength);\nconst isArbitraryVariableFamilyName = value => getIsArbitraryVariable(value, isLabelFamilyName);\nconst isArbitraryVariablePosition = value => getIsArbitraryVariable(value, isLabelPosition);\nconst isArbitraryVariableSize = value => getIsArbitraryVariable(value, isLabelSize);\nconst isArbitraryVariableImage = value => getIsArbitraryVariable(value, isLabelImage);\nconst isArbitraryVariableShadow = value => getIsArbitraryVariable(value, isLabelShadow, true);\n// Helpers\nconst getIsArbitraryValue = (value, testLabel, testValue) => {\n  const result = arbitraryValueRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return testLabel(result[1]);\n    }\n    return testValue(result[2]);\n  }\n  return false;\n};\nconst getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false) => {\n  const result = arbitraryVariableRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return testLabel(result[1]);\n    }\n    return shouldMatchNoLabel;\n  }\n  return false;\n};\n// Labels\nconst isLabelPosition = label => label === 'position';\nconst imageLabels = /*#__PURE__*/new Set(['image', 'url']);\nconst isLabelImage = label => imageLabels.has(label);\nconst sizeLabels = /*#__PURE__*/new Set(['length', 'size', 'percentage']);\nconst isLabelSize = label => sizeLabels.has(label);\nconst isLabelLength = label => label === 'length';\nconst isLabelNumber = label => label === 'number';\nconst isLabelFamilyName = label => label === 'family-name';\nconst isLabelShadow = label => label === 'shadow';\nconst validators = /*#__PURE__*/Object.defineProperty({\n  __proto__: null,\n  isAny,\n  isAnyNonArbitrary,\n  isArbitraryImage,\n  isArbitraryLength,\n  isArbitraryNumber,\n  isArbitraryPosition,\n  isArbitraryShadow,\n  isArbitrarySize,\n  isArbitraryValue,\n  isArbitraryVariable,\n  isArbitraryVariableFamilyName,\n  isArbitraryVariableImage,\n  isArbitraryVariableLength,\n  isArbitraryVariablePosition,\n  isArbitraryVariableShadow,\n  isArbitraryVariableSize,\n  isFraction,\n  isInteger,\n  isNumber,\n  isPercent,\n  isTshirtSize\n}, Symbol.toStringTag, {\n  value: 'Module'\n});\nconst getDefaultConfig = () => {\n  /**\n   * Theme getters for theme variable namespaces\n   * @see https://tailwindcss.com/docs/theme#theme-variable-namespaces\n   */\n  /***/\n  const themeColor = fromTheme('color');\n  const themeFont = fromTheme('font');\n  const themeText = fromTheme('text');\n  const themeFontWeight = fromTheme('font-weight');\n  const themeTracking = fromTheme('tracking');\n  const themeLeading = fromTheme('leading');\n  const themeBreakpoint = fromTheme('breakpoint');\n  const themeContainer = fromTheme('container');\n  const themeSpacing = fromTheme('spacing');\n  const themeRadius = fromTheme('radius');\n  const themeShadow = fromTheme('shadow');\n  const themeInsetShadow = fromTheme('inset-shadow');\n  const themeDropShadow = fromTheme('drop-shadow');\n  const themeBlur = fromTheme('blur');\n  const themePerspective = fromTheme('perspective');\n  const themeAspect = fromTheme('aspect');\n  const themeEase = fromTheme('ease');\n  const themeAnimate = fromTheme('animate');\n  /**\n   * Helpers to avoid repeating the same scales\n   *\n   * We use functions that create a new array every time they're called instead of static arrays.\n   * This ensures that users who modify any scale by mutating the array (e.g. with `array.push(element)`) don't accidentally mutate arrays in other parts of the config.\n   */\n  /***/\n  const scaleBreak = () => ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];\n  const scalePosition = () => ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];\n  const scaleOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'];\n  const scaleOverscroll = () => ['auto', 'contain', 'none'];\n  const scaleUnambiguousSpacing = () => [isArbitraryVariable, isArbitraryValue, themeSpacing];\n  const scaleInset = () => [isFraction, 'full', 'auto', ...scaleUnambiguousSpacing()];\n  const scaleGridTemplateColsRows = () => [isInteger, 'none', 'subgrid', isArbitraryVariable, isArbitraryValue];\n  const scaleGridColRowStartAndEnd = () => ['auto', {\n    span: ['full', isInteger, isArbitraryVariable, isArbitraryValue]\n  }, isArbitraryVariable, isArbitraryValue];\n  const scaleGridColRowStartOrEnd = () => [isInteger, 'auto', isArbitraryVariable, isArbitraryValue];\n  const scaleGridAutoColsRows = () => ['auto', 'min', 'max', 'fr', isArbitraryVariable, isArbitraryValue];\n  const scaleAlignPrimaryAxis = () => ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch', 'baseline'];\n  const scaleAlignSecondaryAxis = () => ['start', 'end', 'center', 'stretch'];\n  const scaleMargin = () => ['auto', ...scaleUnambiguousSpacing()];\n  const scaleSizing = () => [isFraction, 'auto', 'full', 'dvw', 'dvh', 'lvw', 'lvh', 'svw', 'svh', 'min', 'max', 'fit', ...scaleUnambiguousSpacing()];\n  const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue];\n  const scaleGradientStopPosition = () => [isPercent, isArbitraryLength];\n  const scaleRadius = () => [\n  // Deprecated since Tailwind CSS v4.0.0\n  '', 'none', 'full', themeRadius, isArbitraryVariable, isArbitraryValue];\n  const scaleBorderWidth = () => ['', isNumber, isArbitraryVariableLength, isArbitraryLength];\n  const scaleLineStyle = () => ['solid', 'dashed', 'dotted', 'double'];\n  const scaleBlendMode = () => ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity'];\n  const scaleBlur = () => [\n  // Deprecated since Tailwind CSS v4.0.0\n  '', 'none', themeBlur, isArbitraryVariable, isArbitraryValue];\n  const scaleOrigin = () => ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryVariable, isArbitraryValue];\n  const scaleRotate = () => ['none', isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleScale = () => ['none', isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue];\n  const scaleTranslate = () => [isFraction, 'full', ...scaleUnambiguousSpacing()];\n  return {\n    cacheSize: 500,\n    theme: {\n      animate: ['spin', 'ping', 'pulse', 'bounce'],\n      aspect: ['video'],\n      blur: [isTshirtSize],\n      breakpoint: [isTshirtSize],\n      color: [isAny],\n      container: [isTshirtSize],\n      'drop-shadow': [isTshirtSize],\n      ease: ['in', 'out', 'in-out'],\n      font: [isAnyNonArbitrary],\n      'font-weight': ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black'],\n      'inset-shadow': [isTshirtSize],\n      leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose'],\n      perspective: ['dramatic', 'near', 'normal', 'midrange', 'distant', 'none'],\n      radius: [isTshirtSize],\n      shadow: [isTshirtSize],\n      spacing: ['px', isNumber],\n      text: [isTshirtSize],\n      tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest']\n    },\n    classGroups: {\n      // --------------\n      // --- Layout ---\n      // --------------\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: ['auto', 'square', isFraction, isArbitraryValue, isArbitraryVariable, themeAspect]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       * @deprecated since Tailwind CSS v4.0.0\n       */\n      container: ['container'],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [isNumber, isArbitraryValue, isArbitraryVariable, themeContainer]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      'break-after': [{\n        'break-after': scaleBreak()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      'break-before': [{\n        'break-before': scaleBreak()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      'break-inside': [{\n        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      'box-decoration': [{\n        'box-decoration': ['slice', 'clone']\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: ['border', 'content']\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],\n      /**\n       * Screen Reader Only\n       * @see https://tailwindcss.com/docs/display#screen-reader-only\n       */\n      sr: ['sr-only', 'not-sr-only'],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      float: [{\n        float: ['right', 'left', 'none', 'start', 'end']\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: ['left', 'right', 'both', 'none', 'start', 'end']\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: ['isolate', 'isolation-auto'],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      'object-fit': [{\n        object: ['contain', 'cover', 'fill', 'none', 'scale-down']\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      'object-position': [{\n        object: [...scalePosition(), isArbitraryValue, isArbitraryVariable]\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: scaleOverflow()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-x': [{\n        'overflow-x': scaleOverflow()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      'overflow-y': [{\n        'overflow-y': scaleOverflow()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-x': [{\n        'overscroll-x': scaleOverscroll()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      'overscroll-y': [{\n        'overscroll-y': scaleOverscroll()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: scaleInset()\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-x': [{\n        'inset-x': scaleInset()\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      'inset-y': [{\n        'inset-y': scaleInset()\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: scaleInset()\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: scaleInset()\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: scaleInset()\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: scaleInset()\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: scaleInset()\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: scaleInset()\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: ['visible', 'invisible', 'collapse'],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: [isInteger, 'auto', isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------------\n      // --- Flexbox and Grid ---\n      // ------------------------\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: [isFraction, 'full', 'auto', themeContainer, ...scaleUnambiguousSpacing()]\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      'flex-direction': [{\n        flex: ['row', 'row-reverse', 'col', 'col-reverse']\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      'flex-wrap': [{\n        flex: ['nowrap', 'wrap', 'wrap-reverse']\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: [isNumber, isFraction, 'auto', 'initial', 'none', isArbitraryValue]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: [isInteger, 'first', 'last', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      'grid-cols': [{\n        'grid-cols': scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start-end': [{\n        col: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-start': [{\n        'col-start': scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      'col-end': [{\n        'col-end': scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      'grid-rows': [{\n        'grid-rows': scaleGridTemplateColsRows()\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start-end': [{\n        row: scaleGridColRowStartAndEnd()\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-start': [{\n        'row-start': scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      'row-end': [{\n        'row-end': scaleGridColRowStartOrEnd()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      'grid-flow': [{\n        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      'auto-cols': [{\n        'auto-cols': scaleGridAutoColsRows()\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      'auto-rows': [{\n        'auto-rows': scaleGridAutoColsRows()\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-x': [{\n        'gap-x': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      'gap-y': [{\n        'gap-y': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      'justify-content': [{\n        justify: [...scaleAlignPrimaryAxis(), 'normal']\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      'justify-items': [{\n        'justify-items': [...scaleAlignSecondaryAxis(), 'normal']\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      'justify-self': [{\n        'justify-self': ['auto', ...scaleAlignSecondaryAxis()]\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      'align-content': [{\n        content: ['normal', ...scaleAlignPrimaryAxis()]\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      'align-items': [{\n        items: [...scaleAlignSecondaryAxis(), 'baseline']\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      'align-self': [{\n        self: ['auto', ...scaleAlignSecondaryAxis(), 'baseline']\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      'place-content': [{\n        'place-content': scaleAlignPrimaryAxis()\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      'place-items': [{\n        'place-items': [...scaleAlignSecondaryAxis(), 'baseline']\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      'place-self': [{\n        'place-self': ['auto', ...scaleAlignSecondaryAxis()]\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: scaleMargin()\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: scaleMargin()\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: scaleMargin()\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: scaleMargin()\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: scaleMargin()\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: scaleMargin()\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: scaleMargin()\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: scaleMargin()\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: scaleMargin()\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      'space-x': [{\n        'space-x': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      'space-x-reverse': ['space-x-reverse'],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      'space-y': [{\n        'space-y': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/margin#adding-space-between-children\n       */\n      'space-y-reverse': ['space-y-reverse'],\n      // --------------\n      // --- Sizing ---\n      // --------------\n      /**\n       * Size\n       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height\n       */\n      size: [{\n        size: scaleSizing()\n      }],\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: [themeContainer, 'screen', ...scaleSizing()]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      'min-w': [{\n        'min-w': [themeContainer, 'screen', /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n        'none', ...scaleSizing()]\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      'max-w': [{\n        'max-w': [themeContainer, 'screen', 'none', /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n        'prose', /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n        {\n          screen: [themeBreakpoint]\n        }, ...scaleSizing()]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: ['screen', ...scaleSizing()]\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      'min-h': [{\n        'min-h': ['screen', 'none', ...scaleSizing()]\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      'max-h': [{\n        'max-h': ['screen', ...scaleSizing()]\n      }],\n      // ------------------\n      // --- Typography ---\n      // ------------------\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      'font-size': [{\n        text: ['base', themeText, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      'font-smoothing': ['antialiased', 'subpixel-antialiased'],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      'font-style': ['italic', 'not-italic'],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      'font-weight': [{\n        font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Font Stretch\n       * @see https://tailwindcss.com/docs/font-stretch\n       */\n      'font-stretch': [{\n        'font-stretch': ['ultra-condensed', 'extra-condensed', 'condensed', 'semi-condensed', 'normal', 'semi-expanded', 'expanded', 'extra-expanded', 'ultra-expanded', isPercent, isArbitraryValue]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      'font-family': [{\n        font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-normal': ['normal-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-ordinal': ['ordinal'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-slashed-zero': ['slashed-zero'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-figure': ['lining-nums', 'oldstyle-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-spacing': ['proportional-nums', 'tabular-nums'],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      'fvn-fraction': ['diagonal-fractions', 'stacked-fractions'],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: [themeTracking, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      'line-clamp': [{\n        'line-clamp': [isNumber, 'none', isArbitraryVariable, isArbitraryNumber]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: [/** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */\n        themeLeading, ...scaleUnambiguousSpacing()]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      'list-image': [{\n        'list-image': ['none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      'list-style-position': [{\n        list: ['inside', 'outside']\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      'list-style-type': [{\n        list: ['disc', 'decimal', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      'text-alignment': [{\n        text: ['left', 'center', 'right', 'justify', 'start', 'end']\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://v3.tailwindcss.com/docs/placeholder-color\n       */\n      'placeholder-color': [{\n        placeholder: scaleColor()\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      'text-color': [{\n        text: scaleColor()\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      'text-decoration-style': [{\n        decoration: [...scaleLineStyle(), 'wavy']\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      'text-decoration-thickness': [{\n        decoration: [isNumber, 'from-font', 'auto', isArbitraryVariable, isArbitraryLength]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      'text-decoration-color': [{\n        decoration: scaleColor()\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      'underline-offset': [{\n        'underline-offset': [isNumber, 'auto', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],\n      /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */\n      'text-wrap': [{\n        text: ['wrap', 'nowrap', 'balance', 'pretty']\n      }],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: scaleUnambiguousSpacing()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      'vertical-align': [{\n        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      break: [{\n        break: ['normal', 'words', 'all', 'keep']\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: ['none', 'manual', 'auto']\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: ['none', isArbitraryVariable, isArbitraryValue]\n      }],\n      // -------------------\n      // --- Backgrounds ---\n      // -------------------\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      'bg-attachment': [{\n        bg: ['fixed', 'local', 'scroll']\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      'bg-clip': [{\n        'bg-clip': ['border', 'padding', 'content', 'text']\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      'bg-origin': [{\n        'bg-origin': ['border', 'padding', 'content']\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      'bg-position': [{\n        bg: [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition]\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      'bg-repeat': [{\n        bg: ['no-repeat', {\n          repeat: ['', 'x', 'y', 'space', 'round']\n        }]\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      'bg-size': [{\n        bg: ['auto', 'cover', 'contain', isArbitraryVariableSize, isArbitrarySize]\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      'bg-image': [{\n        bg: ['none', {\n          linear: [{\n            to: ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']\n          }, isInteger, isArbitraryVariable, isArbitraryValue],\n          radial: ['', isArbitraryVariable, isArbitraryValue],\n          conic: [isInteger, isArbitraryVariable, isArbitraryValue]\n        }, isArbitraryVariableImage, isArbitraryImage]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      'bg-color': [{\n        bg: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from-pos': [{\n        from: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via-pos': [{\n        via: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to-pos': [{\n        to: scaleGradientStopPosition()\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-from': [{\n        from: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-via': [{\n        via: scaleColor()\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      'gradient-to': [{\n        to: scaleColor()\n      }],\n      // ---------------\n      // --- Borders ---\n      // ---------------\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: scaleRadius()\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-s': [{\n        'rounded-s': scaleRadius()\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-e': [{\n        'rounded-e': scaleRadius()\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-t': [{\n        'rounded-t': scaleRadius()\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-r': [{\n        'rounded-r': scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-b': [{\n        'rounded-b': scaleRadius()\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-l': [{\n        'rounded-l': scaleRadius()\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ss': [{\n        'rounded-ss': scaleRadius()\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-se': [{\n        'rounded-se': scaleRadius()\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-ee': [{\n        'rounded-ee': scaleRadius()\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-es': [{\n        'rounded-es': scaleRadius()\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tl': [{\n        'rounded-tl': scaleRadius()\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-tr': [{\n        'rounded-tr': scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-br': [{\n        'rounded-br': scaleRadius()\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      'rounded-bl': [{\n        'rounded-bl': scaleRadius()\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w': [{\n        border: scaleBorderWidth()\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-x': [{\n        'border-x': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-y': [{\n        'border-y': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-s': [{\n        'border-s': scaleBorderWidth()\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-e': [{\n        'border-e': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-t': [{\n        'border-t': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-r': [{\n        'border-r': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-b': [{\n        'border-b': scaleBorderWidth()\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      'border-w-l': [{\n        'border-l': scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      'divide-x': [{\n        'divide-x': scaleBorderWidth()\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      'divide-x-reverse': ['divide-x-reverse'],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      'divide-y': [{\n        'divide-y': scaleBorderWidth()\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/border-width#between-children\n       */\n      'divide-y-reverse': ['divide-y-reverse'],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      'border-style': [{\n        border: [...scaleLineStyle(), 'hidden', 'none']\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style\n       */\n      'divide-style': [{\n        divide: [...scaleLineStyle(), 'hidden', 'none']\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color': [{\n        border: scaleColor()\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-x': [{\n        'border-x': scaleColor()\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-y': [{\n        'border-y': scaleColor()\n      }],\n      /**\n       * Border Color S\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-s': [{\n        'border-s': scaleColor()\n      }],\n      /**\n       * Border Color E\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-e': [{\n        'border-e': scaleColor()\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-t': [{\n        'border-t': scaleColor()\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-r': [{\n        'border-r': scaleColor()\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-b': [{\n        'border-b': scaleColor()\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      'border-color-l': [{\n        'border-l': scaleColor()\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      'divide-color': [{\n        divide: scaleColor()\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      'outline-style': [{\n        outline: [...scaleLineStyle(), 'none', 'hidden']\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      'outline-offset': [{\n        'outline-offset': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      'outline-w': [{\n        outline: ['', isNumber, isArbitraryVariableLength, isArbitraryLength]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      'outline-color': [{\n        outline: [themeColor]\n      }],\n      // ---------------\n      // --- Effects ---\n      // ---------------\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: [\n        // Deprecated since Tailwind CSS v4.0.0\n        '', 'none', themeShadow, isArbitraryVariableShadow, isArbitraryShadow]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color\n       */\n      'shadow-color': [{\n        shadow: scaleColor()\n      }],\n      /**\n       * Inset Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow\n       */\n      'inset-shadow': [{\n        'inset-shadow': ['none', isArbitraryVariable, isArbitraryValue, themeInsetShadow]\n      }],\n      /**\n       * Inset Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color\n       */\n      'inset-shadow-color': [{\n        'inset-shadow': scaleColor()\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring\n       */\n      'ring-w': [{\n        ring: scaleBorderWidth()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      'ring-w-inset': ['ring-inset'],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color\n       */\n      'ring-color': [{\n        ring: scaleColor()\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://v3.tailwindcss.com/docs/ring-offset-width\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      'ring-offset-w': [{\n        'ring-offset': [isNumber, isArbitraryLength]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://v3.tailwindcss.com/docs/ring-offset-color\n       * @deprecated since Tailwind CSS v4.0.0\n       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158\n       */\n      'ring-offset-color': [{\n        'ring-offset': scaleColor()\n      }],\n      /**\n       * Inset Ring Width\n       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring\n       */\n      'inset-ring-w': [{\n        'inset-ring': scaleBorderWidth()\n      }],\n      /**\n       * Inset Ring Color\n       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color\n       */\n      'inset-ring-color': [{\n        'inset-ring': scaleColor()\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      'mix-blend': [{\n        'mix-blend': [...scaleBlendMode(), 'plus-darker', 'plus-lighter']\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      'bg-blend': [{\n        'bg-blend': scaleBlendMode()\n      }],\n      // ---------------\n      // --- Filters ---\n      // ---------------\n      /**\n       * Filter\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: [\n        // Deprecated since Tailwind CSS v3.0.0\n        '', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: scaleBlur()\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      'drop-shadow': [{\n        'drop-shadow': [\n        // Deprecated since Tailwind CSS v4.0.0\n        '', 'none', themeDropShadow, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      'hue-rotate': [{\n        'hue-rotate': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Filter\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      'backdrop-filter': [{\n        'backdrop-filter': [\n        // Deprecated since Tailwind CSS v3.0.0\n        '', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      'backdrop-blur': [{\n        'backdrop-blur': scaleBlur()\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      'backdrop-brightness': [{\n        'backdrop-brightness': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      'backdrop-contrast': [{\n        'backdrop-contrast': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      'backdrop-grayscale': [{\n        'backdrop-grayscale': ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      'backdrop-hue-rotate': [{\n        'backdrop-hue-rotate': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      'backdrop-invert': [{\n        'backdrop-invert': ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      'backdrop-opacity': [{\n        'backdrop-opacity': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      'backdrop-saturate': [{\n        'backdrop-saturate': [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      'backdrop-sepia': [{\n        'backdrop-sepia': ['', isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      // --------------\n      // --- Tables ---\n      // --------------\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      'border-collapse': [{\n        border: ['collapse', 'separate']\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing': [{\n        'border-spacing': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-x': [{\n        'border-spacing-x': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      'border-spacing-y': [{\n        'border-spacing-y': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      'table-layout': [{\n        table: ['auto', 'fixed']\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: ['top', 'bottom']\n      }],\n      // ---------------------------------\n      // --- Transitions and Animation ---\n      // ---------------------------------\n      /**\n       * Transition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: ['', 'all', 'colors', 'opacity', 'shadow', 'transform', 'none', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Behavior\n       * @see https://tailwindcss.com/docs/transition-behavior\n       */\n      'transition-behavior': [{\n        transition: ['normal', 'discrete']\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: [isNumber, 'initial', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: ['linear', 'initial', themeEase, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: [isNumber, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: ['none', themeAnimate, isArbitraryVariable, isArbitraryValue]\n      }],\n      // ------------------\n      // --- Transforms ---\n      // ------------------\n      /**\n       * Backface Visibility\n       * @see https://tailwindcss.com/docs/backface-visibility\n       */\n      backface: [{\n        backface: ['hidden', 'visible']\n      }],\n      /**\n       * Perspective\n       * @see https://tailwindcss.com/docs/perspective\n       */\n      perspective: [{\n        perspective: [themePerspective, isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Perspective Origin\n       * @see https://tailwindcss.com/docs/perspective-origin\n       */\n      'perspective-origin': [{\n        'perspective-origin': scaleOrigin()\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: scaleRotate()\n      }],\n      /**\n       * Rotate X\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      'rotate-x': [{\n        'rotate-x': scaleRotate()\n      }],\n      /**\n       * Rotate Y\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      'rotate-y': [{\n        'rotate-y': scaleRotate()\n      }],\n      /**\n       * Rotate Z\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      'rotate-z': [{\n        'rotate-z': scaleRotate()\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: scaleScale()\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-x': [{\n        'scale-x': scaleScale()\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-y': [{\n        'scale-y': scaleScale()\n      }],\n      /**\n       * Scale Z\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-z': [{\n        'scale-z': scaleScale()\n      }],\n      /**\n       * Scale 3D\n       * @see https://tailwindcss.com/docs/scale\n       */\n      'scale-3d': ['scale-3d'],\n      /**\n       * Skew\n       * @see https://tailwindcss.com/docs/skew\n       */\n      skew: [{\n        skew: scaleSkew()\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-x': [{\n        'skew-x': scaleSkew()\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      'skew-y': [{\n        'skew-y': scaleSkew()\n      }],\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: [isArbitraryVariable, isArbitraryValue, '', 'none', 'gpu', 'cpu']\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      'transform-origin': [{\n        origin: scaleOrigin()\n      }],\n      /**\n       * Transform Style\n       * @see https://tailwindcss.com/docs/transform-style\n       */\n      'transform-style': [{\n        transform: ['3d', 'flat']\n      }],\n      /**\n       * Translate\n       * @see https://tailwindcss.com/docs/translate\n       */\n      translate: [{\n        translate: scaleTranslate()\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-x': [{\n        'translate-x': scaleTranslate()\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-y': [{\n        'translate-y': scaleTranslate()\n      }],\n      /**\n       * Translate Z\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-z': [{\n        'translate-z': scaleTranslate()\n      }],\n      /**\n       * Translate None\n       * @see https://tailwindcss.com/docs/translate\n       */\n      'translate-none': ['translate-none'],\n      // ---------------------\n      // --- Interactivity ---\n      // ---------------------\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: scaleColor()\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: [{\n        appearance: ['none', 'auto']\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      'caret-color': [{\n        caret: scaleColor()\n      }],\n      /**\n       * Color Scheme\n       * @see https://tailwindcss.com/docs/color-scheme\n       */\n      'color-scheme': [{\n        scheme: ['normal', 'dark', 'light', 'light-dark', 'only-dark', 'only-light']\n      }],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryVariable, isArbitraryValue]\n      }],\n      /**\n       * Field Sizing\n       * @see https://tailwindcss.com/docs/field-sizing\n       */\n      'field-sizing': [{\n        'field-sizing': ['fixed', 'content']\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      'pointer-events': [{\n        'pointer-events': ['auto', 'none']\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: ['none', '', 'y', 'x']\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      'scroll-behavior': [{\n        scroll: ['auto', 'smooth']\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-m': [{\n        'scroll-m': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mx': [{\n        'scroll-mx': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-my': [{\n        'scroll-my': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ms': [{\n        'scroll-ms': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-me': [{\n        'scroll-me': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mt': [{\n        'scroll-mt': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mr': [{\n        'scroll-mr': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-mb': [{\n        'scroll-mb': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      'scroll-ml': [{\n        'scroll-ml': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-p': [{\n        'scroll-p': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-px': [{\n        'scroll-px': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-py': [{\n        'scroll-py': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-ps': [{\n        'scroll-ps': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pe': [{\n        'scroll-pe': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pt': [{\n        'scroll-pt': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pr': [{\n        'scroll-pr': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pb': [{\n        'scroll-pb': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      'scroll-pl': [{\n        'scroll-pl': scaleUnambiguousSpacing()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      'snap-align': [{\n        snap: ['start', 'end', 'center', 'align-none']\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      'snap-stop': [{\n        snap: ['normal', 'always']\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-type': [{\n        snap: ['none', 'x', 'y', 'both']\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      'snap-strictness': [{\n        snap: ['mandatory', 'proximity']\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: ['auto', 'none', 'manipulation']\n      }],\n      /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-x': [{\n        'touch-pan': ['x', 'left', 'right']\n      }],\n      /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-y': [{\n        'touch-pan': ['y', 'up', 'down']\n      }],\n      /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      'touch-pz': ['touch-pinch-zoom'],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: ['none', 'text', 'all', 'auto']\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      'will-change': [{\n        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryVariable, isArbitraryValue]\n      }],\n      // -----------\n      // --- SVG ---\n      // -----------\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: ['none', ...scaleColor()]\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      'stroke-w': [{\n        stroke: [isNumber, isArbitraryVariableLength, isArbitraryLength, isArbitraryNumber]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: ['none', ...scaleColor()]\n      }],\n      // ---------------------\n      // --- Accessibility ---\n      // ---------------------\n      /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */\n      'forced-color-adjust': [{\n        'forced-color-adjust': ['auto', 'none']\n      }]\n    },\n    conflictingClassGroups: {\n      overflow: ['overflow-x', 'overflow-y'],\n      overscroll: ['overscroll-x', 'overscroll-y'],\n      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],\n      'inset-x': ['right', 'left'],\n      'inset-y': ['top', 'bottom'],\n      flex: ['basis', 'grow', 'shrink'],\n      gap: ['gap-x', 'gap-y'],\n      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],\n      px: ['pr', 'pl'],\n      py: ['pt', 'pb'],\n      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],\n      mx: ['mr', 'ml'],\n      my: ['mt', 'mb'],\n      size: ['w', 'h'],\n      'font-size': ['leading'],\n      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],\n      'fvn-ordinal': ['fvn-normal'],\n      'fvn-slashed-zero': ['fvn-normal'],\n      'fvn-figure': ['fvn-normal'],\n      'fvn-spacing': ['fvn-normal'],\n      'fvn-fraction': ['fvn-normal'],\n      'line-clamp': ['display', 'overflow'],\n      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],\n      'rounded-s': ['rounded-ss', 'rounded-es'],\n      'rounded-e': ['rounded-se', 'rounded-ee'],\n      'rounded-t': ['rounded-tl', 'rounded-tr'],\n      'rounded-r': ['rounded-tr', 'rounded-br'],\n      'rounded-b': ['rounded-br', 'rounded-bl'],\n      'rounded-l': ['rounded-tl', 'rounded-bl'],\n      'border-spacing': ['border-spacing-x', 'border-spacing-y'],\n      'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],\n      'border-w-x': ['border-w-r', 'border-w-l'],\n      'border-w-y': ['border-w-t', 'border-w-b'],\n      'border-color': ['border-color-s', 'border-color-e', 'border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],\n      'border-color-x': ['border-color-r', 'border-color-l'],\n      'border-color-y': ['border-color-t', 'border-color-b'],\n      translate: ['translate-x', 'translate-y', 'translate-none'],\n      'translate-none': ['translate', 'translate-x', 'translate-y', 'translate-z'],\n      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],\n      'scroll-mx': ['scroll-mr', 'scroll-ml'],\n      'scroll-my': ['scroll-mt', 'scroll-mb'],\n      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],\n      'scroll-px': ['scroll-pr', 'scroll-pl'],\n      'scroll-py': ['scroll-pt', 'scroll-pb'],\n      touch: ['touch-x', 'touch-y', 'touch-pz'],\n      'touch-x': ['touch'],\n      'touch-y': ['touch'],\n      'touch-pz': ['touch']\n    },\n    conflictingClassGroupModifiers: {\n      'font-size': ['leading']\n    },\n    orderSensitiveModifiers: ['before', 'after', 'placeholder', 'file', 'marker', 'selection', 'first-line', 'first-letter', 'backdrop', '*', '**']\n  };\n};\n\n/**\n * @param baseConfig Config where other config will be merged into. This object will be mutated.\n * @param configExtension Partial config to merge into the `baseConfig`.\n */\nconst mergeConfigs = (baseConfig, {\n  cacheSize,\n  prefix,\n  experimentalParseClassName,\n  extend = {},\n  override = {}\n}) => {\n  overrideProperty(baseConfig, 'cacheSize', cacheSize);\n  overrideProperty(baseConfig, 'prefix', prefix);\n  overrideProperty(baseConfig, 'experimentalParseClassName', experimentalParseClassName);\n  overrideConfigProperties(baseConfig.theme, override.theme);\n  overrideConfigProperties(baseConfig.classGroups, override.classGroups);\n  overrideConfigProperties(baseConfig.conflictingClassGroups, override.conflictingClassGroups);\n  overrideConfigProperties(baseConfig.conflictingClassGroupModifiers, override.conflictingClassGroupModifiers);\n  overrideProperty(baseConfig, 'orderSensitiveModifiers', override.orderSensitiveModifiers);\n  mergeConfigProperties(baseConfig.theme, extend.theme);\n  mergeConfigProperties(baseConfig.classGroups, extend.classGroups);\n  mergeConfigProperties(baseConfig.conflictingClassGroups, extend.conflictingClassGroups);\n  mergeConfigProperties(baseConfig.conflictingClassGroupModifiers, extend.conflictingClassGroupModifiers);\n  mergeArrayProperties(baseConfig, extend, 'orderSensitiveModifiers');\n  return baseConfig;\n};\nconst overrideProperty = (baseObject, overrideKey, overrideValue) => {\n  if (overrideValue !== undefined) {\n    baseObject[overrideKey] = overrideValue;\n  }\n};\nconst overrideConfigProperties = (baseObject, overrideObject) => {\n  if (overrideObject) {\n    for (const key in overrideObject) {\n      overrideProperty(baseObject, key, overrideObject[key]);\n    }\n  }\n};\nconst mergeConfigProperties = (baseObject, mergeObject) => {\n  if (mergeObject) {\n    for (const key in mergeObject) {\n      mergeArrayProperties(baseObject, mergeObject, key);\n    }\n  }\n};\nconst mergeArrayProperties = (baseObject, mergeObject, key) => {\n  const mergeValue = mergeObject[key];\n  if (mergeValue !== undefined) {\n    baseObject[key] = baseObject[key] ? baseObject[key].concat(mergeValue) : mergeValue;\n  }\n};\nconst extendTailwindMerge = (configExtension, ...createConfig) => typeof configExtension === 'function' ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);\nconst twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);\n\n//# sourceMappingURL=bundle-mjs.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/zod/lib/index.mjs":
/*!****************************************!*\
  !*** ./node_modules/zod/lib/index.mjs ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   DIRTY: () => (/* binding */ DIRTY),\n/* harmony export */   EMPTY_PATH: () => (/* binding */ EMPTY_PATH),\n/* harmony export */   INVALID: () => (/* binding */ INVALID),\n/* harmony export */   NEVER: () => (/* binding */ NEVER),\n/* harmony export */   OK: () => (/* binding */ OK),\n/* harmony export */   ParseStatus: () => (/* binding */ ParseStatus),\n/* harmony export */   Schema: () => (/* binding */ ZodType),\n/* harmony export */   ZodAny: () => (/* binding */ ZodAny),\n/* harmony export */   ZodArray: () => (/* binding */ ZodArray),\n/* harmony export */   ZodBigInt: () => (/* binding */ ZodBigInt),\n/* harmony export */   ZodBoolean: () => (/* binding */ ZodBoolean),\n/* harmony export */   ZodBranded: () => (/* binding */ ZodBranded),\n/* harmony export */   ZodCatch: () => (/* binding */ ZodCatch),\n/* harmony export */   ZodDate: () => (/* binding */ ZodDate),\n/* harmony export */   ZodDefault: () => (/* binding */ ZodDefault),\n/* harmony export */   ZodDiscriminatedUnion: () => (/* binding */ ZodDiscriminatedUnion),\n/* harmony export */   ZodEffects: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodEnum: () => (/* binding */ ZodEnum),\n/* harmony export */   ZodError: () => (/* binding */ ZodError),\n/* harmony export */   ZodFirstPartyTypeKind: () => (/* binding */ ZodFirstPartyTypeKind),\n/* harmony export */   ZodFunction: () => (/* binding */ ZodFunction),\n/* harmony export */   ZodIntersection: () => (/* binding */ ZodIntersection),\n/* harmony export */   ZodIssueCode: () => (/* binding */ ZodIssueCode),\n/* harmony export */   ZodLazy: () => (/* binding */ ZodLazy),\n/* harmony export */   ZodLiteral: () => (/* binding */ ZodLiteral),\n/* harmony export */   ZodMap: () => (/* binding */ ZodMap),\n/* harmony export */   ZodNaN: () => (/* binding */ ZodNaN),\n/* harmony export */   ZodNativeEnum: () => (/* binding */ ZodNativeEnum),\n/* harmony export */   ZodNever: () => (/* binding */ ZodNever),\n/* harmony export */   ZodNull: () => (/* binding */ ZodNull),\n/* harmony export */   ZodNullable: () => (/* binding */ ZodNullable),\n/* harmony export */   ZodNumber: () => (/* binding */ ZodNumber),\n/* harmony export */   ZodObject: () => (/* binding */ ZodObject),\n/* harmony export */   ZodOptional: () => (/* binding */ ZodOptional),\n/* harmony export */   ZodParsedType: () => (/* binding */ ZodParsedType),\n/* harmony export */   ZodPipeline: () => (/* binding */ ZodPipeline),\n/* harmony export */   ZodPromise: () => (/* binding */ ZodPromise),\n/* harmony export */   ZodReadonly: () => (/* binding */ ZodReadonly),\n/* harmony export */   ZodRecord: () => (/* binding */ ZodRecord),\n/* harmony export */   ZodSchema: () => (/* binding */ ZodType),\n/* harmony export */   ZodSet: () => (/* binding */ ZodSet),\n/* harmony export */   ZodString: () => (/* binding */ ZodString),\n/* harmony export */   ZodSymbol: () => (/* binding */ ZodSymbol),\n/* harmony export */   ZodTransformer: () => (/* binding */ ZodEffects),\n/* harmony export */   ZodTuple: () => (/* binding */ ZodTuple),\n/* harmony export */   ZodType: () => (/* binding */ ZodType),\n/* harmony export */   ZodUndefined: () => (/* binding */ ZodUndefined),\n/* harmony export */   ZodUnion: () => (/* binding */ ZodUnion),\n/* harmony export */   ZodUnknown: () => (/* binding */ ZodUnknown),\n/* harmony export */   ZodVoid: () => (/* binding */ ZodVoid),\n/* harmony export */   addIssueToContext: () => (/* binding */ addIssueToContext),\n/* harmony export */   any: () => (/* binding */ anyType),\n/* harmony export */   array: () => (/* binding */ arrayType),\n/* harmony export */   bigint: () => (/* binding */ bigIntType),\n/* harmony export */   boolean: () => (/* binding */ booleanType),\n/* harmony export */   coerce: () => (/* binding */ coerce),\n/* harmony export */   custom: () => (/* binding */ custom),\n/* harmony export */   date: () => (/* binding */ dateType),\n/* harmony export */   datetimeRegex: () => (/* binding */ datetimeRegex),\n/* harmony export */   \"default\": () => (/* binding */ z),\n/* harmony export */   defaultErrorMap: () => (/* binding */ errorMap),\n/* harmony export */   discriminatedUnion: () => (/* binding */ discriminatedUnionType),\n/* harmony export */   effect: () => (/* binding */ effectsType),\n/* harmony export */   \"enum\": () => (/* binding */ enumType),\n/* harmony export */   \"function\": () => (/* binding */ functionType),\n/* harmony export */   getErrorMap: () => (/* binding */ getErrorMap),\n/* harmony export */   getParsedType: () => (/* binding */ getParsedType),\n/* harmony export */   \"instanceof\": () => (/* binding */ instanceOfType),\n/* harmony export */   intersection: () => (/* binding */ intersectionType),\n/* harmony export */   isAborted: () => (/* binding */ isAborted),\n/* harmony export */   isAsync: () => (/* binding */ isAsync),\n/* harmony export */   isDirty: () => (/* binding */ isDirty),\n/* harmony export */   isValid: () => (/* binding */ isValid),\n/* harmony export */   late: () => (/* binding */ late),\n/* harmony export */   lazy: () => (/* binding */ lazyType),\n/* harmony export */   literal: () => (/* binding */ literalType),\n/* harmony export */   makeIssue: () => (/* binding */ makeIssue),\n/* harmony export */   map: () => (/* binding */ mapType),\n/* harmony export */   nan: () => (/* binding */ nanType),\n/* harmony export */   nativeEnum: () => (/* binding */ nativeEnumType),\n/* harmony export */   never: () => (/* binding */ neverType),\n/* harmony export */   \"null\": () => (/* binding */ nullType),\n/* harmony export */   nullable: () => (/* binding */ nullableType),\n/* harmony export */   number: () => (/* binding */ numberType),\n/* harmony export */   object: () => (/* binding */ objectType),\n/* harmony export */   objectUtil: () => (/* binding */ objectUtil),\n/* harmony export */   oboolean: () => (/* binding */ oboolean),\n/* harmony export */   onumber: () => (/* binding */ onumber),\n/* harmony export */   optional: () => (/* binding */ optionalType),\n/* harmony export */   ostring: () => (/* binding */ ostring),\n/* harmony export */   pipeline: () => (/* binding */ pipelineType),\n/* harmony export */   preprocess: () => (/* binding */ preprocessType),\n/* harmony export */   promise: () => (/* binding */ promiseType),\n/* harmony export */   quotelessJson: () => (/* binding */ quotelessJson),\n/* harmony export */   record: () => (/* binding */ recordType),\n/* harmony export */   set: () => (/* binding */ setType),\n/* harmony export */   setErrorMap: () => (/* binding */ setErrorMap),\n/* harmony export */   strictObject: () => (/* binding */ strictObjectType),\n/* harmony export */   string: () => (/* binding */ stringType),\n/* harmony export */   symbol: () => (/* binding */ symbolType),\n/* harmony export */   transformer: () => (/* binding */ effectsType),\n/* harmony export */   tuple: () => (/* binding */ tupleType),\n/* harmony export */   undefined: () => (/* binding */ undefinedType),\n/* harmony export */   union: () => (/* binding */ unionType),\n/* harmony export */   unknown: () => (/* binding */ unknownType),\n/* harmony export */   util: () => (/* binding */ util),\n/* harmony export */   \"void\": () => (/* binding */ voidType),\n/* harmony export */   z: () => (/* binding */ z)\n/* harmony export */ });\nvar util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    get errors() {\n        return this.issues;\n    }\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    static assert(value) {\n        if (!(value instanceof ZodError)) {\n            throw new Error(`Not a ZodError: ${value}`);\n        }\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    if (issueData.message !== undefined) {\n        return {\n            ...issueData,\n            path: fullPath,\n            message: issueData.message,\n        };\n    }\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const overrideMap = getErrorMap();\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap, // contextual error map is first priority\n            ctx.schemaErrorMap, // then schema-bound map if available\n            overrideMap, // then global override map\n            overrideMap === errorMap ? undefined : errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            const key = await pair.key;\n            const value = await pair.value;\n            syncPairs.push({\n                key,\n                value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (key.value !== \"__proto__\" &&\n                (typeof value.value !== \"undefined\" || pair.alwaysSet)) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nvar _ZodEnum_cache, _ZodNativeEnum_cache;\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        var _a, _b;\n        const { message } = params;\n        if (iss.code === \"invalid_enum_value\") {\n            return { message: message !== null && message !== void 0 ? message : ctx.defaultError };\n        }\n        if (typeof ctx.data === \"undefined\") {\n            return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };\n        }\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    \"~validate\"(data) {\n        var _a, _b;\n        const ctx = {\n            common: {\n                issues: [],\n                async: !!this[\"~standard\"].async,\n            },\n            path: [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        if (!this[\"~standard\"].async) {\n            try {\n                const result = this._parseSync({ data, path: [], parent: ctx });\n                return isValid(result)\n                    ? {\n                        value: result.value,\n                    }\n                    : {\n                        issues: ctx.common.issues,\n                    };\n            }\n            catch (err) {\n                if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(\"encountered\")) {\n                    this[\"~standard\"].async = true;\n                }\n                ctx.common = {\n                    issues: [],\n                    async: true,\n                };\n            }\n        }\n        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result)\n            ? {\n                value: result.value,\n            }\n            : {\n                issues: ctx.common.issues,\n            });\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.readonly = this.readonly.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n        this[\"~standard\"] = {\n            version: 1,\n            vendor: \"zod\",\n            validate: (data) => this[\"~validate\"](data),\n        };\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    readonly() {\n        return ZodReadonly.create(this);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[0-9a-z]+$/;\nconst ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;\n// const uuidRegex =\n//   /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nconst uuidRegex = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i;\nconst nanoidRegex = /^[a-z0-9_-]{21}$/i;\nconst jwtRegex = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/;\nconst durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\n// const emailRegex =\n//   /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// const emailRegex =\n//   /^[a-zA-Z0-9\\.\\!\\#\\$\\%\\&\\'\\*\\+\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~\\-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n// const emailRegex =\n//   /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nconst emailRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i;\n// const emailRegex =\n//   /^[a-z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-z0-9-]+(?:\\.[a-z0-9\\-]+)*$/i;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst _emojiRegex = `^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$`;\nlet emojiRegex;\n// faster, simpler, safer\nconst ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;\nconst ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/;\n// const ipv6Regex =\n// /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nconst ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;\nconst ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;\n// https://stackoverflow.com/questions/7860392/determine-if-string-is-in-base64-using-javascript\nconst base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;\n// https://base64.guru/standards/base64url\nconst base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;\n// simple\n// const dateRegexSource = `\\\\d{4}-\\\\d{2}-\\\\d{2}`;\n// no leap year validation\n// const dateRegexSource = `\\\\d{4}-((0[13578]|10|12)-31|(0[13-9]|1[0-2])-30|(0[1-9]|1[0-2])-(0[1-9]|1\\\\d|2\\\\d))`;\n// with leap year validation\nconst dateRegexSource = `((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))`;\nconst dateRegex = new RegExp(`^${dateRegexSource}$`);\nfunction timeRegexSource(args) {\n    // let regex = `\\\\d{2}:\\\\d{2}:\\\\d{2}`;\n    let regex = `([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d`;\n    if (args.precision) {\n        regex = `${regex}\\\\.\\\\d{${args.precision}}`;\n    }\n    else if (args.precision == null) {\n        regex = `${regex}(\\\\.\\\\d+)?`;\n    }\n    return regex;\n}\nfunction timeRegex(args) {\n    return new RegExp(`^${timeRegexSource(args)}$`);\n}\n// Adapted from https://stackoverflow.com/a/3143231\nfunction datetimeRegex(args) {\n    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;\n    const opts = [];\n    opts.push(args.local ? `Z?` : `Z`);\n    if (args.offset)\n        opts.push(`([+-]\\\\d{2}:?\\\\d{2})`);\n    regex = `${regex}(${opts.join(\"|\")})`;\n    return new RegExp(`^${regex}$`);\n}\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nfunction isValidJWT(jwt, alg) {\n    if (!jwtRegex.test(jwt))\n        return false;\n    try {\n        const [header] = jwt.split(\".\");\n        // Convert base64url to base64\n        const base64 = header\n            .replace(/-/g, \"+\")\n            .replace(/_/g, \"/\")\n            .padEnd(header.length + ((4 - (header.length % 4)) % 4), \"=\");\n        const decoded = JSON.parse(atob(base64));\n        if (typeof decoded !== \"object\" || decoded === null)\n            return false;\n        if (!decoded.typ || !decoded.alg)\n            return false;\n        if (alg && decoded.alg !== alg)\n            return false;\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nfunction isValidCidr(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4CidrRegex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6CidrRegex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex) {\n                    emojiRegex = new RegExp(_emojiRegex, \"u\");\n                }\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"nanoid\") {\n                if (!nanoidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"nanoid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"date\") {\n                const regex = dateRegex;\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"date\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"time\") {\n                const regex = timeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"time\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"duration\") {\n                if (!durationRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"duration\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"jwt\") {\n                if (!isValidJWT(input.data, check.alg)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"jwt\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cidr\") {\n                if (!isValidCidr(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cidr\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64\") {\n                if (!base64Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"base64url\") {\n                if (!base64urlRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"base64url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _regex(regex, validation, message) {\n        return this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    nanoid(message) {\n        return this._addCheck({ kind: \"nanoid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    base64(message) {\n        return this._addCheck({ kind: \"base64\", ...errorUtil.errToObj(message) });\n    }\n    base64url(message) {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return this._addCheck({\n            kind: \"base64url\",\n            ...errorUtil.errToObj(message),\n        });\n    }\n    jwt(options) {\n        return this._addCheck({ kind: \"jwt\", ...errorUtil.errToObj(options) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    cidr(options) {\n        return this._addCheck({ kind: \"cidr\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a, _b;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                local: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    date(message) {\n        return this._addCheck({ kind: \"date\", message });\n    }\n    time(options) {\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"time\",\n                precision: null,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"time\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    duration(message) {\n        return this._addCheck({ kind: \"duration\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    /**\n     * Equivalent to `.min(1)`\n     */\n    nonempty(message) {\n        return this.min(1, errorUtil.errToObj(message));\n    }\n    trim() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    toLowerCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n    }\n    toUpperCase() {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isDate() {\n        return !!this._def.checks.find((ch) => ch.kind === \"date\");\n    }\n    get isTime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"time\");\n    }\n    get isDuration() {\n        return !!this._def.checks.find((ch) => ch.kind === \"duration\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isNANOID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"nanoid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get isCIDR() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cidr\");\n    }\n    get isBase64() {\n        return !!this._def.checks.find((ch) => ch.kind === \"base64\");\n    }\n    get isBase64url() {\n        // base64url encoding is a modification of base64 that can safely be used in URLs and filenames\n        return !!this._def.checks.find((ch) => ch.kind === \"base64url\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            try {\n                input.data = BigInt(input.data);\n            }\n            catch (_a) {\n                return this._getInvalidInput(input);\n            }\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            return this._getInvalidInput(input);\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _getInvalidInput(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.bigint,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    syncPairs.push({\n                        key,\n                        value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return util.objectValues(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else if (type instanceof ZodOptional) {\n        return [undefined, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodNullable) {\n        return [null, ...getDiscriminator(type.unwrap())];\n    }\n    else if (type instanceof ZodBranded) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodReadonly) {\n        return getDiscriminator(type.unwrap());\n    }\n    else if (type instanceof ZodCatch) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else {\n        return [];\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues.length) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(async function (...args) {\n                const error = new ZodError([]);\n                const parsedArgs = await me._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await Reflect.apply(fn, this, parsedArgs);\n                const parsedReturns = await me._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            // Would love a way to avoid disabling this rule, but we need\n            // an alias (using an arrow function was what caused 2651).\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const me = this;\n            return OK(function (...args) {\n                const parsedArgs = me._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = Reflect.apply(fn, this, parsedArgs.data);\n                const parsedReturns = me._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodEnum_cache, \"f\").has(input.data)) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values, newDef = this._def) {\n        return ZodEnum.create(values, {\n            ...this._def,\n            ...newDef,\n        });\n    }\n    exclude(values, newDef = this._def) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {\n            ...this._def,\n            ...newDef,\n        });\n    }\n}\n_ZodEnum_cache = new WeakMap();\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    constructor() {\n        super(...arguments);\n        _ZodNativeEnum_cache.set(this, void 0);\n    }\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\")) {\n            __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, \"f\").has(input.data)) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\n_ZodNativeEnum_cache = new WeakMap();\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data, checkCtx);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then(async (processed) => {\n                    if (status.value === \"aborted\")\n                        return INVALID;\n                    const result = await this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                    if (result.status === \"aborted\")\n                        return INVALID;\n                    if (result.status === \"dirty\")\n                        return DIRTY(result.value);\n                    if (status.value === \"dirty\")\n                        return DIRTY(result.value);\n                    return result;\n                });\n            }\n            else {\n                if (status.value === \"aborted\")\n                    return INVALID;\n                const result = this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (result.status === \"aborted\")\n                    return INVALID;\n                if (result.status === \"dirty\")\n                    return DIRTY(result.value);\n                if (status.value === \"dirty\")\n                    return DIRTY(result.value);\n                return result;\n            }\n        }\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nclass ZodReadonly extends ZodType {\n    _parse(input) {\n        const result = this._def.innerType._parse(input);\n        const freeze = (data) => {\n            if (isValid(data)) {\n                data.value = Object.freeze(data.value);\n            }\n            return data;\n        };\n        return isAsync(result)\n            ? result.then((data) => freeze(data))\n            : freeze(result);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodReadonly.create = (type, params) => {\n    return new ZodReadonly({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodReadonly,\n        ...processCreateParams(params),\n    });\n};\n////////////////////////////////////////\n////////////////////////////////////////\n//////////                    //////////\n//////////      z.custom      //////////\n//////////                    //////////\n////////////////////////////////////////\n////////////////////////////////////////\nfunction cleanParams(params, data) {\n    const p = typeof params === \"function\"\n        ? params(data)\n        : typeof params === \"string\"\n            ? { message: params }\n            : params;\n    const p2 = typeof p === \"string\" ? { message: p } : p;\n    return p2;\n}\nfunction custom(check, _params = {}, \n/**\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            const r = check(data);\n            if (r instanceof Promise) {\n                return r.then((r) => {\n                    var _a, _b;\n                    if (!r) {\n                        const params = cleanParams(_params, data);\n                        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                        ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n                    }\n                });\n            }\n            if (!r) {\n                const params = cleanParams(_params, data);\n                const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                ctx.addIssue({ code: \"custom\", ...params, fatal: _fatal });\n            }\n            return;\n        });\n    return ZodAny.create();\n}\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n    ZodFirstPartyTypeKind[\"ZodReadonly\"] = \"ZodReadonly\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    datetimeRegex: datetimeRegex,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    ZodReadonly: ZodReadonly,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/zod/lib/index.mjs\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["main-app"], () => (__webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fadisin%2FDesktop%2Fprepwise%2Fcomponents%2FAgent.tsx%22%2C%22ids%22%3A%5B%22default%22%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fadisin%2FDesktop%2Fprepwise%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fimage-component.js%22%2C%22ids%22%3A%5B%5D%7D&server=false!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);